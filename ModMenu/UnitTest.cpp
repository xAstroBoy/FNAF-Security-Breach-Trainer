#include "pch.h"
#include "CppUnitTest.h"
#include "SDK.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

#define CHEAT_GEAR_CHECK_OFFSET(targetClass, varName, expectedOffset) \
	Assert::AreEqual(uint32_t(expectedOffset), uint32_t(offsetof(targetClass, varName)), L#targetClass" -> "#varName".")

#define CHEAT_GEAR_CHECK_SIZE(targetClass, expectedSize) \
	Assert::AreEqual(uint32_t(expectedSize), uint32_t(sizeof(targetClass)), L#targetClass" Has a wrong size.")

namespace CheatGearCppUnitTests
{
	TEST_CLASS(CheatGear)
	{
	public:

		// class UWI_InstructionCard_RechargeFlashlight_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_RechargeFlashlight__WI_InstructionCard_RechargeFlashlight_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_RechargeFlashlight_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_RechargeFlashlight_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_RechargeFlashlight_C, UI_TextAndIcons, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_RechargeFlashlight_C, VerticalBox_250, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_RechargeFlashlight_C, WI_ImageScaled, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_RechargeFlashlight_C, 0x0258);
		}

		// class UWI_InstructionCard_FazWatch_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_FazWatch__WI_InstructionCard_FazWatch_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FazWatch_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FazWatch_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FazWatch_C, UI_TextAndIcons, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FazWatch_C, VerticalBox_250, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FazWatch_C, WI_ImageScaled, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_FazWatch_C, 0x0258);
		}

		// class ASurvivalStartupSequence_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SurvivalStartupSequence__SurvivalStartupSequence_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalStartupSequence_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalStartupSequence_C, SpawnChicaTrigger, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalStartupSequence_C, SkeletalMesh, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalStartupSequence_C, PlayerCompleteTrigger, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalStartupSequence_C, CompletedState, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalStartupSequence_C, ConversationState, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalStartupSequence_C, AISpawn, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalStartupSequence_C, DefaultSceneRoot, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalStartupSequence_C, DoorRight, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalStartupSequence_C, DoorLeft, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalStartupSequence_C, Dialog, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalStartupSequence_C, FreddySurvivalStart, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalStartupSequence_C, CollectMissionName, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalStartupSequence_C, SkipButton, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalStartupSequence_C, is_skipped, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalStartupSequence_C, WaitingForDoorLocked, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalStartupSequence_C, UnknownData_OR2G, 0x031A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalStartupSequence_C, Textures, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalStartupSequence_C, Screens, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalStartupSequence_C, SpawnChicaTimer, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurvivalStartupSequence_C, 0x0348);
		}

		// class UW_ScoreBoard_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_ScoreBoard__W_ScoreBoard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreBoard_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreBoard_C, DataBox, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreBoard_C, Image_66, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreBoard_C, CheckPointManger, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_ScoreBoard_C, 0x0250);
		}

		// class UFazerBlast_RememberFleeLocation_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FazerBlast_RememberFleeLocation__FazerBlast_RememberFleeLocation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_RememberFleeLocation_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_RememberFleeLocation_C, UseCurrentLocation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_RememberFleeLocation_C, UnknownData_LK0Z, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_RememberFleeLocation_C, BB_AddFleeLocation, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_RememberFleeLocation_C, MemoryLimit_Locations, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_RememberFleeLocation_C, MemoryLimit_Targets, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_RememberFleeLocation_C, MinDistance, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_RememberFleeLocation_C, MinTime, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_RememberFleeLocation_C, MaxTime, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_RememberFleeLocation_C, SampleDistance, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_RememberFleeLocation_C, Debug, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_RememberFleeLocation_C, UnknownData_BLVG, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_RememberFleeLocation_C, DebugTime, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFazerBlast_RememberFleeLocation_C, 0x0100);
		}

		// class ABP_Fazerblast_CaptureFlagButton_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Fazerblast_CaptureFlagButton__BP_Fazerblast_CaptureFlagButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Fazerblast_CaptureFlagButton_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Fazerblast_CaptureFlagButton_C, Play_sfx_fazerblast_flag_presence_lp, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Fazerblast_CaptureFlagButton_C, PointLight, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Fazerblast_CaptureFlagButton_C, Staff_Bot_Nav_Point, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Fazerblast_CaptureFlagButton_C, Button_Mesh, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Fazerblast_CaptureFlagButton_C, MOD_StagePodium_PanelLeft_low, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Fazerblast_CaptureFlagButton_C, MOD_StagePodium_PodiumPart1_low, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Fazerblast_CaptureFlagButton_C, MOD_StagePodium_PodiumBase_low, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Fazerblast_CaptureFlagButton_C, MOD_StagePodium_PanelRight_low, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Fazerblast_CaptureFlagButton_C, PlayerInteract, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Fazerblast_CaptureFlagButton_C, DefaultSceneRoot, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Fazerblast_CaptureFlagButton_C, CanStartCapture, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Fazerblast_CaptureFlagButton_C, UnknownData_LPBD, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Fazerblast_CaptureFlagButton_C, AttackerSpawnDestinationPair, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Fazerblast_CaptureFlagButton_C, CapturerSpawn, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Fazerblast_CaptureFlagButton_C, Manager_Reference, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Fazerblast_CaptureFlagButton_C, Spawn_Capture_Bot, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Fazerblast_CaptureFlagButton_C, EmitterPlaying, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Fazerblast_CaptureFlagButton_C, UnknownData_FDMI, 0x032A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Fazerblast_CaptureFlagButton_C, OcclusionTrace, 0x032A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Fazerblast_CaptureFlagButton_C, Color, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Fazerblast_CaptureFlagButton_C, 0x035C);
		}

		// class UIpConnection : public UNetConnection
		TEST_METHOD(Class__OnlineSubsystemUtils__IpConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_04X6, 0x1A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, SocketErrorDisconnectDelay, 0x1A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_OEFQ, 0x1A84);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpConnection, 0x1AD0);
		}

		// class UIpNetDriver : public UNetDriver
		TEST_METHOD(Class__OnlineSubsystemUtils__IpNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_T2XQ, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxPortCountToTry, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_EVQV, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketReceiveBufferBytes, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketSendBufferBytes, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketReceiveBufferBytes, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketSendBufferBytes, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_RIOB, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxSecondsInReceive, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, NbPacketsBetweenReceiveTimeTest, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ResolutionConnectionTimeout, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_HC5W, 0x0780);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpNetDriver, 0x07B8);
		}

		// class UAchievementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementBlueprintLibrary, 0x0028);
		}

		// class UAchievementQueryCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, UnknownData_ISU6, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementQueryCallbackProxy, 0x0068);
		}

		// class UAchievementWriteCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementWriteCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, UnknownData_0QTB, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementWriteCallbackProxy, 0x0080);
		}

		// class UConnectionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ConnectionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, UnknownData_3XTQ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConnectionCallbackProxy, 0x0078);
		}

		// class UCreateSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__CreateSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, UnknownData_5BMI, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreateSessionCallbackProxy, 0x0098);
		}

		// class UDestroySessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__DestroySessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, UnknownData_B79M, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestroySessionCallbackProxy, 0x0078);
		}

		// class UEndMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, UnknownData_8PDC, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndMatchCallbackProxy, 0x0080);
		}

		// class UEndTurnCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndTurnCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, UnknownData_101O, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndTurnCallbackProxy, 0x0078);
		}

		// class UFindSessionsCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindSessionsCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, UnknownData_YMMD, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindSessionsCallbackProxy, 0x0090);
		}

		// class UFindTurnBasedMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindTurnBasedMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, UnknownData_78AF, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindTurnBasedMatchCallbackProxy, 0x0088);
		}

		// class UInAppPurchaseCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, UnknownData_TT0J, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy, 0x0080);
		}

		// class UInAppPurchaseCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, UnknownData_N84S, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy2, 0x00A8);
		}

		// class UInAppPurchaseQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, UnknownData_427J, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy, 0x0090);
		}

		// class UInAppPurchaseQueryCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, UnknownData_65IP, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy2, 0x0068);
		}

		// class UInAppPurchaseRestoreCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, UnknownData_X5G4, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy, 0x0090);
		}

		// class UInAppPurchaseRestoreCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, UnknownData_SCKX, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy2, 0x00A8);
		}

		// class UJoinSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__JoinSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, UnknownData_SUB7, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJoinSessionCallbackProxy, 0x0180);
		}

		// class ULeaderboardBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardBlueprintLibrary, 0x0028);
		}

		// class ULeaderboardFlushCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardFlushCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, UnknownData_0ERB, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardFlushCallbackProxy, 0x0068);
		}

		// class ULeaderboardQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, UnknownData_9A9Z, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardQueryCallbackProxy, 0x0098);
		}

		// class ULogoutCallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__LogoutCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, UnknownData_F3J1, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULogoutCallbackProxy, 0x0068);
		}

		// class AOnlineBeacon : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeacon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_67C2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionInitialTimeout, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionTimeout, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, NetDriver, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_PUYO, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeacon, 0x0258);
		}

		// class AOnlineBeaconClient : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconOwner, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconConnection, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, ConnectionState, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, UnknownData_5UBD, 0x0269);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconClient, 0x02B8);
		}

		// class AOnlineBeaconHost : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ListenPort, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_NUTU, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ClientActors, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_1BYO, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHost, 0x0310);
		}

		// class AOnlineBeaconHostObject : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHostObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, BeaconTypeName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientBeaconActorClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientActors, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHostObject, 0x0250);
		}

		// class UOnlineEngineInterfaceImpl : public UOnlineEngineInterface
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineEngineInterfaceImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, VoiceSubsystemNameOverride, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, UnknownData_7VFG, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterfaceImpl, 0x0128);
		}

		// class UOnlinePIESettings : public UDeveloperSettings
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlinePIESettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, bOnlinePIEEnabled, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, UnknownData_P572, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, Logins, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlinePIESettings, 0x0050);
		}

		// class UOnlineSessionClient : public UOnlineSession
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineSessionClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_0VIF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bIsFromInvite, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bHandlingDisconnect, 0x01D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_KWVJ, 0x01DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSessionClient, 0x01E0);
		}

		// class APartyBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_9TZW, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, DestSessionId, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, PendingReservation, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, RequestType, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bPendingReservationSent, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bCancelReservation, 0x034A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_R0IB, 0x034B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconClient, 0x0378);
		}

		// class APartyBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, State, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_12DI, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, bLogoutOnSessionTimeout, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_1T5R, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, SessionTimeoutSecs, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, TravelSessionTimeoutSecs, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_SAR4, 0x02C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconHost, 0x02C8);
		}

		// class UPartyBeaconState : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, SessionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumConsumedReservations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, MaxReservations, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumTeams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumPlayersPerTeam, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, TeamAssignmentMethod, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ReservedHostTeamNum, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ForceTeamNum, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bRestrictCrossConsole, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bEnableRemovalRequests, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_30Z9, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, Reservations, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_ICX7, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyBeaconState, 0x0078);
		}

		// class UQuitMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__QuitMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, UnknownData_UA4L, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuitMatchCallbackProxy, 0x0078);
		}

		// class UShowLoginUICallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ShowLoginUICallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, UnknownData_W0GL, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShowLoginUICallbackProxy, 0x0060);
		}

		// class ASpectatorBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, UnknownData_TL90, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, DestSessionId, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, PendingReservation, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, RequestType, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, bPendingReservationSent, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, bCancelReservation, 0x0372);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, UnknownData_09ZQ, 0x0373);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorBeaconClient, 0x03A0);
		}

		// class ASpectatorBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, State, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_6Q8Z, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, bLogoutOnSessionTimeout, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_M2G2, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, SessionTimeoutSecs, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, TravelSessionTimeoutSecs, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_JE9I, 0x02C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorBeaconHost, 0x02C8);
		}

		// class USpectatorBeaconState : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, SessionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, NumConsumedReservations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, MaxReservations, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, bRestrictCrossConsole, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, UnknownData_B7MV, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, Reservations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, UnknownData_6BIY, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorBeaconState, 0x0060);
		}

		// class ATestBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconClient, 0x02B8);
		}

		// class ATestBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconHost)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconHost, 0x0250);
		}

		// class UTurnBasedBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__TurnBasedBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedBlueprintLibrary, 0x0028);
		}

		// class UVoipListenerSynthComponent : public USynthComponent
		TEST_METHOD(Class__OnlineSubsystemUtils__VoipListenerSynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoipListenerSynthComponent, UnknownData_JWQ1, 0x06D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoipListenerSynthComponent, 0x0730);
		}

		// class UEndGameCinematicPlayerUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__EndGameCinematicPlayerUI__EndGameCinematicPlayerUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, Image_89, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, ObjectiveList, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, TextSurroundingKeyIcon, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, BurntrapEnding, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, Sound, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, Media_Player, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, CanFade, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, UnknownData_MZ73, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, Time, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, Fade_Duration, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, CanStop, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, UnknownData_6FUQ, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, Controller_sound, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, PlayingIntroVideo, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, UnknownData_FDD2, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, HoldTimeToSkip, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, IsHoldingSkipButton, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, CanFadeOut, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, UnknownData_KJW6, 0x02C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, Volume, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, VannyEndingDestroy, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, VIPEnding, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, LoadingDockEnding, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, GregoryInAlleyEnding, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, VannyEndingRedeem, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, PostVideoWwiseState, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, SequencerVO, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameCinematicPlayerUI_C, DialogueTimer, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndGameCinematicPlayerUI_C, 0x0428);
		}

		// class UAudioCapture : public UAudioGenerator
		TEST_METHOD(Class__AudioCapture__AudioCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCapture, UnknownData_LJY5, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCapture, 0x00B0);
		}

		// class UAudioCaptureFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AudioCapture__AudioCaptureFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCaptureFunctionLibrary, 0x0028);
		}

		// class UAudioCaptureComponent : public USynthComponent
		TEST_METHOD(Class__AudioCapture__AudioCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCaptureComponent, JitterLatencyFrames, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCaptureComponent, UnknownData_ZU3T, 0x06D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCaptureComponent, 0x0790);
		}

		// class URIG_Endo_Skeleton_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__RIG_Endo_Skeleton_ABP__RIG_Endo_Skeleton_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, UnknownData_SSV1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_TransitionResult_10, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_TransitionResult_9, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_25, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_StateResult_8, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_TransitionResult_8, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_TransitionResult_7, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_TransitionResult_6, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_TransitionResult_5, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_TransitionResult_4, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_TransitionResult_3, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_TransitionResult_2, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_TransitionResult, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_24, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_StateResult_7, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_23, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_22, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_21, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_20, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_19, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_18, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_17, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_16, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_15, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_14, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_13, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_12, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_BlendListByInt_5, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_StateResult_6, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_11, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_BlendListByBool_2, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_10, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_9, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_BlendListByInt_4, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_8, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_StateResult_5, 0x0F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_7, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_BlendListByBool, 0x0FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_6, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_5, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_BlendListByInt_3, 0x1150);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_4, 0x11F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_StateResult_4, 0x1268);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_3, 0x1298);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer_2, 0x1310);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SequencePlayer, 0x1388);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_BlendListByInt_2, 0x1400);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_StateResult_3, 0x14A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_BlendSpacePlayer_3, 0x14D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_BlendSpacePlayer_2, 0x15B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_BlendSpacePlayer, 0x1690);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_BlendListByInt, 0x1770);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_StateResult_2, 0x1810);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_StateMachine_2, 0x1840);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_StateResult, 0x18F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_StateMachine, 0x1920);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_AimOffsetLookAt, 0x19D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_SaveCachedPose, 0x1B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_UseCachedPose_2, 0x1C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_LayeredBoneBlend, 0x1C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_UseCachedPose, 0x1D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, UnknownData_08XR, 0x1D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_LookAt_2, 0x1D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_LookAt, 0x1F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_LocalToComponentSpace, 0x20B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_ComponentToLocalSpace, 0x20D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AnimGraphNode_ModifyBone, 0x20F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, canJumpscare, 0x21F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, UnknownData_6TDP, 0x21F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, BeingWatched, 0x21FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, EndoIsBeingWatched, 0x2204);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AimEyes, 0x2205);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, UnknownData_10WA, 0x2206);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AimLocation, 0x2208);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, IsStunned, 0x2214);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, CanRun, 0x2215);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, UnknownData_1A4E, 0x2216);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, RandomLocomotion, 0x2218);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, SpeedInput, 0x221C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, IdleStartPosition, 0x2220);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, NewVar_1, 0x2224);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, isHanging, 0x2225);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, UnknownData_02ZT, 0x2226);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, EndoHangingInt, 0x2228);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, UnknownData_Q2UJ, 0x222C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, SpawnInBowlingAnim, 0x2230);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, BowlingSpawn, 0x2238);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, UnknownData_OP6R, 0x2239);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, BowlingPlayRate, 0x223C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Endo_Skeleton_ABP_C, AimOverride, 0x2240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URIG_Endo_Skeleton_ABP_C, 0x2241);
		}

		// class UStaffbot_ABP_SplineWorker_C : public UStaffbot_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Staffbot_ABP_SplineWorker__Staffbot_ABP_SplineWorker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_SplineWorker_C, UberGraphFrame, 0x2ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_SplineWorker_C, ForwardOnSpline, 0x2ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_SplineWorker_C, DistanceAlongPath, 0x2EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_SplineWorker_C, LeadDistance, 0x2EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_SplineWorker_C, AimAtPath, 0x2EEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_SplineWorker_C, UnknownData_OGNW, 0x2EED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_SplineWorker_C, TargetRotation, 0x2EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_SplineWorker_C, TurnBlendCurve, 0x2EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_SplineWorker_C, AtStartOfSpline, 0x2F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_SplineWorker_C, AtEndOfSpline, 0x2F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_SplineWorker_C, OldTargetRot, 0x2F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_SplineWorker_C, UnknownData_40YO, 0x2F1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_SplineWorker_C, SplineFollower, 0x2F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_SplineWorker_C, At_end_of_Spline__, 0x2F28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaffbot_ABP_SplineWorker_C, 0x2F29);
		}

		// class AFreddyNotAbleToEnterTrigger_C : public APlayerTrigger
		TEST_METHOD(BlueprintGeneratedClass__FreddyNotAbleToEnterTrigger__FreddyNotAbleToEnterTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyNotAbleToEnterTrigger_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyNotAbleToEnterTrigger_C, Box, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyNotAbleToEnterTrigger_C, LineSkipper, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFreddyNotAbleToEnterTrigger_C, 0x02A8);
		}

		// class AWestArcadeDecalManager_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__WestArcadeDecalManager__WestArcadeDecalManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWestArcadeDecalManager_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWestArcadeDecalManager_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWestArcadeDecalManager_C, Holes, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWestArcadeDecalManager_C, CurrentItem, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWestArcadeDecalManager_C, 0x0250);
		}

		// class UIsShatteredMonty_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__IsShatteredMonty__IsShatteredMonty_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsShatteredMonty_C, 0x00A0);
		}

		// class USWGAIUtilLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__SWGAIUtils__SWGAIUtilLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USWGAIUtilLibrary, 0x0028);
		}

		// class ABPFanRotor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BPFanRotor__BPFanRotor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABPFanRotor_C, RotatingMovement, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABPFanRotor_C, Mesh, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABPFanRotor_C, 0x0238);
		}

		// class UAnimatronic_ABP_FreddyEnding_C : public UAnimatronic_ABP_MASTER_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Animatronic_ABP_FreddyEnding__Animatronic_ABP_FreddyEnding_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_FreddyEnding_C, UberGraphFrame, 0x8DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_FreddyEnding_C, PlayerisGregory, 0x8DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_FreddyEnding_C, first_open, 0x8DF1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_FreddyEnding_C, first_close, 0x8DF2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_FreddyEnding_C, ForceOpenChest, 0x8DF3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_FreddyEnding_C, isopen_sound, 0x8DF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_FreddyEnding_C, GamePlayOpenChest, 0x8DF5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_FreddyEnding_C, AllowSound, 0x8DF6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_FreddyEnding_C, UnknownData_7ZG0, 0x8DF7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_FreddyEnding_C, PawnVelocity, 0x8DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_FreddyEnding_C, ZeroVector, 0x8E04);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_FreddyEnding_C, AimRotation, 0x8E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_FreddyEnding_C, LastAimRotation, 0x8E1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_FreddyEnding_C, TurnThreshold, 0x8E28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimatronic_ABP_FreddyEnding_C, 0x8E2C);
		}

		// class UFazblasterChargeUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FazblasterChargeUI__FazblasterChargeUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazblasterChargeUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazblasterChargeUI_C, BlinkingBlaster, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazblasterChargeUI_C, FillMeter, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazblasterChargeUI_C, Charged_Fazblaster, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazblasterChargeUI_C, ChargeMeter, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazblasterChargeUI_C, Charging_Fazerblaster, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazblasterChargeUI_C, TotalShots, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazblasterChargeUI_C, ShotsLeft, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazblasterChargeUI_C, RechargeTimer, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazblasterChargeUI_C, ChargedColor, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazblasterChargeUI_C, LowChargeColor, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazblasterChargeUI_C, OnRechargeDone, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFazblasterChargeUI_C, 0x02A0);
		}

		// class UStaffbot_ABP_Cutscene_C : public UStaffbot_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Staffbot_ABP_Cutscene__Staffbot_ABP_Cutscene_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Cutscene_C, UberGraphFrame, 0x2ED0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaffbot_ABP_Cutscene_C, 0x2ED8);
		}

		// class USWGPlatformSettings : public UDeveloperSettings
		TEST_METHOD(Class__SWGPlatformUtil__SWGPlatformSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USWGPlatformSettings, BuildPlatform, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USWGPlatformSettings, UnknownData_PE10, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USWGPlatformSettings, 0x0040);
		}

		// class USWGPlatformUtilFunctions : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__SWGPlatformUtil__SWGPlatformUtilFunctions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USWGPlatformUtilFunctions, 0x0028);
		}

		// class AStaffBotRacer_C : public AStaffBotBase_C
		TEST_METHOD(BlueprintGeneratedClass__StaffBotRacer__StaffBotRacer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotRacer_C, UnknownData_79JP, 0x0652);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotRacer_C, MOD_HelmBasic1, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaffBotRacer_C, 0x0660);
		}

		// class UDeterminePlayerRange_C : public UNavDistanceServiceBase_C
		TEST_METHOD(BlueprintGeneratedClass__DeterminePlayerRange__DeterminePlayerRange_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeterminePlayerRange_C, UberGraphFrame, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeterminePlayerRange_C, PlayerRangeKey, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeterminePlayerRange_C, InnerRangeEnum, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeterminePlayerRange_C, OuterRangeEnum, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeterminePlayerRange_C, 0x00F2);
		}

		// class ABP_NoiseMakingTowerDaycareInteractible_C : public ABP_NoiseMakingTowerBaseInteractible_C
		TEST_METHOD(BlueprintGeneratedClass__BP_NoiseMakingTowerDaycareInteractible__BP_NoiseMakingTowerDaycareInteractible_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerDaycareInteractible_C, UberGraphFrame, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerDaycareInteractible_C, Slide_Into_Fun_Completed_Condition_, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerDaycareInteractible_C, Slide_Into_Fun_Active_Condition_1, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerDaycareInteractible_C, SkeletalMesh2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerDaycareInteractible_C, SkeletalMesh1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerDaycareInteractible_C, SkeletalMesh, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerDaycareInteractible_C, Scene, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerDaycareInteractible_C, Fall_Animation, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerDaycareInteractible_C, Reset_Animation, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerDaycareInteractible_C, Count, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerDaycareInteractible_C, UnknownData_LPUF, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerDaycareInteractible_C, Security_Office_Daycare, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerDaycareInteractible_C, LineSkipper, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_NoiseMakingTowerDaycareInteractible_C, 0x0348);
		}

		// class ACinematic_Actor_Gregory_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cinematic_Actor_Gregory__Cinematic_Actor_Gregory_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACinematic_Actor_Gregory_C, SkeletalMesh, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACinematic_Actor_Gregory_C, 0x0230);
		}

		// class AMoonman_C : public ASunman_C
		TEST_METHOD(BlueprintGeneratedClass__Moonman__Moonman_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonman_C, UberGraphFrame, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonman_C, HookMesh, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonman_C, PlayerCaptureTrigger2, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonman_C, PlayerCaptureTrigger1, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonman_C, PointLight, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonman_C, SpotLight, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonman_C, LightAttatch, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonman_C, PossiblePaths, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonman_C, ForkedBB, 0x08A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMoonman_C, 0x08A8);
		}

		// class UStaffbotKitchen_NextStep_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__StaffbotKitchen_NextStep__StaffbotKitchen_NextStep_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbotKitchen_NextStep_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbotKitchen_NextStep_C, Instructions_Text, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaffbotKitchen_NextStep_C, 0x0240);
		}

		// class APlayerFollowPawn_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__PlayerFollowPawn__PlayerFollowPawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerFollowPawn_C, LevelStreamViewpoint, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerFollowPawn_C, Camera, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerFollowPawn_C, DefaultSceneRoot, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerFollowPawn_C, 0x02A0);
		}

		// class ASequencerVO_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SequencerVO__SequencerVO_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASequencerVO_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASequencerVO_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASequencerVO_C, LineSkipper, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASequencerVO_C, 0x0260);
		}

		// class ULeaveHidingLocation_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__LeaveHidingLocation__LeaveHidingLocation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaveHidingLocation_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaveHidingLocation_C, HideActorKey, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaveHidingLocation_C, 0x00D8);
		}

		// class UPlayerNearHidingLocation_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__PlayerNearHidingLocation__PlayerNearHidingLocation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNearHidingLocation_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNearHidingLocation_C, HideLocationKey, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNearHidingLocation_C, PlayerInRangeKey, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerNearHidingLocation_C, 0x00F0);
		}

		// class ASM_Scafoldings_Stairs_Half_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SM_Scafoldings_Stairs_Half__SM_Scafoldings_Stairs_Half_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASM_Scafoldings_Stairs_Half_C, Box3, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASM_Scafoldings_Stairs_Half_C, Box2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASM_Scafoldings_Stairs_Half_C, Box1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASM_Scafoldings_Stairs_Half_C, Box, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASM_Scafoldings_Stairs_Half_C, StaticMesh, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASM_Scafoldings_Stairs_Half_C, 0x0250);
		}

		// class APRE_Buoy_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PRE_Buoy__PRE_Buoy_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Buoy_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Buoy_C, MOD_Buoy, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Buoy_C, Subtle_bob_NewTrack_0_33ABFE6046C6B7046B39E78E6FFBB56A, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Buoy_C, Subtle_bob__Direction_33ABFE6046C6B7046B39E78E6FFBB56A, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Buoy_C, UnknownData_IR7G, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Buoy_C, Subtle_bob, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Buoy_C, Updated_Z_Rotation, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Buoy_C, Updated_X_Rotation, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Buoy_C, Total_height_Adjust, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Buoy_C, Intensity_Height, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Buoy_C, Intensity_ZRotate, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Buoy_C, Intensity_XRotate, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_Buoy_C, 0x0260);
		}

		// class AMonty_C : public AAISeeker_C
		TEST_METHOD(BlueprintGeneratedClass__Monty__Monty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonty_C, UnknownData_TIXI, 0x07F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonty_C, UberGraphFrame, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonty_C, MissionStateCondition, 0x0800);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMonty_C, 0x0808);
		}

		// class AA_Elevator_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__A_Elevator__A_Elevator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, WakeupOverlaps, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, Type, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, UnknownData_K6JY, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, Teleport, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, Airlock, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, Duration, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, P_Setup, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, UnknownData_XDX7, 0x0435);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, P_PrefabComponents, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, P_CurrentDestination, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, P_Moving, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, P_HadCameraLag, 0x044A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, UnknownData_69BH, 0x044B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, P_StartSeconds, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, P_LastShake, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, P_LastShakeDelay, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, P_NextShake, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, DoorLockDuration, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, ShouldBlockOnSwap, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, UnknownData_0TZC, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, Shake_MovementChange, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, SelfSwapLevels, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, UnknownData_5NKA, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, Shake_Movement, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_C, Shake_MovementScale, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AA_Elevator_C, 0x0484);
		}

		// class AMGM_FazerBlast_C : public ABP_MiniGameManger_C
		TEST_METHOD(BlueprintGeneratedClass__MGM_FazerBlast__MGM_FazerBlast_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, UnknownData_0IB7, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, Chica_Spawn, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, GameTypeCheckDestroy, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, Box, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, P_Spawners, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, P_HasPlayedInPlayArea, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, P_PlayAreaActive, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, P_GameOver, 0x02B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, CurrentlyCapturing, 0x02B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, UnknownData_ZDIK, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, P_CaptureTimer, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, P_Score, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, P_HasUpdatedCaptureTime, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, UnknownData_HH63, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, P_UpdateCaptureTimeQueue, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, CaptureTime, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, EnemyLimit, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, ExitElevator, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, P_Enemies, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, P_LastUsedSpawner, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, P_EnemyCount, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, P_MissionName, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, UnknownData_Y8TE, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, Lost_Doors, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, Elevator_Enter, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, Debug_PlayerStart, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, Debug_PlayerStart_Shortcut_EquipmentRoom, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, Debug_PlayerStart_Shortcut_Arena, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, UnknownData_I0V0, 0x03D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, P_HelmetWidget, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, FlagCaptureButtons, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, Win_Doors, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, Entrance_Doors, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, ExitReturnStation, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, Chica_Patrol, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, ResetButton, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, Chica, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, CapturedFlags, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, UnknownData_UFQ4, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, EquipmentRoomExit, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, P5SecondsRemainTimer, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, Lobby_Door, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_FazerBlast_C, Exit_Door, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMGM_FazerBlast_C, 0x0518);
		}

		// class AGatorGolfOfficeTrigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__GatorGolfOfficeTrigger__GatorGolfOfficeTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorGolfOfficeTrigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorGolfOfficeTrigger_C, LineSkipper, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorGolfOfficeTrigger_C, Doors, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorGolfOfficeTrigger_C, SecurityBadgeHolder, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGatorGolfOfficeTrigger_C, 0x02E0);
		}

		// class UWI_InstructionCard_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard__WI_InstructionCard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_C, Overlay_47, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_C, Type, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_C, 0x0241);
		}

		// class ALoadingDock_Escalator_MissionTrigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__LoadingDock_Escalator_MissionTrigger__LoadingDock_Escalator_MissionTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALoadingDock_Escalator_MissionTrigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALoadingDock_Escalator_MissionTrigger_C, TimeCheckComponent, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALoadingDock_Escalator_MissionTrigger_C, Box, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALoadingDock_Escalator_MissionTrigger_C, MissionStateCondition, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALoadingDock_Escalator_MissionTrigger_C, LineSkipper, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALoadingDock_Escalator_MissionTrigger_C, 0x02C0);
		}

		// class USplineFollowerInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__SplineFollowerInterface__SplineFollowerInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineFollowerInterface_C, 0x0028);
		}

		// class AFazwatchCollectible_C : public APresentCollectible_C
		TEST_METHOD(BlueprintGeneratedClass__FazwatchCollectible__FazwatchCollectible_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFazwatchCollectible_C, 0x02C9);
		}

		// class UFindLocationInFront_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FindLocationInFront__FindLocationInFront_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindLocationInFront_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindLocationInFront_C, Distance, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindLocationInFront_C, Radius, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindLocationInFront_C, BBTarget, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindLocationInFront_C, FoundLocation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindLocationInFront_C, In_Front_, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindLocationInFront_C, 0x00E2);
		}

		// class UEQPlayerContext_C : public UEnvQueryContext_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__EQPlayerContext__EQPlayerContext_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQPlayerContext_C, 0x0030);
		}

		// class USpawnVanny_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__SpawnVanny__SpawnVanny_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnVanny_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnVanny_C, 0x00B0);
		}

		// class AJumbotronTrigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__JumbotronTrigger__JumbotronTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumbotronTrigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumbotronTrigger_C, UpdateMission, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumbotronTrigger_C, MissionStateCondition, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumbotronTrigger_C, SoundSource, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumbotronTrigger_C, RoxyRacewayMission, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumbotronTrigger_C, MissionName, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumbotronTrigger_C, DisplayActors, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumbotronTrigger_C, LineSkipper, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumbotronTrigger_C, VideoSource, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumbotronTrigger_C, MediaPlayer, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AJumbotronTrigger_C, 0x0310);
		}

		// class APRE_SM_Sinks_NEW_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PRE_SM_Sinks_NEW__PRE_SM_Sinks_NEW_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_SM_Sinks_NEW_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_SM_Sinks_NEW_C, AmbientAudio, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_SM_Sinks_NEW_C, StaticMesh, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_SM_Sinks_NEW_C, DefaultSceneRoot, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_SM_Sinks_NEW_C, OcclusionTrace, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_SM_Sinks_NEW_C, EmitterPlaying, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_SM_Sinks_NEW_C, 0x0271);
		}

		// class ABurntrap_PowerStationPlayerInteractible_C : public APowerStationPlayerInteractible_C
		TEST_METHOD(BlueprintGeneratedClass__Burntrap_PowerStationPlayerInteractible__Burntrap_PowerStationPlayerInteractible_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABurntrap_PowerStationPlayerInteractible_C, UnknownData_YR8B, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABurntrap_PowerStationPlayerInteractible_C, UberGraphFrame, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABurntrap_PowerStationPlayerInteractible_C, 0x02A0);
		}

		// class ACinematic_Actor_Monty_C : public ACinematic_Actor_Base_C
		TEST_METHOD(BlueprintGeneratedClass__Cinematic_Actor_Monty__Cinematic_Actor_Monty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACinematic_Actor_Monty_C, UnknownData_L3OX, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACinematic_Actor_Monty_C, UberGraphFrame, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACinematic_Actor_Monty_C, CharacterHourlyMaterialComponent, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACinematic_Actor_Monty_C, LineSkipper, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACinematic_Actor_Monty_C, 0x0288);
		}

		// class UIsDoorLocked_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__IsDoorLocked__IsDoorLocked_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIsDoorLocked_C, DoorKey, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsDoorLocked_C, 0x00C8);
		}

		// class UWI_InstructionCard_SprintStamina_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_SprintStamina__WI_InstructionCard_SprintStamina_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_SprintStamina_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_SprintStamina_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_SprintStamina_C, UI_TextAndIcons, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_SprintStamina_C, VerticalBox_250, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_SprintStamina_C, WI_ImageScaled, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_SprintStamina_C, 0x0258);
		}

		// class UBlueprintFunctionLibrary : public UObject
		TEST_METHOD(Class__Engine__BlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintFunctionLibrary, 0x0028);
		}

		// class AActor : public UObject
		TEST_METHOD(Class__Engine__Actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, PrimaryActorTick, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UpdateOverlapsMethodDuringLevelStreaming, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, DefaultUpdateOverlapsMethodDuringLevelStreaming, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RemoteRole, 0x005F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ReplicatedMovement, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InitialLifeSpan, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, CustomTimeDilation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_HN18, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AttachmentReplication, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Owner, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDriverName, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Role, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDormancy, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, SpawnCollisionHandlingMethod, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AutoReceiveInput, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputPriority, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputComponent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetCullDistanceSquared, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetTag, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetUpdateFrequency, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, MinNetUpdateFrequency, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetPriority, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_W6WU, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Instigator, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Children, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RootComponent, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ControllingMatineeActors, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_HU6J, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Layers, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ParentComponent, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_DBNL, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Tags, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeAnyDamage, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakePointDamage, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeRadialDamage, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorBeginOverlap, 0x018B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorEndOverlap, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnBeginCursorOver, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndCursorOver, 0x018E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnClicked, 0x018F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnReleased, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchBegin, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnd, 0x0192);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnter, 0x0193);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchLeave, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorHit, 0x0195);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnDestroyed, 0x0196);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndPlay, 0x0197);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_W82J, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InstanceComponents, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, BlueprintCreatedComponents, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_RXOG, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActor, 0x0228);
		}

		// class UActorComponent : public UObject
		TEST_METHOD(Class__Engine__ActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_E6J7, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, PrimaryComponentTick, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, ComponentTags, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, AssetUserData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_XHH4, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UCSSerializationIndex, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_H7UJ, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, CreationMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentActivated, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentDeactivated, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_64JY, 0x008F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UCSModifiedProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_8VCF, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorComponent, 0x00B0);
		}

		// class USceneComponent : public UActorComponent
		TEST_METHOD(Class__Engine__SceneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_PTO4, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolume, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachParent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachSocketName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachChildren, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ClientAttachedChildren, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_WAO3, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeLocation, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeRotation, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeScale3D, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ComponentVelocity, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_788I, 0x014E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, Mobility, 0x014F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, DetailMode, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolumeChangedDelegate, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_7R9F, 0x0152);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneComponent, 0x01F0);
		}

		// class UDeveloperSettings : public UObject
		TEST_METHOD(Class__Engine__DeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeveloperSettings, UnknownData_MGOA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeveloperSettings, 0x0038);
		}

		// class UPlayer : public UObject
		TEST_METHOD(Class__Engine__Player)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_UENU, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, PlayerController, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, CurrentNetSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredInternetSpeed, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredLanSpeed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_CXZV, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayer, 0x0048);
		}

		// class UNetConnection : public UPlayer
		TEST_METHOD(Class__Engine__NetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Children, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Driver, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMapClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMap, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OpenChannels, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, SentTemporaries, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ViewTarget, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OwningActor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, MaxPacket, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_UAX8, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PlayerId, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_9GNL, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, LastReceiveTime, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_QPLW, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ChannelsToTick, 0x1510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_Y3EK, 0x1520);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetConnection, 0x1A30);
		}

		// class UNetDriver : public UObject
		TEST_METHOD(Class__Engine__NetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_OF39, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClassName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClassName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxDownloadSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_XRA8, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetServerMaxTickRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxNetTickRate, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxInternetClientRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxClientRate, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerTravelPause, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, SpawnPrioritySeconds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RelevantTimeout, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, KeepAliveTime, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, InitialConnectTimeout, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ConnectionTimeout, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, TimeoutMultiplierForUnoptimizedBuilds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNoTimeouts, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNeverApplyNetworkEmulationSettings, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_DM3Y, 0x0086);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerConnection, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ClientConnections, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_JURU, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RecentlyDisconnectedTrackingTime, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_GVPJ, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, World, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, WorldPackage, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_SCH3, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClass, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClass, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_U23E, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetDriverName, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ChannelDefinitions, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ChannelDefinitionMap, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ActorChannelPool, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_J0GY, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, Time, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_TF7O, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriver, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_IY2D, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetDriver, 0x0748);
		}

		// class UBlueprintAsyncActionBase : public UObject
		TEST_METHOD(Class__Engine__BlueprintAsyncActionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintAsyncActionBase, UnknownData_QOUW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintAsyncActionBase, 0x0030);
		}

		// class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__OnlineBlueprintCallProxyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineBlueprintCallProxyBase, 0x0030);
		}

		// class UOnlineEngineInterface : public UObject
		TEST_METHOD(Class__Engine__OnlineEngineInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterface, 0x0028);
		}

		// class UOnlineSession : public UObject
		TEST_METHOD(Class__Engine__OnlineSession)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSession, 0x0028);
		}

		// class ABrush : public AActor
		TEST_METHOD(Class__Engine__Brush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushType, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_86HO, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushColor, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, PolyFlags, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_4SYL, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, Brush, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushComponent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_VEU5, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, SavedSelections, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrush, 0x0260);
		}

		// class AVolume : public ABrush
		TEST_METHOD(Class__Engine__Volume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolume, 0x0260);
		}

		// class UPrimitiveComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PrimitiveComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_7MN9, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MinDrawDistance, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LDMaxDrawDistance, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CachedMaxDrawDistance, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, DepthPriorityGroup, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, ViewOwnerDepthPriorityGroup, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, IndirectLightingCacheQuality, 0x0206);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightmapType, 0x0207);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, bHasCustomNavigableGeometry, 0x020F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_YP4N, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CanCharacterStepUpOn, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightingChannels, 0x0212);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilWriteMask, 0x0213);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilValue, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomPrimitiveData, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomPrimitiveDataInternal, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_5OFJ, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, TranslucencySortPriority, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VisibilityId, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, RuntimeVirtualTextures, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureLodBias, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureCullMips, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureMinCoverage, 0x025A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureRenderPassType, 0x025B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_45GV, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LpvBiasMultiplier, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_KLKC, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BoundsScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_EBRZ, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreActors, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreComponents, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_IN03, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BodyInstance, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentHit, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentBeginOverlap, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentEndOverlap, 0x03C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentWake, 0x03C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentSleep, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_CHFZ, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnBeginCursorOver, 0x03C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnEndCursorOver, 0x03C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnClicked, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnReleased, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchBegin, 0x03CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnd, 0x03CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnter, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchLeave, 0x03CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_WKV9, 0x03CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LODParentPrimitive, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimitiveComponent, 0x03F0);
		}

		// class UWorld : public UObject
		TEST_METHOD(Class__Engine__World)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_5ZS0, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LineBatcher, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLineBatcher, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ForegroundLineBatcher, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetworkManager, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PhysicsCollisionHandler, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ExtraReferencedObjects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PerModuleDataObjects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LevelSequenceActors, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevels, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsToConsider, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsPrefix, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingVisibility, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingInvisibility, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DemoNetDriver, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, MyParticleEventManager, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DefaultPhysicsVolume, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_VP6W, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_9ZNI, 0x011F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NavigationSystem, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AuthorityGameMode, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, GameState, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AISystem, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AvoidanceManager, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, Levels, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LevelCollections, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_L7TZ, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, OwningGameInstance, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ParameterCollectionInstances, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForRenderingToTarget, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForDrawMaterialToRenderTarget, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_2PNA, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedEndOfFrameUpdate, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedEndOfFrameUpdate_OnGameThread, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_QQ7K, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, WorldComposition, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_8JAU, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PSCPool, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_I0OJ, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorld, 0x07B8);
		}

		// class UInterpTrack : public UObject
		TEST_METHOD(Class__Engine__InterpTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_71L4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, SubTracks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackInstClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, ActiveCondition, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_L5NM, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackTitle, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_TYF2, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrack, 0x0070);
		}

		// class UInterpTrackVectorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVectorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, VectorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, UnknownData_JS9A, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorBase, 0x0090);
		}

		// class UInterpTrackFloatBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackFloatBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, FloatTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, UnknownData_Y18C, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatBase, 0x0090);
		}

		// class UInterpTrackInst : public UObject
		TEST_METHOD(Class__Engine__InterpTrackInst)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInst, 0x0028);
		}

		// class UMaterialExpression : public UObject
		TEST_METHOD(Class__Engine__MaterialExpression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Material, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Function, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, UnknownData_2COC, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpression, 0x0040);
		}

		// class UMaterialExpressionTextureBase : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, Texture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, SamplerType, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, UnknownData_R7KM, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureBase, 0x0050);
		}

		// class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, Coordinates, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_GYL7, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, TextureObject, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_KPHC, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, MipValue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_65RD, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, CoordinatesDX, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_YSOC, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, CoordinatesDY, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_EOOZ, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, AutomaticViewMipBiasValue, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_8DVA, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, MipValueMode, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, SamplerSource, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, ConstCoordinate, 0x00CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, ConstMipValue, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSample, 0x00D0);
		}

		// class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ParameterName, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ExpressionGUID, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, Group, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter, 0x00F0);
		}

		// class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2D, 0x00F0);
		}

		// class APawn : public AActor
		TEST_METHOD(Class__Engine__Pawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_RPQH, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_GG41, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, BaseEyeHeight, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessPlayer, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessAI, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, RemoteViewPitch, 0x023A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_JPZW, 0x023B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AIControllerClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, PlayerState, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_UYPT, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastHitBy, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, Controller, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_RIRU, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, ControlInputVector, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastControlInputVector, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_WTHB, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APawn, 0x0288);
		}

		// class ACharacter : public APawn
		TEST_METHOD(Class__Engine__Character)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, Mesh, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CharacterMovement, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CapsuleComponent, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BasedMovement, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedBasedMovement, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, AnimRootMotionTranslationScale, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseTranslationOffset, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseRotationOffset, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedServerLastTransformUpdateTimeStamp, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplayLastTransformUpdateTimeStamp, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedMovementMode, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, bInBaseReplication, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_YUMW, 0x032A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CrouchedEyeHeight, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_F5NH, 0x0332);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpKeyHoldTime, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpForceTimeRemaining, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ProxyJumpForceStartedTime, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxHoldTime, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxCount, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpCurrentCount, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_0H95, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnReachedJumpApex, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_2S4C, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, MovementModeChangedDelegate, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnCharacterMovementUpdated, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, SavedRootMotion, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_2Z9W, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ClientRootMotionParams, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RootMotionRepMoves, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RepRootMotion, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACharacter, 0x04B8);
		}

		// class UMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, OverrideMaterials, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_0CA4, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_IVWI, 0x0411);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshComponent, 0x0418);
		}

		// class UDataAsset : public UObject
		TEST_METHOD(Class__Engine__DataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataAsset, NativeClass, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataAsset, 0x0030);
		}

		// class USplineComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__SplineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineCurves, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineInfo, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineRotInfo, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineScaleInfo, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineReparamTable, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bAllowSplineEditingPerInstance, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_0REJ, 0x04B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, ReparamStepsPerSegment, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, Duration, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bStationaryEndpoints, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bSplineHasBeenEdited, 0x04C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bModifiedByConstructionScript, 0x04C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bInputSplinePointsToConstructionScript, 0x04C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bDrawDebug, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bClosedLoop, 0x04C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bLoopPositionOverride, 0x04CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_FHR7, 0x04CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, LoopPosition, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, DefaultUpVector, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_ZDER, 0x04DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineComponent, 0x04E0);
		}

		// class USkinnedMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__SkinnedMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkeletalMesh, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MasterPoseComponent, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkinCacheUsage, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_VY67, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, PhysicsAssetOverride, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, ForcedLodModel, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MinLodModel, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_TVK2, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, StreamingDistanceMultiplier, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_2QGM, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, LODInfo, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_F48S, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, VisibilityBasedAnimTickOption, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_TVUL, 0x058D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_PBDU, 0x0592);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CapsuleIndirectShadowMinVisibility, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_K7X3, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedWorldSpaceBounds, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_QEV5, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedWorldToLocalTransform, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_IRXY, 0x0610);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkinnedMeshComponent, 0x0630);
		}

		// class USkeletalMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__SkeletalMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimBlueprintGeneratedClass, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimClass, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimScriptInstance, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PostProcessAnimInstance, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationData, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_2YWT, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, RootBoneTranslation, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LineCheckBoundsScale, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_21S2, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LinkedInstances, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedBoneSpaceTransforms, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedComponentSpaceTransforms, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_9UCO, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, GlobalAnimRateScale, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, KinematicBonesUpdateType, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PhysicsTransformUpdateMode, 0x0705);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_JIY6, 0x0706);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationMode, 0x0707);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_UUVP, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_FEJS, 0x070F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedAnimCurveUidVersion, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, MassMode, 0x0712);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_HT4V, 0x0713);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UniformMass, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TotalMass, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, Density, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, MinPerParticleMass, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothBlendWeight, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, EdgeStiffness, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BendingStiffness, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AreaStiffness, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, VolumeStiffness, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, StrainLimitingStiffness, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ShapeTargetStiffness, 0x073C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, DisallowedAnimCurves, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BodySetup, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_I2ZZ, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnConstraintBroken, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingSimulationFactory, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_QR9T, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportDistanceThreshold, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportRotationThreshold, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_IIKE, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LastPoseTickFrame, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_6C4T, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingInteractor, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_LCRY, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnAnimInitialized, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_NA3D, 0x0990);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshComponent, 0x0AC0);
		}

		// class UAnimInstance : public UObject
		TEST_METHOD(Class__Engine__AnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, CurrentSkeleton, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, RootMotionMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_G0U5, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageBlendingOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageStarted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageEnded, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnAllMontageInstancesEnded, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_YEIP, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, NotifyQueue, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, ActiveAnimNotifyState, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_MR4X, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimInstance, 0x0268);
		}

		// class UAudioComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AudioComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Sound, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, InstanceParameters, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SoundClassOverride, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_9W4P, 0x0213);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AudioComponentUserID, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMin, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMax, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMin, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMax, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeMultiplier, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerAttackTime, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerReleaseTime, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Priority, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SubtitlePriority, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_L4GF, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SourceEffectChain, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchMultiplier, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, LowPassFilterFrequency, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_WOMB, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationSettings, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationOverrides, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySettings, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySet, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_NWV0, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachLocationRule, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachRotationRule, 0x066D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachScaleRule, 0x066E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_F9AO, 0x066F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioFinished, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_J5Z9, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioPlaybackPercent, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_DD9W, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioSingleEnvelopeValue, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_H3YK, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioMultiEnvelopeValue, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_A0M9, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Modulation, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnQueueSubtitles, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachParent, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachSocketName, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_CJ7M, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioComponent, 0x07D0);
		}

		// class UAssetImportData : public UObject
		TEST_METHOD(Class__Engine__AssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetImportData, 0x0028);
		}

		// class UAssetUserData : public UObject
		TEST_METHOD(Class__Engine__AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetUserData, 0x0028);
		}

		// class UFXSystemComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__FXSystemComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFXSystemComponent, 0x03F0);
		}

		// class UFXSystemAsset : public UObject
		TEST_METHOD(Class__Engine__FXSystemAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFXSystemAsset, MaxPoolSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFXSystemAsset, UnknownData_IF5L, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFXSystemAsset, 0x0030);
		}

		// class UAnimNotify : public UObject
		TEST_METHOD(Class__Engine__AnimNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify, UnknownData_6W2W, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify, 0x0038);
		}

		// class UAnimNotifyState : public UObject
		TEST_METHOD(Class__Engine__AnimNotifyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState, UnknownData_BTZG, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState, 0x0030);
		}

		// class USaveGame : public UObject
		TEST_METHOD(Class__Engine__SaveGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveGame, 0x0028);
		}

		// class AInfo : public AActor
		TEST_METHOD(Class__Engine__Info)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInfo, 0x0228);
		}

		// class AGameModeBase : public AInfo
		TEST_METHOD(Class__Engine__GameModeBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, OptionsString, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSessionClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameStateClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerControllerClass, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerStateClass, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, HUDClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPawnClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, SpectatorClass, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ReplaySpectatorPlayerControllerClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicatorClass, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSession, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameState, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicator, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPlayerName, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, UnknownData_1JKS, 0x02B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameModeBase, 0x02C8);
		}

		// class AGameMode : public AGameModeBase
		TEST_METHOD(Class__Engine__GameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MatchState, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_ZVMR, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumSpectators, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumPlayers, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumBots, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MinRespawnDelay, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumTravellingPlayers, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, EngineMessageClass, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerArray, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerStateLifeSpan, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MaxInactivePlayers, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, bHandleDedicatedServerReplays, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_UC4S, 0x0309);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameMode, 0x0310);
		}

		// class AGameStateBase : public AInfo
		TEST_METHOD(Class__Engine__GameStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, GameModeClass, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, AuthorityGameMode, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, SpectatorClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, PlayerArray, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, bReplicatedHasBegunPlay, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_8HXG, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ReplicatedWorldTimeSeconds, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsDelta, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsUpdateFrequency, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_E76Q, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameStateBase, 0x0278);
		}

		// class AGameState : public AGameStateBase
		TEST_METHOD(Class__Engine__GameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, MatchState, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, PreviousMatchState, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, ElapsedTime, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, UnknownData_P0T9, 0x028C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameState, 0x0298);
		}

		// class AController : public AActor
		TEST_METHOD(Class__Engine__Controller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_5NVM, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, PlayerState, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_G02N, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, OnInstigatedAnyDamage, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, StateName, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Pawn, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_IP5P, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Character, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, TransformComponent, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_GHWO, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, ControlRotation, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_U0IG, 0x029D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AController, 0x02A0);
		}

		// class UCameraComponent : public USceneComponent
		TEST_METHOD(Class__Engine__CameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, FieldOfView, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoWidth, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoNearClipPlane, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoFarClipPlane, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, AspectRatio, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, ProjectionMode, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_ILF3, 0x0206);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessBlendWeight, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_UN0L, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessSettings, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraComponent, 0x07B0);
		}

		// class UCheckBoxStyleAsset : public UObject
		TEST_METHOD(Class__Engine__CheckBoxStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxStyleAsset, CheckBoxStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxStyleAsset, 0x05A8);
		}

		// class UChildActorComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ChildActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorClass, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActor, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorTemplate, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, UnknownData_RBUU, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildActorComponent, 0x0220);
		}

		// class UChildConnection : public UNetConnection
		TEST_METHOD(Class__Engine__ChildConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildConnection, Parent, 0x1A30);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildConnection, 0x1A38);
		}

		// class APlayerController : public AController
		TEST_METHOD(Class__Engine__PlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, Player, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, AcknowledgedPawn, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ControllingDirTrackInst, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, MyHUD, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManager, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManagerClass, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bAutoManageActiveCameraTarget, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_9RFR, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, TargetViewRotation, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_BUY8, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SmoothTargetViewRotationSpeed, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_28JE, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenActors, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenPrimitiveComponents, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_HOM1, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorStateSynchTime, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncLocation, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncRotation, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClientCap, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_VIVN, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatManager, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatClass, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerInput, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ActiveForceFeedbackEffects, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_Y0NE, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_KVNY, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetPlayerIndex, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_VLMX, 0x03DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PendingSwapConnection, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetConnection, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_06WH, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputYawScale, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputPitchScale, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputRollScale, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_7RHF, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ForceFeedbackScale, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClickEventKeys, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultMouseCursor, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentMouseCursor, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultClickTraceChannel, 0x045A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentClickTraceChannel, 0x045B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HitResultTraceDistance, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SeamlessTravelCount, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastCompletedSeamlessTravelCount, 0x0462);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_ORU4, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InactiveStateInputComponent, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_Q8OK, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentTouchInterface, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_4DGP, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpectatorPawn, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_HANR, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bIsLocalPlayerController, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_WWNK, 0x055D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpawnLocation, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_2E3E, 0x056C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerController, 0x0578);
		}

		// class UApplicationLifecycleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__ApplicationLifecycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillDeactivateDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasReactivatedDelegate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillEnterBackgroundDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasEnteredForegroundDelegate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillTerminateDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationShouldUnloadResourcesDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationReceivedStartupArgumentsDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnTemperatureChangeDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnLowPowerModeDelegate, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UApplicationLifecycleComponent, 0x0140);
		}

		// class UMovementComponent : public UActorComponent
		TEST_METHOD(Class__Engine__MovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedComponent, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedPrimitive, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_PYGF, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, Velocity, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintNormal, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintOrigin, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_P0JN, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintAxisSetting, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_THJ3, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovementComponent, 0x00F0);
		}

		// class UNavMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__NavMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, NavAgentProps, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, FixedPathBrakingDistance, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, MovementState, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, UnknownData_DE5Y, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, PathFollowingComp, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMovementComponent, 0x0130);
		}

		// class UPawnMovementComponent : public UNavMovementComponent
		TEST_METHOD(Class__Engine__PawnMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnMovementComponent, PawnOwner, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnMovementComponent, 0x0138);
		}

		// class UAutomationTestSettings : public UObject
		TEST_METHOD(Class__Engine__AutomationTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EngineTestModules, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorTestModules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AutomationTestmap, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorPerformanceTestMaps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AssetsToOpen, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BuildPromotionTest, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, MaterialEditorPromotionTest, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ParticleEditorPromotionTest, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BlueprintEditorPromotionTest, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, TestLevelFolders, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ExternalTools, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ImportExportTestDefinitions, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, LaunchOnSettings, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, DefaultScreenshotResolution, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationTestSettings, 0x0328);
		}

		// class UAvoidanceManager : public UObject
		TEST_METHOD(Class__Engine__AvoidanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_W7HO, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DefaultTimeToLive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterAvoid, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterClean, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DeltaTimeToPredict, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, ArtificialRadiusExpansion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, TestHeightDifference, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, HeightCheckMargin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_I3VM, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvoidanceManager, 0x00E0);
		}

		// class ULevel : public UObject
		TEST_METHOD(Class__Engine__Level)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_05PS, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, OwningWorld, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, Model, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ModelComponents, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ActorCluster, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingUnbuiltComponents, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingDirtyResources, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelScriptActor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListStart, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListEnd, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavDataChunks, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightmapTotalSize, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ShadowmapTotalSize, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StaticNavigableGeometry, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StreamingTextureGuids, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_2RQ5, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelBuildDataId, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, MapBuildData, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightBuildLevelOffset, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_U0BF, 0x01F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, WorldSettings, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_G5XL, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, AssetUserData, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_0ABQ, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, DestroyedReplicatedStaticActors, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevel, 0x0280);
		}

		// class ULevelActorContainer : public UObject
		TEST_METHOD(Class__Engine__LevelActorContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelActorContainer, Actors, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelActorContainer, 0x0038);
		}

		// class ALevelBounds : public AActor
		TEST_METHOD(Class__Engine__LevelBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, BoxComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, bAutoUpdateBounds, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, UnknownData_5G12, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelBounds, 0x0238);
		}

		// class ALevelScriptActor : public AActor
		TEST_METHOD(Class__Engine__LevelScriptActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelScriptActor, UnknownData_WIUV, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelScriptActor, 0x0230);
		}

		// class UBlueprintCore : public UObject
		TEST_METHOD(Class__Engine__BlueprintCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, SkeletonGeneratedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, GeneratedClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, bLegacyNeedToPurgeSkelRefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_4SU7, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, BlueprintGuid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_DM0X, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintCore, 0x0050);
		}

		// class UBlueprint : public UBlueprintCore
		TEST_METHOD(Class__Engine__Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ParentClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_5WF2, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintSystemVersion, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, SimpleConstructionScript, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentTemplates, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, Timelines, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentClassOverrides, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, InheritableComponentHandler, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprint, 0x00A0);
		}

		// class ULevelScriptBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__LevelScriptBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelScriptBlueprint, 0x00A0);
		}

		// class ULevelStreaming : public UObject
		TEST_METHOD(Class__Engine__LevelStreaming)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, WorldAsset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PackageNameToLoad, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LODPackageNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_8S6U, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelTransform, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelLODIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, StreamingPriority, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_U6Y8, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelColor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_OW41, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, EditorStreamingVolumes, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, MinTimeBetweenVolumeUnloadRequests, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_MEPR, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelLoaded, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelUnloaded, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelShown, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelHidden, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LoadedLevel, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PendingUnloadLevel, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_93QT, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreaming, 0x0150);
		}

		// class ULevelStreamingAlwaysLoaded : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingAlwaysLoaded)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingAlwaysLoaded, 0x0150);
		}

		// class ULevelStreamingDynamic : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingDynamic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingDynamic, 0x0150);
		}

		// class ULevelStreamingPersistent : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingPersistent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingPersistent, 0x0150);
		}

		// class ALevelStreamingVolume : public AVolume
		TEST_METHOD(Class__Engine__LevelStreamingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingLevelNames, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_BDBU, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingUsage, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_3Y6D, 0x0275);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelStreamingVolume, 0x0278);
		}

		// class ULightmappedSurfaceCollection : public UObject
		TEST_METHOD(Class__Engine__LightmappedSurfaceCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, SourceModel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, Surfaces, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmappedSurfaceCollection, 0x0040);
		}

		// class UStreamableRenderAsset : public UObject
		TEST_METHOD(Class__Engine__StreamableRenderAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, ForceMipLevelsToBeResidentTimestamp, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, NumCinematicMipLevels, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, StreamingIndex, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, CachedCombinedLODBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, CachedNumResidentLODs, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, UnknownData_1NRS, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamableRenderAsset, 0x0040);
		}

		// class UTexture : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__Texture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_FFEG, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LightingGuid, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, CompressionSettings, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, Filter, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, MipLoadOptions, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODGroup, 0x005F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_ER79, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, AssetUserData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_3HR4, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture, 0x00B8);
		}

		// class UTexture2D : public UTexture
		TEST_METHOD(Class__Engine__Texture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, LevelIndex, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, FirstResourceMemMip, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressX, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressY, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_9A5D, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, ImportedSize, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_H0JR, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2D, 0x00E8);
		}

		// class ULightMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__LightMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapTexture2D, UnknownData_GKE1, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapTexture2D, 0x00F0);
		}

		// class ALightmassCharacterIndirectDetailVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassCharacterIndirectDetailVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassCharacterIndirectDetailVolume, 0x0260);
		}

		// class ALightmassImportanceVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassImportanceVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassImportanceVolume, 0x0260);
		}

		// class ALightmassPortal : public AActor
		TEST_METHOD(Class__Engine__LightmassPortal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightmassPortal, PortalComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassPortal, 0x0230);
		}

		// class ULightmassPortalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__LightmassPortalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPortalComponent, PreviewBox, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPortalComponent, UnknownData_1K22, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPortalComponent, 0x0200);
		}

		// class UPrimaryDataAsset : public UDataAsset
		TEST_METHOD(Class__Engine__PrimaryDataAsset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryDataAsset, 0x0030);
		}

		// class UPrimaryAssetLabel : public UPrimaryDataAsset
		TEST_METHOD(Class__Engine__PrimaryAssetLabel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, Rules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, UnknownData_1ZAL, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitAssets, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitBlueprints, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, AssetCollection, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryAssetLabel, 0x0068);
		}

		// class UProjectileMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__ProjectileMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InitialSpeed, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSpeed, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_UU5H, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitTime, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitNormal, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, ProjectileGravityScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Buoyancy, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Bounciness, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Friction, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceVelocityStopSimulatingThreshold, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MinFrictionFraction, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_VU1X, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileBounce, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileStop, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingAccelerationMagnitude, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingTargetComponent, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationTimeStep, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationIterations, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceAdditionalIterations, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationTime, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpRotationTime, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationMaxLagDistance, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationSnapToTargetDistance, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_L905, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectileMovementComponent, 0x01D0);
		}

		// class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__ProxyLODMeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProxyLODMeshSimplificationSettings, ProxyLODMeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProxyLODMeshSimplificationSettings, 0x0040);
		}

		// class ARigidBodyBase : public AActor
		TEST_METHOD(Class__Engine__RigidBodyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARigidBodyBase, 0x0228);
		}

		// class ARadialForceActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__RadialForceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadialForceActor, ForceComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadialForceActor, 0x0230);
		}

		// class URadialForceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__RadialForceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, Radius, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, Falloff, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_J1FJ, 0x01F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ImpulseStrength, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_VREN, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ForceStrength, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, DestructibleDamage, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ObjectTypesToAffect, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_IKG6, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialForceComponent, 0x0220);
		}

		// class ALight : public AActor
		TEST_METHOD(Class__Engine__Light)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, LightComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, UnknownData_FWT7, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALight, 0x0238);
		}

		// class ARectLight : public ALight
		TEST_METHOD(Class__Engine__RectLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARectLight, RectLightComponent, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARectLight, 0x0240);
		}

		// class ULightComponentBase : public USceneComponent
		TEST_METHOD(Class__Engine__LightComponentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightGuid, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Brightness, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Intensity, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightColor, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_8BQU, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, IndirectLightingIntensity, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, VolumetricScatteringIntensity, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, SamplesPerPixel, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_WXT8, 0x021C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponentBase, 0x0220);
		}

		// class ULightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__LightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, Temperature, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDrawDistance, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDistanceFadeRange, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_0N65, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowMapChannel, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_UPQF, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MinRoughness, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, SpecularScale, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowResolutionScale, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowBias, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSlopeBias, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSharpen, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ContactShadowLength, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_M7I0, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightingChannels, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_02OD, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionMaterial, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionScale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_KW96, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESTexture, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_DE5E, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESBrightnessScale, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionFadeDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, DisabledBrightness, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_3M13, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomScale, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomThreshold, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomMaxBrightness, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomTint, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, bUseRayTracedDistanceFieldShadows, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_BL3O, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, RayStartOffsetDepthScale, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_3O18, 0x02AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponent, 0x0320);
		}

		// class ULocalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__LocalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, IntensityUnits, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, UnknownData_WNXY, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, Radius, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, AttenuationRadius, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, LightmassSettings, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, UnknownData_CETN, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalLightComponent, 0x033C);
		}

		// class URectLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__RectLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceHeight, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, BarnDoorAngle, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, BarnDoorLength, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceTexture, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, UnknownData_6YMS, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URectLightComponent, 0x0360);
		}

		// class URendererSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_NLNG, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MaxMobileCascades, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileMSAASampleCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_7AIZ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_2SEG, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForLights, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForEarlyZPass, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForCSMdepth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_ASNN, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureTileSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureTileBorderSize, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureFeedbackFactor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_0S4V, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ReflectionCaptureResolution, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_8YLR, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TessellationAdaptivePixelsPerTriangle, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_SDO5, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortPolicy, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_IM3J, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortAxis, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, CustomDepthStencil, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_HU0K, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_0BC1, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bEnableAlphaChannelInPostProcessing, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_X9JC, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, NGXAppId, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_D0W0, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposure, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_PV8I, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposureBias, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_M4AJ, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAntiAliasing, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultLightUnits, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultBackBufferPixelFormat, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_6R8U, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_H9RI, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, EarlyZPass, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_13P8, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_QW01, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ClearSceneMethod, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_J2RH, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_BVC6, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeX, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeY, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_FGSN, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GBufferFormat, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_LTMZ, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_VFD1, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, WireframeCullThreshold, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_T493, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultSkinCacheBehavior, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_TKWR, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, SkinCacheSceneMemoryLimitInMB, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_A5RX, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileNumDynamicPointLights, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_E1G1, 0x00FD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererSettings, 0x0100);
		}

		// class URendererOverrideSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererOverrideSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererOverrideSettings, UnknownData_2DE0, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererOverrideSettings, 0x0040);
		}

		// class UReplicationDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationDriver, 0x0028);
		}

		// class UReplicationConnectionDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationConnectionDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationConnectionDriver, 0x0028);
		}

		// class UReporterBase : public UObject
		TEST_METHOD(Class__Engine__ReporterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterBase, UnknownData_8VIX, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterBase, 0x0030);
		}

		// class UReporterGraph : public UReporterBase
		TEST_METHOD(Class__Engine__ReporterGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterGraph, UnknownData_W2WW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterGraph, 0x00A8);
		}

		// class UReverbEffect : public UObject
		TEST_METHOD(Class__Engine__ReverbEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Density, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Diffusion, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, GainHF, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayHFRatio, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsGain, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsDelay, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateGain, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateDelay, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, AirAbsorptionGainHF, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, RoomRolloffFactor, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbEffect, 0x0058);
		}

		// class UVirtualTexturePoolConfig : public UObject
		TEST_METHOD(Class__Engine__VirtualTexturePoolConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, DefaultSizeInMegabyte, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, UnknownData_RWH2, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, Pools, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexturePoolConfig, 0x0040);
		}

		// class UVisualLoggerAutomationTests : public UObject
		TEST_METHOD(Class__Engine__VisualLoggerAutomationTests)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerAutomationTests, 0x0028);
		}

		// class UVisualLoggerDebugSnapshotInterface : public UInterface
		TEST_METHOD(Class__Engine__VisualLoggerDebugSnapshotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerDebugSnapshotInterface, 0x0028);
		}

		// class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VisualLoggerKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerKismetLibrary, 0x0028);
		}

		// class UChannel : public UObject
		TEST_METHOD(Class__Engine__Channel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, Connection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, UnknownData_YHD7, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChannel, 0x0070);
		}

		// class UVoiceChannel : public UChannel
		TEST_METHOD(Class__Engine__VoiceChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChannel, UnknownData_DUZK, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceChannel, 0x0080);
		}

		// class AVolumetricLightmapDensityVolume : public AVolume
		TEST_METHOD(Class__Engine__VolumetricLightmapDensityVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVolumetricLightmapDensityVolume, AllowedMipLevelRange, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolumetricLightmapDensityVolume, 0x0268);
		}

		// class AWindDirectionalSource : public AInfo
		TEST_METHOD(Class__Engine__WindDirectionalSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWindDirectionalSource, Component, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWindDirectionalSource, 0x0230);
		}

		// class UWindDirectionalSourceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__WindDirectionalSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Strength, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Speed, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MinGustAmount, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MaxGustAmount, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Radius, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_3MNM, 0x0205);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindDirectionalSourceComponent, 0x0210);
		}

		// class UWorldComposition : public UObject
		TEST_METHOD(Class__Engine__WorldComposition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_HU9J, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreaming, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreamingTimeThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bLoadAllTilesDuringCinematic, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bRebaseOriginIn3DSpace, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_WTFV, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, RebaseOriginDistance, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldComposition, 0x0068);
		}

		// class UHierarchicalLODSetup : public UObject
		TEST_METHOD(Class__Engine__HierarchicalLODSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, HierarchicalLODSetup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, OverrideBaseMaterial, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalLODSetup, 0x0060);
		}

		// class AWorldSettings : public AInfo
		TEST_METHOD(Class__Engine__WorldSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_EX9O, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityCellSize, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityAggressiveness, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_0ZCE, 0x0237);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfig, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfigOverride, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldToMeters, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZ, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZDamageType, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldGravityZ, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalGravityZ, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultPhysicsVolumeClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PhysicsCollisionHandlerClass, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultGameMode, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GameNetworkManagerClass, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PackedLightAndShadowMapTextureSize, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultColorScale, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultMaxDistanceFieldOcclusionDistance, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalDistanceFieldViewDistance, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DynamicIndirectShadowsSelfShadowingIntensity, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_J4UH, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultReverbSettings, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultAmbientZoneSettings, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MonoCullingDistance, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBaseSoundMix, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, TimeDilation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MatineeTimeDilation, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DemoPlayTimeDilation, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinGlobalTimeDilation, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxGlobalTimeDilation, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinUndilatedFrameTime, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxUndilatedFrameTime, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BroadphaseSettings, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_IA5Q, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, Pauser, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, ReplicationViewers, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, AssetUserData, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PauserPlayerState, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxNumberOfBookmarks, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_TYOI, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBookmarkClass, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BookmarkArray, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, LastBookmarkClass, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldSettings, 0x03A8);
		}

		// class UCharacterMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__CharacterMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_OOEC, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CharacterOwner, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GravityScale, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxStepHeight, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpZVelocity, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOffJumpZFactor, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorAngle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorZ, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MovementMode, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CustomMovementMode, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSmoothingMode, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_0GGF, 0x016B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundFriction, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_OM1X, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeed, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeedCrouched, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSwimSpeed, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxFlySpeed, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxCustomMovementSpeed, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxAcceleration, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinAnalogWalkSpeed, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFrictionFactor, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFriction, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingSubStepTime, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationWalking, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFalling, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationSwimming, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFlying, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControl, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostMultiplier, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostVelocityThreshold, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, FallingLateralFriction, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CrouchedHalfHeight, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Buoyancy, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchRadiusThreshold, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchAdditionalHeight, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RotationRate, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_PJOY, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DeferredUpdatedMoveComponent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxOutOfWaterStepHeight, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, OutofWaterZ, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Mass, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, StandingDownwardForceScale, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, InitialPushForceFactor, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForceFactor, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForcePointZOffsetFactor, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, TouchForceFactor, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTouchForce, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxTouchForce, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RepulsionForce, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Acceleration, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_DOOX, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateRotation, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateLocation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateVelocity, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastTransformUpdateTimeStamp, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientGoodMoveAckTime, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientAdjustmentTime, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingImpulseToApply, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingForceToApply, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnalogInputModifier, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_P3RY, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationTimeStep, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationIterations, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxJumpApexAttemptsPerSimulation, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometry, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometryAsProxy, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawn, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawnAsProxy, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothLocationTime, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothRotationTime, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothLocationTime, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothRotationTime, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkRadius, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkHalfHeight, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMaxSmoothUpdateDistance, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkNoSmoothUpdateDistance, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAckGoodMoves, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustments, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustmentsLargeCorrection, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkLargeClientCorrectionDistance, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LedgeCheckThreshold, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOutOfWaterPitch, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentFloor, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultLandMovementMode, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultWaterMovementMode, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundMovementMode, 0x0386);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_I9S3, 0x038B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceConsiderationRadius, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RequestedVelocity, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceUID, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceGroup, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToAvoid, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToIgnore, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceWeight, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingLaunchVelocity, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_UQLG, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterval, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionTimer, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterpSpeed, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleUp, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleDown, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavWalkingFloorDistTolerance, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PostPhysicsTickFunction, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_VCPF, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTimeBetweenTimeStampResets, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_AP8M, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentRootMotion, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_2TZV, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RootMotionParams, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnimRootMotionVelocity, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_5C08, 0x05EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMovementComponent, 0x0610);
		}

		// class USubsystem : public UObject
		TEST_METHOD(Class__Engine__Subsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsystem, UnknownData_KQR9, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsystem, 0x0030);
		}

		// class UDynamicSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__DynamicSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicSubsystem, 0x0030);
		}

		// class UEngineSubsystem : public UDynamicSubsystem
		TEST_METHOD(Class__Engine__EngineSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineSubsystem, 0x0030);
		}

		// class USoundEffectPreset : public UObject
		TEST_METHOD(Class__Engine__SoundEffectPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectPreset, UnknownData_8IDA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectPreset, 0x0040);
		}

		// class USoundEffectSourcePreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSourcePreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePreset, 0x0040);
		}

		// class USoundEffectSubmixPreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSubmixPreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSubmixPreset, 0x0040);
		}

		// class UWorldSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__WorldSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldSubsystem, 0x0030);
		}

		// class UArrowComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ArrowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowColor, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowSize, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ScreenSize, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_8JXA, 0x03FD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrowComponent, 0x0400);
		}

		// class ANavigationObjectBase : public AActor
		TEST_METHOD(Class__Engine__NavigationObjectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_4E6N, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, CapsuleComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, GoodSprite, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, BadSprite, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_G65K, 0x0249);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationObjectBase, 0x0250);
		}

		// class UCheatManager : public UObject
		TEST_METHOD(Class__Engine__CheatManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerRef, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, UnknownData_S6MW, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheatManager, 0x0078);
		}

		// class UGameInstance : public UObject
		TEST_METHOD(Class__Engine__GameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_M7U4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, LocalPlayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, OnlineSession, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, ReferencedObjects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_4W5F, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstance, 0x0198);
		}

		// class UGameInstanceSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__GameInstanceSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstanceSubsystem, 0x0030);
		}

		// class UGameUserSettings : public UObject
		TEST_METHOD(Class__Engine__GameUserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseVSync, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDynamicResolution, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_VQH2, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeX, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeY, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeY, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosX, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosY, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FullscreenMode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedFullscreenMode, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, PreferredFullscreenMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, Version, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, AudioQualityLevel, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedAudioQualityLevel, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FrameRateLimit, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_L8NS, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenWidth, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDesiredScreenHeight, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_6Y00, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenHeight, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenWidth, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenHeight, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenWidth, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenHeight, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkResult, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkResult, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_FM15, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkSteps, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkSteps, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkMultiplier, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseHDRDisplayOutput, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_ZMDM, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, HDRDisplayOutputNits, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_N9MN, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, OnGameUserSettingsUINeedsUpdate, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameUserSettings, 0x0120);
		}

		// class ASkyLight : public AInfo
		TEST_METHOD(Class__Engine__SkyLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, LightComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, UnknownData_C5Y5, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyLight, 0x0238);
		}

		// class UTextureCube : public UTexture
		TEST_METHOD(Class__Engine__TextureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureCube, UnknownData_KSJ7, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureCube, 0x0110);
		}

		// class UInputSettings : public UObject
		TEST_METHOD(Class__Engine__InputSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisConfig, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, bUseAutocorrect, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_NRY6, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectOS, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectCultures, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectDeviceModels, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseCaptureMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseLockMode, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_C8ZR, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, FOVScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DoubleClickTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_8BXW, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ActionMappings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisMappings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, SpeechMappings, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultTouchInterface, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKey, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKeys, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputSettings, 0x00F0);
		}

		// class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBreakMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, UnknownData_OO2Q, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBreakMaterialAttributes, 0x0058);
		}

		// class UMaterialExpressionBumpOffset : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBumpOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_8QYJ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Height, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_YSD3, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatioInput, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_OFLF, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatio, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ReferencePlane, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ConstCoordinate, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBumpOffset, 0x0088);
		}

		// class UMaterialExpressionCameraPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraPositionWS, 0x0040);
		}

		// class UMaterialExpressionCameraVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraVectorWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraVectorWS, 0x0040);
		}

		// class UMaterialExpressionCeil : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCeil)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, UnknownData_6CGV, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCeil, 0x0058);
		}

		// class UParticleModule : public UObject
		TEST_METHOD(Class__Engine__ParticleModule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, LODValidity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, UnknownData_RLMY, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModule, 0x0030);
		}

		// class UParticleModuleLocationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLocationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBase, 0x0030);
		}

		// class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, UnknownData_6VCD, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, VelocityScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, StartLocation, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveBase, 0x00B0);
		}

		// class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_M7NM, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartHeight, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, HeightAxis, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_4KKB, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder, 0x0120);
		}

		// class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere, StartRadius, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere, 0x00E0);
		}

		// class UStaticMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__StaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_HKHO, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, PreviousLODLevel, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, MinLOD, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, SubDivisionStepSize, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StaticMesh, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, WireframeColorOverride, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_9581, 0x0436);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, OverriddenLightMapRes, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldIndirectShadowMinVisibility, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldSelfShadowBias, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingDistanceMultiplier, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LODData, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingTextureData, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LightmassSettings, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshComponent, 0x0480);
		}

		// class USplineMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__SplineMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_VBEH, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineParams, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineUpDir, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMin, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, CachedMeshBodySetupGuid, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, BodySetup, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMax, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, ForwardAxis, 0x050D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_VL8Z, 0x050E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, VirtualTextureMainPassMaxDrawDistance, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_S3BZ, 0x0514);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMeshComponent, 0x0520);
		}

		// class UPointLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__PointLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, LightFalloffExponent, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceRadius, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SoftSourceRadius, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceLength, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, UnknownData_9902, 0x034C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointLightComponent, 0x0350);
		}

		// class USpotLightComponent : public UPointLightComponent
		TEST_METHOD(Class__Engine__SpotLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, InnerConeAngle, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, OuterConeAngle, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, LightShaftConeAngle, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, UnknownData_N1AD, 0x035C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpotLightComponent, 0x0360);
		}

		// class USpringArmComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SpringArmComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, TargetArmLength, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, SocketOffset, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, TargetOffset, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeSize, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeChannel, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_QYD8, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_ETY2, 0x0216);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagSpeed, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraRotationLagSpeed, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxTimeStep, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxDistance, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_2920, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpringArmComponent, 0x0280);
		}

		// class UStaticMesh : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__StaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_Z3GV, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, MinLOD, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LpvBiasMultiplier, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, StaticMaterials, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightmapUVDensity, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapResolution, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapCoordinateIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, DistanceFieldSelfShadowBias, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, BodySetup, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LODForCollision, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_TTX1, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, Sockets, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_FRNA, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, PositiveBoundsExtension, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NegativeBoundsExtension, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ExtendedBounds, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ElementToIgnoreForTexFactor, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, AssetUserData, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_YH1F, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, EditableMesh, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NavCollision, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMesh, 0x0138);
		}

		// class UStaticMeshSocket : public UObject
		TEST_METHOD(Class__Engine__StaticMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, UnknownData_JOAY, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, Tag, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSocket, 0x0068);
		}

		// class UStereoLayerComponent : public USceneComponent
		TEST_METHOD(Class__Engine__StereoLayerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_5IAZ, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Texture, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, LeftTexture, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_XP8D, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, QuadSize, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UVRect, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderRadius, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderOverlayArc, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderHeight, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, EquirectProps, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerType, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerShape, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_MBU7, 0x027E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Shape, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Priority, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_AM3W, 0x028C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerComponent, 0x02E0);
		}

		// class UStereoLayerShape : public UObject
		TEST_METHOD(Class__Engine__StereoLayerShape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShape, 0x0028);
		}

		// class UStereoLayerShapeQuad : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeQuad)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeQuad, 0x0028);
		}

		// class UStereoLayerShapeCylinder : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, Radius, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, OverlayArc, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, Height, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, UnknownData_FYEV, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeCylinder, 0x0038);
		}

		// class UStereoLayerShapeCubemap : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeCubemap)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeCubemap, 0x0028);
		}

		// class ACameraActor : public AActor
		TEST_METHOD(Class__Engine__CameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AutoActivateForPlayer, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_F1EG, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, CameraComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, SceneComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_G1P7, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_K6UL, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AspectRatio, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, FOVAngle, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessBlendWeight, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_73X3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessSettings, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraActor, 0x07A0);
		}

		// class UInstancedStaticMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__InstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMData, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumCustomDataFloats, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_I6I6, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMCustomData, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstancingRandomSeed, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceStartCullDistance, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceEndCullDistance, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_CMTY, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceReorderTable, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_FKB3, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumPendingLightmaps, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_YRHG, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, CachedMappings, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_PKL7, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstancedStaticMeshComponent, 0x0530);
		}

		// class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
		TEST_METHOD(Class__Engine__HierarchicalInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_WKVZ, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, SortedInstances, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, NumBuiltInstances, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_TB4N, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, BuiltInstanceBounds, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBounds, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBoundsList, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_0QN5, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, OcclusionLayerNumNodes, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, CacheMeshExtendedBounds, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, bDisableCollision, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_VMFZ, 0x05C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, InstanceCountToRender, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_2JGU, 0x05C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalInstancedStaticMeshComponent, 0x0618);
		}

		// class AStaticMeshActor : public AActor
		TEST_METHOD(Class__Engine__StaticMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, StaticMeshComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, bStaticMeshReplicateMovement, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, NavigationGeometryGatheringMode, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, UnknownData_SC4E, 0x0232);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaticMeshActor, 0x0238);
		}

		// class UMaterialInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_VJKW, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, SubsurfaceProfile, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_420E, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, LightmassSettings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, TextureStreamingData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, AssetUserData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_R7FK, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInterface, 0x0088);
		}

		// class UMaterialInstance : public UMaterialInterface
		TEST_METHOD(Class__Engine__MaterialInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysicalMaterialMap, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, Parent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_XTBA, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, ScalarParameterValues, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, VectorParameterValues, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, TextureParameterValues, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, RuntimeVirtualTextureParameterValues, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, FontParameterValues, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, BasePropertyOverrides, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_64XB, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, StaticParameters, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, CachedLayerParameters, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, CachedReferencedTextures, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_ZRNJ, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstance, 0x0408);
		}

		// class UMaterialInstanceConstant : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceConstant, PhysMaterialMask, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceConstant, 0x0410);
		}

		// class UMaterialExpressionCustomOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustomOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustomOutput, 0x0040);
		}

		// class UEngineCustomTimeStep : public UObject
		TEST_METHOD(Class__Engine__EngineCustomTimeStep)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineCustomTimeStep, 0x0028);
		}

		// class UDynamicBlueprintBinding : public UObject
		TEST_METHOD(Class__Engine__DynamicBlueprintBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicBlueprintBinding, 0x0028);
		}

		// class UBlueprintGeneratedClass : public UClass
		TEST_METHOD(Class__Engine__BlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, NumReplicatedProperties, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_CDDJ, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, DynamicBindingObjects, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentTemplates, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, Timelines, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentClassOverrides, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, SimpleConstructionScript, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, InheritableComponentHandler, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFramePointerProperty, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_L42P, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFunction, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, CookedComponentInstancingData, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_0DM7, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGeneratedClass, 0x0328);
		}

		// class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__Engine__AnimBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_FL30, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, BakedStateMachines, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, TargetSkeleton, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, AnimNotifies, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, OrderedSavedPoseIndicesMap, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_8DIR, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, SyncGroupNames, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, EvaluateGraphExposedInputs, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, GraphAssetPlayerInformation, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, GraphBlendOptions, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprintGeneratedClass, 0x04E8);
		}

		// class UAnimBoneCompressionCodec : public UObject
		TEST_METHOD(Class__Engine__AnimBoneCompressionCodec)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBoneCompressionCodec, Description, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBoneCompressionCodec, 0x0038);
		}

		// class UAnimBoneCompressionSettings : public UObject
		TEST_METHOD(Class__Engine__AnimBoneCompressionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBoneCompressionSettings, Codecs, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBoneCompressionSettings, 0x0038);
		}

		// class ABandwidthTestActor : public AActor
		TEST_METHOD(Class__Engine__BandwidthTestActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABandwidthTestActor, BandwidthGenerator, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABandwidthTestActor, 0x0248);
		}

		// class UBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, Sprite, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UnknownData_RNUZ, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, ScreenSize, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, U, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UL, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, V, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, VL, 0x040C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBillboardComponent, 0x0410);
		}

		// class UBlendableInterface : public UInterface
		TEST_METHOD(Class__Engine__BlendableInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendableInterface, 0x0028);
		}

		// class USkeleton : public UObject
		TEST_METHOD(Class__Engine__Skeleton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_4DJV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BoneTree, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, RefLocalPoses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_0OQH, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBoneGuid, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBones, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, Sockets, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_ZG7R, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SmartNames, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_6IV3, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BlendProfiles, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SlotGroups, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_VJDN, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, AssetUserData, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeleton, 0x0368);
		}

		// class UMaterialExpressionSquareRoot : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSquareRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, UnknownData_IKT0, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSquareRoot, 0x0058);
		}

		// class UMaterialExpressionStaticBool : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBool, UnknownData_4W68, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBool, 0x0048);
		}

		// class UMaterialExpressionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ExpressionGUID, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParameter, 0x0058);
		}

		// class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBoolParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBoolParameter, UnknownData_HVJB, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBoolParameter, 0x0060);
		}

		// class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, Input, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_FCKM, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_L48G, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticComponentMaskParameter, 0x0070);
		}

		// class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitchParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, UnknownData_F9CU, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, B, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, UnknownData_MV2K, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitchParameter, 0x0088);
		}

		// class UMaterialExpressionSubtract : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSubtract)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_42LE, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_O916, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSubtract, 0x0070);
		}

		// class UMaterialExpressionTangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, UnknownData_J0OP, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangent, 0x0058);
		}

		// class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionTangentOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, UnknownData_FGLR, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangentOutput, 0x0058);
		}

		// class USoundBase : public UObject
		TEST_METHOD(Class__Engine__SoundBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundClassObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, VirtualizationMode, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_UYVL, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencySet, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencyOverrides, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Duration, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, MaxDistance, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, TotalSamples, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Priority, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, AttenuationSettings, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Modulation, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixObject, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixSends, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SourceEffectChain, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, BusSends, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, PreEffectBusSends, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundBase, 0x0160);
		}

		// class USoundWave : public USoundBase
		TEST_METHOD(Class__Engine__SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CompressionQuality, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, StreamingPriority, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRateQuality, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_KTGS, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SoundGroup, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, LoadingBehavior, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_U9VZ, 0x016F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, FrequenciesToAnalyze, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CookedSpectralTimeData, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CookedEnvelopeTimeData, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InitialChunkSize, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_4R9N, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SpokenText, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SubtitlePriority, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Volume, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Pitch, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, NumChannels, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_IWY9, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Subtitles, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Curves, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InternalCurves, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_MI8L, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWave, 0x0310);
		}

		// class USoundWaveProcedural : public USoundWave
		TEST_METHOD(Class__Engine__SoundWaveProcedural)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWaveProcedural, UnknownData_ABNR, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWaveProcedural, 0x0360);
		}

		// class UReflectionCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffsetComponent, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, ReflectionSourceType, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_210K, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Cubemap, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, SourceCubemapAngle, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Brightness, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffset, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MapBuildDataId, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_Y44G, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReflectionCaptureComponent, 0x026C);
		}

		// class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__BoxReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_YQED, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewInfluenceBox, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewCaptureBox, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxReflectionCaptureComponent, 0x0280);
		}

		// class UBreakpoint : public UObject
		TEST_METHOD(Class__Engine__Breakpoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_CJI2, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, Node, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_HMKC, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBreakpoint, 0x0040);
		}

		// class UBrushBuilder : public UObject
		TEST_METHOD(Class__Engine__BrushBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, BitmapFilename, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Tooltip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_501Q, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Vertices, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Polys, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Layer, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_VPHG, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBuilder, 0x0080);
		}

		// class UBrushComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BrushComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, Brush, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, BrushBodySetup, 0x03F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushComponent, 0x0400);
		}

		// class ABrushShape : public ABrush
		TEST_METHOD(Class__Engine__BrushShape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrushShape, 0x0260);
		}

		// class UDialogueWave : public UObject
		TEST_METHOD(Class__Engine__DialogueWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, UnknownData_SO6C, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SpokenText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SubtitleOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, ContextMappings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, LocalizationGUID, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueWave, 0x0070);
		}

		// class ADirectionalLight : public ALight
		TEST_METHOD(Class__Engine__DirectionalLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADirectionalLight, 0x0238);
		}

		// class UDirectionalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__DirectionalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowCascadeBiasDistribution, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_GGMN, 0x0325);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionMaskDarkness, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionDepthRange, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightShaftOverrideDirection, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, WholeSceneDynamicShadowRadius, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceMovableLight, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceStationaryLight, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowCascades, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeDistributionExponent, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeTransitionFraction, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowDistanceFadeoutFraction, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_HQXL, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowCascadeCount, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowDistance, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DistanceFieldShadowDistance, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceAngle, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceSoftAngle, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, TraceDistance, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightmassSettings, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_CUQR, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ModulatedShadowColor, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowAmount, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_2OFN, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, AtmosphereSunLightIndex, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_VD3J, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDirectionalLightComponent, 0x03A0);
		}

		// class UDistribution : public UObject
		TEST_METHOD(Class__Engine__Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistribution, UnknownData_WCL7, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistribution, 0x0030);
		}

		// class UDistributionFloat : public UDistribution
		TEST_METHOD(Class__Engine__DistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloat, UnknownData_E36D, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloat, 0x0038);
		}

		// class UDistributionFloatConstant : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, UnknownData_KVYX, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstant, 0x0040);
		}

		// class UDistributionFloatUniformCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniformCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniformCurve, 0x0050);
		}

		// class UDistributionVector : public UDistribution
		TEST_METHOD(Class__Engine__DistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVector, UnknownData_5KBX, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVector, 0x0038);
		}

		// class UDistributionVectorConstant : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_GP20, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, LockedAxes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_VSL2, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstant, 0x0050);
		}

		// class UDistributionVectorConstantCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_P0P6, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_LMJN, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstantCurve, 0x0058);
		}

		// class UDistributionVectorParameterBase : public UDistributionVectorConstant
		TEST_METHOD(Class__Engine__DistributionVectorParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxInput, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinOutput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxOutput, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParamModes, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, UnknownData_TTAQ, 0x008B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParameterBase, 0x0090);
		}

		// class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
		TEST_METHOD(Class__Engine__DistributionVectorParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParticleParameter, 0x0090);
		}

		// class UDistributionVectorUniform : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Max, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Min, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_639H, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, MirrorFlags, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_M6SL, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniform, 0x0060);
		}

		// class UDistributionVectorUniformCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_BGCH, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, MirrorFlags, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_KVMW, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_8DUN, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniformCurve, 0x0060);
		}

		// class ADocumentationActor : public AActor
		TEST_METHOD(Class__Engine__DocumentationActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADocumentationActor, UnknownData_NA27, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADocumentationActor, 0x0230);
		}

		// class UDPICustomScalingRule : public UObject
		TEST_METHOD(Class__Engine__DPICustomScalingRule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDPICustomScalingRule, 0x0028);
		}

		// class UDrawFrustumComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__DrawFrustumComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumColor, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAngle, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAspectRatio, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumStartDist, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumEndDist, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_MKE8, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, Texture, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawFrustumComponent, 0x0410);
		}

		// class UShapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ShapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeBodySetup, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, AreaClass, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeColor, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, UnknownData_YDAS, 0x0405);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShapeComponent, 0x0408);
		}

		// class USphereComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__SphereComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereComponent, UnknownData_A8ZN, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereComponent, 0x0410);
		}

		// class UDrawSphereComponent : public USphereComponent
		TEST_METHOD(Class__Engine__DrawSphereComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawSphereComponent, 0x0410);
		}

		// class UEdGraph : public UObject
		TEST_METHOD(Class__Engine__EdGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Schema, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Nodes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, UnknownData_TWMC, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraph, 0x0060);
		}

		// class UGraphNodeContextMenuContext : public UObject
		TEST_METHOD(Class__Engine__GraphNodeContextMenuContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Blueprint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Graph, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Node, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, UnknownData_K3KJ, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, bIsDebugging, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, UnknownData_7QYO, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGraphNodeContextMenuContext, 0x0050);
		}

		// class UInterpTrackFade : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_EQO5, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, FadeColor, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_86BC, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFade, 0x00A8);
		}

		// class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimBlueprintClass, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, ParamName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, UnknownData_0KZF, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatAnimBPParam, 0x00B0);
		}

		// class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatMaterialParam, 0x00A8);
		}

		// class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatParticleParam, ParamName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatParticleParam, 0x0098);
		}

		// class UInterpTrackFloatProp : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatProp, 0x0098);
		}

		// class UInterpTrackInstAnimControl : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, UnknownData_6C0E, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAnimControl, 0x0030);
		}

		// class UInterpTrackInstAudioMaster : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAudioMaster, 0x0028);
		}

		// class UInterpTrackInstProperty : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, InterpProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, PropertyOuterObjectInst, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstProperty, 0x0050);
		}

		// class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_SSBX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, ResetBool, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_U363, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstBoolProp, 0x0068);
		}

		// class UMaterialExpressionCrossProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCrossProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_0DM9, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_AP1V, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCrossProduct, 0x0068);
		}

		// class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, bUseCustomPrimitiveData, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, PrimitiveDataIndex, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, UnknownData_LB7V, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScalarParameter, 0x0060);
		}

		// class UMaterialExpressionSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSign)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, UnknownData_C7HU, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSign, 0x0058);
		}

		// class UMaterialExpressionSine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, UnknownData_Q57O, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSine, 0x0058);
		}

		// class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereAerialPerspective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, WorldPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, UnknownData_4H0Y, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, 0x0058);
		}

		// class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance, 0x0040);
		}

		// class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereViewLuminance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereViewLuminance, 0x0040);
		}

		// class UModel : public UObject
		TEST_METHOD(Class__Engine__Model)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModel, UnknownData_OB5D, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModel, 0x0258);
		}

		// class UActorChannel : public UChannel
		TEST_METHOD(Class__Engine__ActorChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, Actor, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_XXY9, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, CreateSubObjects, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_H5UI, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorChannel, 0x0298);
		}

		// class UAnimationAsset : public UObject
		TEST_METHOD(Class__Engine__AnimationAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_FYX1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_M65I, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, MetaData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, AssetUserData, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationAsset, 0x0080);
		}

		// class UBodySetup : public UObject
		TEST_METHOD(Class__Engine__BodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, AggGeom, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BoneName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysicsType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_Q67A, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, CollisionReponse, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, CollisionTraceFlag, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_MRQD, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysMaterial, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, WalkableSlopeOverride, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_1PNK, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, DefaultInstance, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_BSFZ, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BuildScale3D, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_AU72, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodySetup, 0x0250);
		}

		// class UBlendSpaceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__BlendSpaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_FAXN, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, bRotationBlendInMeshSpace, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_NNK9, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, AnimLength, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, InterpolationParam, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, TargetWeightInterpolationSpeedPerSec, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, NotifyTriggerMode, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_8L1P, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, PerBoneBlend, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleIndexWithMarkers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_Y9L9, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, GridSamples, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, BlendParameters, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpaceBase, 0x0148);
		}

		// class UBlendSpace : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, AxisToScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, UnknownData_06TQ, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace, 0x0150);
		}

		// class UAimOffsetBlendSpace : public UBlendSpace
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace, 0x0150);
		}

		// class UBlendSpace1D : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace1D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, bScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, UnknownData_IX1R, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace1D, 0x0150);
		}

		// class UAimOffsetBlendSpace1D : public UBlendSpace1D
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace1D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace1D, 0x0150);
		}

		// class UAISystemBase : public UObject
		TEST_METHOD(Class__Engine__AISystemBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemClassName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemModuleName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_J6GC, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, bInstantiateAISystemOnClient, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_MT4G, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystemBase, 0x0058);
		}

		// class AAmbientSound : public AActor
		TEST_METHOD(Class__Engine__AmbientSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSound, AudioComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAmbientSound, 0x0230);
		}

		// class UAnimationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AnimationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, CompressCommandletVersion, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_IG42, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, KeyEndEffectorsMatchNameArray, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, ForceRecompression, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bOnlyCheckForMissingSkeletalMeshes, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bForceBelowThreshold, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bFirstRecompressUsingCurrentOrDefault, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bRaiseMaxErrorToExisting, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bEnablePerformanceLog, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bStripAnimationDataOnDedicatedServer, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bTickAnimationOnSkeletalMeshInit, 0x0057);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSettings, 0x0058);
		}

		// class UMaterialExpressionTruncate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTruncate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, UnknownData_DWSA, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTruncate, 0x0058);
		}

		// class UMaterialExpressionTwoSidedSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTwoSidedSign)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTwoSidedSign, 0x0040);
		}

		// class UMaterialExpressionVectorNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVectorNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_8GE7, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, NoiseFunction, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_CVFP, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Quality, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_FBBO, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, TileSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_MHOO, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorNoise, 0x0068);
		}

		// class UMaterialExpressionVertexColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexColor, 0x0040);
		}

		// class UAnimBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__AnimBlueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_NY2A, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, TargetSkeleton, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, Groups, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bUseMultiThreadedAnimationUpdate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bWarnAboutBlueprintUsage, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_EQTI, 0x00C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprint, 0x00C8);
		}

		// class UAnimSequenceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__AnimSequenceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, Notifies, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, SequenceLength, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RateScale, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RawCurveData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequenceBase, 0x00A8);
		}

		// class UAnimCompositeBase : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimCompositeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompositeBase, 0x00A8);
		}

		// class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, UnknownData_S6M3, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, ResetColor, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstLinearColorProp, 0x0068);
		}

		// class UParticleModuleAccelerationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationBase, UnknownData_ZG15, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationBase, 0x0038);
		}

		// class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAcceleration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, UnknownData_2RQ3, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAcceleration, 0x0088);
		}

		// class UAnimClassData : public UObject
		TEST_METHOD(Class__Engine__AnimClassData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_PTBL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, BakedStateMachines, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, TargetSkeleton, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNotifies, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, OrderedSavedPoseIndicesMap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimBlueprintFunctions, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimBlueprintFunctionData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNodeProperties, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_8HCM, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, LinkedAnimGraphNodeProperties, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_XT7S, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, LinkedAnimLayerNodeProperties, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_AEK0, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, PreUpdateNodeProperties, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_LTE8, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, DynamicResetNodeProperties, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_1DWP, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, StateMachineNodeProperties, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_11CG, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, InitializationNodeProperties, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_0043, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, GraphNameAssetPlayers, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, SyncGroupNames, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, EvaluateGraphExposedInputs, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, GraphBlendOptions, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassData, 0x0268);
		}

		// class UAnimClassInterface : public UInterface
		TEST_METHOD(Class__Engine__AnimClassInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassInterface, 0x0028);
		}

		// class USkeletalMeshLODSettings : public UDataAsset
		TEST_METHOD(Class__Engine__SkeletalMeshLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MinLOD, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, DisableBelowMinLodStripping, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, bSupportLODStreaming, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, UnknownData_5JJ9, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MaxNumStreamedLODs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MaxNumOptionalLODs, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, LODGroups, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshLODSettings, 0x0050);
		}

		// class USkeletalMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__SkeletalMeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimplificationSettings, SkeletalMeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSimplificationSettings, 0x0040);
		}

		// class USkeletalMeshSocket : public UObject
		TEST_METHOD(Class__Engine__SkeletalMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, BoneName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeLocation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, bForceAlwaysAnimated, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, UnknownData_G13K, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSocket, 0x0060);
		}

		// class UAnimComposite : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimComposite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimComposite, AnimationTrack, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimComposite, 0x00B8);
		}

		// class UAnimCompress : public UAnimBoneCompressionCodec
		TEST_METHOD(Class__Engine__AnimCompress)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_F0RU, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, TranslationCompressionFormat, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, RotationCompressionFormat, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, ScaleCompressionFormat, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_KWMW, 0x003F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress, 0x0040);
		}

		// class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_BitwiseCompressOnly)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_BitwiseCompressOnly, 0x0040);
		}

		// class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly
		TEST_METHOD(Class__Engine__AnimCompress_LeastDestructive)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_LeastDestructive, 0x0040);
		}

		// class UAnimCompress_RemoveLinearKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveLinearKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxPosDiff, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxAngleDiff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxScaleDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxEffectorDiff, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MinEffectorDiff, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, EffectorDiffSocket, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, ParentKeyScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, UnknownData_6JS4, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveLinearKeys, 0x0060);
		}

		// class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
		TEST_METHOD(Class__Engine__AnimCompress_PerTrackCompression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxZeroingThreshold, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxPosDiffBitwise, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxAngleDiffBitwise, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxScaleDiffBitwise, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedRotationFormats, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedTranslationFormats, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedScaleFormats, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_OENX, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ResampledFramerate, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MinKeysForResampling, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_Q5UH, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TrackHeightBias, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisor, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisorExponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_NIDE, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, RotationErrorSourceRatio, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TranslationErrorSourceRatio, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ScaleErrorSourceRatio, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxErrorPerTrackRatio, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, PerturbationProbeSize, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_EAIT, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_PerTrackCompression, 0x00D8);
		}

		// class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveEverySecondKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, MinKeys, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, UnknownData_A5UU, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveEverySecondKey, 0x0048);
		}

		// class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveTrivialKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxPosDiff, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxAngleDiff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxScaleDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, UnknownData_CUXF, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveTrivialKeys, 0x0050);
		}

		// class UAnimCurveCompressionCodec : public UObject
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec, 0x0028);
		}

		// class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_CompressedRichCurve)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_CompressedRichCurve, 0x0028);
		}

		// class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_UniformIndexable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_UniformIndexable, 0x0028);
		}

		// class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_UniformlySampled)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_UniformlySampled, 0x0028);
		}

		// class UAnimCurveCompressionSettings : public UObject
		TEST_METHOD(Class__Engine__AnimCurveCompressionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCurveCompressionSettings, Codec, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionSettings, 0x0030);
		}

		// class UAnimLayerInterface : public UInterface
		TEST_METHOD(Class__Engine__AnimLayerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimLayerInterface, 0x0028);
		}

		// class UAnimMetaData : public UObject
		TEST_METHOD(Class__Engine__AnimMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMetaData, 0x0028);
		}

		// class UAnimMontage : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendIn, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendInTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_B1TM, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOut, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTriggerTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncGroup, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncSlotIndex, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_VMDN, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, MarkerData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, CompositeSections, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SlotAnimTracks, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPoints, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionTranslation, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionRotation, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableAutoBlendOut, 0x017A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, RootMotionRootLock, 0x017B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_V5OI, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointMarkers, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointStateNotifyIndices, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurve, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurveName, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMontage, 0x01D0);
		}

		// class UAnimNotify_PauseClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PauseClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PauseClothingSimulation, 0x0038);
		}

		// class UAnimNotify_PlayParticleEffect : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlayParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, PSTemplate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_D94G, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_6ZF6, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, SocketName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_QHGB, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayParticleEffect, 0x0090);
		}

		// class UAnimNotify_PlaySound : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, Sound, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, VolumeMultiplier, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, PitchMultiplier, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_VPCE, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, AttachName, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_AJD8, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlaySound, 0x0058);
		}

		// class UAnimNotify_ResetClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetClothingSimulation, 0x0038);
		}

		// class UAnimNotify_ResetDynamics : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetDynamics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetDynamics, 0x0038);
		}

		// class UAnimNotify_ResumeClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResumeClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResumeClothingSimulation, 0x0038);
		}

		// class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_DisableRootMotion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_DisableRootMotion, 0x0030);
		}

		// class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_TimedParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, bDestroyAtEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, UnknownData_QG66, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedParticleEffect, 0x0060);
		}

		// class UAnimNotifyState_Trail : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, FirstSocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, SecondSocketName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_FNAS, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleCurve, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_2EJ9, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_Trail, 0x0058);
		}

		// class UComponentDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__ComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComponentDelegateBinding, ComponentDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComponentDelegateBinding, 0x0038);
		}

		// class UCurveTable : public UObject
		TEST_METHOD(Class__Engine__CurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveTable, UnknownData_81GU, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveTable, 0x00A0);
		}

		// class UCompositeCurveTable : public UCurveTable
		TEST_METHOD(Class__Engine__CompositeCurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, ParentTables, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, OldParentTables, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, UnknownData_3T59, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeCurveTable, 0x00C8);
		}

		// class UDataTable : public UObject
		TEST_METHOD(Class__Engine__DataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, RowStruct, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_U7TH, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_GOR8, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, ImportKeyField, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_YNTP, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTable, 0x00C8);
		}

		// class UCompositeDataTable : public UDataTable
		TEST_METHOD(Class__Engine__CompositeDataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, ParentTables, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, OldParentTables, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, UnknownData_X6MQ, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeDataTable, 0x00F0);
		}

		// class UEngine : public UObject
		TEST_METHOD(Class__Engine__Engine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_MXM9, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFont, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFontName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFont, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFontName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFont, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFontName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFont, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFontName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFont, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFontName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFonts, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_4AH4, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFontNames, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClassName, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClassName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClass, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClassName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClass, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClassName, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClassName, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClass, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClassName, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClass, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClassName, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClass, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClass, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClassName, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClassName, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClass, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AIControllerClassName, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettings, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClassName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBlueprintBaseClassName, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingletonClassName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingleton, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManagerClassName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManager, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTexture, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTextureName, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTexture, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTextureName, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTexture, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTextureName, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTexture, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTextureName, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTexture, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTextureName, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTexture, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTextureName, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterial, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterialName, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterial, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterialName, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, EmissiveMeshMaterial, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, EmissiveMeshMaterialName, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterial, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterialName, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterial, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterialName, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityMaterial, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityName, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterial, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterialName, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterial, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterialName, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterial, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterialName, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterial, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterialName, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_ColorOnly, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_ColorOnly, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_AlphaAsColor, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_AlphaAsColor, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_RedOnly, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_RedOnly, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_GreenOnly, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_GreenOnly, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_BlueOnly, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_BlueOnly, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugEditorMaterialName, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterial, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialX, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialXAxis, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialY, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialYAxis, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZ, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZAxis, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialPrismatic, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterial, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterialName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterial, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterialName, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterial, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialYellow, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialName, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingOnlyBrightness, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShaderComplexityColors, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, QuadComplexityColors, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightComplexityColors, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StationaryLightOverlapColors, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LODColorationColors, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HLODColorationColors, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingAccuracyColors, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxPixelShaderAdditiveComplexityCount, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxES3PixelShaderAdditiveComplexityCount, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinLightMapDensity, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, IdealLightMapDensity, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxLightMapDensity, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_P7GG, 0x0645);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityGrayscaleScale, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityColorScale, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityVertexMappedColor, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensitySelectedColor, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StatColorMappings, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterial, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterialName, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveGameNameRedirects, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveClassRedirects, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActivePluginRedirects, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveStructRedirects, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTexture, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTextureName, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BlueNoiseTexture, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BlueNoiseTextureName, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTexture, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTextureName, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTexture, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTextureName, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTexture, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTextureName, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_TV77, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewport, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DeferredCommands, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TickCycles, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameCycles, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ClientCycles, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NearClipPlane, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_O4XU, 0x07B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaximumLoopIterationCount, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_0D34, 0x07B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, FixedFrameRate, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmoothedFrameRateRange, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimeStep, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_7XX6, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimeStepClassName, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TimecodeProvider, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_VUMF, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TimecodeProviderClassName, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bGenerateDefaultTimecode, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_HXT0, 0x0851);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GenerateDefaultTimecodeFrameRate, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GenerateDefaultTimecodeFrameDelay, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_GM6B, 0x0861);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NumPawnsAllowedToBeSpawnedInAFrame, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_9OBK, 0x0869);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WorldBox, 0x086C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushWire, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_AddWire, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SubtractWire, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SemiSolidWire, 0x087C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_NonSolidWire, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WireBackground, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_ScaleBoxHi, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_VolumeCollision, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BSPCollision, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_OrthoBackground, 0x0894);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_Volume, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushShape, 0x089C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingDistanceFactor, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_PQC6, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameScreenshotSaveDirectory, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionType, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_S0RJ, 0x08B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionDescription, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionGameMode, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MeshLODRange, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_4RCG, 0x08E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraRotationThreshold, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraTranslationThreshold, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PrimitiveProbablyVisibleTime, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxOcclusionPixelsFraction, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_NLI5, 0x08F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResize, 0x08FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResizeWarn, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_VA95, 0x0904);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PendingDroppedNotes, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetClientTicksPerSecond, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DisplayGamma, 0x091C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinDesiredFrameRate, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultSelectedMaterialColor, 0x0924);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColor, 0x0934);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionOutlineColor, 0x0944);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubduedSelectionOutlineColor, 0x0954);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColorOverride, 0x0964);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bIsOverridingSelectedColor, 0x0974);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_CH1C, 0x0975);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_7VVW, 0x0979);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bEnableVisualLogRecordingOnStart, 0x097C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_2GQK, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ScreenSaverInhibitorSemaphore, 0x0984);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_B6MG, 0x0989);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ParticleEventManagerClassPath, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensity, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BSPSelectionHighlightIntensity, 0x09A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensityBillboards, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_GNCD, 0x09AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetDriverDefinitions, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ServerActors, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RuntimeServerActors, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetErrorLogInterval, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_SF16, 0x0C2D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NextWorldContextHandle, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_OYFF, 0x0C4C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngine, 0x0DE0);
		}

		// class UScriptViewportClient : public UObject
		TEST_METHOD(Class__Engine__ScriptViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptViewportClient, UnknownData_NB92, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptViewportClient, 0x0038);
		}

		// class UGameViewportClient : public UScriptViewportClient
		TEST_METHOD(Class__Engine__GameViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_4PEM, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, ViewportConsole, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, DebugProperties, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_KGI7, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, MaxSplitscreenPlayers, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_F5AA, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, World, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, GameInstance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_IFMP, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameViewportClient, 0x0330);
		}

		// class UConsole : public UObject
		TEST_METHOD(Class__Engine__Console)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_JCQO, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, ConsoleTargetPlayer, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_Black, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_White, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_BVY6, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, HistoryBuffer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_W382, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsole, 0x0130);
		}

		// class UControlChannel : public UChannel
		TEST_METHOD(Class__Engine__ControlChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlChannel, UnknownData_3WQV, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlChannel, 0x0088);
		}

		// class UStreamingSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__StreamingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_2969, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMultiplier, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMinTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, MinBulkDataSizeForAsyncLoading, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_FF7W, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, AsyncLoadingTimeLimit, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityAsyncLoadingExtraTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingActorsUpdateTimeLimit, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityLevelStreamingActorsUpdateExtraTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsRegistrationGranularity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingUnregisterComponentsTimeLimit, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsUnregistrationGranularity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_F1XJ, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamingSettings, 0x0070);
		}

		// class UGarbageCollectionSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__GarbageCollectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, TimeBetweenPurgingPendingKillObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, UnknownData_LZ6K, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MinGCClusterSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, NumRetriesBeforeForcingGC, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsNotConsideredByGC, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, SizeOfPermanentObjectPool, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInGame, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInEditor, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGarbageCollectionSettings, 0x0058);
		}

		// class ACullDistanceVolume : public AVolume
		TEST_METHOD(Class__Engine__CullDistanceVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, CullDistances, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, UnknownData_UV0C, 0x0271);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACullDistanceVolume, 0x0278);
		}

		// class UCurveBase : public UObject
		TEST_METHOD(Class__Engine__CurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveBase, UnknownData_LQGB, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveBase, 0x0030);
		}

		// class UCurveEdPresetCurve : public UObject
		TEST_METHOD(Class__Engine__CurveEdPresetCurve)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveEdPresetCurve, 0x0028);
		}

		// class UCurveFloat : public UCurveBase
		TEST_METHOD(Class__Engine__CurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, FloatCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, bIsEventCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, UnknownData_RLTX, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveFloat, 0x00B8);
		}

		// class UCurveLinearColor : public UCurveBase
		TEST_METHOD(Class__Engine__CurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, FloatCurves, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustHue, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustSaturation, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightness, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightnessCurve, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustVibrance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMinAlpha, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMaxAlpha, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, UnknownData_0XEG, 0x024C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColor, 0x0250);
		}

		// class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionClearCoatNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, UnknownData_DCLY, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClearCoatNormalCustomOutput, 0x0058);
		}

		// class UMaterialExpressionConstant3Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant3Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant3Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant3Vector, 0x0050);
		}

		// class UMaterialExpressionLightmassReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmassReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_E95V, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Lightmass, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_7I0V, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmassReplace, 0x0068);
		}

		// class UMaterialExpressionLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightVector, 0x0040);
		}

		// class UMaterialExpressionLinearInterpolate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLinearInterpolate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_I74P, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_NJ6L, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, Alpha, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_5N4W, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstA, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstB, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstAlpha, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLinearInterpolate, 0x0088);
		}

		// class UMaterialExpressionLogarithm2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, UnknownData_13DX, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm2, 0x0058);
		}

		// class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMapARPassthroughCameraUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMapARPassthroughCameraUV, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMapARPassthroughCameraUV, UnknownData_Q3V1, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMapARPassthroughCameraUV, 0x0058);
		}

		// class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialAttributeLayers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ExpressionGUID, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, Input, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_UI89, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, DefaultLayers, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, LayerCallers, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveLayerCallers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_8VTB, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, BlendCallers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveBlendCallers, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, bIsLayerGraphBuilt, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_1AIX, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialAttributeLayers, 0x00E8);
		}

		// class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialProxyReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_Z6JP, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, MaterialProxy, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_ZGOV, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialProxyReplace, 0x0068);
		}

		// class UMaterialExpressionMax : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMax)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_CGFR, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_42W1, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMax, 0x0070);
		}

		// class UMaterialExpressionMin : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_8AIT, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_N3MS, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMin, 0x0070);
		}

		// class UMaterialExpressionMultiply : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMultiply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_XMKB, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_PAG2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMultiply, 0x0070);
		}

		// class UMaterialExpressionNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_XT38, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, FilterWidth, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_NF2K, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Scale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Quality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, NoiseFunction, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_XE72, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_VGB7, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Levels, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMin, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMax, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, LevelScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_NAX8, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, RepeatSize, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNoise, 0x0090);
		}

		// class UMaterialExpressionOneMinus : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionOneMinus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, UnknownData_VIAZ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionOneMinus, 0x0058);
		}

		// class UMaterialExpressionPanner : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPanner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_AV7T, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Time, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_MHEY, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Speed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_AME4, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedX, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedY, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, ConstCoordinate, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, bFractionalPart, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_DP7H, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPanner, 0x0090);
		}

		// class UMaterialExpressionParticleColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleColor, 0x0040);
		}

		// class UMaterialExpressionParticleDirection : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleDirection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleDirection, 0x0040);
		}

		// class UMaterialExpressionParticleMacroUV : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMacroUV)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMacroUV, 0x0040);
		}

		// class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMotionBlurFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMotionBlurFade, 0x0040);
		}

		// class UMaterialExpressionParticlePositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticlePositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticlePositionWS, 0x0040);
		}

		// class UMaterialExpressionParticleRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRadius, 0x0040);
		}

		// class UMaterialExpressionParticleRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRandom, 0x0040);
		}

		// class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRelativeTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRelativeTime, 0x0040);
		}

		// class UMaterialExpressionParticleSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSize, 0x0040);
		}

		// class UMaterialExpressionParticleSpeed : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSpeed)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSpeed, 0x0040);
		}

		// class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParticleSubUV, UnknownData_2OFX, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUV, 0x00D8);
		}

		// class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUVProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUVProperties, 0x0040);
		}

		// class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceCustomData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, DefaultValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, UnknownData_YMNY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, ConstDefaultValue, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, DataIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, UnknownData_A3HP, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceCustomData, 0x0060);
		}

		// class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceFadeAmount)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceFadeAmount, 0x0040);
		}

		// class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceRandom, 0x0040);
		}

		// class UMaterialExpressionPixelDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelDepth)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelDepth, 0x0040);
		}

		// class UMaterialExpressionPixelNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelNormalWS, 0x0040);
		}

		// class UMaterialExpressionPower : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPower)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_SE81, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Exponent, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_HI7Q, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, ConstExponent, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_9I2J, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPower, 0x0070);
		}

		// class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPrecomputedAOMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPrecomputedAOMask, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedLocalBounds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedLocalBounds, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedNormal, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedPosition, 0x0040);
		}

		// class UMaterialExpressionQualitySwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionQualitySwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_VMYI, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Inputs, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_4LZG, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionQualitySwitch, 0x0090);
		}

		// class UMaterialExpressionRound : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, UnknownData_2PB1, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRound, 0x0058);
		}

		// class UParticleModuleRotationRateBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateBase, 0x0030);
		}

		// class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate, 0x0060);
		}

		// class UAnimSequence : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, NumFrames, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_NNEX, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, TrackToSkeletonMapTable, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_3OZK, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, BoneCompressionSettings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, CurveCompressionSettings, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_0S3W, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AdditiveAnimType, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseType, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_ZPLM, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseSeq, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefFrameIndex, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RetargetSource, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, Interpolation, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bEnableRootMotion, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RootMotionRootLock, 0x016E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bForceRootLock, 0x016F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bUseNormalizedRootMotionScale, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bRootMotionSettingsCopiedFromMontage, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_IE7O, 0x0172);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AuthoredSyncMarkers, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_9RD0, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequence, 0x01A0);
		}

		// class UAnimSet : public UObject
		TEST_METHOD(Class__Engine__AnimSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_8LN2, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, TrackBoneNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, LinkupCache, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BoneUseAnimTranslation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceUseMeshTranslation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UseTranslationBoneNames, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceMeshTranslationBoneNames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, PreviewSkelMeshName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BestRatioSkelMeshName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_QGSC, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSet, 0x00F0);
		}

		// class UAnimSingleNodeInstance : public UAnimInstance
		TEST_METHOD(Class__Engine__AnimSingleNodeInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, CurrentAsset, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, PostEvaluateAnimEvent, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSingleNodeInstance, 0x0280);
		}

		// class UAnimStateMachineTypes : public UObject
		TEST_METHOD(Class__Engine__AnimStateMachineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStateMachineTypes, 0x0028);
		}

		// class UAnimStreamable : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimStreamable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, NumFrames, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, Interpolation, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_QRJB, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, RetargetSource, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_4TYA, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, BoneCompressionSettings, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, CurveCompressionSettings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bEnableRootMotion, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, RootMotionRootLock, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bForceRootLock, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bUseNormalizedRootMotionScale, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_QVTL, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStreamable, 0x00E0);
		}

		// class UAssetExportTask : public UObject
		TEST_METHOD(Class__Engine__AssetExportTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Exporter, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bSelected, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bReplaceIdentical, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bPrompt, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bAutomated, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bUseFileArchive, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bWriteEmptyFiles, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, UnknownData_BTAB, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, IgnoreObjectList, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Options, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Errors, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetExportTask, 0x0078);
		}

		// class UAssetManager : public UObject
		TEST_METHOD(Class__Engine__AssetManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_9MGW, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, ObjectReferenceList, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsGlobalAsyncScanEnvironment, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldGuessTypeAndName, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldUseSynchronousLoad, 0x02D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsLoadingFromPakFiles, 0x02D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldAcquireMissingChunksOnLoad, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bOnlyCookProductionAssets, 0x02D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsBulkScanning, 0x02D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsPrimaryAssetDirectoryCurrent, 0x02D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsManagementDatabaseCurrent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bUpdateManagementDatabaseAfterScan, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIncludeOnlyOnDiskAssets, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_5WGH, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, NumberOfSpawnedNotifications, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_KV67, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManager, 0x0438);
		}

		// class UAssetManagerSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AssetManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypesToScan, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, DirectoriesToExclude, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetRules, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, CustomPrimaryAssetRules, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bOnlyCookProductionAssets, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldManagerDetermineTypeAndName, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldGuessTypeAndNameInEditor, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldAcquireMissingChunksOnLoad, 0x007B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, UnknownData_MUMD, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetIdRedirects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypeRedirects, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, AssetPathRedirects, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, MetaDataTagsForAssetRegistry, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManagerSettings, 0x0100);
		}

		// class UBoneMaskFilter : public UObject
		TEST_METHOD(Class__Engine__BoneMaskFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoneMaskFilter, BlendPoses, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoneMaskFilter, 0x0038);
		}

		// class UBookmarkBase : public UObject
		TEST_METHOD(Class__Engine__BookmarkBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookmarkBase, 0x0028);
		}

		// class UBookMark : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, HiddenLevels, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark, 0x0050);
		}

		// class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreviousFrameSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, CurrentFrame, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_CG47, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, PreviousFrame, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_DQFK, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreviousFrameSwitch, 0x0068);
		}

		// class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRayTracingQualitySwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, Normal, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, UnknownData_ORAI, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, RayTraced, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, UnknownData_IMR1, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRayTracingQualitySwitch, 0x0068);
		}

		// class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReflectionVectorWS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, CustomWorldNormal, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_OY44, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_XXEV, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReflectionVectorWS, 0x0058);
		}

		// class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, UnknownData_729O, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, VirtualTextureOutput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, UnknownData_082N, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureReplace, 0x0068);
		}

		// class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_61Y9, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, WorldPosition, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_QG7F, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MipValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_6WXU, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, VirtualTexture, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MaterialType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, bSinglePhysicalSpace, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MipValueMode, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_LHPX, 0x008B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureSample, 0x0090);
		}

		// class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, ParameterName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, ExpressionGUID, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, Group, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, 0x00B0);
		}

		// class UParticleSystem : public UFXSystemAsset
		TEST_METHOD(Class__Engine__ParticleSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_FPS, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_Delta, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTickRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Emitters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, PreviewComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CurveEdSetup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistanceCheckTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVRadius, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistances, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODSettings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, FixedRelativeBoundingBox, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SecondsBeforeInactive, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Delay, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, DelayLow, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SystemUpdateMode, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODMethod, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificantReaction, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, OcclusionBoundsMethod, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_O8GL, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MaxSignificanceLevel, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MinTimeBetweenTicks, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificanceDelay, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVPosition, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CustomOcclusionBounds, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SoloTracking, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, NamedMaterialSlots, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_LOJM, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystem, 0x0110);
		}

		// class UParticleSystemComponent : public UFXSystemComponent
		TEST_METHOD(Class__Engine__ParticleSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, Template, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, EmitterMaterials, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SkelMeshComponents, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_YVHS, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_K63D, 0x041B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, LODMethod, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, RequiredSignificance, 0x0426);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_2UPG, 0x0427);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, InstanceParameters, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleSpawn, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleBurst, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleDeath, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleCollide, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, bOldPositionValid, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_38GM, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OldPosition, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, PartSysVelocity, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTime, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTickRate, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_TEDU, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SecondsBeforeInactive, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_P9QH, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, MaxTimeBeforeForceUpdateTransform, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_9O3F, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, ReplayClips, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_I5KO, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, CustomTimeDilation, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_QXBP, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachParent, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachSocketName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachLocationRule, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachRotationRule, 0x0549);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachScaleRule, 0x054A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_VFTV, 0x054B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnSystemFinished, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_KTZA, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemComponent, 0x0650);
		}

		// class UParticleSystemReplay : public UObject
		TEST_METHOD(Class__Engine__ParticleSystemReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, ClipIDNumber, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, UnknownData_5T5B, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemReplay, 0x0040);
		}

		// class UPathFollowingAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__PathFollowingAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingAgentInterface, 0x0028);
		}

		// class UPawnNoiseEmitterComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PawnNoiseEmitterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_HNKP, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoisePosition, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, NoiseLifetime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseVolume, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseVolume, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseTime, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_VPXE, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnNoiseEmitterComponent, 0x00D8);
		}

		// class UPhysicalAnimationComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicalAnimationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, StrengthMultiplyer, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_T9VX, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, SkeletalMeshComponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_PVBA, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalAnimationComponent, 0x00F0);
		}

		// class UAssetMappingTable : public UObject
		TEST_METHOD(Class__Engine__AssetMappingTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetMappingTable, MappedAssets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetMappingTable, 0x0038);
		}

		// class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__AsyncActionHandleSaveGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, Completed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, UnknownData_VGH4, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, SaveGameObject, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionHandleSaveGame, 0x0068);
		}

		// class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetBase, UnknownData_BES7, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetBase, 0x0078);
		}

		// class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAsset, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAsset, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClass, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClass, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetList, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetList, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClassList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClassList, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClassList, 0x0088);
		}

		// class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionChangePrimaryAssetBundles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionChangePrimaryAssetBundles, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionChangePrimaryAssetBundles, 0x0088);
		}

		// class AAtmosphericFog : public AInfo
		TEST_METHOD(Class__Engine__AtmosphericFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAtmosphericFog, AtmosphericFogComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAtmosphericFog, 0x0230);
		}

		// class UAtmosphericFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AtmosphericFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, SunMultiplier, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, FogMultiplier, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityMultiplier, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityOffset, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceScale, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, AltitudeScale, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceOffset, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, GroundOffset, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, StartDistance, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, SunDiscScale, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultBrightness, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultLightColor, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_JWJ7, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, PrecomputeParams, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, TransmittanceTexture, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, IrradianceTexture, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_UJQO, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtmosphericFogComponent, 0x0300);
		}

		// class UAudioSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AudioSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundClassName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultMediaSoundClassName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundConcurrencyName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultBaseSoundMix, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSoundClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MasterSubmix, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, ReverbSubmix, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, EQSubmix, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSampleRate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_J2M4, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultReverbSendLevel, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MaximumConcurrentStreams, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, GlobalMinPitchScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, GlobalMaxPitchScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_WCGU, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, QualityLevels, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_5T26, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, NumStoppingSources, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, PanningMethod, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MonoChannelUpmixMethod, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_8ZMY, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DialogueFilenameFormat, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_S3XT, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSettings, 0x0148);
		}

		// class UBlendProfile : public UObject
		TEST_METHOD(Class__Engine__BlendProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, UnknownData_99NE, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, OwningSkeleton, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, ProfileEntries, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendProfile, 0x0048);
		}

		// class ABlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__BlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlockingVolume, 0x0260);
		}

		// class UBlueprintExtension : public UObject
		TEST_METHOD(Class__Engine__BlueprintExtension)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintExtension, 0x0028);
		}

		// class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintMapLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintMapLibrary, 0x0028);
		}

		// class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintPathsLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPathsLibrary, 0x0028);
		}

		// class UPlatformGameInstance : public UGameInstance
		TEST_METHOD(Class__Engine__PlatformGameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillDeactivateDelegate, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasReactivatedDelegate, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillEnterBackgroundDelegate, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasEnteredForegroundDelegate, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillTerminateDelegate, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationShouldUnloadResourcesDelegate, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedStartupArgumentsDelegate, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForRemoteNotificationsDelegate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForUserNotificationsDelegate, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationFailedToRegisterForRemoteNotificationsDelegate, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedRemoteNotificationDelegate, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedLocalNotificationDelegate, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedScreenOrientationChangedNotificationDelegate, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformGameInstance, 0x0268);
		}

		// class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintPlatformLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPlatformLibrary, 0x0028);
		}

		// class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintSetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintSetLibrary, 0x0028);
		}

		// class UPoseAsset : public UAnimationAsset
		TEST_METHOD(Class__Engine__PoseAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, PoseContainer, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, bAdditivePose, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, UnknownData_A9EI, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, BasePoseIndex, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, RetargetSource, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseAsset, 0x0120);
		}

		// class AAudioVolume : public AVolume
		TEST_METHOD(Class__Engine__AudioVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Priority, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_KRU2, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Settings, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, AmbientZoneSettings, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_9FOU, 0x02AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAudioVolume, 0x02B0);
		}

		// class UAutoDestroySubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Engine__AutoDestroySubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoDestroySubsystem, UnknownData_0TYS, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoDestroySubsystem, ActorsToPoll, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutoDestroySubsystem, 0x0048);
		}

		// class UInputDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__InputDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputDelegateBinding, 0x0028);
		}

		// class UInputActionDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputActionDelegateBinding, InputActionDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputActionDelegateBinding, 0x0038);
		}

		// class ULayer : public UObject
		TEST_METHOD(Class__Engine__Layer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, UnknownData_XAPG, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, ActorStats, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULayer, 0x0048);
		}

		// class ULevelPartitionInterface : public UInterface
		TEST_METHOD(Class__Engine__LevelPartitionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelPartitionInterface, 0x0028);
		}

		// class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDragScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScaleRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDragScaleOverLife, 0x0070);
		}

		// class UParticleModuleAttractorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAttractorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorBase, 0x0030);
		}

		// class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint0, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Range, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Strength, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorLine, 0x00A8);
		}

		// class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorParticle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Range, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_4F9P, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Strength, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_ATMX, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, SelectionMethod, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_P75N, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_2L89, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, LastSelIndex, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorParticle, 0x00B0);
		}

		// class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Range, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Strength, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, UnknownData_6M33, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPoint, 0x00E0);
		}

		// class UBookMark2D : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Zoom2D, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Location, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, UnknownData_E5NO, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark2D, 0x0038);
		}

		// class UBoxComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__BoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, BoxExtent, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, LineThickness, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, UnknownData_QZOC, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxComponent, 0x0420);
		}

		// class AReflectionCapture : public AActor
		TEST_METHOD(Class__Engine__ReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AReflectionCapture, CaptureComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AReflectionCapture, 0x0230);
		}

		// class ABoxReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__BoxReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABoxReflectionCapture, 0x0230);
		}

		// class UFont : public UObject
		TEST_METHOD(Class__Engine__Font)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_KRAD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, FontCacheType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_D0IK, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Characters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Textures, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, IsRemapped, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, EmScale, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Ascent, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Descent, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Leading, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Kerning, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ImportOptions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, NumCharacters, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_RRK4, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, MaxCharHeight, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ScalingFactor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontSize, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, CompositeFont, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_9O95, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFont, 0x01D0);
		}

		// class UFontFace : public UObject
		TEST_METHOD(Class__Engine__FontFace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_YJM2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, SourceFilename, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, Hinting, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LoadingPolicy, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LayoutMethod, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_ME6G, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFace, 0x0058);
		}

		// class UForceFeedbackEffect : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, ChannelDetails, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, Duration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, UnknownData_5LOX, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackEffect, 0x0040);
		}

		// class UGameEngine : public UEngine
		TEST_METHOD(Class__Engine__GameEngine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, MaxDeltaTime, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, ServerFlushLogInterval, 0x0DE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, GameInstance, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, UnknownData_YY7C, 0x0DF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEngine, 0x0E30);
		}

		// class AGameNetworkManager : public AInfo
		TEST_METHOD(Class__Engine__GameNetworkManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPacketLossThreshold, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, SeverePacketLossThreshold, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPingThreshold, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, SeverePingThreshold, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, AdjustedNetSpeed, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, LastNetSpeedUpdateTime, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, TotalNetBandwidth, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MinDynamicBandwidth, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxDynamicBandwidth, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_KTJE, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyRxCheatTime, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyTxCheatTime, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForRxStandby, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForTxStandby, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentForBadPing, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, JoinInProgressStandbyWaitTime, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MoveRepSize, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXPOSITIONERRORSQUARED, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXNEARZEROVELOCITYSQUARED, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, CLIENTADJUSTUPDATECOST, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXCLIENTUPDATEINTERVAL, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxClientForcedUpdateDuration, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ServerForcedUpdateHitchThreshold, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ServerForcedUpdateHitchCooldown, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxMoveDeltaTime, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxClientSmoothingDeltaTime, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTime, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeThrottled, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeStationary, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleAtNetSpeed, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleOverPlayerCount, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientAuthorativePosition, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_UWLJ, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientErrorUpdateRateLimit, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetCamUpdateDeltaTime, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetCamUpdatePositionLimit, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyDetection, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyResolution, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_LNZV, 0x02B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMaxTimeMargin, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMinTimeMargin, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyResolutionRate, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyDriftAllowance, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyForceCorrectionsDuringResolution, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bUseDistanceBasedRelevancy, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_P3EG, 0x02CA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameNetworkManager, 0x02D8);
		}

		// class UGameplayStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__GameplayStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayStatics, 0x0028);
		}

		// class AGameSession : public AInfo
		TEST_METHOD(Class__Engine__GameSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSpectators, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPlayers, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPartySize, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSplitscreensPerConnection, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, bRequiresPushToTalk, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, UnknownData_G73D, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, SessionName, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameSession, 0x0240);
		}

		// class ASpotLight : public ALight
		TEST_METHOD(Class__Engine__SpotLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpotLight, SpotLightComponent, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpotLight, 0x0240);
		}

		// class AGeneratedMeshAreaLight : public ASpotLight
		TEST_METHOD(Class__Engine__GeneratedMeshAreaLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeneratedMeshAreaLight, 0x0240);
		}

		// class UHapticFeedbackEffect_Base : public UObject
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Base)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Base, 0x0028);
		}

		// class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Buffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, Amplitudes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, SampleRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, UnknownData_26BC, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Buffer, 0x0068);
		}

		// class UInheritableComponentHandler : public UObject
		TEST_METHOD(Class__Engine__InheritableComponentHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, Records, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, UnnecessaryComponents, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInheritableComponentHandler, 0x0048);
		}

		// class UMaterialBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MaterialBillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialBillboardComponent, Elements, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialBillboardComponent, 0x0400);
		}

		// class UButtonStyleAsset : public UObject
		TEST_METHOD(Class__Engine__ButtonStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonStyleAsset, ButtonStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonStyleAsset, 0x02A0);
		}

		// class UCameraAnim : public UObject
		TEST_METHOD(Class__Engine__CameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, CameraInterpGroup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, AnimLength, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BoundingBox, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_GATW, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BaseFOV, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_COL9, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessSettings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessBlendWeight, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_YDDR, 0x05A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnim, 0x05B0);
		}

		// class UCameraAnimInst : public UObject
		TEST_METHOD(Class__Engine__CameraAnimInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, CamAnim, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, InterpGroupInst, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_GTW1, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlayRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_LFU2, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveTrack, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveInst, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlaySpace, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_VKSQ, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimInst, 0x0110);
		}

		// class ACameraBlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__CameraBlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraBlockingVolume, 0x0260);
		}

		// class UCameraModifier : public UObject
		TEST_METHOD(Class__Engine__CameraModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_RJLA, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Priority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_RH61, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, CameraOwner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaInTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaOutTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Alpha, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_IEH2, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier, 0x0048);
		}

		// class UCameraModifier_CameraShake : public UCameraModifier
		TEST_METHOD(Class__Engine__CameraModifier_CameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ActiveShakes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ExpiredPooledShakesMap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, SplitScreenShakeScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, UnknownData_F1VY, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier_CameraShake, 0x00B0);
		}

		// class UCameraShake : public UObject
		TEST_METHOD(Class__Engine__CameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_F95K, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationDuration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationBlendInTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationBlendOutTime, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, RotOscillation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, LocOscillation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, FOVOscillation, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimPlayRate, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimScale, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimBlendInTime, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimBlendOutTime, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, RandomAnimSegmentDuration, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, Anim, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_71Z6, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, CameraOwner, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_ZSE5, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, ShakeScale, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillatorTimeRemaining, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimInst, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_SU0U, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShake, 0x0160);
		}

		// class ACameraShakeSourceActor : public AActor
		TEST_METHOD(Class__Engine__CameraShakeSourceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraShakeSourceActor, CameraShakeSourceComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraShakeSourceActor, 0x0230);
		}

		// class UCameraShakeSourceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__CameraShakeSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, Attenuation, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_UXVT, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, InnerAttenuationRadius, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, OuterAttenuationRadius, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_T5CC, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, CameraShake, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, bAutoPlay, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_U2KR, 0x0209);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShakeSourceComponent, 0x0210);
		}

		// class UCanvas : public UObject
		TEST_METHOD(Class__Engine__Canvas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_OBD0, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_S9CZ, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ColorModulate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DefaultTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, GradientTexture0, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ReporterGraph, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_9LKY, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvas, 0x02C0);
		}

		// class UTextureRenderTarget : public UTexture
		TEST_METHOD(Class__Engine__TextureRenderTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, TargetGamma, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, UnknownData_7HGJ, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget, 0x00C0);
		}

		// class UTextureRenderTarget2D : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeX, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeY, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, ClearColor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressX, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressY, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, RenderTargetFormat, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsSamplerFilter, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsAddressU, 0x00DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsAddressV, 0x00DF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, OverrideFormat, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, UnknownData_730F, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget2D, 0x00E8);
		}

		// class UCanvasRenderTarget2D : public UTextureRenderTarget2D
		TEST_METHOD(Class__Engine__CanvasRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, OnCanvasRenderTargetUpdate, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, World, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, bShouldClearRenderTargetOnReceiveUpdate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, UnknownData_QHSX, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasRenderTarget2D, 0x0108);
		}

		// class UCapsuleComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__CapsuleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, UnknownData_P3CU, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleRadius, 0x040C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCapsuleComponent, 0x0410);
		}

		// class UChaosPhysicalMaterial : public UObject
		TEST_METHOD(Class__Engine__ChaosPhysicalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, Friction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, StaticFriction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, Restitution, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, LinearEtherDrag, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, AngularEtherDrag, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, SleepingLinearVelocityThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, SleepingAngularVelocityThreshold, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, UnknownData_PONS, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosPhysicalMaterial, 0x0048);
		}

		// class UCurveLinearColorAtlas : public UTexture2D
		TEST_METHOD(Class__Engine__CurveLinearColorAtlas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, TextureSize, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, UnknownData_PGDL, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, GradientCurves, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColorAtlas, 0x0100);
		}

		// class UCurveSourceInterface : public UInterface
		TEST_METHOD(Class__Engine__CurveSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveSourceInterface, 0x0028);
		}

		// class URig : public UObject
		TEST_METHOD(Class__Engine__Rig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, UnknownData_F9GG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, TransformBases, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, Nodes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URig, 0x0050);
		}

		// class URotatingMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__RotatingMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, RotationRate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, PivotTranslation, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, UnknownData_DP2N, 0x0109);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URotatingMovementComponent, 0x0110);
		}

		// class URuntimeOptionsBase : public UObject
		TEST_METHOD(Class__Engine__RuntimeOptionsBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeOptionsBase, UnknownData_A1UI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeOptionsBase, 0x0038);
		}

		// class URuntimeVirtualTexture : public UObject
		TEST_METHOD(Class__Engine__RuntimeVirtualTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, MaterialType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bCompressTextures, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bEnable, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bClearTextures, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bSinglePhysicalSpace, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bPrivateSpace, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bEnableScalability, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_OW0A, 0x002F);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, Size, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileCount, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileBorderSize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, StreamLowMips, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_6PF1, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, StreamingTexture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bEnableCompressCrunch, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_IMD6, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, RemoveLowMips, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_5A4D, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTexture, 0x00A0);
		}

		// class URuntimeVirtualTextureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, VirtualTexture, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bUseStreamingLowMipsInEditor, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_YTRE, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, BoundsSourceActor, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_VAXN, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTextureComponent, 0x0210);
		}

		// class URuntimeVirtualTextureStreamingProxy : public UTexture2D
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureStreamingProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureStreamingProxy, Settings, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureStreamingProxy, bSinglePhysicalSpace, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureStreamingProxy, UnknownData_AAIA, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureStreamingProxy, BuildHash, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureStreamingProxy, UnknownData_BVZK, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTextureStreamingProxy, 0x0100);
		}

		// class ARuntimeVirtualTextureVolume : public AActor
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARuntimeVirtualTextureVolume, VirtualTextureComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARuntimeVirtualTextureVolume, 0x0230);
		}

		// class URVOAvoidanceInterface : public UInterface
		TEST_METHOD(Class__Engine__RVOAvoidanceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URVOAvoidanceInterface, 0x0028);
		}

		// class UScene : public UObject
		TEST_METHOD(Class__Engine__Scene)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScene, 0x0028);
		}

		// class ASceneCapture : public AActor
		TEST_METHOD(Class__Engine__SceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, MeshComp, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, SceneComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture, 0x0238);
		}

		// class ASceneCapture2D : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCapture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture2D, CaptureComponent2D, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture2D, 0x0240);
		}

		// class USceneCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, PrimitiveRenderMode, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, CaptureSource, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bAlwaysPersistRenderingState, 0x01F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_XU59, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenComponents, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenActors, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyComponents, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyActors, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, LODDistanceFactor, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, MaxViewDistanceOverride, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, CaptureSortPriority, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bUseRayTracingIfEnabled, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_6T2I, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowFlagSettings, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_75B9, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ProfilingEventName, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_E7MV, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent, 0x0288);
		}

		// class USceneCaptureComponent2D : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_OIQV, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, FOVAngle, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, OrthoWidth, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_SYNK, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, TextureTarget, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CompositeMode, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_3LCF, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessSettings, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessBlendWeight, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_FCSU, 0x07F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomNearClippingPlane, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bUseCustomProjectionMatrix, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_8Y2A, 0x07FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomProjectionMatrix, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bEnableClipPlane, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_DH7X, 0x0841);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneBase, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneNormal, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_6TA6, 0x085D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bDisableFlipCopyGLES, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_GEZX, 0x0861);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent2D, 0x0880);
		}

		// class USceneCaptureComponentCube : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponentCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTarget, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, bCaptureRotation, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_WUKM, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetLeft, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetRight, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetODS, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, IPD, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_QL8S, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponentCube, 0x02C0);
		}

		// class ASceneCaptureCube : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCaptureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCaptureCube, CaptureComponentCube, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCaptureCube, 0x0240);
		}

		// class USCS_Node : public UObject
		TEST_METHOD(Class__Engine__SCS_Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, CookedComponentInstancingData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, AttachToName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOrVariableName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOwnerClassName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, bIsParentComponentNative, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, UnknownData_SCOV, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ChildNodes, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, MetaDataArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, VariableGuid, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, InternalVariableName, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USCS_Node, 0x00D8);
		}

		// class USelection : public UObject
		TEST_METHOD(Class__Engine__Selection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelection, UnknownData_8ZD2, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelection, 0x00A0);
		}

		// class AServerStatReplicator : public AInfo
		TEST_METHOD(Class__Engine__ServerStatReplicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bUpdateStatNet, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bOverwriteClientStats, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_CVDS, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, Channels, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRate, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRate, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_U2DN, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, MaxPacketOverhead, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMax, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMin, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientAvg, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMax, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMin, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientAvg, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMax, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMin, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientAvg, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMax, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMin, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientAvg, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetNumClients, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPackets, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPackets, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InBunches, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutBunches, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutLoss, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InLoss, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesSent, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesRecv, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsSent, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsRecv, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentInVoice, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentOutVoice, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActorChannels, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumConsideredActors, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PrioritizedActors, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantActors, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantDeletedActors, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActorAttempts, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActors, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActors, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetActors, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumDormantActors, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumInitiallyDormantActors, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsAckd, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsPending, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsUnAckd, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, ObjPathBytes, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDOutRate, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDInRate, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetSaturated, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_80W9, 0x02EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AServerStatReplicator, 0x02F0);
		}

		// class UShadowMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__ShadowMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, ShadowmapFlags, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, UnknownData_75SU, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShadowMapTexture2D, 0x00F0);
		}

		// class USimpleConstructionScript : public UObject
		TEST_METHOD(Class__Engine__SimpleConstructionScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, RootNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, AllNodes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, DefaultSceneRootNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, UnknownData_1FEW, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleConstructionScript, 0x00A0);
		}

		// class UPlatformInterfaceBase : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceBase, AllDelegates, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceBase, 0x0038);
		}

		// class UCloudStorageBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__CloudStorageBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, LocalCloudFiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, UnknownData_9THG, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCloudStorageBase, 0x0050);
		}

		// class UDecalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__DecalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalMaterial, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, SortOrder, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeScreenSize, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeStartDelay, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeDuration, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInDuration, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInStartDelay, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_4AJA, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalSize, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_SEPG, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecalComponent, 0x0230);
		}

		// class ADefaultPawn : public APawn
		TEST_METHOD(Class__Engine__DefaultPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseTurnRate, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseLookUpRate, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MovementComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, CollisionComponent, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MeshComponent, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, UnknownData_VJBK, 0x02A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPawn, 0x02B0);
		}

		// class APhysicsVolume : public AVolume
		TEST_METHOD(Class__Engine__PhysicsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, TerminalVelocity, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, Priority, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, FluidFriction, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, UnknownData_9659, 0x026D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsVolume, 0x0270);
		}

		// class ADefaultPhysicsVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__DefaultPhysicsVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPhysicsVolume, 0x0270);
		}

		// class UDemoNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__DemoNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetConnection, UnknownData_BR03, 0x1A30);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetConnection, 0x1AA0);
		}

		// class UDemoNetDriver : public UNetDriver
		TEST_METHOD(Class__Engine__DemoNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_DAZG, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, RollbackNetStartupActors, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_RMJD, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, CheckpointSaveMaxMSPerFrame, 0x0C54);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_C9KT, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, MulticastRecordOptions, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_GTF0, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, bIsLocalReplay, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_INT2, 0x0CE9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, SpectatorControllers, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_X1A8, 0x0D00);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetDriver, 0x1120);
		}

		// class UPendingNetGame : public UObject
		TEST_METHOD(Class__Engine__PendingNetGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_Z9SC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, NetDriver, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, DemoNetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_EXG8, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPendingNetGame, 0x00C0);
		}

		// class UDemoPendingNetGame : public UPendingNetGame
		TEST_METHOD(Class__Engine__DemoPendingNetGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoPendingNetGame, 0x00C0);
		}

		// class UDestructibleInterface : public UInterface
		TEST_METHOD(Class__Engine__DestructibleInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleInterface, 0x0028);
		}

		// class UMaterialExpressionTemporalSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTemporalSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Index, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_V49S, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Seed, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_AM6F, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstSeed, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_90A0, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTemporalSobol, 0x0078);
		}

		// class UMaterialExpressionTextureCoordinate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureCoordinate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, CoordinateIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UTiling, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, VTiling, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UnknownData_BXLG, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureCoordinate, 0x0050);
		}

		// class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObject, 0x0050);
		}

		// class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObjectParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObjectParameter, 0x00F0);
		}

		// class UMaterialExpressionTextureProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, TextureObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_9XNL, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, Property, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_CIDZ, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureProperty, 0x0058);
		}

		// class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2DArray)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2DArray, 0x00F0);
		}

		// class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterCube)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterCube, 0x00F0);
		}

		// class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameterSubUV, UnknownData_8V62, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterSubUV, 0x00F8);
		}

		// class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterVolume, 0x00F0);
		}

		// class UPhysicalMaterial : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Friction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, FrictionCombineMode, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideFrictionCombineMode, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_KBJZ, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Restitution, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RestitutionCombineMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideRestitutionCombineMode, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_AJGC, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Density, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RaiseMassToPower, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, DestructibleDamageThresholdScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_NV4G, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, PhysicalMaterialProperty, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SurfaceType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_SPCK, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, TireFrictionScale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, TireFrictionScales, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_7BUU, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterial, 0x0080);
		}

		// class UPhysicalMaterialMask : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterialMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, UVChannelIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, AddressX, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, AddressY, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, UnknownData_3IDN, 0x002E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialMask, 0x0030);
		}

		// class UPhysicalMaterialPropertyBase : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterialPropertyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialPropertyBase, 0x0028);
		}

		// class UPhysicsAsset : public UObject
		TEST_METHOD(Class__Engine__PhysicsAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_GSA8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BoundsBodies, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SkeletalBodySetups, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ConstraintSetup, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SolverIterations, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_3S0G, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ThumbnailInfo, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BodySetup, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsAsset, 0x0138);
		}

		// class USoundGroups : public UObject
		TEST_METHOD(Class__Engine__SoundGroups)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, SoundGroupProfiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, UnknownData_AT5C, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundGroups, 0x0088);
		}

		// class USoundMix : public UObject
		TEST_METHOD(Class__Engine__SoundMix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, UnknownData_2F97, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQPriority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, SoundClassEffects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, InitialDelay, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeInTime, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, Duration, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeOutTime, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundMix, 0x0090);
		}

		// class USoundNode : public UObject
		TEST_METHOD(Class__Engine__SoundNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, ChildNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, UnknownData_28LP, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNode, 0x0048);
		}

		// class USoundNodeAssetReferencer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAssetReferencer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAssetReferencer, 0x0048);
		}

		// class USoundNodeAttenuation : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationOverrides, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, UnknownData_T8ZO, 0x03F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAttenuation, 0x03F8);
		}

		// class USoundNodeBranch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeBranch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeBranch, BoolParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeBranch, 0x0050);
		}

		// class USoundNodeConcatenator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeConcatenator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeConcatenator, InputVolume, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeConcatenator, 0x0058);
		}

		// class USoundNodeDelay : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMax, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDelay, 0x0050);
		}

		// class UCollisionProfile : public UDeveloperSettings
		TEST_METHOD(Class__Engine__CollisionProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, Profiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, DefaultChannelResponses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, EditProfiles, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, ProfileRedirects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, CollisionChannelRedirects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, UnknownData_L8JK, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollisionProfile, 0x0158);
		}

		// class UCommandlet : public UObject
		TEST_METHOD(Class__Engine__Commandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpWebLink, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamDescriptions, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, UnknownData_ROKV, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCommandlet, 0x0080);
		}

		// class UInterpToMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__InterpToMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, Duration, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_1VJ2, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, bSweep, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, TeleportType, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, BehaviourType, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, bCheckIfStillInWorld, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_RUZI, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToReverse, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToStop, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitBeginDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitEndDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnResetDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationTimeStep, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationIterations, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, ControlPoints, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_GMET, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpToMovementComponent, 0x0190);
		}

		// class UInterpTrackAnimControl : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, SlotName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, AnimSeqs, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, UnknownData_0QUY, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAnimControl, 0x00B0);
		}

		// class UInterpTrackAudioMaster : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAudioMaster, 0x0090);
		}

		// class UInterpTrackBoolProp : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, BoolTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, PropertyName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackBoolProp, 0x0088);
		}

		// class UInterpTrackColorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorProp, 0x0098);
		}

		// class UInterpTrackColorScale : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorScale, 0x0090);
		}

		// class UInterpTrackDirector : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, CutTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, UnknownData_6YWQ, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackDirector, 0x0088);
		}

		// class UInterpTrackEvent : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, EventTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, UnknownData_KZ39, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackEvent, 0x0088);
		}

		// class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVirtualTextureFeatureSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, No, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, UnknownData_I9Y1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, Yes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, UnknownData_UKL3, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVirtualTextureFeatureSwitch, 0x0068);
		}

		// class UMaterialExpressionWorldPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionWorldPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, WorldPositionShaderOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, UnknownData_PW6D, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionWorldPosition, 0x0048);
		}

		// class UMaterialFunctionInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialFunctionInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, MaterialFunctionUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, UnknownData_R581, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInterface, 0x0040);
		}

		// class UMaterialFunction : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, Description, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, UnknownData_UYOQ, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunction, 0x0058);
		}

		// class UPreviewMeshCollection : public UDataAsset
		TEST_METHOD(Class__Engine__PreviewMeshCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, UnknownData_CCCU, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, SkeletalMeshes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewMeshCollection, 0x0050);
		}

		// class USkeletalMesh : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__SkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_QB9N, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Skeleton, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ImportedBounds, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ExtendedBounds, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PositiveBoundsExtension, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NegativeBoundsExtension, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Materials, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorTable, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, LODInfo, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_IDZF, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MinLOD, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, DisableBelowMinLodStripping, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorAxis, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorFlipAxis, 0x013E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, BodySetup, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PhysicsAsset, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ShadowPhysicsAsset, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NodeMappingData, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_XRIF, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MorphTargets, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_BQ7G, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PostProcessAnimBlueprint, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MeshClothingAssets, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SamplingInfo, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, AssetUserData, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_1KWN, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Sockets, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_8UFB, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkinWeightProfiles, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMesh, 0x0388);
		}

		// class ASkeletalMeshActor : public AActor
		TEST_METHOD(Class__Engine__SkeletalMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_6BKF, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_NQOJ, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, SkeletalMeshComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMesh, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedPhysAsset, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial0, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_XWUI, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkeletalMeshActor, 0x02B0);
		}

		// class USkeletalMeshEditorData : public UObject
		TEST_METHOD(Class__Engine__SkeletalMeshEditorData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshEditorData, 0x0028);
		}

		// class USlateBrushAsset : public UObject
		TEST_METHOD(Class__Engine__SlateBrushAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateBrushAsset, Brush, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBrushAsset, 0x00B0);
		}

		// class USlateTextureAtlasInterface : public UInterface
		TEST_METHOD(Class__Engine__SlateTextureAtlasInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTextureAtlasInterface, 0x0028);
		}

		// class USmokeTestCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__SmokeTestCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmokeTestCommandlet, 0x0080);
		}

		// class UStereoLayerShapeEquirect : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeEquirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftUVRect, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightUVRect, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightBias, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeEquirect, 0x0070);
		}

		// class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__StereoLayerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerFunctionLibrary, 0x0028);
		}

		// class UStringTable : public UObject
		TEST_METHOD(Class__Engine__StringTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStringTable, UnknownData_IX9S, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStringTable, 0x0040);
		}

		// class UCurveVector : public UCurveBase
		TEST_METHOD(Class__Engine__CurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveVector, FloatCurves, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveVector, 0x01B0);
		}

		// class UDamageType : public UObject
		TEST_METHOD(Class__Engine__DamageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_YNLB, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageImpulse, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleImpulse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleDamageSpreadScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageFalloff, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_C6RM, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType, 0x0040);
		}

		// class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DataTableFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTableFunctionLibrary, 0x0028);
		}

		// class ADebugCameraController : public APlayerController
		TEST_METHOD(Class__Engine__DebugCameraController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_A1XE, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, DrawFrustum, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedActor, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedComponent, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedHitPoint, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, OriginalControllerRef, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, OriginalPlayer, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SpeedScale, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialMaxSpeed, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialAccel, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialDecel, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_6UCV, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraController, 0x0678);
		}

		// class UInputTouchDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputTouchDelegateBinding, InputTouchDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputTouchDelegateBinding, 0x0038);
		}

		// class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisKeyDelegateBinding, InputAxisKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisKeyDelegateBinding, 0x0038);
		}

		// class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
		TEST_METHOD(Class__Engine__InputVectorAxisDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputVectorAxisDelegateBinding, 0x0038);
		}

		// class UInterface_AssetUserData : public UInterface
		TEST_METHOD(Class__Engine__Interface_AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_AssetUserData, 0x0028);
		}

		// class UInterface_CollisionDataProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_CollisionDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_CollisionDataProvider, 0x0028);
		}

		// class UInterface_PostProcessVolume : public UInterface
		TEST_METHOD(Class__Engine__Interface_PostProcessVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PostProcessVolume, 0x0028);
		}

		// class UInterface_PreviewMeshProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_PreviewMeshProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PreviewMeshProvider, 0x0028);
		}

		// class UInterpCurveEdSetup : public UObject
		TEST_METHOD(Class__Engine__InterpCurveEdSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, Tabs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, ActiveTab, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, UnknownData_BUSK, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpCurveEdSetup, 0x0040);
		}

		// class UInterpData : public UObject
		TEST_METHOD(Class__Engine__InterpData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, PathBuildTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpGroups, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CurveEdSetup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, UnknownData_U4YU, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CachedDirectorGroup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, AllEventNames, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpData, 0x0070);
		}

		// class UInterpFilter : public UObject
		TEST_METHOD(Class__Engine__InterpFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpFilter, Caption, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter, 0x0038);
		}

		// class UInterpFilter_Classes : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Classes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Classes, 0x0038);
		}

		// class UInterpFilter_Custom : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Custom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Custom, 0x0038);
		}

		// class UInterpGroup : public UObject
		TEST_METHOD(Class__Engine__InterpGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_ICQ3, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, InterpTracks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_GOKG, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroup, 0x0050);
		}

		// class UInterpGroupCamera : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CameraAnimInst, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CompressTolerance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, UnknownData_BHVR, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupCamera, 0x0060);
		}

		// class UInterpGroupDirector : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupDirector, 0x0050);
		}

		// class UInterpGroupInst : public UObject
		TEST_METHOD(Class__Engine__InterpGroupInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, Group, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, GroupActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, TrackInst, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInst, 0x0048);
		}

		// class UInterpGroupInstCamera : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstCamera)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstCamera, 0x0048);
		}

		// class UInterpGroupInstDirector : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstDirector, 0x0048);
		}

		// class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, bUseCustomPrimitiveData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, PrimitiveDataIndex, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, UnknownData_IWFD, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorParameter, 0x0070);
		}

		// class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
		TEST_METHOD(Class__Engine__MaterialExpressionChannelMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, MaskChannel, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, UnknownData_UC1B, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, Input, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, UnknownData_WP1P, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionChannelMaskParameter, 0x0088);
		}

		// class UMaterialExpressionClamp : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_MFTW, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Min, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_5XGH, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Max, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_NASU, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, ClampMode, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_04DK, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MinDefault, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MaxDefault, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClamp, 0x0088);
		}

		// class UMaterialExpressionCollectionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCollectionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, Collection, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCollectionParameter, 0x0060);
		}

		// class UMaterialExpressionComment : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, Text, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, CommentColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, FontSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, UnknownData_YXPM, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComment, 0x0070);
		}

		// class UMaterialExpressionComponentMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComponentMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_X13S, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_ZJ6T, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComponentMask, 0x0058);
		}

		// class UMaterialExpressionConstant : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, UnknownData_8R80, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant, 0x0048);
		}

		// class UMaterialExpressionConstant2Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant2Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, G, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant2Vector, 0x0048);
		}

		// class UMaterialExpressionConstant4Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant4Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant4Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant4Vector, 0x0050);
		}

		// class UMaterialExpressionConstantBiasScale : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstantBiasScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_8E15, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Bias, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_TW4N, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstantBiasScale, 0x0060);
		}

		// class UMaterialExpressionCosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, UnknownData_T4AR, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCosine, 0x0058);
		}

		// class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
		TEST_METHOD(Class__Engine__MaterialExpressionCurveAtlasRowParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Curve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Atlas, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, InputTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, UnknownData_0XI6, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCurveAtlasRowParameter, 0x0088);
		}

		// class UMaterialExpressionCustom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Code, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, OutputType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, UnknownData_DH0R, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Inputs, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, AdditionalDefines, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, IncludeFilePaths, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustom, 0x0098);
		}

		// class UMaterialExpressionDDY : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDY)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, UnknownData_W7VU, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDY, 0x0058);
		}

		// class UMaterialExpressionDecalDerivative : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalDerivative)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalDerivative, 0x0040);
		}

		// class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalLifetimeOpacity)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalLifetimeOpacity, 0x0040);
		}

		// class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalMipmapLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, TextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_P3RJ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstWidth, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstHeight, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_SLH7, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalMipmapLevel, 0x0060);
		}

		// class UMaterialExpressionDeltaTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDeltaTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeltaTime, 0x0040);
		}

		// class UMaterialExpressionDepthFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, InOpacity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_TMAL, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_6432, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, OpacityDefault, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistanceDefault, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthFade, 0x0070);
		}

		// class UMaterialExpressionDistance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_PLMZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_0K0I, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistance, 0x0068);
		}

		// class UMaterialExpressionDistanceCullFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceCullFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceCullFade, 0x0040);
		}

		// class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceToNearestSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, UnknownData_X30D, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceToNearestSurface, 0x0058);
		}

		// class UMaterialExpressionDivide : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDivide)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_X2V5, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_QNPK, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDivide, 0x0070);
		}

		// class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFeatureLevelSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, UnknownData_RB6F, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Inputs, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, UnknownData_BJFE, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFeatureLevelSwitch, 0x00A8);
		}

		// class UMaterialExpressionFrac : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFrac)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, UnknownData_PE0L, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFrac, 0x0058);
		}

		// class USoundNodeModulatorContinuous : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulatorContinuous)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, PitchModulationParams, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, VolumeModulationParams, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulatorContinuous, 0x0088);
		}

		// class USoundNodeOscillator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_IQTK, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMin, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMax, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMin, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMax, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMin, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMax, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMin, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMax, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_51M0, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeOscillator, 0x0070);
		}

		// class USoundNodeDistanceCrossFade : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDistanceCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDistanceCrossFade, CrossFadeInput, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDistanceCrossFade, 0x0058);
		}

		// class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
		TEST_METHOD(Class__Engine__SoundNodeParamCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeParamCrossFade, ParamName, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeParamCrossFade, 0x0060);
		}

		// class USoundNodeQualityLevel : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeQualityLevel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeQualityLevel, 0x0048);
		}

		// class USoundNodeRandom : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeRandom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, Weights, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, HasBeenUsed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, NumRandomUsed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, PreselectAtLevelLoad, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_USV8, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeRandom, 0x0078);
		}

		// class USoundNodeSoundClass : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, SoundClassOverride, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, UnknownData_PMY3, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSoundClass, 0x0058);
		}

		// class USoundNodeSwitch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSwitch, IntParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSwitch, 0x0050);
		}

		// class USoundNodeWaveParam : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeWaveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWaveParam, WaveParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWaveParam, 0x0050);
		}

		// class USoundNodeWavePlayer : public USoundNodeAssetReferencer
		TEST_METHOD(Class__Engine__SoundNodeWavePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWaveAssetPtr, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWave, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, UnknownData_FZNN, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWavePlayer, 0x0080);
		}

		// class USoundSourceBus : public USoundWave
		TEST_METHOD(Class__Engine__SoundSourceBus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusChannels, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_U94R, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusDuration, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_FXGB, 0x0319);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSourceBus, 0x0328);
		}

		// class USoundSubmixBase : public UObject
		TEST_METHOD(Class__Engine__SoundSubmixBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmixBase, ChildSubmixes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmixBase, 0x0038);
		}

		// class USoundSubmixWithParentBase : public USoundSubmixBase
		TEST_METHOD(Class__Engine__SoundSubmixWithParentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmixWithParentBase, ParentSubmix, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmixWithParentBase, 0x0040);
		}

		// class USoundSubmix : public USoundSubmixWithParentBase
		TEST_METHOD(Class__Engine__SoundSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_14A1, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, SubmixEffectChain, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, AmbisonicsPluginSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerAttackTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerReleaseTime, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OutputVolume, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_6Z96, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OnSubmixRecordedFileDone, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_2UJB, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmix, 0x0088);
		}

		// class USoundfieldSubmix : public USoundSubmixWithParentBase
		TEST_METHOD(Class__Engine__SoundfieldSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, SoundfieldEncodingFormat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, EncodingSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, SoundfieldEffectChain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, EncodingSettingsClass, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldSubmix, 0x0068);
		}

		// class UEndpointSubmix : public USoundSubmixBase
		TEST_METHOD(Class__Engine__EndpointSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointSettingsClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointSettings, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndpointSubmix, 0x0050);
		}

		// class USoundfieldEndpointSubmix : public USoundSubmixBase
		TEST_METHOD(Class__Engine__SoundfieldEndpointSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, SoundfieldEndpointType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EndpointSettingsClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EndpointSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EncodingSettingsClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EncodingSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, SoundfieldEffectChain, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEndpointSubmix, 0x0070);
		}

		// class ASpectatorPawn : public ADefaultPawn
		TEST_METHOD(Class__Engine__SpectatorPawn)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorPawn, 0x02B0);
		}

		// class UFloatingPawnMovement : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__FloatingPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, MaxSpeed, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Acceleration, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Deceleration, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, TurningBoost, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, UnknownData_C1CK, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatingPawnMovement, 0x0150);
		}

		// class USpectatorPawnMovement : public UFloatingPawnMovement
		TEST_METHOD(Class__Engine__SpectatorPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorPawnMovement, UnknownData_Y1G5, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorPawnMovement, 0x0158);
		}

		// class ASphereReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__SphereReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASphereReflectionCapture, DrawCaptureRadius, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASphereReflectionCapture, 0x0238);
		}

		// class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__SphereReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, CaptureDistanceScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, PreviewInfluenceRadius, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, UnknownData_YPRI, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereReflectionCaptureComponent, 0x0280);
		}

		// class USplineMetadata : public UObject
		TEST_METHOD(Class__Engine__SplineMetadata)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMetadata, 0x0028);
		}

		// class ASplineMeshActor : public AActor
		TEST_METHOD(Class__Engine__SplineMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineMeshActor, SplineMeshComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASplineMeshActor, 0x0230);
		}

		// class UDebugCameraControllerSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__DebugCameraControllerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugCameraControllerSettings, CycleViewModes, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugCameraControllerSettings, 0x0048);
		}

		// class AHUD : public AActor
		TEST_METHOD(Class__Engine__HUD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PlayerOwner, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_1NCP, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, CurrentTargetIndex, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_CFV4, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PostRenderedActors, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_ER5J, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugDisplay, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ToggledDebugCategories, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, Canvas, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugCanvas, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugTextList, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetDesiredClass, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetActor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_R7TY, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHUD, 0x0318);
		}

		// class ADebugCameraHUD : public AHUD
		TEST_METHOD(Class__Engine__DebugCameraHUD)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraHUD, 0x0318);
		}

		// class UDebugDrawService : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DebugDrawService)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugDrawService, 0x0028);
		}

		// class ADecalActor : public AActor
		TEST_METHOD(Class__Engine__DecalActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADecalActor, Decal, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADecalActor, 0x0230);
		}

		// class UTextureLODSettings : public UObject
		TEST_METHOD(Class__Engine__TextureLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLODSettings, TextureLODGroups, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLODSettings, 0x0038);
		}

		// class UDeviceProfile : public UTextureLODSettings
		TEST_METHOD(Class__Engine__DeviceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, DeviceType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, BaseProfileName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, Parent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_SHZE, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, CVars, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_SXC3, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfile, 0x0098);
		}

		// class UDeviceProfileManager : public UObject
		TEST_METHOD(Class__Engine__DeviceProfileManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, Profiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, UnknownData_GK6N, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfileManager, 0x00B0);
		}

		// class UDialogueSoundWaveProxy : public USoundBase
		TEST_METHOD(Class__Engine__DialogueSoundWaveProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueSoundWaveProxy, UnknownData_RVKT, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueSoundWaveProxy, 0x0178);
		}

		// class UMaterialExpressionNormalize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNormalize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, VectorInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, UnknownData_Y09M, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNormalize, 0x0058);
		}

		// class UMaterialExpressionObjectBounds : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectBounds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectBounds, 0x0040);
		}

		// class UMaterialExpressionObjectOrientation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectOrientation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectOrientation, 0x0040);
		}

		// class UMaterialExpressionObjectPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectPositionWS, 0x0040);
		}

		// class UMaterialExpressionObjectRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectRadius, 0x0040);
		}

		// class UMaterialExpressionReroute : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReroute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, UnknownData_THUI, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReroute, 0x0058);
		}

		// class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotateAboutAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, NormalizedRotationAxis, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_HDDY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, RotationAngle, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_F8UG, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, PivotPoint, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_P1NZ, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Position, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_HZHX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Period, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_1A5N, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotateAboutAxis, 0x0098);
		}

		// class UMaterialExpressionRotator : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_M9JP, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Time, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_LU0N, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterX, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterY, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Speed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, ConstCoordinate, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotator, 0x0078);
		}

		// class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, BaseColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_HABP, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Specular, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_733Q, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Roughness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_81UY, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Normal, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_QHDX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, WorldHeight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_21IT, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Opacity, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_8E6X, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Mask, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_M06Z, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureOutput, 0x00D0);
		}

		// class UParticleModuleColorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleColorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorBase, 0x0030);
		}

		// class UParticleModuleColor : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartAlpha, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, UnknownData_93RJ, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor, 0x00B0);
		}

		// class UParticleModuleColor_Seeded : public UParticleModuleColor
		TEST_METHOD(Class__Engine__ParticleModuleColor_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor_Seeded, RandomSeedInfo, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor_Seeded, 0x00D0);
		}

		// class UParticleModuleColorOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, ColorOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, AlphaOverLife, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, UnknownData_4YIQ, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorOverLife, 0x00B0);
		}

		// class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, ColorScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, AlphaScaleOverLife, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, UnknownData_G7FI, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorScaleOverLife, 0x00B0);
		}

		// class UParticleModuleEventBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleEventBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventBase, 0x0030);
		}

		// class UParticleModuleLifetimeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLifetimeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetimeBase, 0x0030);
		}

		// class UParticleModuleLifetime : public UParticleModuleLifetimeBase
		TEST_METHOD(Class__Engine__ParticleModuleLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime, LifeTime, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime, 0x0060);
		}

		// class UParticleModuleLightBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLightBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLightBase, 0x0030);
		}

		// class UParticleModuleLight : public UParticleModuleLightBase
		TEST_METHOD(Class__Engine__ParticleModuleLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bUseInverseSquaredFalloff, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bAffectsTranslucency, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bPreviewLightRadius, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_4GKM, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, SpawnFraction, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, ColorScaleOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, BrightnessOverLife, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, RadiusScale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightExponent, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightingChannels, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_PV6M, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, VolumetricScatteringIntensity, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bHighQualityLights, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bShadowCastingLights, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_0N1M, 0x011A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight, 0x0120);
		}

		// class UParticleModuleLight_Seeded : public UParticleModuleLight
		TEST_METHOD(Class__Engine__ParticleModuleLight_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight_Seeded, RandomSeedInfo, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight_Seeded, 0x0140);
		}

		// class UParticleModuleLocation : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, StartLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeOverNPoints, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeThreshold, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation, 0x0080);
		}

		// class UDialogueVoice : public UObject
		TEST_METHOD(Class__Engine__DialogueVoice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Gender, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Plurality, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_10KM, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, LocalizationGUID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_NL6A, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueVoice, 0x0040);
		}

		// class UInterpTrackMoveAxis : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackMoveAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, MoveAxis, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, UnknownData_XIWK, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, LookupTrack, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMoveAxis, 0x00A8);
		}

		// class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, Inputs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, AttributeSetTypes, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSetMaterialAttributes, 0x0060);
		}

		// class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadingPathSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_CKF6, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Inputs, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_F90M, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingPathSwitch, 0x0090);
		}

		// class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightIlluminance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, WorldPosition, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, UnknownData_C0WD, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, 0x0058);
		}

		// class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightDiskLuminance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, UnknownData_V1ZQ, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, 0x0048);
		}

		// class UMaterialExpressionSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Cell, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_F2X7, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Index, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_Y74H, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Seed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_SXA1, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstIndex, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstSeed, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSobol, 0x0088);
		}

		// class UMaterialExpressionSpeedTree : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSpeedTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_CEMQ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindInput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_782M, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODInput, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_LE8Z, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, ExtraBendWS, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_FQTN, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryType, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindType, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODType, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_N7CI, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, BillboardThreshold, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, bAccurateWindVelocities, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_LTPP, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpeedTree, 0x00A0);
		}

		// class UMaterialExpressionSphereMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphereMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_SB8K, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_GVW8, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Radius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_NFFX, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Hardness, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_8NF0, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, AttenuationRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, HardnessPercent, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphereMask, 0x0098);
		}

		// class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphericalParticleOpacity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, Density, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, UnknownData_IBSZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, ConstantDensity, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphericalParticleOpacity, 0x0058);
		}

		// class UMaterialExpressionStaticSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_8L12, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, A, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_L3FM, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_PNAB, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, Value, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_9ZU6, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitch, 0x0080);
		}

		// class UTouchInterface : public UObject
		TEST_METHOD(Class__Engine__TouchInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, Controls, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActiveOpacity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, InactiveOpacity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilDeactive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilReset, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActivationDelay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, bPreventRecenter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_2V3C, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, StartupDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_ZJ4T, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTouchInterface, 0x0058);
		}

		// class ATriggerBase : public AActor
		TEST_METHOD(Class__Engine__TriggerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggerBase, CollisionComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBase, 0x0230);
		}

		// class ATriggerBox : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerBox)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBox, 0x0230);
		}

		// class ATriggerCapsule : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerCapsule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerCapsule, 0x0230);
		}

		// class ATriggerSphere : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerSphere)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerSphere, 0x0230);
		}

		// class ATriggerVolume : public AVolume
		TEST_METHOD(Class__Engine__TriggerVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerVolume, 0x0260);
		}

		// class UTwitterIntegrationBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__TwitterIntegrationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwitterIntegrationBase, 0x0038);
		}

		// class UUserDefinedEnum : public UEnum
		TEST_METHOD(Class__Engine__UserDefinedEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedEnum, DisplayNameMap, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedEnum, 0x00B0);
		}

		// class UDistributionFloatConstantCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstantCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstantCurve, 0x0050);
		}

		// class UDistributionFloatParameterBase : public UDistributionFloatConstant
		TEST_METHOD(Class__Engine__DistributionFloatParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinInput, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxInput, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinOutput, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxOutput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParamMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, UnknownData_RUCI, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParameterBase, 0x0060);
		}

		// class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
		TEST_METHOD(Class__Engine__DistributionFloatParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParticleParameter, 0x0060);
		}

		// class UDistributionFloatUniform : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniform, 0x0040);
		}

		// class UHLODProxy : public UObject
		TEST_METHOD(Class__Engine__HLODProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHLODProxy, ProxyMeshes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODProxy, 0x0038);
		}

		// class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__ImportanceSamplingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportanceSamplingLibrary, 0x0028);
		}

		// class UImportantToggleSettingInterface : public UInterface
		TEST_METHOD(Class__Engine__ImportantToggleSettingInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportantToggleSettingInterface, 0x0028);
		}

		// class UInGameAdManager : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__InGameAdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, UnknownData_IA89, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClickedBannerDelegates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClosedAdDelegates, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameAdManager, 0x0060);
		}

		// class ULightmassPrimitiveSettingsObject : public UObject
		TEST_METHOD(Class__Engine__LightmassPrimitiveSettingsObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPrimitiveSettingsObject, LightmassSettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPrimitiveSettingsObject, 0x0040);
		}

		// class ULineBatchComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__LineBatchComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineBatchComponent, UnknownData_2ARL, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULineBatchComponent, 0x0430);
		}

		// class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPointGravity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Radius, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Strength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, StrengthRaw, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPointGravity, 0x0078);
		}

		// class UParticleModuleBeamBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleBeamBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamBase, 0x0030);
		}

		// class UEdGraphNode : public UObject
		TEST_METHOD(Class__Engine__EdGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_QES3, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, DeprecatedPins, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeWidth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeHeight, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, AdvancedPinDisplay, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, EnabledState, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_N37I, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_UPAI, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeComment, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_52J3, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorMsg, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode, 0x0098);
		}

		// class UEdGraphNode_Documentation : public UEdGraphNode
		TEST_METHOD(Class__Engine__EdGraphNode_Documentation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Link, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Excerpt, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode_Documentation, 0x00B8);
		}

		// class UEdGraphPin_Deprecated : public UObject
		TEST_METHOD(Class__Engine__EdGraphPin_Deprecated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinToolTip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, Direction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, UnknownData_CUFR, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultValue, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, AutogeneratedDefaultValue, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultObject, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultTextValue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, LinkedTo, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, SubPins, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ParentPin, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ReferencePassThroughConnection, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphPin_Deprecated, 0x0118);
		}

		// class UEdGraphSchema : public UObject
		TEST_METHOD(Class__Engine__EdGraphSchema)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphSchema, 0x0028);
		}

		// class AEmitter : public AActor
		TEST_METHOD(Class__Engine__Emitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, ParticleSystemComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, UnknownData_KVGQ, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleSpawn, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleBurst, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleDeath, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleCollide, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitter, 0x0278);
		}

		// class AEmitterCameraLensEffectBase : public AEmitter
		TEST_METHOD(Class__Engine__EmitterCameraLensEffectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffect, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffectNonExtremeContent, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseCamera, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, RelativeTransform, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseFOV, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_S1NJ, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, EmittersToTreatAsSame, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, DistFromCamera, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_FVZR, 0x02DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitterCameraLensEffectBase, 0x02E0);
		}

		// class UViewModeUtils : public UObject
		TEST_METHOD(Class__Engine__ViewModeUtils)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewModeUtils, 0x0028);
		}

		// class UEngineBaseTypes : public UObject
		TEST_METHOD(Class__Engine__EngineBaseTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineBaseTypes, 0x0028);
		}

		// class UEngineHandlerComponentFactory : public UHandlerComponentFactory
		TEST_METHOD(Class__Engine__EngineHandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineHandlerComponentFactory, 0x0028);
		}

		// class ULocalMessage : public UObject
		TEST_METHOD(Class__Engine__LocalMessage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalMessage, 0x0028);
		}

		// class UEngineMessage : public ULocalMessage
		TEST_METHOD(Class__Engine__EngineMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, FailedPlaceMessage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, MaxedOutMessage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, EnteredMessage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, LeftMessage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, GlobalNameChange, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, SpecEnteredMessage, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewPlayerMessage, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewSpecMessage, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineMessage, 0x00A8);
		}

		// class UEngineTypes : public UObject
		TEST_METHOD(Class__Engine__EngineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineTypes, 0x0028);
		}

		// class AExponentialHeightFog : public AInfo
		TEST_METHOD(Class__Engine__ExponentialHeightFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, Component, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, UnknownData_PQSX, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AExponentialHeightFog, 0x0238);
		}

		// class UExponentialHeightFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ExponentialHeightFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogDensity, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogHeightFalloff, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, SecondFogData, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogInscatteringColor, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_4Y7P, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemap, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemapAngle, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringTextureTint, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FullyDirectionalInscatteringColorDistance, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, NonDirectionalInscatteringColorDistance, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringExponent, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringStartDistance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringColor, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogMaxOpacity, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, StartDistance, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogCutoffDistance, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bEnableVolumetricFog, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_WDWB, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogScatteringDistribution, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogAlbedo, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogEmissive, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogExtinctionScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogDistance, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogStaticLightingScatteringIntensity, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bOverrideLightColorsWithFogInscatteringColors, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_5PQH, 0x0289);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExponentialHeightFogComponent, 0x0290);
		}

		// class UExporter : public UObject
		TEST_METHOD(Class__Engine__Exporter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, SupportedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportRootScope, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatExtension, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatDescription, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, PreferredFormatIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, TextIndent, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_7VKE, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportTask, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_4HG3, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExporter, 0x0078);
		}

		// class UFontImportOptions : public UObject
		TEST_METHOD(Class__Engine__FontImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontImportOptions, Data, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontImportOptions, 0x00D8);
		}

		// class UVectorField : public UObject
		TEST_METHOD(Class__Engine__VectorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Bounds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Intensity, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorField, 0x0048);
		}

		// class UVectorFieldStatic : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldStatic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeZ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, bAllowCPUAccess, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, UnknownData_TVAO, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, CPUData, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldStatic, 0x0098);
		}

		// class AVectorFieldVolume : public AActor
		TEST_METHOD(Class__Engine__VectorFieldVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVectorFieldVolume, VectorFieldComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVectorFieldVolume, 0x0230);
		}

		// class UVirtualTexture : public UObject
		TEST_METHOD(Class__Engine__VirtualTexture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexture, 0x0028);
		}

		// class ULightMapVirtualTexture : public UVirtualTexture
		TEST_METHOD(Class__Engine__LightMapVirtualTexture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture, 0x0028);
		}

		// class ULightMapVirtualTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__LightMapVirtualTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture2D, TypeToLayer, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture2D, 0x00F8);
		}

		// class UForceFeedbackAttenuation : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackAttenuation, 0x00D8);
		}

		// class UForceFeedbackComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ForceFeedbackComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, ForceFeedbackEffect, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_NZCG, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, IntensityMultiplier, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationSettings, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationOverrides, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, OnForceFeedbackFinished, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_87VL, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackComponent, 0x02D0);
		}

		// class UUserDefinedStruct : public UScriptStruct
		TEST_METHOD(Class__Engine__UserDefinedStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Status, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_QRYN, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Guid, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_TI9D, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedStruct, 0x0108);
		}

		// class UUserInterfaceSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__UserInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, RenderFocusRule, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_6O13, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HardwareCursors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SoftwareCursors, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, DefaultCursor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, TextEditBeamCursor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CrosshairsCursor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HandCursor, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandCursor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandClosedCursor, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SlashedCircleCursor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, ApplicationScale, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleRule, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_831H, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClass, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleCurve, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bAllowHighDPIInGameMode, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bLoadWidgetsOnDedicatedServer, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_MLPR, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CursorClasses, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClassInstance, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRule, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_63L6, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserInterfaceSettings, 0x0268);
		}

		// class UVectorFieldAnimated : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldAnimated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, Texture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, ConstructionOp, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_4FND, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeX, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeZ, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesX, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesY, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FrameCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FramesPerSecond, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_YJKG, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseField, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseMax, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldAnimated, 0x0088);
		}

		// class UVectorFieldComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__VectorFieldComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, VectorField, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Intensity, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Tightness, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, UnknownData_WU8L, 0x0401);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldComponent, 0x0420);
		}

		// class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Curve, HapticDetails, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Curve, 0x0138);
		}

		// class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, SoundWave, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, UnknownData_ZORC, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_SoundWave, 0x0060);
		}

		// class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__HealthSnapshotBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHealthSnapshotBlueprintLibrary, 0x0028);
		}

		// class UMaterialExpressionSaturate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSaturate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, UnknownData_TOPR, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSaturate, 0x0058);
		}

		// class UMaterialExpressionSceneDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_3DXM, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_QLMF, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Coordinates, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_LIGT, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, ConstInput, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_NSJO, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneDepth, 0x0078);
		}

		// class UMaterialExpressionSceneTexelSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexelSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexelSize, 0x0040);
		}

		// class UMaterialExpressionSceneTexture : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_PYTR, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, SceneTextureId, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, bFiltered, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_BXBJ, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexture, 0x0058);
		}

		// class UMaterialExpressionScreenPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionScreenPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScreenPosition, 0x0040);
		}

		// class UMaterialExpressionShaderStageSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShaderStageSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, PixelShader, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, UnknownData_NIW2, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, VertexShader, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, UnknownData_OC1H, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShaderStageSwitch, 0x0068);
		}

		// class UMaterialExpressionShadingModel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadingModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingModel, ShadingModel, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingModel, UnknownData_TDHH, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingModel, 0x0048);
		}

		// class UMaterialExpressionShadowReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadowReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, UnknownData_ELUK, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, Shadow, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, UnknownData_XKX5, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadowReplace, 0x0068);
		}

		// class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionSingleLayerWaterMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, ScatteringCoefficients, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_UEVI, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, AbsorptionCoefficients, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_B8QD, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, PhaseG, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_MNIQ, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, 0x0080);
		}

		// class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightDirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDirection, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDirection, UnknownData_7GMZ, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightDirection, 0x0048);
		}

		// class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, StartOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Height, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Angle, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Thickness, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveTriangle, 0x0108);
		}

		// class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationSkelVertSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_NW2W, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_TZFU, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritVelocityScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SkelMeshActorParamName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidAssociatedBones, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_IK0O, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalToCompare, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckToleranceDegrees, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckTolerance, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidMaterialIndices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_L5TR, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritUVChannel, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationSkelVertSurface, 0x0090);
		}

		// class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset, 0x0080);
		}

		// class UParticleModuleRotationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationBase, 0x0030);
		}

		// class UParticleModuleMeshRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, StartRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, UnknownData_D9KY, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation, 0x0080);
		}

		// class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation_Seeded, 0x00A0);
		}

		// class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate, 0x0078);
		}

		// class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate_Seeded, RandomSeedInfo, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate_Seeded, 0x0098);
		}

		// class UInputAxisDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisDelegateBinding, InputAxisDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisDelegateBinding, 0x0038);
		}

		// class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionVertexInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, UnknownData_UWYR, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexInterpolator, 0x0060);
		}

		// class UMaterialExpressionVertexNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexNormalWS, 0x0040);
		}

		// class UMaterialExpressionVertexTangentWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexTangentWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexTangentWS, 0x0040);
		}

		// class UMaterialExpressionViewProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, Property, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, UnknownData_LQM6, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewProperty, 0x0048);
		}

		// class UMaterialExpressionViewSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewSize, 0x0040);
		}

		// class UParticleModuleBeamNoise : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_9ZI1, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency_LowRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_LNC4, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRange, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRangeScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_R0BP, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseSpeed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_XWX1, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockRadius, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_7YXJ, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTension, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_D01A, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTangentStrength, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTessellation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_1XXW, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, FrequencyDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_G6OD, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseScale, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamNoise, 0x0190);
		}

		// class UParticleModuleBeamSource : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_CGXS, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_K9MP, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, Source, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_BTIC, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangentMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_6KLA, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_MRVJ, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_AZGL, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamSource, 0x0118);
		}

		// class UParticleModuleBeamTarget : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_BVVO, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_991K, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, Target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_CTFY, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangentMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_KI0N, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_PVN2, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_O1YJ, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, LockRadius, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_COVQ, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamTarget, 0x0120);
		}

		// class UParticleModuleCameraBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCameraBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraBase, 0x0030);
		}

		// class UParticleModuleCameraOffset : public UParticleModuleCameraBase
		TEST_METHOD(Class__Engine__ParticleModuleCameraOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, CameraOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_0CBQ, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UpdateMethod, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_VITL, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraOffset, 0x0068);
		}

		// class UParticleModuleCollisionBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCollisionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionBase, 0x0030);
		}

		// class UParticleModuleCollision : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactorRotation, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisions, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionCompletionOption, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_HBMS, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionTypes, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_OU1Y, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_U8U0, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, ParticleMass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DirScalar, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_E34J, 0x014D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, VerticalFudgeFactor, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_B6JX, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DelayAmount, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_AEY6, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisionDistance, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollision, 0x0190);
		}

		// class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollisionGPU)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Resilience, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, ResilienceScaleOverLife, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Friction, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomSpread, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomDistribution, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusScale, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusBias, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Response, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, CollisionMode, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, UnknownData_7LY4, 0x00A6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionGPU, 0x00A8);
		}

		// class UParticleModuleVelocityBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVelocityBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityBase, UnknownData_VDKM, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityBase, 0x0038);
		}

		// class UParticleModuleVelocity : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocityRadial, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity, 0x00B0);
		}

		// class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Angle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Velocity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Direction, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, UnknownData_BJXC, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityCone, 0x00A8);
		}

		// class UPhysicsConstraintComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsConstraintComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor1, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName1, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor2, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName2, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, UnknownData_V80X, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintSetup, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, OnConstraintBroken, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintInstance, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintComponent, 0x03F0);
		}

		// class USkyAtmosphereComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SkyAtmosphereComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, TransformMode, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_5M0M, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, BottomRadius, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, GroundAlbedo, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AtmosphereHeight, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MultiScatteringFactor, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighScatteringScale, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighScattering, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighExponentialDistribution, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieScatteringScale, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieScattering, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAbsorptionScale, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAbsorption, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAnisotropy, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieExponentialDistribution, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherAbsorptionScale, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherAbsorption, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherTentDistribution, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, SkyLuminanceFactor, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AerialPespectiveViewDistanceScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, HeightFogContribution, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, TransmittanceMinLightElevationAngle, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_96SJ, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, bStaticLightingBuiltGUID, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_7N88, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyAtmosphereComponent, 0x02C0);
		}

		// class ASkyAtmosphere : public AInfo
		TEST_METHOD(Class__Engine__SkyAtmosphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyAtmosphere, SkyAtmosphereComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyAtmosphere, 0x0230);
		}

		// class USkyLightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__SkyLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SourceType, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_K3A6, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Cubemap, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SourceCubemapAngle, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CubemapResolution, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SkyDistanceThreshold, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bCaptureEmissiveOnly, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bLowerHemisphereIsBlack, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_6FM5, 0x023E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, LowerHemisphereColor, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionMaxDistance, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Contrast, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionExponent, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, MinOcclusion, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionTint, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionCombineMode, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_V3KD, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, BlendDestinationCubemap, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_HOC5, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyLightComponent, 0x03F0);
		}

		// class USoundAttenuation : public UObject
		TEST_METHOD(Class__Engine__SoundAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundAttenuation, 0x03C8);
		}

		// class USoundClass : public UObject
		TEST_METHOD(Class__Engine__SoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, Properties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ChildClasses, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, PassiveSoundMixModifiers, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, Modulation, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ParentClass, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundClass, 0x00B8);
		}

		// class UInputComponent : public UActorComponent
		TEST_METHOD(Class__Engine__InputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_1JNP, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, CachedKeyToActionInfo, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_NTWQ, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputComponent, 0x0138);
		}

		// class UMaterial : public UMaterialInterface
		TEST_METHOD(Class__Engine__Material)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterialMask, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysicalMaterialMap, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Metallic, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_MQUP, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Specular, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_9DDD, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Anisotropy, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_IYRS, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Normal, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_V1KO, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Tangent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_QLSN, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, EmissiveColor, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_ZFZU, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDomain, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendMode, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, DecalBlendMode, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDecalResponse, 0x0153);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModel, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModels, 0x0156);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, OpacityMaskClipValue, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, WorldPositionOffset, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_MR5W, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Refraction, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_3PMI, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialAttributes, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_EN30, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PixelDepthOffset, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_AYXZ, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModelFromMaterialExpression, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_DLTZ, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyLightingMode, 0x01C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_9JLL, 0x01C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, NumCustomizedUVs, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyDirectionalLightingIntensity, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowDensityScale, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowDensityScale, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondDensityScale, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondOpacity, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentBackscatteringExponent, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentMultipleScatteringExtinction, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowStartOffset, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_STZW, 0x01FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_57S5, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_V7VT, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_0485, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, D3D11TessellationMode, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingRate, 0x020B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendableLocation, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StencilCompare, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StencilRefValue, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionMode, 0x0212);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_50R7, 0x0213);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendablePriority, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_EVKF, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UsageFlagWarnings, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionDepthBias, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StateId, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaxDisplacement, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_13NP, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, CachedExpressionData, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterial, 0x04E8);
		}

		// class UMaterialExpressionAbs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAbs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, UnknownData_Z23N, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAbs, 0x0058);
		}

		// class UMaterialExpressionActorPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionActorPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionActorPositionWS, 0x0040);
		}

		// class UMaterialExpressionAdd : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAdd)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_3WUN, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_9GTY, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAdd, 0x0070);
		}

		// class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionAntialiasedTextureMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Threshold, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Channel, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, UnknownData_GJ3Q, 0x00F5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAntialiasedTextureMask, 0x00F8);
		}

		// class UMaterialExpressionArccosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, UnknownData_H1EV, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosine, 0x0058);
		}

		// class UMaterialExpressionArcsine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, UnknownData_17LF, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsine, 0x0058);
		}

		// class UMaterialExpressionArctangent2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_PKAG, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_OKBB, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2, 0x0068);
		}

		// class UMaterialExpressionArctangentFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangentFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, UnknownData_OIVC, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangentFast, 0x0058);
		}

		// class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericFogColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, WorldPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, UnknownData_4OPF, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericFogColor, 0x0058);
		}

		// class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightColor, 0x0040);
		}

		// class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightVector, 0x0040);
		}

		// class UMaterialExpressionBlackBody : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlackBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, Temp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, UnknownData_DU65, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlackBody, 0x0058);
		}

		// class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlendMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_ZR46, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_0C99, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, Alpha, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_MKYT, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, PixelAttributeBlendType, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, VertexAttributeBlendType, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_K319, 0x0086);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlendMaterialAttributes, 0x0088);
		}

		// class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthOfFieldFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, FunctionValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_AIKL, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, Depth, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_DTJ2, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthOfFieldFunction, 0x0058);
		}

		// class UMaterialExpressionDesaturation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDesaturation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_4HFR, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Fraction, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_UXDO, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, LuminanceFactors, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDesaturation, 0x0078);
		}

		// class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceFieldGradient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, UnknownData_O8RA, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceFieldGradient, 0x0058);
		}

		// class UMaterialExpressionFmod : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFmod)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_VKAG, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_I3JZ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFmod, 0x0068);
		}

		// class UMaterialExpressionFontSample : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFontSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, Font, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, FontTexturePage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, UnknownData_8QQF, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSample, 0x0050);
		}

		// class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
		TEST_METHOD(Class__Engine__MaterialExpressionFontSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ExpressionGUID, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, Group, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSampleParameter, 0x0070);
		}

		// class UNavLinkDefinition : public UObject
		TEST_METHOD(Class__Engine__NavLinkDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, Links, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, SegmentLinks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, UnknownData_255C, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkDefinition, 0x0050);
		}

		// class UNavPathObserverInterface : public UInterface
		TEST_METHOD(Class__Engine__NavPathObserverInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavPathObserverInterface, 0x0028);
		}

		// class UNavRelevantInterface : public UInterface
		TEST_METHOD(Class__Engine__NavRelevantInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantInterface, 0x0028);
		}

		// class USimulatedClientNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__SimulatedClientNetConnection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimulatedClientNetConnection, 0x1A30);
		}

		// class UNetPushModelHelpers : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__NetPushModelHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetPushModelHelpers, 0x0028);
		}

		// class UNetworkPredictionInterface : public UInterface
		TEST_METHOD(Class__Engine__NetworkPredictionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkPredictionInterface, 0x0028);
		}

		// class UPhysicsSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__PhysicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultGravityZ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultTerminalVelocity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultFluidFriction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SimulateScratchMemorySize, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, RagdollAggregateThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, TriangleMeshTriangleMinAreaThreshold, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableShapeSharing, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnablePCM, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableStabilization, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bWarnMissingLocks, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnable2DPhysics, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_R3TP, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicErrorCorrection, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, LockedAxis, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultDegreesOfFreedom, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_M658, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, BounceThresholdVelocity, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, FrictionCombineMode, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, RestitutionCombineMode, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_SI4W, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxAngularVelocity, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxDepenetrationVelocity, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, ContactOffsetMultiplier, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MinContactOffset, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxContactOffset, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSimulateSkeletalMeshOnDedicatedServer, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultShapeComplexity, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDefaultHasComplexCollision, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSuppressFaceRemapTable, 0x00AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSupportUVFromHitResults, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableActiveActors, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicStaticPairs, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicKinematicPairs, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableCCD, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableEnhancedDeterminism, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_YKCO, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, AnimPhysicsMinDeltaTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSimulateAnimPhysicsAfterReset, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_GK3Q, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxPhysicsDeltaTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubstepping, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubsteppingAsync, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_EQCB, 0x00C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubstepDeltaTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubsteps, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SyncSceneSmoothingFactor, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, InitialAverageFrameRate, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysXTreeRebuildRate, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_MS6A, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicalSurfaces, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultBroadphaseSettings, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, ChaosSettings, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_XE8A, 0x0133);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSettings, 0x0138);
		}

		// class UPhysicsSpringComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsSpringComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringStiffness, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringDamping, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringLengthAtRest, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringRadius, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringChannel, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, bIgnoreSelf, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_6SP8, 0x0202);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringCompression, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_0BWK, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSpringComponent, 0x0220);
		}

		// class APhysicsThruster : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsThruster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsThruster, ThrusterComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsThruster, 0x0230);
		}

		// class UPhysicsThrusterComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsThrusterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsThrusterComponent, ThrustStrength, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsThrusterComponent, UnknownData_8ES8, 0x01F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsThrusterComponent, 0x0200);
		}

		// class APlanarReflection : public ASceneCapture
		TEST_METHOD(Class__Engine__PlanarReflection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, PlanarReflectionComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, bShowPreviewPlane, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, UnknownData_YROD, 0x0241);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlanarReflection, 0x0248);
		}

		// class UPlanarReflectionComponent : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__PlanarReflectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PreviewBox, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, NormalDistortionStrength, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughness, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughnessDistance, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ScreenPercentage, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ExtraFOV, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeStart, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeEnd, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutStart, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutEnd, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeStart, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeEnd, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bShowPreviewPlane, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bRenderSceneTwoSided, 0x02BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, UnknownData_Y1QB, 0x02BE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanarReflectionComponent, 0x0370);
		}

		// class APlaneReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__PlaneReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaneReflectionCapture, 0x0230);
		}

		// class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__PlaneReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_EFVA, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewInfluenceRadius, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewCaptureBox, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneReflectionCaptureComponent, 0x0280);
		}

		// class UPlatformEventsComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PlatformEventsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToLaptopModeDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToTabletModeDelegate, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformEventsComponent, 0x00D0);
		}

		// class UPlatformInterfaceWebResponse : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceWebResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, OriginalURL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, ResponseCode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, Tag, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, StringResponse, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, BinaryResponse, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, UnknownData_142W, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceWebResponse, 0x00B0);
		}

		// class APlayerCameraManager : public AActor
		TEST_METHOD(Class__Engine__PlayerCameraManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PCOwner, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, TransformComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_XNR7, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultFOV, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_GZ89, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultOrthoWidth, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_1YJW, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultAspectRatio, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_6AXB, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCache, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCache, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTarget, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PendingViewTarget, 0x1450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_KO36, 0x1A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCachePrivate, 0x1A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCachePrivate, 0x2050);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ModifierList, 0x2630);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultModifiers, 0x2640);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamDistance, 0x2650);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamOffset, 0x2654);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTargetOffset, 0x2660);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_T6VY, 0x266C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraLensEffects, 0x2680);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CachedCameraShakeMod, 0x2690);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimInstPool, 0x2698);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PostProcessBlendCache, 0x26D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_YXQE, 0x26E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ActiveAnims, 0x26F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeAnims, 0x2708);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimCameraActor, 0x2718);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_IBEK, 0x2722);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMin, 0x2724);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMax, 0x2728);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMin, 0x272C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMax, 0x2730);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMin, 0x2734);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMax, 0x2738);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_N4FH, 0x273C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ServerUpdateCameraTimeout, 0x2740);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_HJWW, 0x2744);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerCameraManager, 0x2750);
		}

		// class UPlayerInput : public UObject
		TEST_METHOD(Class__Engine__PlayerInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_6NXP, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, DebugExecBindings, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_JVYK, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, InvertedAxis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_J8FI, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInput, 0x03A8);
		}

		// class APlayerStart : public ANavigationObjectBase
		TEST_METHOD(Class__Engine__PlayerStart)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerStart, PlayerStartTag, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStart, 0x0258);
		}

		// class APlayerStartPIE : public APlayerStart
		TEST_METHOD(Class__Engine__PlayerStartPIE)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStartPIE, 0x0258);
		}

		// class APlayerState : public AInfo
		TEST_METHOD(Class__Engine__PlayerState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Score, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerId, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Ping, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_7LM5, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_L02G, 0x0233);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, StartTime, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, EngineMessageClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_UT2F, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, SavedNetworkAddress, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UniqueId, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_QKL4, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PawnPrivate, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_VGN7, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerNamePrivate, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_1P53, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerState, 0x0328);
		}

		// class UPluginCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__PluginCommandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPluginCommandlet, UnknownData_B0BV, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPluginCommandlet, 0x00A0);
		}

		// class APointLight : public ALight
		TEST_METHOD(Class__Engine__PointLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APointLight, PointLightComponent, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APointLight, 0x0240);
		}

		// class UPolys : public UObject
		TEST_METHOD(Class__Engine__Polys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolys, UnknownData_BLJ1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolys, 0x0038);
		}

		// class UPoseableMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__PoseableMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseableMeshComponent, UnknownData_PHLM, 0x0630);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseableMeshComponent, 0x0790);
		}

		// class UPoseWatch : public UObject
		TEST_METHOD(Class__Engine__PoseWatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, Node, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, PoseWatchColour, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, UnknownData_KA0J, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseWatch, 0x0038);
		}

		// class UPostProcessComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PostProcessComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_88JD, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Settings, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Priority, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendRadius, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendWeight, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_HOX7, 0x074D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostProcessComponent, 0x0750);
		}

		// class APostProcessVolume : public AVolume
		TEST_METHOD(Class__Engine__PostProcessVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_JTFP, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Settings, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Priority, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendRadius, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendWeight, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_G0OX, 0x07BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APostProcessVolume, 0x07C0);
		}

		// class APrecomputedVisibilityOverrideVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityOverrideVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideVisibleActors, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleActors, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleLevels, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityOverrideVolume, 0x0290);
		}

		// class APrecomputedVisibilityVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityVolume, 0x0260);
		}

		// class UPreviewCollectionInterface : public UInterface
		TEST_METHOD(Class__Engine__PreviewCollectionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewCollectionInterface, 0x0028);
		}

		// class UInputKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeyDelegateBinding, InputKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeyDelegateBinding, 0x0038);
		}

		// class UMaterialExpressionSceneColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_ELSE, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_4O0A, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, OffsetFraction, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_8G2Y, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, ConstInput, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_SDHV, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneColor, 0x0078);
		}

		// class UPhysicsConstraintTemplate : public UObject
		TEST_METHOD(Class__Engine__PhysicsConstraintTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, ProfileHandles, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultProfile, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_8XXK, 0x02F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintTemplate, 0x02F8);
		}

		// class UPhysicsHandleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicsHandleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, GrabbedComponent, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_0JMQ, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_4W9F, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearDamping, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearStiffness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularDamping, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularStiffness, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_T20G, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, InterpolationSpeed, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_J06U, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsHandleComponent, 0x0160);
		}

		// class UInterpTrackInstColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_8J7R, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, ResetColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_TEOM, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorProp, 0x0060);
		}

		// class UInterpTrackInstColorScale : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorScale, 0x0028);
		}

		// class UInterpTrackInstDirector : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstDirector, OldViewTarget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstDirector, 0x0030);
		}

		// class UInterpTrackInstEvent : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, UnknownData_Z2BU, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstEvent, 0x0030);
		}

		// class UInterpTrackInstFade : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFade, 0x0028);
		}

		// class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, AnimScriptInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, ResetFloat, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, UnknownData_4H3P, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatAnimBPParam, 0x0040);
		}

		// class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, ResetFloats, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatMaterialParam, 0x0060);
		}

		// class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, ResetFloat, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, UnknownData_M67N, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatParticleParam, 0x0030);
		}

		// class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_W86R, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, ResetFloat, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_39B5, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatProp, 0x0060);
		}

		// class UInterpTrackInstMove : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetLocation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetRotation, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstMove, 0x0040);
		}

		// class UInterpTrackInstParticleReplay : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, UnknownData_SYN7, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstParticleReplay, 0x0030);
		}

		// class UInterpTrackInstSlomo : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSlomo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, OldTimeDilation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, UnknownData_JEKY, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSlomo, 0x0030);
		}

		// class UInterpTrackInstSound : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, UnknownData_ILNE, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, PlayAudioComp, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSound, 0x0038);
		}

		// class UInterpTrackInstToggle : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_1IKX, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, LastUpdatePosition, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_5SH9, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstToggle, 0x0038);
		}

		// class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, ResetVectors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorMaterialParam, 0x0060);
		}

		// class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDeriveNormalZ)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, InXY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, UnknownData_8TND, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeriveNormalZ, 0x0058);
		}

		// class UMaterialExpressionDotProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDotProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_F0M5, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_IV5V, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDotProduct, 0x0068);
		}

		// class UMaterialExpressionDynamicParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParamNames, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, DefaultValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParameterIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, UnknownData_RDBZ, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDynamicParameter, 0x0068);
		}

		// class UMaterialExpressionEyeAdaptation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionEyeAdaptation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionEyeAdaptation, 0x0040);
		}

		// class UMaterialExpressionFloor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFloor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, UnknownData_2JQB, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFloor, 0x0058);
		}

		// class UMaterialExpressionFresnel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFresnel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, ExponentIn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_62SV, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Exponent, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFractionIn, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_6VBO, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFraction, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Normal, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_XQDG, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFresnel, 0x0088);
		}

		// class UMaterialExpressionFunctionInput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Preview, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_7NY5, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputName, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_ZFXP, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Description, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, ID, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_MFWB, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, PreviewValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_W6JN, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, SortPriority, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_LVIJ, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionInput, 0x00C0);
		}

		// class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, UnknownData_FN92, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, AttributeGetTypes, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGetMaterialAttributes, 0x0068);
		}

		// class UMaterialExpressionLogarithm10 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm10)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, UnknownData_ZD6A, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm10, 0x0058);
		}

		// class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMakeMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, BaseColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_RC5T, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Metallic, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_KYOE, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Specular, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_BC5L, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Roughness, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_ASS1, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Anisotropy, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_XMAS, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, EmissiveColor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_8YJC, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Opacity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_7H4K, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, OpacityMask, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_5HD4, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Normal, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_MHLT, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Tangent, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_T0OK, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldPositionOffset, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_NUKM, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldDisplacement, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_4D9M, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, TessellationMultiplier, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_DNBD, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, SubsurfaceColor, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_TB0K, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoat, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_IVXD, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoatRoughness, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_VT13, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, AmbientOcclusion, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_1M2K, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Refraction, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_DHNC, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, CustomizedUVs, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_CXX5, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, PixelDepthOffset, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_Z78T, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ShadingModel, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_F114, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMakeMaterialAttributes, 0x0270);
		}

		// class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialFunctionCall)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, MaterialFunction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, FunctionParameterInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialFunctionCall, 0x0058);
		}

		// class UMaterialExpressionFunctionOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, OutputName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, Description, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, SortPriority, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, A, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_0TIH, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_IBNE, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, ID, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_H3J4, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionOutput, 0x0088);
		}

		// class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialLayerOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialLayerOutput, 0x0088);
		}

		// class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_NPYU, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, ResetVector, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_CT33, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorProp, 0x0068);
		}

		// class UInterpTrackInstVisibility : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, UnknownData_QHCG, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, LastUpdatePosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVisibility, 0x0030);
		}

		// class UInterpTrackLinearColorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackLinearColorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, LinearColorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, UnknownData_46GX, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorBase, 0x0090);
		}

		// class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
		TEST_METHOD(Class__Engine__InterpTrackLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorProp, 0x0098);
		}

		// class UInterpTrackMove : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, PosTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, EulerTrack, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookupTrack, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookAtGroupName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LinCurveTension, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, AngCurveTension, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_DCTB, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, RotMode, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_S3WN, 0x00C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMove, 0x00C8);
		}

		// class UInterpTrackParticleReplay : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackParticleReplay, TrackKeys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackParticleReplay, 0x0080);
		}

		// class UInterpTrackSlomo : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackSlomo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSlomo, 0x0090);
		}

		// class UInterpTrackSound : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, Sounds, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, UnknownData_I119, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSound, 0x00A8);
		}

		// class UInterpTrackToggle : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, ToggleTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, UnknownData_BE4M, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackToggle, 0x0088);
		}

		// class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorMaterialParam, 0x00A8);
		}

		// class UInterpTrackVectorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorProp, 0x0098);
		}

		// class UInterpTrackVisibility : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, VisibilityTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, UnknownData_ZJFB, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVisibility, 0x0088);
		}

		// class UIntSerialization : public UObject
		TEST_METHOD(Class__Engine__IntSerialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt16Variable, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_53LF, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt32Variable, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt64Variable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt8Variable, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_3N1A, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt16Variable, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_A1UY, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt64Variable, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt8Variable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_QDMK, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt32Variable, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntSerialization, 0x0050);
		}

		// class AKillZVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__KillZVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKillZVolume, 0x0270);
		}

		// class UKismetArrayLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetArrayLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetArrayLibrary, 0x0028);
		}

		// class UKismetGuidLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetGuidLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetGuidLibrary, 0x0028);
		}

		// class UKismetInputLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInputLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInputLibrary, 0x0028);
		}

		// class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInternationalizationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInternationalizationLibrary, 0x0028);
		}

		// class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMaterialLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMaterialLibrary, 0x0028);
		}

		// class UKismetMathLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMathLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMathLibrary, 0x0028);
		}

		// class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetNodeHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetNodeHelperLibrary, 0x0028);
		}

		// class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetRenderingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetRenderingLibrary, 0x0028);
		}

		// class UKismetStringLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringLibrary, 0x0028);
		}

		// class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringTableLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringTableLibrary, 0x0028);
		}

		// class UKismetSystemLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetSystemLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetSystemLibrary, 0x0028);
		}

		// class UKismetTextLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetTextLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetTextLibrary, 0x0028);
		}

		// class UVOIPTalker : public UActorComponent
		TEST_METHOD(Class__Engine__VOIPTalker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, Settings, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, UnknownData_72RM, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPTalker, 0x00E8);
		}

		// class UVOIPStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VOIPStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPStatics, 0x0028);
		}

		// class UVolumeTexture : public UTexture
		TEST_METHOD(Class__Engine__VolumeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumeTexture, UnknownData_PQJN, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVolumeTexture, 0x0110);
		}

		// class ULocalPlayer : public UPlayer
		TEST_METHOD(Class__Engine__LocalPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_VK7X, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ViewportClient, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_HLLZ, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, AspectRatioAxisConstraint, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_ZY22, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, PendingLevelPlayerControllerClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_4D15, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ControllerId, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_NV3F, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayer, 0x0258);
		}

		// class ULocalPlayerSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__LocalPlayerSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayerSubsystem, 0x0030);
		}

		// class ALODActor : public AActor
		TEST_METHOD(Class__Engine__LODActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, StaticMeshComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, ImpostersStaticMeshComponents, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Proxy, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Key, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODDrawDistance, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODLevel, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, SubActors, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, CachedNumHLODLevels, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, UnknownData_RKY2, 0x02A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALODActor, 0x02B0);
		}

		// class UMapBuildDataRegistry : public UObject
		TEST_METHOD(Class__Engine__MapBuildDataRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, LevelLightingQuality, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, UnknownData_WB7P, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapBuildDataRegistry, 0x0238);
		}

		// class UMaterialExpressionArctangent2Fast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2Fast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_W087, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_YIWS, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2Fast, 0x0068);
		}

		// class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionBentNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, UnknownData_3FWR, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBentNormalCustomOutput, 0x0058);
		}

		// class UMaterialFunctionInstance : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunctionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Parent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Base, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, ScalarParameterValues, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, VectorParameterValues, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, TextureParameterValues, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, FontParameterValues, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticSwitchParameterValues, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticComponentMaskParameterValues, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, RuntimeVirtualTextureParameterValues, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInstance, 0x00C0);
		}

		// class UMaterialFunctionMaterialLayer : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayer, 0x0058);
		}

		// class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerInstance, 0x00C0);
		}

		// class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlend)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlend, 0x0058);
		}

		// class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlendInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlendInstance, 0x00C0);
		}

		// class AMaterialInstanceActor : public AActor
		TEST_METHOD(Class__Engine__MaterialInstanceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMaterialInstanceActor, TargetActors, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMaterialInstanceActor, 0x0238);
		}

		// class UMaterialInstanceDynamic : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceDynamic, UnknownData_HSCZ, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceDynamic, 0x0458);
		}

		// class UMaterialParameterCollection : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, ScalarParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, VectorParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, UnknownData_N5UX, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollection, 0x0078);
		}

		// class UMaterialParameterCollectionInstance : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollectionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_JW28, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, Collection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_SMM2, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollectionInstance, 0x00F0);
		}

		// class AMatineeActor : public AActor
		TEST_METHOD(Class__Engine__MatineeActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeData, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeControllerName, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PlayRate, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_JLAT, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ForceStartPosition, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_E77Q, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PreferredSplitScreenNum, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_IW36, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupActorInfos, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_IIK3, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupInst, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, CameraCuts, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_OWSM, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, InterpPosition, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_PBS8, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ReplicationForceIsPlaying, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_RNLC, 0x0295);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPlay, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnStop, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPause, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_JE3F, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActor, 0x02D0);
		}

		// class AMatineeActorCameraAnim : public AMatineeActor
		TEST_METHOD(Class__Engine__MatineeActorCameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActorCameraAnim, CameraAnim, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActorCameraAnim, 0x02D8);
		}

		// class UMatineeAnimInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeAnimInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeAnimInterface, 0x0028);
		}

		// class UMatineeInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeInterface, 0x0028);
		}

		// class AMeshMergeCullingVolume : public AVolume
		TEST_METHOD(Class__Engine__MeshMergeCullingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMeshMergeCullingVolume, 0x0260);
		}

		// class UMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__MeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSimplificationSettings, MeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSimplificationSettings, 0x0040);
		}

		// class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__MeshVertexPainterKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexPainterKismetLibrary, 0x0028);
		}

		// class UMicroTransactionBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__MicroTransactionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, AvailableProducts, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastError, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastErrorSolution, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMicroTransactionBase, 0x0068);
		}

		// class UModelComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ModelComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_5PWW, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, ModelBodySetup, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_17HU, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModelComponent, 0x0430);
		}

		// class UMorphTarget : public UObject
		TEST_METHOD(Class__Engine__MorphTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, BaseSkelMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, UnknownData_YFRF, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMorphTarget, 0x0040);
		}

		// class UNavAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__NavAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAgentInterface, 0x0028);
		}

		// class UNavAreaBase : public UObject
		TEST_METHOD(Class__Engine__NavAreaBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaBase, UnknownData_V1JW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaBase, 0x0030);
		}

		// class UNavCollisionBase : public UObject
		TEST_METHOD(Class__Engine__NavCollisionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollisionBase, UnknownData_DPTQ, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollisionBase, 0x0070);
		}

		// class UNavEdgeProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NavEdgeProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavEdgeProviderInterface, 0x0028);
		}

		// class UNavigationDataChunk : public UObject
		TEST_METHOD(Class__Engine__NavigationDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationDataChunk, NavigationDataName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataChunk, 0x0030);
		}

		// class UNavigationDataInterface : public UInterface
		TEST_METHOD(Class__Engine__NavigationDataInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataInterface, 0x0028);
		}

		// class UNavigationSystemBase : public UObject
		TEST_METHOD(Class__Engine__NavigationSystemBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemBase, 0x0028);
		}

		// class UNavigationSystemConfig : public UObject
		TEST_METHOD(Class__Engine__NavigationSystemConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, NavigationSystemClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, SupportedAgentsMask, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, DefaultAgentName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, UnknownData_A7J9, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemConfig, 0x0050);
		}

		// class UNullNavSysConfig : public UNavigationSystemConfig
		TEST_METHOD(Class__Engine__NullNavSysConfig)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullNavSysConfig, 0x0050);
		}

		// class UMaterialExpressionAppendVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAppendVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_5ZCM, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_FZXJ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAppendVector, 0x0068);
		}

		// class UMaterialExpressionArccosineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, UnknownData_0LHM, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosineFast, 0x0058);
		}

		// class UMaterialExpressionArcsineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, UnknownData_IAQX, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsineFast, 0x0058);
		}

		// class UMaterialExpressionArctangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, UnknownData_4NWS, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent, 0x0058);
		}

		// class UMaterialExpressionGIReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGIReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_3B2J, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, StaticIndirect, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_SZY9, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, DynamicIndirect, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_SFKL, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGIReplace, 0x0080);
		}

		// class UMaterialExpressionHairAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionHairAttributes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionHairAttributes, 0x0040);
		}

		// class UMaterialExpressionIf : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionIf)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_M2XE, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_I586, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AGreaterThanB, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_ATY5, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AEqualsB, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_62K8, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ALessThanB, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_G4HV, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, EqualsThreshold, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstB, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstAEqualsB, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionIf, 0x00B0);
		}

		// class UMaterialExpressionLightmapUVs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmapUVs)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmapUVs, 0x0040);
		}

		// class UParticleModuleEventGenerator : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventGenerator, Events, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventGenerator, 0x0040);
		}

		// class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventGeneratorType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_TWN5, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_NSSV, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverBase, 0x0040);
		}

		// class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverKillParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverKillParticles, UnknownData_DR3L, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverKillParticles, 0x0048);
		}

		// class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, SpawnCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_9Z6Q, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, InheritVelocityScale, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, PhysicalMaterials, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_VNCD, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverSpawn, 0x00D8);
		}

		// class UParticleModuleEventSendToGame : public UObject
		TEST_METHOD(Class__Engine__ParticleModuleEventSendToGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventSendToGame, 0x0028);
		}

		// class UParticleModuleKillBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleKillBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBase, 0x0030);
		}

		// class UParticleModuleKillBox : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, LowerLeftCorner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UpperRightCorner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UnknownData_1ADX, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBox, 0x00C8);
		}

		// class UParticleModuleKillHeight : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillHeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, Height, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, UnknownData_Y5DU, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillHeight, 0x0068);
		}

		// class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
		TEST_METHOD(Class__Engine__ParticleModuleLifetime_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime_Seeded, 0x0080);
		}

		// class UParticleModuleLocation_Seeded : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation_Seeded, 0x00A0);
		}

		// class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationBoneSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_46RR, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceLocations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SelectionMethod, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_BYXG, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_KLB2, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, InheritVelocityScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SkelMeshActorParamName, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, NumPreSelectedIndices, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_J33X, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBoneSocket, 0x0070);
		}

		// class USoundNodeDialoguePlayer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDialoguePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, DialogueWaveParameter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, UnknownData_RLE5, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDialoguePlayer, 0x0070);
		}

		// class UMaterialExpressionDDX : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDX)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, UnknownData_I7E3, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDX, 0x0058);
		}

		// class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionThinTranslucentMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionThinTranslucentMaterialOutput, TransmittanceColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionThinTranslucentMaterialOutput, UnknownData_ODKK, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionThinTranslucentMaterialOutput, 0x0058);
		}

		// class UMaterialExpressionTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, UnknownData_AUU9, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, Period, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTime, 0x0048);
		}

		// class UMaterialExpressionTransform : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_YWLE, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformSourceType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformType, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_2VC0, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransform, 0x0058);
		}

		// class UMaterialExpressionTransformPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransformPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_XV6W, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformSourceType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformType, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_MCM6, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransformPosition, 0x0058);
		}

		// class UParticleModuleLocationDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Location, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, LocationOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, ScaleFactor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Direction, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationDirect, 0x0150);
		}

		// class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, SelectionMethod, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_T3BG, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_HFFR, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceVelocityScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_VQVV, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceRotationScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_8TVY, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitter, 0x0050);
		}

		// class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitterDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitterDirect, EmitterName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitterDirect, 0x0038);
		}

		// class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationWorldOffset_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset_Seeded, 0x00A0);
		}

		// class UParticleModuleMaterialBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleMaterialBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMaterialBase, 0x0030);
		}

		// class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshMaterial, MeshMaterials, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshMaterial, 0x0040);
		}

		// class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateMultiplyLife, 0x0078);
		}

		// class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, RotRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, UnknownData_J8PM, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateOverLife, 0x0080);
		}

		// class UParticleModuleOrbitBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrbitBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbitBase, UnknownData_PQ3I, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbitBase, 0x0038);
		}

		// class UNetworkSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__NetworkSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_34I5, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArraySize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArrayMemory, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_47F7, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, NetworkEmulationProfiles, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkSettings, 0x0058);
		}

		// class UNodeMappingContainer : public UObject
		TEST_METHOD(Class__Engine__NodeMappingContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceItems, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetItems, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceToTarget, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceAsset, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetAsset, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingContainer, 0x0168);
		}

		// class UNodeMappingProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NodeMappingProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingProviderInterface, 0x0028);
		}

		// class ANote : public AActor
		TEST_METHOD(Class__Engine__Note)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANote, 0x0228);
		}

		// class UObjectLibrary : public UObject
		TEST_METHOD(Class__Engine__ObjectLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, ObjectBaseClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bHasBlueprintClasses, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_LNTQ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, WeakObjects, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bUseWeakReferences, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bIsFullyLoaded, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_AFD5, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectLibrary, 0x00A8);
		}

		// class UObjectReferencer : public UObject
		TEST_METHOD(Class__Engine__ObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectReferencer, ReferencedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectReferencer, 0x0038);
		}

		// class UObjectTraceWorldSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Engine__ObjectTraceWorldSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectTraceWorldSubsystem, UnknownData_WARZ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectTraceWorldSubsystem, 0x0038);
		}

		// class UPackageMapClient : public UPackageMap
		TEST_METHOD(Class__Engine__PackageMapClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMapClient, UnknownData_Y6Y8, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMapClient, 0x03F8);
		}

		// class APainCausingVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__PainCausingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_SIDF, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamagePerSec, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageType, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, PainInterval, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_ZNFG, 0x0285);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageInstigator, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_WXYM, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APainCausingVolume, 0x0298);
		}

		// class UParticleEmitter : public UObject
		TEST_METHOD(Class__Engine__ParticleEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SubUVDataOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterRenderMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SignificanceLevel, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_ZF9X, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_J5B1, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, LODLevels, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, PeakActiveParticles, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, InitialAllocationCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, QualityLevelSpawnRateScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, DetailModeBitmask, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_OFN7, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleEmitter, 0x01B8);
		}

		// class AParticleEventManager : public AActor
		TEST_METHOD(Class__Engine__ParticleEventManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AParticleEventManager, 0x0228);
		}

		// class UParticleLODLevel : public UObject
		TEST_METHOD(Class__Engine__ParticleLODLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Level, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_GJNW, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, RequiredModule, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Modules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, TypeDataModule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModule, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventGenerator, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawningModules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModules, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UpdateModules, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, OrbitModules, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventReceiverModules, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_49I1, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, PeakActiveParticles, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleLODLevel, 0x00B8);
		}

		// class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, UnknownData_46UN, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationConstant, 0x0048);
		}

		// class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDrag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficient, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficientRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDrag, 0x0070);
		}

		// class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationOverLifetime, AccelOverLife, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationOverLifetime, 0x0080);
		}

		// class UParticleModuleBeamModifier : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, ModifierType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_ZUCJ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, PositionOptions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Position, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, TangentOptions, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_YA1Y, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Tangent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_9208, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, StrengthOptions, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Strength, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamModifier, 0x0108);
		}

		// class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, RandomSeedInfo, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, 0x0140);
		}

		// class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere_Seeded, RandomSeedInfo, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere_Seeded, 0x0100);
		}

		// class UParticleModuleOrbit : public UParticleModuleOrbitBase
		TEST_METHOD(Class__Engine__ParticleModuleOrbit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, ChainMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_NT76, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetAmount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetOptions, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_LBNX, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationAmount, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationOptions, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_3GNA, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateAmount, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateOptions, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_CU9N, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbit, 0x0130);
		}

		// class UParticleModuleOrientationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrientationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationBase, 0x0030);
		}

		// class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
		TEST_METHOD(Class__Engine__ParticleModuleOrientationAxisLock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, LockAxisFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, UnknownData_XYD6, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationAxisLock, 0x0038);
		}

		// class UParticleModuleParameterBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleParameterBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterBase, 0x0030);
		}

		// class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, DynamicParams, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UpdateFlags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UnknownData_M4DK, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic, 0x0048);
		}

		// class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic_Seeded, RandomSeedInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic_Seeded, 0x0068);
		}

		// class UParticleModulePivotOffset : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModulePivotOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModulePivotOffset, PivotOffset, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModulePivotOffset, 0x0038);
		}

		// class UParticleModuleRequired : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRequired)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, Material, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MinFacingCameraBlendDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxFacingCameraBlendDistance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterOrigin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ScreenAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SortMode, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDuration, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SpawnRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BurstList, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelay, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelayLow, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, InterpolationMethod, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ParticleBurstMethod, 0x00AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, OpacitySourceMode, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterNormalsMode, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Horizontal, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Vertical, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageChanges, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVPosition, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVRadius, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UVFlippingMode, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BoundingMode, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_S5Y6, 0x00D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsSphereCenter, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, AlphaThreshold, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterLoops, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, CutoutTexture, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxDrawCount, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDurationLow, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsCylinderDirection, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_VJWZ, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NamedMaterialOverrides, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_8BY1, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRequired, 0x0140);
		}

		// class UParticleModuleRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation, StartRotation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation, 0x0060);
		}

		// class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate_Seeded, 0x0080);
		}

		// class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateMultiplyLife, 0x0060);
		}

		// class UParticleModuleSizeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSizeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeBase, 0x0030);
		}

		// class UParticleModuleSize : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize, StartSize, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize, 0x0078);
		}

		// class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScaleBySpeed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, SpeedScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, MaxScale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScaleBySpeed, 0x0040);
		}

		// class UParticleModuleRotation_Seeded : public UParticleModuleRotation
		TEST_METHOD(Class__Engine__ParticleModuleRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation_Seeded, 0x0080);
		}

		// class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, RotationOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, UnknownData_N7NV, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationOverLifetime, 0x0068);
		}

		// class UParticleModuleSize_Seeded : public UParticleModuleSize
		TEST_METHOD(Class__Engine__ParticleModuleSize_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize_Seeded, RandomSeedInfo, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize_Seeded, 0x0098);
		}

		// class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, LifeMultiplier, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, UnknownData_P513, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeMultiplyLife, 0x0080);
		}

		// class UParticleModuleSizeScale : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, SizeScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, UnknownData_QO91, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScale, 0x0080);
		}

		// class UParticleModuleSourceMovement : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleSourceMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSourceMovement, SourceMovementScale, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSourceMovement, 0x0078);
		}

		// class UParticleModuleSpawnBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSpawnBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnBase, UnknownData_3ZL9, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnBase, 0x0038);
		}

		// class UParticleModuleSpawn : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, Rate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, RateScale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, ParticleBurstMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_DCSH, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstList, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstScale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_5D1N, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawn, 0x00E8);
		}

		// class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawnPerUnit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnitScalar, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MovementTolerance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, SpawnPerUnit, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MaxFrameDistance, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_CN73, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnPerUnit, 0x0078);
		}

		// class UParticleModuleSubUVBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSubUVBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVBase, 0x0030);
		}

		// class UParticleModuleSubUV : public UParticleModuleSubUVBase
		TEST_METHOD(Class__Engine__ParticleModuleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, Animation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, SubImageIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, UnknownData_J3U6, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUV, 0x0070);
		}

		// class UParticleModuleSubUVMovie : public UParticleModuleSubUV
		TEST_METHOD(Class__Engine__ParticleModuleSubUVMovie)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_GREB, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, FrameRate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, StartingFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_2OH8, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVMovie, 0x00B0);
		}

		// class UParticleModuleTrailBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTrailBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailBase, 0x0030);
		}

		// class UParticleModuleTrailSource : public UParticleModuleTrailBase
		TEST_METHOD(Class__Engine__ParticleModuleTrailSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_4LQ2, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_TZ2S, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceStrength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_1P45, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetCount, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetDefaults, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SelectionMethod, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_KKY9, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_9ULV, 0x008D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailSource, 0x0090);
		}

		// class UParticleModuleTypeDataBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBase, 0x0030);
		}

		// class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataAnimTrail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_L5W9, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TilingDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, DistanceTessellationStepSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TangentTessellationStepSize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, WidthTessellationStepSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_J88P, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataAnimTrail, 0x0048);
		}

		// class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBeam2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BeamMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_RNE1, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTile, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTileDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Sheets, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, MaxBeamCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Speed, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, InterpolationPoints, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_WZXG, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UpVectorStepSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BranchParentName, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_KIWX, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Distance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperMethod, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_TBT8, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperFactor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperScale, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_EU6V, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBeam2, 0x0150);
		}

		// class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataGpu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, EmitterInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, ResourceData, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, CameraMotionBlurAmount, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, UnknownData_MU55, 0x0415);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataGpu, 0x0420);
		}

		// class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Mesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_QRKD, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, LODSizeScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, MeshAlignment, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_E8T2, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, RollPitchYawRange, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, AxisLockOption, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingUpAxisOption, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingOption, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_DA8Z, 0x0095);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataMesh, 0x0098);
		}

		// class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataRibbon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTessellationBetweenParticles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, SheetsPerTrail, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTrailCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxParticleInTrailCount, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_N8XL, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, RenderAxis, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_LBQL, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentSpawningScalar, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_VJXJ, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TilingDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, DistanceTessellationStepSize, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_CLYD, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentTessellationScalar, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataRibbon, 0x0060);
		}

		// class UParticleModuleVectorFieldBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldBase, 0x0030);
		}

		// class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldGlobal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_FURU, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldTightness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_CMV9, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldGlobal, 0x0040);
		}

		// class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldLocal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, VectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeTranslation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeScale3D, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Intensity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Tightness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, UnknownData_SBWI, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldLocal, 0x0068);
		}

		// class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, RotationRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, UnknownData_C960, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotationRate, 0x0040);
		}

		// class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLifeRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScaleOverLife, 0x0068);
		}

		// class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
		TEST_METHOD(Class__Engine__ParticleModuleVelocity_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity_Seeded, RandomSeedInfo, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity_Seeded, 0x00D0);
		}

		// class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityInheritParent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityInheritParent, Scale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityInheritParent, 0x0080);
		}

		// class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, VelOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, UnknownData_6W2E, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityOverLifetime, 0x0088);
		}

		// class UParticleSpriteEmitter : public UParticleEmitter
		TEST_METHOD(Class__Engine__ParticleSpriteEmitter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSpriteEmitter, 0x01B8);
		}

		// class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MinInitialRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MaxInitialRotation, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotation, 0x0048);
		}

		// class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScaleRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScale, 0x0068);
		}

		// class USkeletalBodySetup : public UBodySetup
		TEST_METHOD(Class__Engine__SkeletalBodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, bSkipScaleFromAnimation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, UnknownData_IU07, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, PhysicalAnimationData, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalBodySetup, 0x0268);
		}

		// class UPhysicsCollisionHandler : public UObject
		TEST_METHOD(Class__Engine__PhysicsCollisionHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactThreshold, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactReFireDelay, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, DefaultImpactSound, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, LastImpactSoundTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, UnknownData_FPFA, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsCollisionHandler, 0x0040);
		}

		// class APhysicsConstraintActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsConstraintActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintComp, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor2, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, UnknownData_S1CO, 0x0241);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsConstraintActor, 0x0248);
		}

		// class USoundConcurrency : public UObject
		TEST_METHOD(Class__Engine__SoundConcurrency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundConcurrency, Concurrency, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundConcurrency, 0x0048);
		}

		// class USoundCue : public USoundBase
		TEST_METHOD(Class__Engine__SoundCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_6LF2, 0x0161);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, FirstNode, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, VolumeMultiplier, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, PitchMultiplier, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, AttenuationOverrides, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, SubtitlePriority, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_9TUZ, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_7NNN, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, CookedQualityIndex, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_QZCR, 0x0529);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundCue, 0x0538);
		}

		// class USoundEffectSourcePresetChain : public UObject
		TEST_METHOD(Class__Engine__SoundEffectSourcePresetChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, Chain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, UnknownData_ULKH, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePresetChain, 0x0040);
		}

		// class USoundNodeDoppler : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDoppler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, DopplerIntensity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, bUseSmoothing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_TIPU, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, SmoothingInterpSpeed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_PNSY, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDoppler, 0x0058);
		}

		// class USoundNodeEnveloper : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeEnveloper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, DurationAfterLoop, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, UnknownData_OGAJ, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeInterpCurve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchInterpCurve, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchCurve, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMin, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMax, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMin, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMax, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeEnveloper, 0x0190);
		}

		// class USoundNodeGroupControl : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeGroupControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeGroupControl, GroupSizes, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeGroupControl, 0x0058);
		}

		// class USoundNodeLooping : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeLooping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, LoopCount, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, UnknownData_UONL, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeLooping, 0x0050);
		}

		// class USoundNodeMature : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMature)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMature, 0x0048);
		}

		// class USoundNodeMixer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMixer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeMixer, InputVolume, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMixer, 0x0058);
		}

		// class USoundNodeModulator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMax, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMax, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulator, 0x0058);
		}

		// class USubsurfaceProfile : public UObject
		TEST_METHOD(Class__Engine__SubsurfaceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, Settings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, UnknownData_2S0S, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsurfaceProfile, 0x00B8);
		}

		// class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__SubsystemBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsystemBlueprintLibrary, 0x0028);
		}

		// class USubUVAnimation : public UObject
		TEST_METHOD(Class__Engine__SubUVAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubUVTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Horizontal, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Vertical, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, BoundingMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, OpacitySourceMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_JZLD, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, AlphaThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_UUOD, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubUVAnimation, 0x0068);
		}

		// class UTimecodeProvider : public UObject
		TEST_METHOD(Class__Engine__TimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimecodeProvider, FrameDelay, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimecodeProvider, UnknownData_6Q9L, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimecodeProvider, 0x0030);
		}

		// class USystemTimeTimecodeProvider : public UTimecodeProvider
		TEST_METHOD(Class__Engine__SystemTimeTimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, FrameRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, bGenerateFullFrame, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, bUseHighPerformanceClock, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, UnknownData_OE9C, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USystemTimeTimecodeProvider, 0x0040);
		}

		// class ATargetPoint : public AActor
		TEST_METHOD(Class__Engine__TargetPoint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATargetPoint, 0x0228);
		}

		// class UTextPropertyTestObject : public UObject
		TEST_METHOD(Class__Engine__TextPropertyTestObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, DefaultedText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, UndefaultedText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, TransientText, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextPropertyTestObject, 0x0070);
		}

		// class ATextRenderActor : public AActor
		TEST_METHOD(Class__Engine__TextRenderActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATextRenderActor, TextRender, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATextRenderActor, 0x0230);
		}

		// class UTextRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__TextRenderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Text, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextMaterial, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Font, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizontalAlignment, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VerticalAlignment, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_T4OV, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextRenderColor, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, XScale, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, YScale, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, WorldSize, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, InvDefaultSize, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizSpacingAdjust, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VertSpacingAdjust, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_PSGC, 0x0439);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextRenderComponent, 0x0440);
		}

		// class UTexture2DArray : public UTexture
		TEST_METHOD(Class__Engine__Texture2DArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, UnknownData_1Y6F, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DArray, 0x0110);
		}

		// class UTexture2DDynamic : public UTexture
		TEST_METHOD(Class__Engine__Texture2DDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_ZP3X, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, Format, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_0RMQ, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DDynamic, 0x00D0);
		}

		// class UTextureLightProfile : public UTexture2D
		TEST_METHOD(Class__Engine__TextureLightProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, Brightness, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, TextureMultiplier, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLightProfile, 0x00F0);
		}

		// class UTextureMipDataProviderFactory : public UAssetUserData
		TEST_METHOD(Class__Engine__TextureMipDataProviderFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureMipDataProviderFactory, 0x0028);
		}

		// class UTextureRenderTargetCube : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTargetCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, SizeX, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, ClearColor, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, OverrideFormat, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, UnknownData_8ZZZ, 0x00D6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTargetCube, 0x00D8);
		}

		// class UThumbnailInfo : public UObject
		TEST_METHOD(Class__Engine__ThumbnailInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThumbnailInfo, 0x0028);
		}

		// class UTimelineComponent : public UActorComponent
		TEST_METHOD(Class__Engine__TimelineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, TheTimeline, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, UnknownData_00NP, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineComponent, 0x0150);
		}

		// class UTimelineTemplate : public UObject
		TEST_METHOD(Class__Engine__TimelineTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LengthMode, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UnknownData_YL8R, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, EventTracks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FloatTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VectorTracks, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LinearColorTracks, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, MetaDataArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineGuid, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VariableName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, DirectionPropertyName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UpdateFunctionName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FinishedFunctionName, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineTemplate, 0x00B0);
		}

		// class UTireType : public UDataAsset
		TEST_METHOD(Class__Engine__TireType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, FrictionScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, UnknownData_TSY7, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireType, 0x0038);
		}

		// class UTitleUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TitleUI__TitleUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, SubMenuExited, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, WarningScreen, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, FadeAnim, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, AcceptBackBox, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, AcceptButton, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, BackButton, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, BackButtonRichText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, BackButtonRichText_2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, BackButtonRichText_3, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, BackButtonRichText_4, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, BackButtonRichText_5, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, BackButtonRichText_6, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, Backstage, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, BalloonBoyMinigame, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, BlackBackground, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, Bowling, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, BurntrapBattle, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, Character_Gallery, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, ChicaFeedingFrenzy, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, ConfirmDelete_PopUp, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, Continue_AreYouSure, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, Continue_NoButton, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, Continue_YesButton, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, Continue_YesNo, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, ContinueGameButton, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, ContinueGameMenu, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, CreditsButton, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, Daycare, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, DeleteButton_2, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, DeleteGameButton, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, DeleteGameMenu, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, DJWestArcade, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, DLCButton, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, Endogeddon, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, ExitButton, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, ExitPopUp, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, ExtrasButton, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, FazerBlast, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, Kitchen, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, LightTest, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, LoadGameBackBox, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, LoadGameBackBox_2, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, LoadGameButton, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, LoadGameMenu, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, Lobby, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, MainMenu, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, MainMenuLogo, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, MenuC0, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, MenuSplashSwitcher, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, MenuSwitcher, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, MiniGamePopup, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, MiniGamesButton, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, MiniGolf_Course1, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, MiniGolf_Course2, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, MiniGolf_Course3, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, MinimalMainMenu_3, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, MontyGolf, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, NewGame_AreYouSure, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, NewGame_YesNo, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, NewGameButton, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, NewGameCinematicPlayerUI, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, NewGameNoButton, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, NewGameOverwriteMenu, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, NewGameSlots, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, NewGameYesButton, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, NewSlotButton, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, OfficeGamePopup, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, OfficeGamesButton, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, OptionsButton, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, OptionsUI, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, PizzaSim, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, PlayButton, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, PrincessQuestAct1, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, PrincessQuestAct2, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, PrincessQuestAct3, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, PrizeCounter, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, Progressbar_TitleSkipUI, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, RandomSeed_Button, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, RenameButton, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, RoxyRacers, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, SDRBackBox, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, SeedSelectionUI, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, SeedSelectionUI_2, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, SeedSelectionUI_3, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, SeedSelectionUI_4, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, SeedSelectionUI_5, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, SeedSelectionUI_6, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, SlotsScroll, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, SlotsScroll_ForDeletion, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, SpawnLoc_Container, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, StartButton, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, StartDeleteRename, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, SubMenu, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, Survival_Easy, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, Survival_Hard, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, Survival_Lives_2, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, Survival_Lives_11, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, Survival_Lives_Infinite, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, Survival_Med, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, Survival_Start_Button, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, Survival_Time_16, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, Survival_Time_31, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, Survival_Time_61, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, SurvivalDif_Container, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, SurvivalModeButton, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, SurvivalPopup, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, SurvivalSpawnAllPossibleLocations, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, TitleBackground, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, TitleLogo_2, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, TitleSkrim, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, VannyBattle, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, WI_RollingCredits, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, DebugMenu, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, AllowContinueNewGame, 0x05B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, UnknownData_URB0, 0x05BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, SlotForNewGame, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, DifficultySelectors, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, TimeSelectors, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, LivesSelectors, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, LastMenuIndex, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, SeedSelectionIndex, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, ButtonHover, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, UnknownData_48OS, 0x0609);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, FNAF_INTRO_mp4, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, IntroPlaying, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, MenuButtonStyle, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, PlayerSettingsSaveObject, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, TextBlockStyle, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, CinematicBackgroundVideo, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, CinematicMedia, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, GameHour, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, UnknownData_V8O0, 0x0B5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, TitleSaveSlotSelected, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, GlobalAmbience, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, BackgroundVideoPlaying, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleUI_C, IntroStarted, 0x0B91);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTitleUI_C, 0x0B92);
		}

		// class UAppleImageUtilsBaseAsyncTaskBlueprintProxy : public UObject
		TEST_METHOD(Class__AppleImageUtils__AppleImageUtilsBaseAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_SUJI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_H3JZ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, ConversionResult, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_T8NO, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, 0x0088);
		}

		// class UAppleImageInterface : public UInterface
		TEST_METHOD(Class__AppleImageUtils__AppleImageInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleImageInterface, 0x0028);
		}

		// class ADJMM_Chase_Location_Actor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__DJMM_Chase_Location_Actor__DJMM_Chase_Location_Actor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Location_Actor_C, DefaultSceneRoot, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADJMM_Chase_Location_Actor_C, 0x0230);
		}

		// class UWI_InstructionCard_Stealth_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_Stealth__WI_InstructionCard_Stealth_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_Stealth_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_Stealth_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_Stealth_C, UI_TextAndIcons, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_Stealth_C, VerticalBox_250, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_Stealth_C, WI_ImageScaled, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_Stealth_C, WI_ImageScaled_2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_Stealth_C, WI_ImageScaled_3, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_Stealth_C, WI_ImageScaled_4, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_Stealth_C, 0x0270);
		}

		// class AInsideStageLiftTrigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__InsideStageLiftTrigger__InsideStageLiftTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInsideStageLiftTrigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInsideStageLiftTrigger_C, MissionStateCondition, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInsideStageLiftTrigger_C, SequenceToPlay, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInsideStageLiftTrigger_C, LineSkipper, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInsideStageLiftTrigger_C, 0x02D8);
		}

		// class UCable07_PAS03_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable07_PAS03_ABP__Cable07_PAS03_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable07_PAS03_ABP_C, 0x05E0);
		}

		// class AFollowSimpleSplineController_C : public AAIController
		TEST_METHOD(BlueprintGeneratedClass__FollowSimpleSplineController__FollowSimpleSplineController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFollowSimpleSplineController_C, UberGraphFrame, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFollowSimpleSplineController_C, Curr_Time, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFollowSimpleSplineController_C, UnknownData_B8AD, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFollowSimpleSplineController_C, Spline, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFollowSimpleSplineController_C, 0x0348);
		}

		// class UStopAlert_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__StopAlert__StopAlert_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStopAlert_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStopAlert_C, Alert, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStopAlert_C, 0x00B8);
		}

		// class UAudioEmitterInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__AudioEmitterInterface__AudioEmitterInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioEmitterInterface_C, 0x0028);
		}

		// class ATeleportSpawnTrigger_C : public AAISpawnTrigger
		TEST_METHOD(BlueprintGeneratedClass__TeleportSpawnTrigger__TeleportSpawnTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportSpawnTrigger_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportSpawnTrigger_C, Sphere, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportSpawnTrigger_C, DistanceSphere, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportSpawnTrigger_C, ReactivationTime, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportSpawnTrigger_C, UnknownData_ZPEN, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportSpawnTrigger_C, Spawned_Pawn, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportSpawnTrigger_C, Should_Reactivate_On_Spawn, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportSpawnTrigger_C, UnknownData_TZWM, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeleportSpawnTrigger_C, Seeker_Patrol_Path, 0x02D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATeleportSpawnTrigger_C, 0x0308);
		}

		// class ABP_DoorModifier_SideLock_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_DoorModifier_SideLock__BP_DoorModifier_SideLock_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, GameTypeCheckDestroy, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, Box_Negative, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, Box_Positive, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, DefaultSceneRoot, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, DoorReference, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, ReattachToReference, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, Enabled, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, IsUnlocker, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, AffectLocalXAxisPositive, 0x027B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, AffectLocalXAxisNegative, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, ForceUnlockIfLocked, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, AffectedClassIgnoresDoorConditions, 0x027E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, AffectDoorSettings, 0x027F);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, PawnIgnoresConditions, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, OverlapPadding, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, UnknownData_53E5, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, AffectClasses, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, P_Box_Array, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, Box_Transforms, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, Box_Extent, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, UnknownData_J12L, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, SelfTransform, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, DoorReference_Previous, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, P_ValidOverlappedActors_Positive, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, P_ValidOverlappedActors_Negative, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, P_DoorMemory_LockedPlayer, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, P_DoorMemory_LockedAI, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, P_SavedDoorMemory, 0x035A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorModifier_SideLock_C, P_HasUpdatedDoorSettings, 0x035B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DoorModifier_SideLock_C, 0x035C);
		}

		// class UResetNoiseMaker_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__ResetNoiseMaker__ResetNoiseMaker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UResetNoiseMaker_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResetNoiseMaker_C, BBNoiseMaker, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResetNoiseMaker_C, Pawn, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResetNoiseMaker_C, Phase, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResetNoiseMaker_C, Pre_Anim_Setup, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResetNoiseMaker_C, UnknownData_1ZK0, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResetNoiseMaker_C, MoonManABP, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResetNoiseMaker_C, WasForcedDown, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResetNoiseMaker_C, 0x00F1);
		}

		// class AP_GoKart_Staffbot_C : public AP_GoKart_C
		TEST_METHOD(BlueprintGeneratedClass__P_GoKart_Staffbot__P_GoKart_Staffbot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_Staffbot_C, UberGraphFrame, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_Staffbot_C, ChildActor, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_Staffbot_C, AnimInstance, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_Staffbot_C, SterringWheel, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_Staffbot_C, LeftIK, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_Staffbot_C, RightIK, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_Staffbot_C, StaffBotRacer, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AP_GoKart_Staffbot_C, 0x03A8);
		}

		// class UWI_InstructionCard_PartyPasses_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_PartyPasses__WI_InstructionCard_PartyPasses_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PartyPasses_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PartyPasses_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PartyPasses_C, VerticalBox_250, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PartyPasses_C, WI_ImageScaled, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_PartyPasses_C, 0x0250);
		}

		// class UStaffbot_Fazerblast_ABP_C : public UStaffbot_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Staffbot_Fazerblast_ABP__Staffbot_Fazerblast_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Fazerblast_ABP_C, UberGraphFrame, 0x2ED0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaffbot_Fazerblast_ABP_C, 0x2ED8);
		}

		// class ALMMSplinePathwayManager_C : public ASplinePathwayManager_C
		TEST_METHOD(BlueprintGeneratedClass__LMMSplinePathwayManager__LMMSplinePathwayManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplinePathwayManager_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplinePathwayManager_C, Arrow, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplinePathwayManager_C, LMMSplineFollower, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplinePathwayManager_C, SplinePathways, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplinePathwayManager_C, CurrentSplinePathway, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplinePathwayManager_C, Splines, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplinePathwayManager_C, DestroyLMM_, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplinePathwayManager_C, UnknownData_FW43, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplinePathwayManager_C, SlideSystem, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplinePathwayManager_C, ForceFollow_, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplinePathwayManager_C, UnknownData_4QP8, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplinePathwayManager_C, MinSpeed, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplinePathwayManager_C, MaxSpeed, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALMMSplinePathwayManager_C, 0x032C);
		}

		// class AGtrStr_3_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__GtrStr_4__GtrStr_3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGtrStr_3_C, Box1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGtrStr_3_C, Box, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGtrStr_3_C, StaticMesh, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGtrStr_3_C, 0x0240);
		}

		// class UFP_RunBob_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__FP_RunBob__FP_RunBob_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFP_RunBob_C, 0x0160);
		}

		// class UPlayerCrouchingService_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__PlayerCrouchingService__PlayerCrouchingService_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCrouchingService_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCrouchingService_C, BBIsCrouching, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerCrouchingService_C, 0x00C8);
		}

		// class UUI_MissionItem_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_MissionItem__UI_MissionItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionItem_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionItem_C, CheckMark, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionItem_C, Item, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_MissionItem_C, 0x0248);
		}

		// class AOcclusionTrace_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__OcclusionTrace__OcclusionTrace_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOcclusionTrace_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOcclusionTrace_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOcclusionTrace_C, endpointvector, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOcclusionTrace_C, OcclusionOutputValue, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOcclusionTrace_C, SingleTraceOnly, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOcclusionTrace_C, 0x0249);
		}

		// class UControlButtonDecorator_C : public URichTextControlButtonDecorator
		TEST_METHOD(BlueprintGeneratedClass__ControlButtonDecorator__ControlButtonDecorator_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlButtonDecorator_C, 0x0030);
		}

		// class USteamAuthComponentModuleInterface : public UHandlerComponentFactory
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamAuthComponentModuleInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamAuthComponentModuleInterface, 0x0028);
		}

		// class USteamNetConnection : public UIpConnection
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetConnection, bIsPassthrough, 0x1AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetConnection, UnknownData_2NCE, 0x1AD1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamNetConnection, 0x1AD8);
		}

		// class USteamNetDriver : public UIpNetDriver
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetDriver, UnknownData_O19R, 0x07B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamNetDriver, 0x07C0);
		}

		// class UAndroidPermissionCallbackProxy : public UObject
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, OnPermissionsGrantedDynamicDelegate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, UnknownData_QUSG, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionCallbackProxy, 0x0048);
		}

		// class UAndroidPermissionFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionFunctionLibrary, 0x0028);
		}

		// class APowerStationPlayerInteractible_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PowerStationPlayerInteractible__PowerStationPlayerInteractible_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationPlayerInteractible_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationPlayerInteractible_C, Hour6EndVOState, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationPlayerInteractible_C, Hour5EndVOState, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationPlayerInteractible_C, Hour6End, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationPlayerInteractible_C, Hour5End, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationPlayerInteractible_C, RechargeTime, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationPlayerInteractible_C, FreddySpawnPoint, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationPlayerInteractible_C, ExitPoint, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationPlayerInteractible_C, PlayerInteract, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationPlayerInteractible_C, DefaultSceneRoot, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationPlayerInteractible_C, PlayerIsIn, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationPlayerInteractible_C, UnknownData_7H39, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationPlayerInteractible_C, Freddy, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationPlayerInteractible_C, CanUse, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationPlayerInteractible_C, UnknownData_UAFL, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationPlayerInteractible_C, RoxysWeakness, 0x028C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APowerStationPlayerInteractible_C, 0x0294);
		}

		// class AMontyBossSpawn_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__MontyBossSpawn__MontyBossSpawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossSpawn_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossSpawn_C, Arrow, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossSpawn_C, DefaultSceneRoot, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMontyBossSpawn_C, 0x0240);
		}

		// class AMontyGolfHallwayTrigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__MontyGolfHallwayTrigger__MontyGolfHallwayTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyGolfHallwayTrigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyGolfHallwayTrigger_C, LineSkipper, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMontyGolfHallwayTrigger_C, 0x02A8);
		}

		// class UWI_InstructionCard_UseTheCameras_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_UseTheCameras__WI_InstructionCard_UseTheCameras_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_UseTheCameras_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_UseTheCameras_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_UseTheCameras_C, VerticalBox_250, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_UseTheCameras_C, WI_ImageScaled, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_UseTheCameras_C, WI_ImageScaled_2, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_UseTheCameras_C, 0x0258);
		}

		// class UPlayerInteractHoldComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__PlayerInteractHoldComponent__PlayerInteractHoldComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractHoldComponent_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractHoldComponent_C, HoldToCollectTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractHoldComponent_C, CollectionTime, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractHoldComponent_C, OnHoldCompleted, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractHoldComponent_C, Percentage, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractHoldComponent_C, HitSuccess, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractHoldComponent_C, UnknownData_7F5N, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractHoldComponent_C, InteractWidget, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInteractHoldComponent_C, 0x00E0);
		}

		// class UPlayerInteractComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__PlayerInteractComponent__PlayerInteractComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractComponent_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractComponent_C, OverlappedInteractibles, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractComponent_C, ClosestInteractible, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractComponent_C, OnInteractibleChanged, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractComponent_C, CurrentInteract, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractComponent_C, InteractiblesThatUpdateOnTick, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInteractComponent_C, 0x00F8);
		}

		// class UDetermineChaseOptions_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__DetermineChaseOptions__DetermineChaseOptions_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDetermineChaseOptions_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDetermineChaseOptions_C, NumHidingSpotsToSearch, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDetermineChaseOptions_C, StayInRoomWeight, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDetermineChaseOptions_C, BBDecision, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDetermineChaseOptions_C, 0x00E0);
		}

		// class ASplinePathway_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SplinePathway__SplinePathway_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplinePathway_C, Spline, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplinePathway_C, ForwardSplines, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplinePathway_C, BackwardSplines, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASplinePathway_C, 0x0250);
		}

		// class USetTrackingPlayer_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__SetTrackingPlayer__SetTrackingPlayer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetTrackingPlayer_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetTrackingPlayer_C, TrackingPlayer, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetTrackingPlayer_C, 0x00B1);
		}

		// class AButtonBase_C : public AActivatorBase_C
		TEST_METHOD(BlueprintGeneratedClass__ButtonBase__ButtonBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AButtonBase_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButtonBase_C, GameTypeCheck, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButtonBase_C, Box, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButtonBase_C, IsToggleButton, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButtonBase_C, UnknownData_X0GR, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButtonBase_C, AllowedPawns, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButtonBase_C, IsOneShot, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButtonBase_C, UnknownData_U6H7, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButtonBase_C, On_Player_Interact, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AButtonBase_C, 0x02D8);
		}

		// class UFindFreddyInteractible_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FindFreddyInteractible__FindFreddyInteractible_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindFreddyInteractible_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindFreddyInteractible_C, FreddyInteractibleKey, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindFreddyInteractible_C, 0x00D8);
		}

		// class UExitPopUp_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ExitPopUp__ExitPopUp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExitPopUp_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExitPopUp_C, BackButton, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExitPopUp_C, ExitButton, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExitPopUp_C, Image_184, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExitPopUp_C, Menu_Popup_Image, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExitPopUp_C, ProgressWarningText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExitPopUp_C, TitleUI, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExitPopUp_C, Exit_BackedOut, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExitPopUp_C, 0x0278);
		}

		// class APresentCollectible_C : public ACollectible_C
		TEST_METHOD(BlueprintGeneratedClass__PresentCollectible__PresentCollectible_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APresentCollectible_C, UnknownData_026E, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::APresentCollectible_C, UberGraphFrame, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APresentCollectible_C, CollectionVisionBlocker, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APresentCollectible_C, StaticLid, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APresentCollectible_C, BoingyBox, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APresentCollectible_C, can_stop, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APresentCollectible_C, UnknownData_TLSC, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APresentCollectible_C, CrankSoundList, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APresentCollectible_C, CrankSound, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APresentCollectible_C, ColorChoice, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APresentCollectible_C, 0x02C9);
		}

		// class APowerStation_Actor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PowerStation_Actor__PowerStation_Actor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, FreddyOrientLocation, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, Ak, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, FreddyMesh, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, FreddyRootLocation, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, FreddyLocation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, MOD_RechargeStation_03, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, MOD_RechargeStation_02, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, MOD_RechargeStation_01, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, PowerStationMesh, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, PowerStationInteract, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, FreddyTrigger, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, WavingTrigger, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, Arrow, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, DefaultSceneRoot, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, DoorMovement_Close_A9869CC84C7249118AD948876C3684EB, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, DoorMovement_Open_A9869CC84C7249118AD948876C3684EB, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, DoorMovement__Direction_A9869CC84C7249118AD948876C3684EB, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, UnknownData_TN82, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, DoorMovement, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, PlungerMovement_Translate_Z_DC7344034DB8EFF52F5BA1A1D146F2EC, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, PlungerMovement__Direction_DC7344034DB8EFF52F5BA1A1D146F2EC, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, UnknownData_CA7Z, 0x02BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, PlungerMovement, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, isTriggerActivated, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, PlayerEnteredStation, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, UnknownData_ROYE, 0x02CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, PlungerLoopCount, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, Opening_, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, UnknownData_3FKM, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, Freddy, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, DeltaSeconds, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, GregoryEntered_, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, CloseDoorWhenGregoryexits_, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, UnknownData_0LRL, 0x02E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, BurntrapFreddyRechargeTime, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_Actor_C, FloorName, 0x02EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APowerStation_Actor_C, 0x02F4);
		}

		// class ABP_UnscrewVent_C : public ABP_VentCover_C
		TEST_METHOD(BlueprintGeneratedClass__BP_UnscrewVent__BP_UnscrewVent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_UnscrewVent_C, UnknownData_75K3, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_UnscrewVent_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_UnscrewVent_C, InventoryConditional, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_UnscrewVent_C, ForceTime_NewTrack_0_4F35A31D4E1E787A3DFFAFB5BA237DFA, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_UnscrewVent_C, ForceTime__Direction_4F35A31D4E1E787A3DFFAFB5BA237DFA, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_UnscrewVent_C, UnknownData_44RS, 0x0275);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_UnscrewVent_C, ForceTime, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_UnscrewVent_C, Is_Open, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_UnscrewVent_C, AddForce, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_UnscrewVent_C, Launch, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_UnscrewVent_C, UnknownData_50SB, 0x0283);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_UnscrewVent_C, ForceDirection, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_UnscrewVent_C, 0x0290);
		}

		// class UVanessa_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Vanessa_ABP__Vanessa_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, UnknownData_H054, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_SequencePlayer_20, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_BlendListByEnum, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_BlendSpacePlayer_3, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_ApplyAdditive, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_UseCachedPose_6, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_LayeredBoneBlend_3, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_UseCachedPose_5, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_SaveCachedPose_2, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_SequencePlayer_19, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_LayeredBoneBlend_2, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_47, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_46, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_45, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_44, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_43, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_42, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_41, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_40, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_SequencePlayer_18, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult_24, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_SequencePlayer_17, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult_23, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_SequencePlayer_16, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult_22, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_39, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_38, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_37, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_36, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_35, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_34, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_33, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_32, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_31, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_30, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_29, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_28, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_27, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_26, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_25, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_24, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_23, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_22, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_SequencePlayer_15, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult_21, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_SequencePlayer_14, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult_20, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_21, 0x0FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_BlendSpacePlayer_2, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult_19, 0x10A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_SequencePlayer_13, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult_18, 0x1150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_SequencePlayer_12, 0x1180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult_17, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_20, 0x1228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_SequencePlayer_11, 0x1250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult_16, 0x12C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_19, 0x12F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_18, 0x1320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_17, 0x1348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_16, 0x1370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_15, 0x1398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_14, 0x13C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_13, 0x13E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_12, 0x1410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_SequencePlayer_10, 0x1438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult_15, 0x14B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_SequencePlayer_9, 0x14E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult_14, 0x1558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_BlendSpacePlayer, 0x1588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult_13, 0x1668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_SequencePlayer_8, 0x1698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult_12, 0x1710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateMachine_4, 0x1740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult_11, 0x17F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_11, 0x1820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_10, 0x1848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_9, 0x1870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_8, 0x1898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_7, 0x18C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_6, 0x18E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_5, 0x1910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_4, 0x1938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_3, 0x1960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult_2, 0x1988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_SequencePlayer_7, 0x19B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult_10, 0x1A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_RandomPlayer_2, 0x1A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult_9, 0x1AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TransitionResult, 0x1B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_SequencePlayer_6, 0x1B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult_8, 0x1BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_SequencePlayer_5, 0x1BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult_7, 0x1C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_SequencePlayer_4, 0x1C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult_6, 0x1CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_RandomPlayer, 0x1D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_SequencePlayer_3, 0x1D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_BlendListByBool_2, 0x1E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult_5, 0x1EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_SequencePlayer_2, 0x1EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult_4, 0x1F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateMachine_3, 0x1F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult_3, 0x2038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateMachine_2, 0x2068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult_2, 0x2118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_SequencePlayer, 0x2148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateResult, 0x21C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_StateMachine, 0x21F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_ModifyBone_2, 0x22A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_ComponentToLocalSpace_2, 0x23A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, UnknownData_3LW6, 0x23C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TwoBoneIK_2, 0x23D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_TwoBoneIK, 0x25B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_ModifyBone, 0x2790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_Root, 0x2898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_LayeredBoneBlend, 0x28C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_Slot_2, 0x2988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_SaveCachedPose, 0x29D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_UseCachedPose_4, 0x2A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_UseCachedPose_3, 0x2AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_Slot, 0x2AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_LocalToComponentSpace_2, 0x2B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, __CustomProperty_HeadAimRot_DC53091D4E6FCA691388C0990162EB0D, 0x2B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, __CustomProperty_isTurning_DC53091D4E6FCA691388C0990162EB0D, 0x2B4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, UnknownData_G2W9, 0x2B4D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, __CustomProperty_Yaw_DC53091D4E6FCA691388C0990162EB0D, 0x2B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, UnknownData_5IT7, 0x2B54);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_LinkedAnimGraph, 0x2B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, UnknownData_8ETL, 0x2BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_RigidBody, 0x2C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_LocalToComponentSpace, 0x3190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_ComponentToLocalSpace, 0x31B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_UseCachedPose_2, 0x31D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_BlendListByBool, 0x31F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimGraphNode_UseCachedPose, 0x3298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, DeltaTimeX, 0x32C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, isMoving, 0x32C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, UnknownData_6V5O, 0x32C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, MoveSpeedInput, 0x32C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, IsHeadAiming, 0x32CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, UnknownData_RWBI, 0x32CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, HeadAimAlpha, 0x32D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, HeadAimRot, 0x32D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, PVTarget_L, 0x32E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, IKEffector_L, 0x32EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, IKEffector_R, 0x32F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, PVTarget_R, 0x3304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, Pawn, 0x3310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, HeadAimTarget, 0x3318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, IK_Interp_Speed, 0x3324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, IsSpotted, 0x3328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, UnknownData_OC8E, 0x3329);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, SpottedDelayTime, 0x332C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, SpottedTimer, 0x3330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AlertLevel, 0x3338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, ScanVariation, 0x333C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, HideType, 0x3340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, CanScan, 0x3341);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, IsSearching, 0x3342);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, canJumpscare, 0x3343);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, RandomRunSelector, 0x3344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, RandomWalkSelector, 0x3348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, UnknownData_0QY3, 0x334C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, NewVar_1, 0x3350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, EarsAlphaBlend, 0x3380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, ChestAimAlpha, 0x3384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, IsPreview, 0x3388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, CanRun, 0x3389);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, UnknownData_L2AU, 0x338A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, WalkSpeed, 0x338C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, CanScanR, 0x3390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, CanScanL, 0x3391);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, UnknownData_AY9Q, 0x3392);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, HidingSpaceType, 0x3394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, Stop_L, 0x3398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, EnableHairSimulation, 0x3399);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, UnknownData_LDNT, 0x339A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, RunSpeed, 0x339C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, ScanTime, 0x33A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, Scan_Direction_Float, 0x33A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, Scan_Curve, 0x33A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, AnimationMode, 0x33B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, UnknownData_CGF3, 0x33B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, CutSceneAnim, 0x33B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, LoopCutScene, 0x33C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, UnknownData_IDV3, 0x33C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, Mesh, 0x33C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, Tightest_Profile, 0x33D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, Tight_Profile, 0x33D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, Default_Profile, 0x33E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, IK_legs, 0x33E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, TrackingPlayer, 0x33E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, UnknownData_ISPU, 0x33EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, ScanMotionAlpha, 0x33EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, ScanTimerSet, 0x33F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, UnknownData_E6XV, 0x33F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, ScanTimeRandom, 0x33F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, OverrideScan, 0x33F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, UnknownData_B4YO, 0x33F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, TargetControlRotation, 0x33FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, SnapOrient, 0x3408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, UnknownData_I275, 0x3409);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, TurnRotationDelta, 0x340C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, CurrentControlRotation, 0x3410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, isTurning, 0x341C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, UnknownData_YVTJ, 0x341D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, OldControlRotation, 0x3420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, BlinkTimerSet, 0x342C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, IsStunned, 0x342D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, CanUpdate, 0x342E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, UnknownData_1MFI, 0x342F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, HairSimAlpha, 0x3430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, isOnScreen, 0x3434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, UnknownData_XL7P, 0x3435);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessa_ABP_C, CutsceneAlpha, 0x3438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVanessa_ABP_C, 0x343C);
		}

		// class UFunctions_AINavigation_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__Functions_AINavigation__Functions_AINavigation_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunctions_AINavigation_C, 0x0028);
		}

		// class ULaserTag_ChasePlayer_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__LaserTag_ChasePlayer__LaserTag_ChasePlayer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTag_ChasePlayer_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTag_ChasePlayer_C, BB_TargetLocation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTag_ChasePlayer_C, BB_LostPlayer, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTag_ChasePlayer_C, BB_IsInRange, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTag_ChasePlayer_C, AcceptanceRadius, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTag_ChasePlayer_C, Debug, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULaserTag_ChasePlayer_C, 0x012D);
		}

		// class UCollectionGrid_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CollectionGrid__CollectionGrid_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectionGrid_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectionGrid_C, Clothes_Grid, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectionGrid_C, Equipment_Grid, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectionGrid_C, Food_Grid, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectionGrid_C, Grid_ScrollBox, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectionGrid_C, Inventory_Grid_Switcher, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectionGrid_C, Misc_Grid, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectionGrid_C, RetroCD_Grid, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectionGrid_C, Trophies_Grid, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectionGrid_C, InventoryDataTable, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectionGrid_C, ImageView, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectionGrid_C, ItemInfoMap, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectionGrid_C, ItemCollectionRef, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectionGrid_C, InventoryGrid, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectionGrid_C, UnknownData_IYY4, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectionGrid_C, RowsInGrid, 0x02E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollectionGrid_C, 0x02E8);
		}

		// class AThrowableObject_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ThrowableObject__ThrowableObject_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AThrowableObject_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AThrowableObject_C, InteractableSphere, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AThrowableObject_C, PhysicsSphere, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AThrowableObject_C, Object, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AThrowableObject_C, DefaultSceneRoot, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AThrowableObject_C, IsInWorld, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AThrowableObject_C, 0x0251);
		}

		// class UBPITurnTowardsAudio_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPITurnTowardsAudio__BPITurnTowardsAudio_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPITurnTowardsAudio_C, 0x0028);
		}

		// class AExitPrizeCounterGame_Trigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__ExitPrizeCounterGame_Trigger__ExitPrizeCounterGame_Trigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AExitPrizeCounterGame_Trigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExitPrizeCounterGame_Trigger_C, TimeCheckComponent, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExitPrizeCounterGame_Trigger_C, MissionStateCondition, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExitPrizeCounterGame_Trigger_C, LineSkipper, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AExitPrizeCounterGame_Trigger_C, 0x02B8);
		}

		// class AEscalator_Trigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__Escalator_Trigger__Escalator_Trigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEscalator_Trigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEscalator_Trigger_C, Box, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEscalator_Trigger_C, MissionStateCondition, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEscalator_Trigger_C, LineSkipper, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEscalator_Trigger_C, 0x02B8);
		}

		// class APRE_Door_Garage_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PRE_Door_Garage__PRE_Door_Garage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, Ak, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, MOD_PartyDoor_Beam06, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, InventoryConditional, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, WorldState, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, MOD_PartyDoor_Beam03, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, MOD_PartyDoor_Beam01, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, LongBeamsGroup, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, MOD_PartyDoor_Beam04, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, MOD_PartyDoor_Beam05, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, ShortBeamsGroup, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, MOD_PartyDoor_Beam02, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, MOD_PartyDoor_Gate01, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, Door_Collision, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, DefaultSceneRoot, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, Timeline_0_Door_Translate_Z_371406B6474B6468BDE654853133CF94, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, Timeline_0__Direction_371406B6474B6468BDE654853133CF94, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, UnknownData_LJQO, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, Timeline_1, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, Is_Open, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, Long_Door_, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, UnknownData_ZSKV, 0x02B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, DoorMat, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, Design_DisabledByRandom_, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, RandomDesign_, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, UnknownData_4AL0, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, Door_Closed, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Door_Garage_C, Door_Open, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_Door_Garage_C, 0x02D8);
		}

		// class ABP_BuildAPizza_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_BuildAPizza__BP_BuildAPizza_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BuildAPizza_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BuildAPizza_C, MOD_PizzaBoxes_Closed, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BuildAPizza_C, MOD_Peperoni, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BuildAPizza_C, MOD_NotMeat, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BuildAPizza_C, SM_Tray_01a, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BuildAPizza_C, MOD_RawPizzaDough, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BuildAPizza_C, DefaultSceneRoot, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BuildAPizza_C, Cheese, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BuildAPizza_C, Sauce, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BuildAPizza_C, Meat, 0x0262);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BuildAPizza_C, Veggies, 0x0263);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BuildAPizza_C, Baked, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BuildAPizza_C, UseFOV, 0x0265);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BuildAPizza_C, 0x0266);
		}

		// class ASM_Stairs_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SM_Stairs__SM_Stairs_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASM_Stairs_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASM_Stairs_C, Box3, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASM_Stairs_C, Box2, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASM_Stairs_C, Box1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASM_Stairs_C, Box, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASM_Stairs_C, StaticMesh, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASM_Stairs_C, Lights_ON_Material, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASM_Stairs_C, Lights_OFF_Material, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASM_Stairs_C, 0x0268);
		}

		// class UBuildPatchManifest : public UObject
		TEST_METHOD(Class__BuildPatchServices__BuildPatchManifest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ManifestFileVersion, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, bIsFileData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, UnknownData_UNN9, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, BuildVersion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchExe, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchCommand, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqIds, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqPath, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqArgs, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, FileManifestList, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ChunkList, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, CustomFields, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuildPatchManifest, 0x0120);
		}

		// class UFP_WalkBob_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__FP_WalkBob__FP_WalkBob_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFP_WalkBob_C, 0x0160);
		}

		// class UCannonHUD_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CannonHUD__CannonHUD_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannonHUD_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannonHUD_C, NumShots, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCannonHUD_C, 0x0240);
		}

		// class UFindNearestPathPointv2_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FindNearestPathPointv2__FindNearestPathPointv2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindNearestPathPointv2_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindNearestPathPointv2_C, BB_PathIndex, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindNearestPathPointv2_C, 0x00D8);
		}

		// class ATurnstileBarOpenable_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TurnstileBarOpenable__TurnstileBarOpenable_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileBarOpenable_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileBarOpenable_C, PlayerBlocker, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileBarOpenable_C, AIDetector, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileBarOpenable_C, SavedState, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileBarOpenable_C, StaticMeshComponent0, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileBarOpenable_C, Orient, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileBarOpenable_C, Scene, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileBarOpenable_C, GateOpen_Yaw_11D3AF8A41ED82DFBC937FB3DEDE2F07, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileBarOpenable_C, GateOpen__Direction_11D3AF8A41ED82DFBC937FB3DEDE2F07, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileBarOpenable_C, UnknownData_96UM, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileBarOpenable_C, GateOpen, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileBarOpenable_C, IsOpen, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileBarOpenable_C, Opening_Direction, 0x0271);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATurnstileBarOpenable_C, 0x0272);
		}

		// class AFreddyGuideAIController_C : public AFreddyAIController_C
		TEST_METHOD(BlueprintGeneratedClass__FreddyGuideAIController__FreddyGuideAIController_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFreddyGuideAIController_C, 0x03B0);
		}

		// class AMainGameGM_C : public Afnaf9GameModeBase
		TEST_METHOD(BlueprintGeneratedClass__MainGameGM__MainGameGM_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, UberGraphFrame, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, DefaultSceneRoot, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, DBG_FlashlightVis, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, UnknownData_SZDS, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, OnAreaLoaded, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, LevelTable, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, FreddyPawn, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, GregoryPawn, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, bRechargeSequenceStarted, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, UnknownData_VPRL, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, PlayerHUD, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, bIsMMActorInScene, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, UnknownData_YQIK, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, MainGameStartupManager, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, PowerStationManager, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, isMMSpawnActive, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, UnknownData_Z212, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, AllMMSpawnPoints, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, MissionTextFormatter, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, CautionBotManager, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, HourlyMissionUpdate, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, HourlyMoonManSequence, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, FogSystem, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, AreaManager, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, AlertSystem, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, FlashlightRechargeManager, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, OnDebugSkip, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, HasLoaded, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, UnknownData_HL7Q, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameGM_C, OnFinishedLoading, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMainGameGM_C, 0x03C8);
		}

		// class URIG_Glamrock_Freddy_PartsServ_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__RIG_Glamrock_Freddy_PartsServ_ABP__RIG_Glamrock_Freddy_PartsServ_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, UnknownData_2KSE, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_BlendListByEnum_2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_40, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_39, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_38, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_37, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_36, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_35, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_33, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_31, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_32, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_30, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_31, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_29, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_30, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_28, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateMachine_7, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_34, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_33, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_32, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_31, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_30, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_29, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_28, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_29, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_27, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_28, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_26, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_27, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_25, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_26, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_24, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_25, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_23, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateMachine_6, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_27, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_26, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_25, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_24, 0x0D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_23, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_22, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_21, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_20, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_19, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_18, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_24, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_22, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_23, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_21, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_22, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_20, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_21, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_19, 0x10A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_20, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_18, 0x1150);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_19, 0x1180);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_17, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_18, 0x1228);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_16, 0x12A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateMachine_5, 0x12D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_Slot_2, 0x1380);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_17, 0x13C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_16, 0x13F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_15, 0x1418);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_14, 0x1440);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_13, 0x1468);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_12, 0x1490);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_11, 0x14B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_10, 0x14E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_9, 0x1508);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_17, 0x1530);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_15, 0x15A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_16, 0x15D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_14, 0x1650);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_15, 0x1680);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_13, 0x16F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_8, 0x1728);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_7, 0x1750);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_6, 0x1778);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_14, 0x17A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_12, 0x1818);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_13, 0x1848);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_11, 0x18C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_12, 0x18F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_10, 0x1968);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateMachine_4, 0x1998);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_5, 0x1A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_4, 0x1A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_3, 0x1A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_11, 0x1AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_9, 0x1B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_10, 0x1B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_8, 0x1BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_9, 0x1C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_7, 0x1C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateMachine_3, 0x1CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_8, 0x1D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_LayeredBoneBlend_3, 0x1DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_6, 0x1EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_7, 0x1ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_5, 0x1F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_6, 0x1F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_4, 0x1FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_5, 0x2020);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_3, 0x2098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateMachine_2, 0x20C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_BlendListByBool_2, 0x2178);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_4, 0x2218);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_ModifyBone_13, 0x2290);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_LocalToComponentSpace_5, 0x2398);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_ModifyBone_12, 0x23B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_ModifyBone_11, 0x24C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_ModifyBone_10, 0x25C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_ModifyBone_9, 0x26D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_ModifyBone_8, 0x27D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_ComponentToLocalSpace_5, 0x28E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_LayeredBoneBlend_2, 0x2900);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_3, 0x29C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SaveCachedPose_2, 0x2A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_UseCachedPose_6, 0x2AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_UseCachedPose_5, 0x2B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_Slot, 0x2B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_LayeredBoneBlend, 0x2B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_BlendListByBool, 0x2C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult_2, 0x2CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_TransitionResult, 0x2D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer_2, 0x2D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult_2, 0x2DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SequencePlayer, 0x2DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateResult, 0x2E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_StateMachine, 0x2E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_BlendListByEnum, 0x2F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_SaveCachedPose, 0x2FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_UseCachedPose_4, 0x30A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_ComponentToLocalSpace_4, 0x30C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_UseCachedPose_3, 0x30E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_ComponentToLocalSpace_3, 0x3110);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_ModifyBone_7, 0x3130);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_ModifyBone_6, 0x3238);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_ModifyBone_5, 0x3340);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_ModifyBone_4, 0x3448);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_ModifyBone_3, 0x3550);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_UseCachedPose_2, 0x3658);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_LocalToComponentSpace_4, 0x3680);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_UseCachedPose, 0x36A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_LocalToComponentSpace_3, 0x36C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_ModifyBone_2, 0x36E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_LocalToComponentSpace_2, 0x37F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_ComponentToLocalSpace_2, 0x3810);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_ModifyBone, 0x3830);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_LocalToComponentSpace, 0x3938);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimGraphNode_ComponentToLocalSpace, 0x3958);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, GameEnum, 0x3978);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, HatOn, 0x3979);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, HeadOn, 0x397A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, ArmOpen, 0x397B);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, Reset, 0x397C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, HandSwap, 0x397D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, BowTieOn, 0x397E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, ChestplateOn, 0x397F);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, VoiceBoxSwap_1, 0x3980);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, L_Eye_IN, 0x3981);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, R_eye_In, 0x3982);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, test, 0x3983);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, canJumpscare, 0x3984);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, UnknownData_O7E1, 0x3985);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, AnimVODT, 0x3988);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, JawAnim, 0x3990);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, CanTalk, 0x3998);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URIG_Glamrock_Freddy_PartsServ_ABP_C, 0x3999);
		}

		// class UClothConfigCommon : public UClothConfigBase
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothConfigCommon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigCommon, 0x0028);
		}

		// class UClothSharedConfigCommon : public UClothConfigCommon
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothSharedConfigCommon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothSharedConfigCommon, 0x0028);
		}

		// class UClothingAssetCustomData : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothingAssetCustomData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCustomData, 0x0028);
		}

		// class UClothingAssetCommon : public UClothingAssetBase
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothingAssetCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, PhysicsAsset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothConfigs, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothSharedSimConfig, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothSimConfig, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ChaosClothSimConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothLODData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, LODData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, LodMap, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UsedBoneNames, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UsedBoneIndices, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ReferenceBoneIndex, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UnknownData_2IB4, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, CustomData, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothConfig, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UnknownData_4SGC, 0x01EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCommon, 0x01F0);
		}

		// class UClothLODDataCommon_Legacy : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothLODDataCommon_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, PhysicalMeshData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, ClothPhysicalMeshData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, CollisionData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, UnknownData_E1Z9, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothLODDataCommon_Legacy, 0x0188);
		}

		// class ACameraRenderTargetManager_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__CameraRenderTargetManager__CameraRenderTargetManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRenderTargetManager_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRenderTargetManager_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRenderTargetManager_C, CurRenderPoolIndex, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRenderTargetManager_C, RenderTargetPoolSize, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRenderTargetManager_C, Pool, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRenderTargetManager_C, 0x0250);
		}

		// class UUdpMessagingSettings : public UObject
		TEST_METHOD(Class__UdpMessaging__UdpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTransport, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, bAutoRepair, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, bStopServiceWhenAppDeactivates, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_E0Y0, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnicastEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastEndpoint, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MessageFormat, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastTimeToLive, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_NFMZ, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, StaticEndpoints, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTunnel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_5RGQ, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelUnicastEndpoint, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelMulticastEndpoint, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, RemoteTunnelEndpoints, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUdpMessagingSettings, 0x00A0);
		}

		// class UTcpMessagingSettings : public UObject
		TEST_METHOD(Class__TcpMessaging__TcpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, EnableTransport, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_9YZO, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ListenEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectToEndpoints, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectionRetryDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, bStopServiceWhenAppDeactivates, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_J3VL, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTcpMessagingSettings, 0x0058);
		}

		// class AStaffBotCleaningController_C : public ADetourCrowdAIController
		TEST_METHOD(BlueprintGeneratedClass__StaffBotCleaningController__StaffBotCleaningController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotCleaningController_C, UberGraphFrame, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaffBotCleaningController_C, 0x0338);
		}

		// class ABP_FNAF_Hologram_C : public ABP_MasterHologram_01_Audio_01A_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FNAF_Hologram__BP_FNAF_Hologram_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FNAF_Hologram_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FNAF_Hologram_C, StageShowStateHandler, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FNAF_Hologram_C, PointLight_2, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FNAF_Hologram_C, BaseMesh_Skeletal_2, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FNAF_Hologram_C, BaseMesh_LightBeams_Skeletal_2, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FNAF_Hologram_C, Animation_Sequence, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FNAF_Hologram_C, Looping_Animation, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FNAF_Hologram_C, UnknownData_KYNP, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FNAF_Hologram_C, Skeletal_Mesh, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FNAF_Hologram_C, Skeletal_Mesh_LightBeams, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FNAF_Hologram_C, LightBeam_PreSetMaterial, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FNAF_Hologram_C, Randomize_the_timeline_of_the_animation_, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FNAF_Hologram_C, UnknownData_MYFO, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FNAF_Hologram_C, LightBeam_Bounds_Scale, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FNAF_Hologram_C, Use_As_Skeletal_Mesh_, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FNAF_Hologram_C, 0x0399);
		}

		// class UInputCoreTypes : public UObject
		TEST_METHOD(Class__InputCore__InputCoreTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputCoreTypes, 0x0028);
		}

		// class ASecurityScreenDisplay_C : public ASecurityScreenDisplayBase_C
		TEST_METHOD(BlueprintGeneratedClass__SecurityScreenDisplay__SecurityScreenDisplay_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityScreenDisplay_C, UnknownData_QSOE, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityScreenDisplay_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityScreenDisplay_C, Play_sfx_general_monitor_static_large, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityScreenDisplay_C, SM_cable_z, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityScreenDisplay_C, SM_Spotlight_Mount, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityScreenDisplay_C, SM_TV_for_wall, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityScreenDisplay_C, Widget_1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityScreenDisplay_C, InteractTrigger, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASecurityScreenDisplay_C, 0x02E8);
		}

		// class ABeverageCart_HidePoint_C : public APlayerAndAIHideInActor_C
		TEST_METHOD(BlueprintGeneratedClass__BeverageCart_HidePoint__BeverageCart_HidePoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABeverageCart_HidePoint_C, UnknownData_QHOC, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABeverageCart_HidePoint_C, UberGraphFrame, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABeverageCart_HidePoint_C, Box, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABeverageCart_HidePoint_C, Arrow1, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABeverageCart_HidePoint_C, SkeletalMesh, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABeverageCart_HidePoint_C, 0x0370);
		}

		// class UIsInPlayerView_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__IsInPlayerView__IsInPlayerView_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsInPlayerView_C, 0x00A0);
		}

		// class AMoonManDistortionActor1_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__MoonManDistortionActor1__MoonManDistortionActor1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonManDistortionActor1_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonManDistortionActor1_C, PostProcess1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonManDistortionActor1_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonManDistortionActor1_C, Timeline_0_PaperOpacity_E9CAE2184FCC209F1961248353B409FC, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonManDistortionActor1_C, Timeline_0_Saturation_E9CAE2184FCC209F1961248353B409FC, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonManDistortionActor1_C, Timeline_0_Warble_E9CAE2184FCC209F1961248353B409FC, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonManDistortionActor1_C, Timeline_0_Speed_E9CAE2184FCC209F1961248353B409FC, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonManDistortionActor1_C, Timeline_0_LineOpacity_E9CAE2184FCC209F1961248353B409FC, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonManDistortionActor1_C, Timeline_0_Gain_E9CAE2184FCC209F1961248353B409FC, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonManDistortionActor1_C, Timeline_0_Grain_E9CAE2184FCC209F1961248353B409FC, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonManDistortionActor1_C, Timeline_0_VI_E9CAE2184FCC209F1961248353B409FC, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonManDistortionActor1_C, Timeline_0_Color_E9CAE2184FCC209F1961248353B409FC, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonManDistortionActor1_C, Timeline_0_LUT_Intensity_E9CAE2184FCC209F1961248353B409FC, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonManDistortionActor1_C, Timeline_0_FlickeringIntensity_E9CAE2184FCC209F1961248353B409FC, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonManDistortionActor1_C, Timeline_0_ScreenRadius_E9CAE2184FCC209F1961248353B409FC, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonManDistortionActor1_C, Timeline_0_GlobalIntensity_E9CAE2184FCC209F1961248353B409FC, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonManDistortionActor1_C, Timeline_0__Direction_E9CAE2184FCC209F1961248353B409FC, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonManDistortionActor1_C, UnknownData_SJOP, 0x0275);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonManDistortionActor1_C, Timeline_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonManDistortionActor1_C, DistortMaterial, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonManDistortionActor1_C, LUT_Intensity, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonManDistortionActor1_C, UnknownData_LQSX, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonManDistortionActor1_C, BiasCurve, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMoonManDistortionActor1_C, 0x0298);
		}

		// class USetDaycarePacepoint_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__SetDaycarePacepoint__SetDaycarePacepoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetDaycarePacepoint_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetDaycarePacepoint_C, BBPacepoint, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetDaycarePacepoint_C, Dist, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetDaycarePacepoint_C, UnknownData_LYO1, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetDaycarePacepoint_C, Curr_Point, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetDaycarePacepoint_C, 0x00E8);
		}

		// class UGeometryCache : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_J0M4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Materials, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Tracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_WKXE, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, StartFrame, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, EndFrame, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCache, 0x0068);
		}

		// class AGeometryCacheActor : public AActor
		TEST_METHOD(Class__GeometryCache__GeometryCacheActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCacheActor, GeometryCacheComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCacheActor, 0x0230);
		}

		// class UGeometryCacheCodecBase : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecBase, TopologyRanges, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecBase, 0x0038);
		}

		// class UGeometryCacheCodecRaw : public UGeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecRaw)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, DummyProperty, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, UnknownData_K7SI, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecRaw, 0x0040);
		}

		// class UGeometryCacheCodecV1 : public UGeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecV1)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecV1, UnknownData_FO85, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecV1, 0x0040);
		}

		// class UGeometryCacheComponent : public UMeshComponent
		TEST_METHOD(Class__GeometryCache__GeometryCacheComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, GeometryCache, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bRunning, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bLooping, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_34UQ, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, StartTimeOffset, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, PlaybackSpeed, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, NumTracks, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, ElapsedTime, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_ORQG, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, Duration, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bManualTick, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_637F, 0x0469);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheComponent, 0x0470);
		}

		// class UGeometryCacheTrack : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, Duration, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, UnknownData_H0RM, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack, 0x0058);
		}

		// class UGeometryCacheTrack_FlipbookAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_FlipbookAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, NumMeshSamples, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, UnknownData_QQ1B, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_FlipbookAnimation, 0x0080);
		}

		// class UGeometryCacheTrackStreamable : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrackStreamable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, Codec, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_6QS9, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, StartSampleTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_U4J2, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrackStreamable, 0x00D0);
		}

		// class UGeometryCacheTrack_TransformAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformAnimation, UnknownData_D01O, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformAnimation, 0x0100);
		}

		// class UGeometryCacheTrack_TransformGroupAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformGroupAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformGroupAnimation, UnknownData_FXSV, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformGroupAnimation, 0x0100);
		}

		// class AStroller_HidePoint_C : public AHideInActor_C
		TEST_METHOD(BlueprintGeneratedClass__Stroller_HidePoint__Stroller_HidePoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStroller_HidePoint_C, UnknownData_PK1V, 0x0325);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStroller_HidePoint_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStroller_HidePoint_C, Arrow1, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStroller_HidePoint_C, SpotLight, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStroller_HidePoint_C, Box, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStroller_HidePoint_C, SkeletalMesh, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStroller_HidePoint_C, PlayerDetector, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStroller_HidePoint_C, 0x0358);
		}

		// class ASignalDoorActorLoaded_C : public ASignalActorLoaded_C
		TEST_METHOD(BlueprintGeneratedClass__SignalDoorActorLoaded__SignalDoorActorLoaded_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASignalDoorActorLoaded_C, UberGraphFrame, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASignalDoorActorLoaded_C, 0x0278);
		}

		// class UFunctions_Traces_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__Functions_Traces__Functions_Traces_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunctions_Traces_C, 0x0028);
		}

		// class UOptions_ControlsUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Options_ControlsUI__Options_ControlsUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, ApplyChangesButton_Controls, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, CallFreddy_Remapping, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, ControlsOptionMenu, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, Exit_Remapping, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, Fazerblaster_Remapping, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, Fazwatch_Remapping, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, Flashbeacon_Remapping, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, Flashlight_Remapping, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, GamepadHorizontalSens_Slidebar, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, GamepadVerticalSens_Slidebar, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, HapticSens_Slidebar, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, Interact_Remapping, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, Invert_Y_ComboBox, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, Jump_Remapping, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, MouseCategory, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, MouseSens_Slidebar, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, PrimaryAction_Remapping, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, RestoreDefaultsButton_Controls, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, Sprint_Remapping, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, SprintCategory, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, SprintToggle_ComboBox, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, Stealth_Remapping, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, MainOptionsMenu, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, MouseSensitivity, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, HapticFeedbackIntensity, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, GamePadHorizontalSensitivity, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, GamePadVerticalSensitivity, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, SaveGameSettings, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, SettingsSlotName, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, KeysInUse, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, AdjustFocus, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, UnknownData_0KJS, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, RemapWidgetInFocus, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptions_ControlsUI_C, ChangesMadeAndNotSaved_Controls, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOptions_ControlsUI_C, 0x0339);
		}

		// class APhotobooth_HidePoint_C : public AHideInActor_C
		TEST_METHOD(BlueprintGeneratedClass__Photobooth_HidePoint__Photobooth_HidePoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhotobooth_HidePoint_C, UnknownData_EX5R, 0x0325);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhotobooth_HidePoint_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhotobooth_HidePoint_C, Arrow1, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhotobooth_HidePoint_C, SpotLight, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhotobooth_HidePoint_C, Box, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhotobooth_HidePoint_C, SkeletalMesh, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhotobooth_HidePoint_C, PlayerDetect, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhotobooth_HidePoint_C, 0x0358);
		}

		// class UMaterialShaderQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__MaterialShaderQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialShaderQualitySettings, ForwardSettingMap, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialShaderQualitySettings, 0x0078);
		}

		// class UShaderPlatformQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__ShaderPlatformQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, QualityOverrides, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, UnknownData_T7J7, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShaderPlatformQualitySettings, 0x0058);
		}

		// class UActorUtils_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__ActorUtils__ActorUtils_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorUtils_C, 0x0028);
		}

		// class AMontyDropTell_C : public AMontyJumpTell_C
		TEST_METHOD(BlueprintGeneratedClass__MontyDropTell__MontyDropTell_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyDropTell_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyDropTell_C, Anchor, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyDropTell_C, CurrLocation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyDropTell_C, NavQueryExtent, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyDropTell_C, Player, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMontyDropTell_C, 0x0270);
		}

		// class UNavDistanceServiceBase_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__NavDistanceServiceBase__NavDistanceServiceBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavDistanceServiceBase_C, NavDistanceKey, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavDistanceServiceBase_C, 0x00C0);
		}

		// class UCable08_PAS04_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable08_PAS04_ABP__Cable08_PAS04_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable08_PAS04_ABP_C, 0x05E0);
		}

		// class ADoorManager_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__DoorManager__DoorManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorManager_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorManager_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorManager_C, DoorActors, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorManager_C, SettingSecurity, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorManager_C, SettingNewItem, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorManager_C, UnknownData_FMNT, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorManager_C, OnDoorsOpened, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorManager_C, DoorsNeedingUpdate, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorManager_C, LockState, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADoorManager_C, 0x02B9);
		}

		// class ABP_Basketball_Mushpile_Small_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Basketball_Mushpile_Small__BP_Basketball_Mushpile_Small_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Basketball_Mushpile_Small_C, SM_BucketPlastic_A, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Basketball_Mushpile_Small_C, MOD_Small_Basketball_Mushpile, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Basketball_Mushpile_Small_C, 0x0238);
		}

		// class USetPlayer_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__SetPlayer__SetPlayer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetPlayer_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetPlayer_C, BBPlayer, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetPlayer_C, 0x00D8);
		}

		// class UWI_FlagScore_Fazerblast_C : public UWI_Empty_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_FlagScore_Fazerblast__WI_FlagScore_Fazerblast_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FlagScore_Fazerblast_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FlagScore_Fazerblast_C, NegativeScore, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FlagScore_Fazerblast_C, PositiveScore, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FlagScore_Fazerblast_C, MoveOutOfFrame, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FlagScore_Fazerblast_C, Damage, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FlagScore_Fazerblast_C, MoveIntoFrame, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FlagScore_Fazerblast_C, Score_Image, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FlagScore_Fazerblast_C, ScoreText, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FlagScore_Fazerblast_C, ScoreValueText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FlagScore_Fazerblast_C, UpdateScoreText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FlagScore_Fazerblast_C, Score, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FlagScore_Fazerblast_C, WinScore, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FlagScore_Fazerblast_C, FeedBackReference, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FlagScore_Fazerblast_C, GameWon, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_FlagScore_Fazerblast_C, 0x02B0);
		}

		// class UVRNotificationsComponent : public UActorComponent
		TEST_METHOD(Class__HeadMountedDisplay__VRNotificationsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializedDelegate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRecenteredDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDLostDelegate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDReconnectedDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDConnectCanceledDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDPutOnHeadDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRemovedFromHeadDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, VRControllerRecenteredDelegate, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRNotificationsComponent, 0x0140);
		}

		// class UHeadMountedDisplayFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__HeadMountedDisplayFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeadMountedDisplayFunctionLibrary, 0x0028);
		}

		// class UMotionControllerComponent : public UPrimitiveComponent
		TEST_METHOD(Class__HeadMountedDisplay__MotionControllerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, PlayerIndex, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, Hand, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_O11W, 0x03F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, MotionSource, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_A0W8, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CurrentTrackingStatus, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, bDisplayDeviceModel, 0x0405);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_914V, 0x0406);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayModelSource, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CustomDisplayMesh, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayMeshMaterialOverrides, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_J8IX, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayComponent, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_G0L8, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionControllerComponent, 0x04B0);
		}

		// class UMotionTrackedDeviceFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__MotionTrackedDeviceFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionTrackedDeviceFunctionLibrary, 0x0028);
		}

		// class UXRAssetFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRAssetFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRAssetFunctionLibrary, 0x0028);
		}

		// class UAsyncTask_LoadXRDeviceVisComponent : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__HeadMountedDisplay__AsyncTask_LoadXRDeviceVisComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnModelLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnLoadFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, UnknownData_DAHZ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, SpawnedComponent, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTask_LoadXRDeviceVisComponent, 0x0060);
		}

		// class UXRLoadingScreenFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRLoadingScreenFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRLoadingScreenFunctionLibrary, 0x0028);
		}

		// class URequestPlayerLocation_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__RequestPlayerLocation__RequestPlayerLocation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URequestPlayerLocation_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URequestPlayerLocation_C, InformationProvider, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URequestPlayerLocation_C, PlayerLocation, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URequestPlayerLocation_C, 0x0100);
		}

		// class UFindCurrentRoom_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FindCurrentRoom__FindCurrentRoom_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindCurrentRoom_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindCurrentRoom_C, BBCurrentRoom, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindCurrentRoom_C, 0x00D8);
		}

		// class UProgressbar_TitleSkipUI_C : public UWI_Empty_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Progressbar_TitleSkipUI__Progressbar_TitleSkipUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressbar_TitleSkipUI_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressbar_TitleSkipUI_C, HoldEnd, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressbar_TitleSkipUI_C, InteractMeterDynamic, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressbar_TitleSkipUI_C, InteractMeterEmpty, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressbar_TitleSkipUI_C, Interact_Dynamic_Mat, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressbar_TitleSkipUI_C, PercentageComplete, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressbar_TitleSkipUI_C, 0x026C);
		}

		// class USetEndoSleep_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__SetEndoSleep__SetEndoSleep_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetEndoSleep_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetEndoSleep_C, Sleep, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetEndoSleep_C, 0x00B1);
		}

		// class UBT_MoveTo_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BT_MoveTo__BT_MoveTo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBT_MoveTo_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBT_MoveTo_C, BB_TargetLocation, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBT_MoveTo_C, 0x00D8);
		}

		// class ULightAreaDoorComponent_C : public ULightAreaChanger_C
		TEST_METHOD(BlueprintGeneratedClass__LightAreaDoorComponent__LightAreaDoorComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightAreaDoorComponent_C, UberGraphFrame, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightAreaDoorComponent_C, 0x00E8);
		}

		// class UMovieSceneGeometryCacheSection : public UMovieSceneSection
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheSection, Params, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheSection, 0x0120);
		}

		// class UMovieSceneGeometryCacheTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheTrack, AnimationSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheTrack, 0x0068);
		}

		// class UImageWriteBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ImageWriteQueue__ImageWriteBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageWriteBlueprintLibrary, 0x0028);
		}

		// class UArrowIndicator_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ArrowIndicator__ArrowIndicator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, Image, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, Image_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, Image_3, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, Image_4, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, Image_5, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, Image_6, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, Image_7, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, Image_8, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, Image_9, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, Image_10, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, Image_11, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, Image_74, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, Image_882, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, Image_883, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, Image_884, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, Image_885, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, Image_886, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, Image_887, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, Image_888, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, Image_889, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, Image_890, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, Image_891, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, UpArrow, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowIndicator_C, DownArrow, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrowIndicator_C, 0x0308);
		}

		// class UMyPluginObject : public UObject
		TEST_METHOD(Class__UObjectPlugin__MyPluginObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMyPluginObject, MyStruct, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMyPluginObject, 0x0038);
		}

		// class UBoingyBoxABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__BoingyBoxABP__BoingyBoxABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, UnknownData_H750, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, AnimGraphNode_TransitionResult, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, AnimGraphNode_SequencePlayer_2, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, AnimGraphNode_StateResult_3, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, AnimGraphNode_SequencePlayer, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, AnimGraphNode_StateResult_2, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, AnimGraphNode_StateMachine_2, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, AnimGraphNode_ComponentToLocalSpace_2, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, AnimGraphNode_LocalToComponentSpace_2, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, AnimGraphNode_ModifyBone, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, AnimGraphNode_StateResult, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, AnimGraphNode_StateMachine, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, UnknownData_K2ZS, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, AnimGraphNode_RigidBody, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, AnimGraphNode_LocalToComponentSpace, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, AnimGraphNode_ComponentToLocalSpace, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, EsplodeRate, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, CrankAngle, 0x0CD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, CrankRotationSpeed, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, CrankTargetSpeed, 0x0CDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, IsOpen, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, UnknownData_LQVK, 0x0CE1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, Present_Root_jntSocket, 0x0CE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoingyBoxABP_C, EnableRigidBody, 0x0CEC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoingyBoxABP_C, 0x0CED);
		}

		// class APRE_GtrGlf_Boat_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PRE_GtrGlf_Boat__PRE_GtrGlf_Boat_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Boat_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Boat_C, MOD_GtrGlf_Boat, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Boat_C, Subtle_bob_NewTrack_0_A22D76574E126075D55818A2A913D7A1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Boat_C, Subtle_bob__Direction_A22D76574E126075D55818A2A913D7A1, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Boat_C, UnknownData_C7G2, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Boat_C, Subtle_bob, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Boat_C, Updated_Z_Rotation, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Boat_C, Updated_X_Rotation, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Boat_C, Total_height_Adjust, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Boat_C, Intensity_Height, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Boat_C, Intensity_ZRotate, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Boat_C, Intensity_XRotate, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_GtrGlf_Boat_C, 0x0260);
		}

		// class UTimeTrigger_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__TimeTrigger__TimeTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeTrigger_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeTrigger_C, Previous_Minute, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeTrigger_C, TimeRunOutHour, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeTrigger_C, TimeRunOutMinute, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeTrigger_C, UnknownData_AHPL, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeTrigger_C, TimerInvoked, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeTrigger_C, 0x00D8);
		}

		// class UPhysicsSoundImpact_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__PhysicsSoundImpact__PhysicsSoundImpact_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSoundImpact_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSoundImpact_C, MeshComp, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSoundImpact_C, bInitialized, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSoundImpact_C, UnknownData_9H11, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSoundImpact_C, AudioEvent, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSoundImpact_C, MaxImpactVelocity, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSoundImpact_C, TimeLastImpact, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSoundImpact_C, VelocityLastImpact, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSoundImpact_C, UnknownData_JZAC, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSoundImpact_C, PastVelocities, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSoundImpact_C, ScrapeCooldownTime, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSoundImpact_C, BumpCooldownTime, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSoundImpact_C, MagnitudeScaling, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSoundImpact_C, VeloctityLastBump, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSoundImpact_C, BumpThreshold, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSoundImpact_C, RandomTimingOffsetRange, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSoundImpact_C, ObjectSizeRange, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSoundImpact_C, 0x0118);
		}

		// class UWI_InstructionCard_ExitToEscape_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_ExitToEscape__WI_InstructionCard_ExitToEscape_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_ExitToEscape_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_ExitToEscape_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_ExitToEscape_C, VerticalBox_250, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_ExitToEscape_C, WI_ImageScaled, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_ExitToEscape_C, 0x0250);
		}

		// class UAnimatronic_ABP_Cutscenes_C : public UAnimatronic_ABP_MASTER_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Animatronic_ABP_Cutscenes__Animatronic_ABP_Cutscenes_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimatronic_ABP_Cutscenes_C, 0x8DE8);
		}

		// class UVanessaAim_Abp_LINK_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__VanessaAim_Abp_LINK__VanessaAim_Abp_LINK_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessaAim_Abp_LINK_C, UnknownData_E19T, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessaAim_Abp_LINK_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessaAim_Abp_LINK_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessaAim_Abp_LINK_C, AnimGraphNode_LinkedInputPose, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessaAim_Abp_LINK_C, AnimGraphNode_SaveCachedPose, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessaAim_Abp_LINK_C, AnimGraphNode_LayeredBoneBlend, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessaAim_Abp_LINK_C, AnimGraphNode_UseCachedPose_3, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessaAim_Abp_LINK_C, AnimGraphNode_UseCachedPose_2, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessaAim_Abp_LINK_C, AnimGraphNode_RotationOffsetBlendSpace_2, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessaAim_Abp_LINK_C, AnimGraphNode_RotationOffsetBlendSpace, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessaAim_Abp_LINK_C, AnimGraphNode_BlendListByBool, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessaAim_Abp_LINK_C, AnimGraphNode_UseCachedPose, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessaAim_Abp_LINK_C, Yaw, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessaAim_Abp_LINK_C, Pitch, 0x08C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessaAim_Abp_LINK_C, AimLocation, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessaAim_Abp_LINK_C, isTurning, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessaAim_Abp_LINK_C, IsHeadAiming, 0x08D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessaAim_Abp_LINK_C, UnknownData_GE0L, 0x08D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessaAim_Abp_LINK_C, HeadAimRot, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanessaAim_Abp_LINK_C, HeadAimAlpha, 0x08E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVanessaAim_Abp_LINK_C, 0x08E8);
		}

		// class AEQ_Flashlight_C : public AEquippable_C
		TEST_METHOD(BlueprintGeneratedClass__EQ_Flashlight__EQ_Flashlight_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, SpotLight, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, Timeline_6_NewTrack_0_B02B87774A4E6BBBAA1071BBCED4895A, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, Timeline_6__Direction_B02B87774A4E6BBBAA1071BBCED4895A, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, UnknownData_HRDK, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, Timeline_7, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, Timeline_5_NewTrack_0_F72C728C434097AB3C5B15BADB3E51E1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, Timeline_5__Direction_F72C728C434097AB3C5B15BADB3E51E1, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, UnknownData_6YE9, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, Timeline_6, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, Timeline_4_NewTrack_0_32BD124D47152CBCA9D192B0C8E521B2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, Timeline_4__Direction_32BD124D47152CBCA9D192B0C8E521B2, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, UnknownData_VNZE, 0x0275);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, Timeline_5, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, Timeline_3_NewTrack_0_D15DAF7D47AAC5F1573FA68AA8647336, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, Timeline_3__Direction_D15DAF7D47AAC5F1573FA68AA8647336, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, UnknownData_ESE3, 0x0285);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, Timeline_4, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, Timeline_2_NewTrack_0_014798DE436DB19DAE5129A9688C2CDE, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, Timeline_2__Direction_014798DE436DB19DAE5129A9688C2CDE, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, UnknownData_VPCS, 0x0295);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, Timeline_3, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, Timeline_1_NewTrack_0_CBA12B0F4051C7FC6D4B839F95273494, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, Timeline_1__Direction_CBA12B0F4051C7FC6D4B839F95273494, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, UnknownData_R9G2, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, Timeline_2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, Timeline_0_NewTrack_0_ACDEE15249C0D40075EFDEBA18AEF658, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, Timeline_0__Direction_ACDEE15249C0D40075EFDEBA18AEF658, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, UnknownData_YBGP, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, Timeline_1, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, RandomFlicker01Timeline_NewTrack_0_B48ABE9F4032FDA48D923080A5524C03, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, RandomFlicker01Timeline__Direction_B48ABE9F4032FDA48D923080A5524C03, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, UnknownData_BQEN, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, RandomFlicker01Timeline, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, FlashlightActive, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, UnknownData_ISBI, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, DefaultIntensity, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, PowerFlickerMult, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, PowerDownMult, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, FazWatchPowerMult, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, UnknownData_OY8T, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, PowerFlickerFrequencyCurve, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, RandomFlickerIntensityCurve, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, DefaultFlickerIntensityCurve, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, MaxIntensityCurve, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, hasPower, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, UnknownData_OYQ9, 0x0309);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, DefaultFlicker, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, PowerPerSecond, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, SecondsPerPowerUnit, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, SecondsSinceLastPower, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, UnknownData_ZSNZ, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, AttemptActivateDeadFlashlight, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashlight_C, GregoryOverlay, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEQ_Flashlight_C, 0x0338);
		}

		// class AInvisibleCollectible_C : public ACollectible_C
		TEST_METHOD(BlueprintGeneratedClass__InvisibleCollectible__InvisibleCollectible_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInvisibleCollectible_C, 0x0282);
		}

		// class ATensionControl_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TensionControl__TensionControl_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATensionControl_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATensionControl_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATensionControl_C, AmbientSound, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATensionControl_C, DistanceToTensionCurve, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATensionControl_C, trigger_achievement, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATensionControl_C, UnknownData_5DR4, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATensionControl_C, Seeker, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATensionControl_C, WasInChaseMode, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATensionControl_C, UnknownData_H3QG, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATensionControl_C, TimeLastSeen, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATensionControl_C, CurrentTensionValue, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATensionControl_C, UnknownData_6XPG, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATensionControl_C, StaffBotMusicCooldown, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATensionControl_C, StaffBotAlarmMusicPlaying, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATensionControl_C, WasInSeekMode, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATensionControl_C, PlayTension, 0x0292);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATensionControl_C, UnknownData_7FV2, 0x0293);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATensionControl_C, IgnoredSeeker, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATensionControl_C, RetriggerRequired, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATensionControl_C, 0x02A1);
		}

		// class UKitchenGameDoorSlam_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__KitchenGameDoorSlam__KitchenGameDoorSlam_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKitchenGameDoorSlam_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKitchenGameDoorSlam_C, 0x00B0);
		}

		// class UStaffbot_ABP_Cleaner_C : public UStaffbot_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Staffbot_ABP_Cleaner__Staffbot_ABP_Cleaner_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Cleaner_C, UberGraphFrame, 0x2ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Cleaner_C, PlayerDistance, 0x2ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Cleaner_C, PlayerVisible, 0x2EE0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaffbot_ABP_Cleaner_C, 0x2EE8);
		}

		// class AEquippable_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Equippable__Equippable_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEquippable_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEquippable_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEquippable_C, Name, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEquippable_C, 0x0240);
		}

		// class UActorNavDistance_C : public UNavDistanceServiceBase_C
		TEST_METHOD(BlueprintGeneratedClass__ActorNavDistance__ActorNavDistance_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorNavDistance_C, UberGraphFrame, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorNavDistance_C, Actor, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorNavDistance_C, 0x00F0);
		}

		// class UAIHiderInterface : public UInterface
		TEST_METHOD(Class__fnaf9__AIHiderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIHiderInterface, 0x0028);
		}

		// class UAIManagementSystem : public UWorldSubsystem
		TEST_METHOD(Class__fnaf9__AIManagementSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIManagementSystem, UnknownData_J15T, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIManagementSystem, EnableDebugCloak, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIManagementSystem, UnknownData_X3FY, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIManagementSystem, OnAISpawned, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIManagementSystem, UnknownData_BAYI, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIManagementSystem, CurrentPawnAlertList, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIManagementSystem, UnknownData_113K, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIManagementSystem, 0x0260);
		}

		// class UPathPointProvider : public UInterface
		TEST_METHOD(Class__fnaf9__PathPointProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathPointProvider, 0x0028);
		}

		// class UAIPathComponent : public UActorComponent
		TEST_METHOD(Class__fnaf9__AIPathComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPathComponent, 0x00B0);
		}

		// class UAISpawnPointComponent : public UArrowComponent
		TEST_METHOD(Class__fnaf9__AISpawnPointComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISpawnPointComponent, 0x0400);
		}

		// class APlayerTrigger : public AActor
		TEST_METHOD(Class__fnaf9__PlayerTrigger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTrigger, UnknownData_EJRH, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTrigger, OnPlayerTriggered, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTrigger, TriggerComponent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTrigger, bUseContinuousTrigger, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTrigger, UnknownData_JIK1, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTrigger, SaveName, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTrigger, bSaveOnTrigger, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTrigger, UnknownData_SS0Y, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTrigger, ValidGameTypes, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTrigger, bFixCollision, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTrigger, bTriggerOnActorOverlap, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTrigger, UnknownData_45QU, 0x026A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerTrigger, 0x0270);
		}

		// class AAISpawnTrigger : public APlayerTrigger
		TEST_METHOD(Class__fnaf9__AISpawnTrigger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISpawnTrigger, OnAISpawnedDelegate, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISpawnTrigger, OnAISpawnedFailureDelegate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISpawnTrigger, SpawnAnyCharacter, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISpawnTrigger, ForceShattered, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISpawnTrigger, UnknownData_RFQW, 0x0292);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISpawnTrigger, SpawnCharacters, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISpawnTrigger, SpawnLocation, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAISpawnTrigger, 0x02B0);
		}

		// class UAISystemSettings : public UDeveloperSettings
		TEST_METHOD(Class__fnaf9__AISystemSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemSettings, FNAFAITypeClasses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemSettings, MinimumSpawnDistance, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemSettings, MaximumSpawnDistance, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemSettings, SpawnDelayTime, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemSettings, TimeBetweenSightings, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemSettings, OutOfRangeDistance, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemSettings, TeleportDistance, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemSettings, VannyMeterIncreasePerSecond, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemSettings, VannyMeterIncreasePerCampSecond, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemSettings, VannyMeterIncreasePerSoundUnit, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemSettings, VannyMeterIncreasePerGift, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemSettings, VannyMeterLowAppear, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemSettings, VannyMeterMax, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemSettings, VannyMeterPerHourBase, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystemSettings, 0x00C8);
		}

		// class ABallPitVolume : public AActor
		TEST_METHOD(Class__fnaf9__BallPitVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallPitVolume, Volume, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallPitVolume, Balls, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABallPitVolume, 0x0240);
		}

		// class UCameraHelperFunctions : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__fnaf9__CameraHelperFunctions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraHelperFunctions, 0x0028);
		}

		// class UCameraTrigger : public UInterface
		TEST_METHOD(Class__fnaf9__CameraTrigger)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraTrigger, 0x0028);
		}

		// class UConditionalCheckComponent : public UActorComponent
		TEST_METHOD(Class__fnaf9__ConditionalCheckComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConditionalCheckComponent, UnknownData_3FD1, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConditionalCheckComponent, OnConditionalCheckUpdated, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConditionalCheckComponent, ConditionCheck, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConditionalCheckComponent, UnknownData_EIJC, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConditionalCheckComponent, 0x00E0);
		}

		// class UConditionCheckInterface : public UInterface
		TEST_METHOD(Class__fnaf9__ConditionCheckInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConditionCheckInterface, 0x0028);
		}

		// class UConditionFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__fnaf9__ConditionFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConditionFunctionLibrary, 0x0028);
		}

		// class UDoorComponent : public UActorComponent
		TEST_METHOD(Class__fnaf9__DoorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorComponent, NormalDoorEntryRequirements, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorComponent, SurvivalDoorEntryRequirements, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorComponent, bIsOpen, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorComponent, UnknownData_L11G, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorComponent, OnPawnEnteredDoor, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorComponent, OnPawnExitedDoor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorComponent, OnInitialOpen, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorComponent, OnOpenDoor, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorComponent, OnCloseDoor, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorComponent, OnPlayerLockStateChanged, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorComponent, OnAILockStateChanged, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorComponent, bIsLockedForAI, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorComponent, bIsLockedForPlayer, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorComponent, UnknownData_LJD3, 0x019A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorComponent, PawnsInDoorway, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorComponent, PlayerBlocker, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoorComponent, UnknownData_SHFN, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoorComponent, 0x0200);
		}

		// class UDoorInteractor : public UInterface
		TEST_METHOD(Class__fnaf9__DoorInteractor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoorInteractor, 0x0028);
		}

		// class UEnvQueryTest_ObjectSweep : public UEnvQueryTest
		TEST_METHOD(Class__fnaf9__EnvQueryTest_ObjectSweep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_ObjectSweep, Context, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_ObjectSweep, SphereRadius, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_ObjectSweep, UnknownData_AC5H, 0x0204);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_ObjectSweep, 0x0208);
		}

		// class Afnaf9GameModeBase : public AGameModeBase
		TEST_METHOD(Class__fnaf9__fnaf9GameModeBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Afnaf9GameModeBase, OnSetAIDisplay, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Afnaf9GameModeBase, UnknownData_M2X4, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Afnaf9GameModeBase, 0x02E0);
		}

		// class UFNAFAchievementUtils : public UObject
		TEST_METHOD(Class__fnaf9__FNAFAchievementUtils)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFNAFAchievementUtils, 0x0028);
		}

		// class AFNAFAISpawnPoint : public ANavigationObjectBase
		TEST_METHOD(Class__fnaf9__FNAFAISpawnPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFNAFAISpawnPoint, bUseType, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFNAFAISpawnPoint, AIType, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFNAFAISpawnPoint, bIsStagedPoint, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFNAFAISpawnPoint, UnknownData_Y9XN, 0x0253);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFNAFAISpawnPoint, 0x0258);
		}

		// class AFNAFBaseCharacter : public ACharacter
		TEST_METHOD(Class__fnaf9__FNAFBaseCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFNAFBaseCharacter, UnknownData_08Z6, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFNAFBaseCharacter, 0x04C0);
		}

		// class AFNAFBaseAICharacter : public AFNAFBaseCharacter
		TEST_METHOD(Class__fnaf9__FNAFBaseAICharacter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFNAFBaseAICharacter, 0x04C0);
		}

		// class AFNAFBasePlayerCharacter : public ACharacter
		TEST_METHOD(Class__fnaf9__FNAFBasePlayerCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFNAFBasePlayerCharacter, UnknownData_RZOG, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFNAFBasePlayerCharacter, PawnType, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFNAFBasePlayerCharacter, UnknownData_7NPJ, 0x04C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFNAFBasePlayerCharacter, 0x04D0);
		}

		// class AFNAFBasePlayerController : public APlayerController
		TEST_METHOD(Class__fnaf9__FNAFBasePlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFNAFBasePlayerController, OnControlTypeChanged, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFNAFBasePlayerController, UnknownData_WJTO, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFNAFBasePlayerController, 0x05C0);
		}

		// class UFNAFCheatManager : public UCheatManager
		TEST_METHOD(Class__fnaf9__FNAFCheatManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFNAFCheatManager, 0x0078);
		}

		// class UFNAFEventObject : public UInterface
		TEST_METHOD(Class__fnaf9__FNAFEventObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFNAFEventObject, 0x0028);
		}

		// class UFNAFEventSystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__fnaf9__FNAFEventSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFEventSystem, UnknownData_3Y27, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFNAFEventSystem, 0x00C8);
		}

		// class UFNAFGameInstanceBase : public UGameInstance
		TEST_METHOD(Class__fnaf9__FNAFGameInstanceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstanceBase, UnknownData_TJ52, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFNAFGameInstanceBase, 0x01B0);
		}

		// class UFNAFGameUserSettings : public UGameUserSettings
		TEST_METHOD(Class__fnaf9__FNAFGameUserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameUserSettings, VisualQualityLevel, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameUserSettings, RayTraceQualityLevel, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFNAFGameUserSettings, 0x0128);
		}

		// class UFNAFGeneralEditorSettings : public UDeveloperSettings
		TEST_METHOD(Class__fnaf9__FNAFGeneralEditorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGeneralEditorSettings, bSurvivalMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGeneralEditorSettings, bPIEUseIntro, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGeneralEditorSettings, bSurvivalAllLocations, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGeneralEditorSettings, UnknownData_F0PQ, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGeneralEditorSettings, MinutesPerHour, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGeneralEditorSettings, SurvivalSeed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGeneralEditorSettings, UnknownData_RZ4S, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFNAFGeneralEditorSettings, 0x0048);
		}

		// class UFNAFInputDeviceSystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__fnaf9__FNAFInputDeviceSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInputDeviceSystem, OnInputDeviceTypeChanged, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFNAFInputDeviceSystem, 0x0040);
		}

		// class UFNAFInputSystemDeveloperSettings : public UDeveloperSettings
		TEST_METHOD(Class__fnaf9__FNAFInputSystemDeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInputSystemDeveloperSettings, bOverrideInputDevice, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInputSystemDeveloperSettings, OverrideInputDevice, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInputSystemDeveloperSettings, UnknownData_S263, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFNAFInputSystemDeveloperSettings, 0x0040);
		}

		// class UFNAFInventorySystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__fnaf9__FNAFInventorySystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, UnknownData_GVW4, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, OnInventoryItemAdded, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, OnInventoryItemRemoved, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, OnMessageAdded, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, OnSecurityLevelUpdated, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, OnPartyLevelUpdated, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, OnPartyPassUsed, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, UnknownData_62AZ, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, InventoryDataTable, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, MessageDataTable, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, FazwatchPowerLevel, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, FazwatchMaxPowerLevel, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, FreddyPowerLevel, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, FreddyMaxPowerLevel, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, SecurityLevel, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, CollectedPartyPassCount, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, UsedPartyPassCount, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, NumAvailableFlash, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, bUnlimitedFazwatchPower, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, bUnlimitedStamina, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, UnknownData_MW5Q, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, TapesListenedTo, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, NumDishesBroken, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFInventorySystem, UnknownData_RCO7, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFNAFInventorySystem, 0x0158);
		}

		// class UFNAFLevelManager : public UWorldSubsystem
		TEST_METHOD(Class__fnaf9__FNAFLevelManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFLevelManager, OnlevelsUpdated, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFLevelManager, UnknownData_NLSD, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFNAFLevelManager, 0x01C0);
		}

		// class UFNAFManagedAI : public UInterface
		TEST_METHOD(Class__fnaf9__FNAFManagedAI)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFNAFManagedAI, 0x0028);
		}

		// class UFNAFMasterData : public USaveGame
		TEST_METHOD(Class__fnaf9__FNAFMasterData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFMasterData, newSaveSlotNumber, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFMasterData, UnknownData_NF39, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFMasterData, lastSavedSlotName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFMasterData, lastLoadedSlotName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFMasterData, ActivitySaveSlot, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFMasterData, SaveGameSlotNames_Map, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFMasterData, InvertedGamepad, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFMasterData, bLastSaveWasAuto, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFMasterData, UnknownData_F0LE, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFMasterData, ActivityIdSaveSlotNamesMap, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFNAFMasterData, 0x0108);
		}

		// class UFNAFMissionSystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__fnaf9__FNAFMissionSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFMissionSystem, UnknownData_EV0V, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFMissionSystem, OnNewActiveMissionAdded, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFMissionSystem, OnActiveMissionRemoved, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFMissionSystem, OnActiveMissionUpdated, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFMissionSystem, OnMissionCompleted, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFMissionSystem, MissionDataTable, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFMissionSystem, MissionTaskDataTable, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFMissionSystem, UnknownData_6IB7, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFNAFMissionSystem, 0x00E8);
		}

		// class UFNAFPawnTypeProviderInterface : public UInterface
		TEST_METHOD(Class__fnaf9__FNAFPawnTypeProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFNAFPawnTypeProviderInterface, 0x0028);
		}

		// class UFNAFSaveData : public USaveGame
		TEST_METHOD(Class__fnaf9__FNAFSaveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveData, EventSystemData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveData, AISaveData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveData, WorldStateData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveData, ArcadeSaveData, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveData, InventorySaveData, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveData, FazwatchPowerSaveData, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveData, FreddyPowerSaveData, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveData, MissionState, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveData, FreddyUpgrades, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveData, LightScenarioManagerData, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveData, UnknownData_J1BK, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveData, Hour, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveData, Minute, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveData, GameIteration, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveData, TotalTimePlayedInSeconds, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveData, RealtimeSaveTime, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveData, PlayerLocation, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveData, PlayerRotation, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveData, bInPowerStation, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveData, UnknownData_R3AL, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveData, PowerStationID, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveData, PowerStationsVisited, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveData, ActivityId, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFNAFSaveData, 0x0298);
		}

		// class UFNAFSaveGameSystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__fnaf9__FNAFSaveGameSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveGameSystem, SaveDataObject, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveGameSystem, TempSaveDataObject, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveGameSystem, WorldTransitDataObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveGameSystem, MasterDataObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveGameSystem, UnknownData_AT4Y, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveGameSystem, OnSaveGameBegin, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveGameSystem, OnSaveGameComplete, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveGameSystem, OnLoadGameComplete, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveGameSystem, SaveSlotNames_Data, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveGameSystem, MasterDataSlotName, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveGameSystem, SaveSlotName, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveGameSystem, UserIndex, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveGameSystem, bIsSavingAllowed, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveGameSystem, bInvertedGamepad, 0x014D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSaveGameSystem, UnknownData_ACK0, 0x014E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFNAFSaveGameSystem, 0x0150);
		}

		// class UFNAFSightSystem : public UWorldSubsystem
		TEST_METHOD(Class__fnaf9__FNAFSightSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFSightSystem, UnknownData_604D, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFNAFSightSystem, 0x0108);
		}

		// class UGameClockSettings : public UDeveloperSettings
		TEST_METHOD(Class__fnaf9__GameClockSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameClockSettings, TotalGameTimeHours, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameClockSettings, TotalRealTimeHours, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameClockSettings, TickRate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameClockSettings, UnknownData_1IV7, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameClockSettings, 0x0048);
		}

		// class UGameClockSystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__fnaf9__GameClockSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameClockSystem, UnknownData_LGV3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameClockSystem, OnGameClockStateChange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameClockSystem, NormalModeDelegate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameClockSystem, MoonmanLiteDelegate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameClockSystem, MoonmanIntermediateDelegate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameClockSystem, MoonmanDangerDelegate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameClockSystem, OnGameClockTick, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameClockSystem, OnGameClockTimeChanged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameClockSystem, OnGameClockTickDelta, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameClockSystem, UnknownData_E4ZS, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameClockSystem, 0x0100);
		}

		// class UGameTypeCheckComponent : public UActorComponent
		TEST_METHOD(Class__fnaf9__GameTypeCheckComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameTypeCheckComponent, AllowedGameTypes, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameTypeCheckComponent, OnGameTypeAllowed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameTypeCheckComponent, OnGameTypeNotAllowed, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameTypeCheckComponent, 0x00E0);
		}

		// class UGameTypeCheckDestroy : public UGameTypeCheckComponent
		TEST_METHOD(Class__fnaf9__GameTypeCheckDestroy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameTypeCheckDestroy, 0x00E0);
		}

		// class AGlobalAIPerception : public AActor
		TEST_METHOD(Class__fnaf9__GlobalAIPerception)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalAIPerception, UnknownData_TNPC, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGlobalAIPerception, 0x0230);
		}

		// class UHideObjectInterface : public UInterface
		TEST_METHOD(Class__fnaf9__HideObjectInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHideObjectInterface, 0x0028);
		}

		// class UInstructionCardRowBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__fnaf9__InstructionCardRowBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstructionCardRowBlueprintFunctionLibrary, 0x0028);
		}

		// class UInventoryConditionalComponent : public UActorComponent
		TEST_METHOD(Class__fnaf9__InventoryConditionalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryConditionalComponent, UnknownData_1DGV, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryConditionalComponent, RequiredInventoryItem, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryConditionalComponent, RequiredSecurityLevel, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryConditionalComponent, RequiresPartyPass, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryConditionalComponent, RequiresPawn, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryConditionalComponent, PawnTypeIgnoresConditions, 0x00D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryConditionalComponent, UnknownData_NSR5, 0x00D7);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryConditionalComponent, 0x00D8);
		}

		// class UItemCollectListenerComponent : public UActorComponent
		TEST_METHOD(Class__fnaf9__ItemCollectListenerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectListenerComponent, OnItemCollected, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectListenerComponent, OnItemAlreadyCollected, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectListenerComponent, InventoryItem, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectListenerComponent, bEventsEnabled, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectListenerComponent, UnknownData_97AB, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemCollectListenerComponent, 0x00E0);
		}

		// class ULevelStreamViewpoint : public USceneComponent
		TEST_METHOD(Class__fnaf9__LevelStreamViewpoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamViewpoint, OnLevelsLoaded, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamViewpoint, bStreamingEnable, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamViewpoint, bEnableStreamOnActivePawn, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamViewpoint, UnknownData_KKQC, 0x0202);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamViewpoint, 0x0210);
		}

		// class ALightingMaterialManager : public AActor
		TEST_METHOD(Class__fnaf9__LightingMaterialManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightingMaterialManager, MeshMaterials, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightingMaterialManager, 0x0238);
		}

		// class ULightScenarioManager : public UWorldSubsystem
		TEST_METHOD(Class__fnaf9__LightScenarioManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightScenarioManager, UnknownData_CLR1, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightScenarioManager, 0x0090);
		}

		// class ULightScenarioManagerSettings : public UDeveloperSettings
		TEST_METHOD(Class__fnaf9__LightScenarioManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightScenarioManagerSettings, LightScenarioInfo, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightScenarioManagerSettings, LightScenarioMap, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightScenarioManagerSettings, 0x00D8);
		}

		// class ALightStreamingVolume : public AVolume
		TEST_METHOD(Class__fnaf9__LightStreamingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightStreamingVolume, LightScenarioArea, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightStreamingVolume, UnknownData_RTIR, 0x0264);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightStreamingVolume, 0x0268);
		}

		// class ULocalization : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__fnaf9__Localization)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalization, 0x0028);
		}

		// class UMissionDisplayQueueLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__fnaf9__MissionDisplayQueueLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionDisplayQueueLibrary, 0x0028);
		}

		// class AMissionMarker : public AActor
		TEST_METHOD(Class__fnaf9__MissionMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionMarker, MissionName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionMarker, MissionStateIndex, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionMarker, UnknownData_R3D9, 0x0234);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissionMarker, 0x0238);
		}

		// class UMissionStateCondition : public UActorComponent
		TEST_METHOD(Class__fnaf9__MissionStateCondition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionStateCondition, UnknownData_H7QP, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionStateCondition, OnMissionConditionMet, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionStateCondition, OnMissionConditionAlreadyMet, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionStateCondition, OnMissionConditionUnMet, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionStateCondition, MissionName, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionStateCondition, MissionStatus, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionStateCondition, UnknownData_TLAK, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionStateCondition, MinMissionState, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionStateCondition, MaxMissionState, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionStateCondition, UnknownData_SG6A, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionStateCondition, 0x0110);
		}

		// class UMoonmanManagementSystem : public UWorldSubsystem
		TEST_METHOD(Class__fnaf9__MoonmanManagementSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanManagementSystem, OnMMRegisterSpawn, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanManagementSystem, OnMMUnregisterSpawn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanManagementSystem, UnknownData_YW4F, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoonmanManagementSystem, 0x0068);
		}

		// class AMoonmanSpawnPoint : public ANavigationObjectBase
		TEST_METHOD(Class__fnaf9__MoonmanSpawnPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSpawnPoint, UnknownData_WL0A, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSpawnPoint, BillboardComponent, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSpawnPoint, VisualSource, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSpawnPoint, OnMMDetected, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSpawnPoint, b_CanSpawn, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSpawnPoint, MMAnimCategory, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSpawnPoint, UnknownData_6EMW, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSpawnPoint, MMAnimSeq_Array, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSpawnPoint, bShouldFollowPlayer, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSpawnPoint, UnknownData_0GZ7, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSpawnPoint, bIsStationary, 0x029B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSpawnPoint, bAnimLoop, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSpawnPoint, bAimHeadAtPlayer, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSpawnPoint, bCanPopUp, 0x029E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSpawnPoint, bIsSingleUse, 0x029F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSpawnPoint, UnknownData_H8S7, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSpawnPoint, MMColliderActors, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSpawnPoint, probabilityOfSpawn, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSpawnPoint, originalProbabilityOfSpawn, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMoonmanSpawnPoint, 0x02C0);
		}

		// class UPatrollerInterface : public UInterface
		TEST_METHOD(Class__fnaf9__PatrollerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPatrollerInterface, 0x0028);
		}

		// class APlayerTriggerWithConditionComps : public APlayerTrigger
		TEST_METHOD(Class__fnaf9__PlayerTriggerWithConditionComps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTriggerWithConditionComps, ConditionCheck, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTriggerWithConditionComps, UnknownData_J3ZF, 0x0271);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerTriggerWithConditionComps, 0x0278);
		}

		// class URichTextControlButtonDecorator : public URichTextBlockDecorator
		TEST_METHOD(Class__fnaf9__RichTextControlButtonDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextControlButtonDecorator, ButtonSet, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextControlButtonDecorator, 0x0030);
		}

		// class USaveHandlerInterface : public UInterface
		TEST_METHOD(Class__fnaf9__SaveHandlerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveHandlerInterface, 0x0028);
		}

		// class ASecurityCamera : public AActor
		TEST_METHOD(Class__fnaf9__SecurityCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera, CameraPivot, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera, PlayerDetector, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera, PlayerControlledPivot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera, EnemyDetector, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera, CameraInventoryName, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera, FazwatchAccessible, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera, bPlayerDetectorStartsOn, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera, bEnemyDetectorStartsOn, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera, bPlayerDetected, 0x0253);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera, UnknownData_8IAR, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera, CameraName, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera, PanMin, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera, PanMax, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera, TiltMin, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera, TiltMax, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityCamera, UnknownData_HI4H, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASecurityCamera, 0x0290);
		}

		// class USecurityCameraSystem : public UWorldSubsystem
		TEST_METHOD(Class__fnaf9__SecurityCameraSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraSystem, OnCameraAlert, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraSystem, OnCameraRegistered, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraSystem, OnCameraUnregistered, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraSystem, OnCameraTriggerAlert, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraSystem, OnCameraTriggerLostAlert, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraSystem, UnknownData_MPO1, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USecurityCameraSystem, 0x0090);
		}

		// class USeekerPatrolPath : public UInterface
		TEST_METHOD(Class__fnaf9__SeekerPatrolPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USeekerPatrolPath, 0x0028);
		}

		// class USightComponent : public USceneComponent
		TEST_METHOD(Class__fnaf9__SightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USightComponent, OnSightChanged, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USightComponent, SightAngle, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USightComponent, StartDistance, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::USightComponent, EndDistance, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USightComponent, SightType, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USightComponent, UnknownData_RYWH, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USightComponent, AspectRatio, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USightComponent, MinYaw, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::USightComponent, MaxYaw, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USightComponent, MinPitch, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USightComponent, MaxPitch, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USightComponent, ThetaSteps, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::USightComponent, PhiSteps, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USightComponent, UnknownData_GIBP, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USightComponent, VisibleActors, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USightComponent, VisibleMMActors, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USightComponent, bSightDetectionEnabled, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USightComponent, bShowVisionDebug, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::USightComponent, UnknownData_DWHV, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::USightComponent, IncludeTags, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USightComponent, UnknownData_YN7S, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USightComponent, 0x0270);
		}

		// class USplineFollowMovementComponent : public UActorComponent
		TEST_METHOD(Class__fnaf9__SplineFollowMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineFollowMovementComponent, OnFinishedFollowingSpline, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineFollowMovementComponent, MovementSpeed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineFollowMovementComponent, UnknownData_LACR, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineFollowMovementComponent, SplineToFollow, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineFollowMovementComponent, bOrientToTangent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineFollowMovementComponent, UnknownData_XZOM, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineFollowMovementComponent, 0x00E0);
		}

		// class USplineUtils : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__fnaf9__SplineUtils)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineUtils, 0x0028);
		}

		// class UWorldStateComponent : public UActorComponent
		TEST_METHOD(Class__fnaf9__WorldStateComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateComponent, SaveName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateComponent, bSaveOnStateChange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateComponent, UnknownData_F8CJ, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldStateComponent, 0x00C0);
		}

		// class UStoreActiveStateOnTrigger : public UWorldStateComponent
		TEST_METHOD(Class__fnaf9__StoreActiveStateOnTrigger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreActiveStateOnTrigger, OnPlayerTriggered, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreActiveStateOnTrigger, PlayerType, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreActiveStateOnTrigger, UnknownData_KP5N, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoreActiveStateOnTrigger, 0x00D8);
		}

		// class UStreamingLevelUtil : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__fnaf9__StreamingLevelUtil)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamingLevelUtil, 0x0028);
		}

		// class UStreamingLoadComponent : public UActorComponent
		TEST_METHOD(Class__fnaf9__StreamingLoadComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingLoadComponent, OnLevelStreamingFinished, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingLoadComponent, bTurnVolumesOnAfterLoad, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingLoadComponent, UnknownData_AX62, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamingLoadComponent, 0x00E0);
		}

		// class ASurvivalDoorConditionManager : public AActor
		TEST_METHOD(Class__fnaf9__SurvivalDoorConditionManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalDoorConditionManager, DoorList, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalDoorConditionManager, SecurityLevel, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalDoorConditionManager, RequiredItem, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalDoorConditionManager, UnknownData_GYEC, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurvivalDoorConditionManager, 0x0258);
		}

		// class ASurvivalItemPackage : public AActor
		TEST_METHOD(Class__fnaf9__SurvivalItemPackage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemPackage, ItemName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemPackage, ItemArea, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemPackage, UnknownData_WX04, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemPackage, SurvivalRandomizer, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemPackage, UnknownData_NIB6, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurvivalItemPackage, 0x0248);
		}

		// class ASurvivalItemRandomizer : public AItemRandomizer
		TEST_METHOD(Class__fnaf9__SurvivalItemRandomizer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemRandomizer, PointsPerPink, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemRandomizer, PointsPerYellow, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemRandomizer, PointsPerGreen, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemRandomizer, PointsPerRed, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemRandomizer, PointsPerPurple, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemRandomizer, PointsPerGold, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemRandomizer, CollectedPink, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemRandomizer, TotalPink, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemRandomizer, CollectedYellow, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemRandomizer, TotalYellow, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemRandomizer, CollectedGreen, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemRandomizer, TotalGreen, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemRandomizer, CollectedRed, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemRandomizer, TotalRed, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemRandomizer, CollectedPurple, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemRandomizer, TotalPurple, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemRandomizer, CollectedGold, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemRandomizer, TotalGold, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemRandomizer, RemainingPackages, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemRandomizer, UnknownData_8TTP, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemRandomizer, InfoPerArea, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemRandomizer, SurvivalPackageClass, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalItemRandomizer, UnknownData_5LM1, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurvivalItemRandomizer, 0x0390);
		}

		// class ASurvivalRandomItem : public ARandomItemGroup
		TEST_METHOD(Class__fnaf9__SurvivalRandomItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalRandomItem, AreaType, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalRandomItem, UnknownData_07RL, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurvivalRandomItem, 0x0240);
		}

		// class UUpdateMissionComponent : public UActorComponent
		TEST_METHOD(Class__fnaf9__UpdateMissionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateMissionComponent, MissionName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateMissionComponent, MissionStateIndex, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateMissionComponent, bShouldComplete, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateMissionComponent, bShouldSave, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateMissionComponent, UnknownData_M9YC, 0x00BE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUpdateMissionComponent, 0x00C0);
		}

		// class UVisualSourceComponent : public UActorComponent
		TEST_METHOD(Class__fnaf9__VisualSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisualSourceComponent, OnSourceDetected, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisualSourceComponent, VisualOffsets, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisualSourceComponent, bIsVisibilityEnabled, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisualSourceComponent, UnknownData_RF18, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualSourceComponent, 0x00E0);
		}

		// class UWorldStateHandlerComponent : public UActorComponent
		TEST_METHOD(Class__fnaf9__WorldStateHandlerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateHandlerComponent, UnknownData_YYSS, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateHandlerComponent, OnObjectStateChanged, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateHandlerComponent, ObjectStateName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateHandlerComponent, bConditionMetOnStateSet, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateHandlerComponent, UnknownData_GO2R, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldStateHandlerComponent, 0x00F0);
		}

		// class UWorldStateSystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__fnaf9__WorldStateSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateSystem, UnknownData_6K52, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateSystem, OnWorldStateChanged, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateSystem, OnObjectStateChanged, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateSystem, FreddyState, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateSystem, SeededRandomStream, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateSystem, WorldState, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateSystem, UnknownData_PW4H, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateSystem, ActivatedObjects, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateSystem, AIState, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateSystem, ArcadeState, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateSystem, CurrentMinigameName, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateSystem, CurrentMinigameActor, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateSystem, SurvivalDifficulty, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateSystem, UnknownData_95LM, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateSystem, CurrentActivityId, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldStateSystem, UnknownData_EAFY, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldStateSystem, 0x01F8);
		}

		// class UWI_InstructionCard_PAS_TakeOutClaws_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_PAS_TakeOutClaws__WI_InstructionCard_PAS_TakeOutClaws_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOutClaws_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOutClaws_C, Console_TextAndIcons, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOutClaws_C, Image_18_Template, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOutClaws_C, PC_TextAndIcons, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOutClaws_C, TextBlock_48_Title, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOutClaws_C, VerticalBox_250, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOutClaws_C, WI_ImageScaled, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_PAS_TakeOutClaws_C, 0x0268);
		}

		// class UWI_InstructionCard_PAS_ReplaceBowtie_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_PAS_ReplaceBowtie__WI_InstructionCard_PAS_ReplaceBowtie_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ReplaceBowtie_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ReplaceBowtie_C, Console_TextAndIcons, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ReplaceBowtie_C, Image_18_Template, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ReplaceBowtie_C, PC_TextAndIcons, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ReplaceBowtie_C, TextBlock_48_Title, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ReplaceBowtie_C, VerticalBox_250, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ReplaceBowtie_C, WI_ImageScaled, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_PAS_ReplaceBowtie_C, 0x0268);
		}

		// class UMagicLeapARPinComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, ObjectUID, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, UserIndex, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, AutoPinType, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, bShouldPinActor, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, UnknownData_MEVD, 0x0206);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinDataClass, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, OnPersistentEntityPinned, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, OnPersistentEntityPinLost, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinnedCFUID, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinnedSceneComponent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinData, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, UnknownData_2QPD, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinComponent, 0x0320);
		}

		// class UMagicLeapARPinFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinFunctionLibrary, 0x0028);
		}

		// class UMagicLeapARPinSettings : public UObject
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSettings, UpdateCheckFrequency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSettings, OnUpdatedEventTriggerDelta, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSettings, UnknownData_A061, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinSettings, 0x0040);
		}

		// class UMagicLeapARPinSaveGame : public USaveGame
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinSaveGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, PinnedID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, UnknownData_EJJ1, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, ComponentWorldTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, PinTransform, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinSaveGame, 0x00A0);
		}

		// class ASodaBottleSpill_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SodaBottleSpill__SodaBottleSpill_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASodaBottleSpill_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASodaBottleSpill_C, Spill_target, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASodaBottleSpill_C, BottleSpawnLocation, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASodaBottleSpill_C, SpillComponent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASodaBottleSpill_C, DefaultSceneRoot, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASodaBottleSpill_C, NumBottlesSpilled, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASodaBottleSpill_C, ForceAmount, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASodaBottleSpill_C, NumberToSpawn, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASodaBottleSpill_C, State, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASodaBottleSpill_C, 0x025D);
		}

		// class UEnvQueryNode : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, VerNum, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, UnknownData_HB7R, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryNode, 0x0030);
		}

		// class UEnvQueryTest : public UEnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryTest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestPurpose, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_DL85, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestComment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextFilterOp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextScoreOp, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FilterType, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_P14S, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, BoolValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMin, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMax, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_CQRI, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringEquation, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMinType, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMaxType, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, NormalizationType, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_NWPR, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMin, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMax, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringFactor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ReferenceValue, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, bDefineReferenceValue, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_AETR, 0x01E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_Y9EZ, 0x01F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest, 0x01F8);
		}

		// class UAIAsyncTaskBlueprintProxy : public UObject
		TEST_METHOD(Class__AIModule__AIAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnFail, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, UnknownData_FQLV, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIAsyncTaskBlueprintProxy, 0x0068);
		}

		// class UAIBlueprintHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AIModule__AIBlueprintHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIBlueprintHelperLibrary, 0x0028);
		}

		// class AAIController : public AController
		TEST_METHOD(Class__AIModule__AIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_PYQB, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_EWU4, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PathFollowingComponent, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, BrainComponent, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PerceptionComponent, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ActionsComp, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, Blackboard, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, CachedGameplayTasksComponent, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, DefaultNavigationFilterClass, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ReceiveMoveCompleted, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_7PW7, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController, 0x0330);
		}

		// class UAIDataProvider : public UObject
		TEST_METHOD(Class__AIModule__AIDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider, 0x0028);
		}

		// class UAIDataProvider_QueryParams : public UAIDataProvider
		TEST_METHOD(Class__AIModule__AIDataProvider_QueryParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, ParamName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, FloatValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, IntValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, BoolValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, UnknownData_PIKU, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_QueryParams, 0x0040);
		}

		// class UAIDataProvider_Random : public UAIDataProvider_QueryParams
		TEST_METHOD(Class__AIModule__AIDataProvider_Random)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Max, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, UnknownData_0RCT, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_Random, 0x0050);
		}

		// class UAIHotSpotManager : public UObject
		TEST_METHOD(Class__AIModule__AIHotSpotManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIHotSpotManager, 0x0028);
		}

		// class UAIPerceptionComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__AIPerceptionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, SensesConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, DominantSense, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_M8QL, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, AIOwner, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_ZPG4, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnPerceptionUpdated, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnTargetPerceptionUpdated, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionComponent, 0x0180);
		}

		// class UAIPerceptionListenerInterface : public UInterface
		TEST_METHOD(Class__AIModule__AIPerceptionListenerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionListenerInterface, 0x0028);
		}

		// class UAIPerceptionStimuliSourceComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__AIPerceptionStimuliSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, UnknownData_WSVP, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, RegisterAsSourceForSenses, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionStimuliSourceComponent, 0x00C8);
		}

		// class UAISubsystem : public UObject
		TEST_METHOD(Class__AIModule__AISubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISubsystem, UnknownData_NJWP, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISubsystem, AISystem, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISubsystem, 0x0038);
		}

		// class UAIPerceptionSystem : public UAISubsystem
		TEST_METHOD(Class__AIModule__AIPerceptionSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_32CI, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, Senses, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, PerceptionAgingRate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_KIFH, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionSystem, 0x0138);
		}

		// class UAIResourceInterface : public UInterface
		TEST_METHOD(Class__AIModule__AIResourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResourceInterface, 0x0028);
		}

		// class UAIResource_Movement : public UGameplayTaskResource
		TEST_METHOD(Class__AIModule__AIResource_Movement)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Movement, 0x0038);
		}

		// class UAIResource_Logic : public UGameplayTaskResource
		TEST_METHOD(Class__AIModule__AIResource_Logic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Logic, 0x0038);
		}

		// class UAISense : public UObject
		TEST_METHOD(Class__AIModule__AISense)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, DefaultExpirationAge, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, NotifyType, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_6LMS, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_XRBY, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, PerceptionSystemInstance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_28GD, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense, 0x0080);
		}

		// class UAISense_Blueprint : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerDataType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerContainer, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, UnprocessedEvents, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Blueprint, 0x00A8);
		}

		// class UAISense_Damage : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Damage, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Damage, 0x0090);
		}

		// class UAISense_Hearing : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, NoiseEvents, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, SpeedOfSoundSq, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, UnknownData_15WH, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Hearing, 0x00E8);
		}

		// class UAISense_Prediction : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Prediction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Prediction, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Prediction, 0x0090);
		}

		// class UAISense_Sight : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Sight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_XKF8, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTracesPerTick, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MinQueriesPerTimeSliceCheck, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTimeSlicePerTick, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, HighImportanceQueryDistanceThreshold, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_NBOB, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxQueryImportance, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, SightLimitQueryImportance, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_RDZ1, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Sight, 0x0170);
		}

		// class UAISense_Team : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Team)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Team, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Team, 0x0090);
		}

		// class UAISense_Touch : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Touch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Touch, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Touch, 0x0090);
		}

		// class UAISenseBlueprintListener : public UUserDefinedStruct
		TEST_METHOD(Class__AIModule__AISenseBlueprintListener)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseBlueprintListener, 0x0108);
		}

		// class UAISenseConfig : public UObject
		TEST_METHOD(Class__AIModule__AISenseConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, DebugColor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, MaxAge, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, UnknownData_I9TL, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig, 0x0048);
		}

		// class UAISenseConfig_Blueprint : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Blueprint, Implementation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Blueprint, 0x0050);
		}

		// class UAISenseConfig_Damage : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Damage, Implementation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Damage, 0x0050);
		}

		// class UAISenseConfig_Hearing : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, Implementation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, HearingRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, LoSHearingRange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, UnknownData_OTS1, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, DetectionByAffiliation, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Hearing, 0x0060);
		}

		// class UAISenseConfig_Prediction : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Prediction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Prediction, 0x0048);
		}

		// class UAISenseConfig_Sight : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Sight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, Implementation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, SightRadius, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, LoseSightRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, PeripheralVisionAngleDegrees, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, DetectionByAffiliation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, AutoSuccessRangeFromLastSeenLocation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, UnknownData_C1ZR, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Sight, 0x0068);
		}

		// class UAISenseConfig_Team : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Team)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Team, 0x0048);
		}

		// class UAISenseConfig_Touch : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Touch)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Touch, 0x0048);
		}

		// class UAISenseEvent : public UObject
		TEST_METHOD(Class__AIModule__AISenseEvent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent, 0x0028);
		}

		// class UAISenseEvent_Damage : public UAISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Damage, Event, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Damage, 0x0058);
		}

		// class UAISenseEvent_Hearing : public UAISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Hearing, Event, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Hearing, 0x0058);
		}

		// class UAISightTargetInterface : public UInterface
		TEST_METHOD(Class__AIModule__AISightTargetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISightTargetInterface, 0x0028);
		}

		// class UAISystem : public UAISystemBase
		TEST_METHOD(Class__AIModule__AISystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystemClassName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManagerClassName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AcceptanceRadius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingRegularPathPointAcceptanceRadius, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingNavLinkAcceptanceRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bFinishMoveOnGoalOverlap, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAcceptPartialPaths, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowStrafing, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableBTAITasks, 0x0097);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowControllersAsEQSQuerier, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableDebuggerPlugin, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bForgetStaleActors, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, DefaultSightCollisionChannel, 0x009B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_S5Y7, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, BehaviorTreeManager, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, EnvironmentQueryManager, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystem, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AllProxyObjects, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManager, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, NavLocalGrids, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_Z241, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystem, 0x0130);
		}

		// class UAITask : public UGameplayTask
		TEST_METHOD(Class__AIModule__AITask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask, OwnerController, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask, 0x0070);
		}

		// class UAITask_LockLogic : public UAITask
		TEST_METHOD(Class__AIModule__AITask_LockLogic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_LockLogic, 0x0070);
		}

		// class UAITask_MoveTo : public UAITask
		TEST_METHOD(Class__AIModule__AITask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnRequestFailed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnMoveFinished, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, MoveRequest, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, UnknownData_Z26R, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_MoveTo, 0x0110);
		}

		// class UAITask_RunEQS : public UAITask
		TEST_METHOD(Class__AIModule__AITask_RunEQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_RunEQS, UnknownData_4BV0, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_RunEQS, 0x00E8);
		}

		// class UBehaviorTree : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, UnknownData_T282, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootNode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, BlackboardAsset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecorators, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecoratorOps, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, UnknownData_9ZSO, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTree, 0x0068);
		}

		// class UBrainComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__BrainComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_8HQ1, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, BlackboardComp, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, AIOwner, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_OF68, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrainComponent, 0x0110);
		}

		// class UBehaviorTreeComponent : public UBrainComponent
		TEST_METHOD(Class__AIModule__BehaviorTreeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_JX50, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, NodeInstances, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_4UQR, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, DefaultBehaviorTreeAsset, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeComponent, 0x0270);
		}

		// class UBehaviorTreeManager : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTreeManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, MaxDebuggerSteps, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, UnknownData_F1DH, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, LoadedTemplates, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, ActiveComponents, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeManager, 0x0050);
		}

		// class UBehaviorTreeTypes : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTreeTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeTypes, 0x0028);
		}

		// class UBlackboardAssetProvider : public UInterface
		TEST_METHOD(Class__AIModule__BlackboardAssetProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardAssetProvider, 0x0028);
		}

		// class UBlackboardComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__BlackboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BrainComp, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, DefaultBlackboardAsset, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BlackboardAsset, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_9RSN, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, KeyInstances, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_D4NJ, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardComponent, 0x01B0);
		}

		// class UBlackboardData : public UDataAsset
		TEST_METHOD(Class__AIModule__BlackboardData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Parent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Keys, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, UnknownData_AE89, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardData, 0x0050);
		}

		// class UBlackboardKeyType : public UObject
		TEST_METHOD(Class__AIModule__BlackboardKeyType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType, UnknownData_6CMW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType, 0x0030);
		}

		// class UBlackboardKeyType_Bool : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Bool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Bool, 0x0030);
		}

		// class UBlackboardKeyType_Class : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Class, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Class, 0x0038);
		}

		// class UBlackboardKeyType_Enum : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, UnknownData_2033, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Enum, 0x0050);
		}

		// class UBlackboardKeyType_Float : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Float)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Float, 0x0030);
		}

		// class UBlackboardKeyType_Int : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Int)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Int, 0x0030);
		}

		// class UBlackboardKeyType_Name : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Name)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Name, 0x0030);
		}

		// class UBlackboardKeyType_NativeEnum : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_NativeEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumType, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_NativeEnum, 0x0048);
		}

		// class UBlackboardKeyType_Object : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Object, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Object, 0x0038);
		}

		// class UBlackboardKeyType_Rotator : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Rotator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Rotator, 0x0030);
		}

		// class UBlackboardKeyType_String : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_String)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_String, StringValue, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_String, 0x0040);
		}

		// class UBlackboardKeyType_Vector : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Vector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Vector, 0x0030);
		}

		// class UBTNode : public UObject
		TEST_METHOD(Class__AIModule__BTNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_QUOT, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, NodeName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, TreeAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, ParentNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_VD1G, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTNode, 0x0058);
		}

		// class UBTAuxiliaryNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTAuxiliaryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTAuxiliaryNode, UnknownData_FHZ3, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTAuxiliaryNode, 0x0060);
		}

		// class UBTCompositeNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTCompositeNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Children, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Services, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_2AFM, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_9S6E, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTCompositeNode, 0x0090);
		}

		// class UBTComposite_Selector : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_Selector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Selector, 0x0090);
		}

		// class UBTComposite_Sequence : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_Sequence)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Sequence, 0x0090);
		}

		// class UBTComposite_SimpleParallel : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_SimpleParallel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, FinishMode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, UnknownData_7XJ2, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_SimpleParallel, 0x0098);
		}

		// class UBTDecorator : public UBTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_VIDI, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, FlowAbortMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_0EJX, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator, 0x0068);
		}

		// class UBTDecorator_BlackboardBase : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlackboardBase, BlackboardKey, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlackboardBase, 0x0090);
		}

		// class UBTDecorator_Blackboard : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_Blackboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, IntValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, FloatValue, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, StringValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, CachedDescription, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, OperationType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, NotifyObserver, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, UnknownData_RRLG, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Blackboard, 0x00C0);
		}

		// class UBTDecorator_BlueprintBase : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, AIOwner, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ActorOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ObservedKeyNames, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_OPOU, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_MXKH, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlueprintBase, 0x00A0);
		}

		// class UBTDecorator_CheckGameplayTagsOnActor : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_CheckGameplayTagsOnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, ActorToCheck, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, TagsToMatch, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, UnknownData_RQOT, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, GameplayTags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, CachedDescription, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CheckGameplayTagsOnActor, 0x00C8);
		}

		// class UBTDecorator_CompareBBEntries : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_CompareBBEntries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, Operator, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, UnknownData_6LWV, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyB, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CompareBBEntries, 0x00C0);
		}

		// class UBTDecorator_ConditionalLoop : public UBTDecorator_Blackboard
		TEST_METHOD(Class__AIModule__BTDecorator_ConditionalLoop)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConditionalLoop, 0x00C0);
		}

		// class UBTDecorator_ConeCheck : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ConeCheck)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeHalfAngle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_V001, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeOrigin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeDirection, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, Observed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_EFKW, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConeCheck, 0x00F0);
		}

		// class UBTDecorator_Cooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_Cooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, CoolDownTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, UnknownData_PBX1, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Cooldown, 0x0070);
		}

		// class UBTDecorator_DoesPathExist : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_DoesPathExist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyB, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_WPEP, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, PathQueryType, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_M5IQ, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, FilterClass, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_DoesPathExist, 0x00C8);
		}

		// class UBTDecorator_ForceSuccess : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ForceSuccess)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ForceSuccess, 0x0068);
		}

		// class UBTDecorator_IsAtLocation : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_IsAtLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, AcceptableRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_VLLZ, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, ParametrizedAcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, GeometricDistanceType, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_YM9E, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_R62J, 0x00D5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsAtLocation, 0x00D8);
		}

		// class UBTDecorator_IsBBEntryOfClass : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_IsBBEntryOfClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsBBEntryOfClass, TestClass, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsBBEntryOfClass, 0x0098);
		}

		// class UBTDecorator_KeepInCone : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_KeepInCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeHalfAngle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_V9GC, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeOrigin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, Observed, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_UBYX, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_KeepInCone, 0x00C8);
		}

		// class UBTDecorator_Loop : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_Loop)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, NumLoops, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, bInfiniteLoop, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_FVV1, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, InfiniteLoopTimeoutTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_T5F4, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Loop, 0x0078);
		}

		// class UBTDecorator_ReachedMoveGoal : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ReachedMoveGoal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ReachedMoveGoal, 0x0068);
		}

		// class UBTDecorator_SetTagCooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_SetTagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, bAddToExistingDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, UnknownData_55Q6, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_SetTagCooldown, 0x0078);
		}

		// class UBTDecorator_TagCooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_TagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bAddToExistingDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bActivatesCooldown, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, UnknownData_PDD4, 0x0076);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TagCooldown, 0x0078);
		}

		// class UBTDecorator_TimeLimit : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_TimeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, TimeLimit, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, UnknownData_CA1B, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TimeLimit, 0x0070);
		}

		// class UBTFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AIModule__BTFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTFunctionLibrary, 0x0028);
		}

		// class UBTService : public UBTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTService)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, Interval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, RandomDeviation, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, UnknownData_DFZR, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService, 0x0070);
		}

		// class UBTService_BlackboardBase : public UBTService
		TEST_METHOD(Class__AIModule__BTService_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlackboardBase, 0x0098);
		}

		// class UBTService_BlueprintBase : public UBTService
		TEST_METHOD(Class__AIModule__BTService_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_75BV, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_LIED, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlueprintBase, 0x0098);
		}

		// class UBTService_DefaultFocus : public UBTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_DefaultFocus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, FocusPriority, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, UnknownData_RJ4W, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_DefaultFocus, 0x00A0);
		}

		// class UBTService_RunEQS : public UBTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_RunEQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, EQSRequest, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, UnknownData_V2VY, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_RunEQS, 0x00F0);
		}

		// class UBTTaskNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTTaskNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, Services, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, UnknownData_NT39, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTaskNode, 0x0070);
		}

		// class UBTTask_BlackboardBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlackboardBase, 0x0098);
		}

		// class UBTTask_BlueprintBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, TickInterval, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_UCOE, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_PARC, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlueprintBase, 0x00A8);
		}

		// class UBTTask_FinishWithResult : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_FinishWithResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, Result, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, UnknownData_32Q5, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_FinishWithResult, 0x0078);
		}

		// class UBTTask_GameplayTaskBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_GameplayTaskBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_GameplayTaskBase, UnknownData_QJAV, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_GameplayTaskBase, 0x0078);
		}

		// class UBTTask_MakeNoise : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_MakeNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, Loudnes, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, UnknownData_JJPZ, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MakeNoise, 0x0078);
		}

		// class UBTTask_MoveTo : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, AcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_OS8R, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, FilterClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, ObservedBlackboardValueTolerance, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_BBJK, 0x00AE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveTo, 0x00B0);
		}

		// class UBTTask_MoveDirectlyToward : public UBTTask_MoveTo
		TEST_METHOD(Class__AIModule__BTTask_MoveDirectlyToward)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveDirectlyToward, UnknownData_9CRM, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveDirectlyToward, 0x00B8);
		}

		// class UBTTask_PawnActionBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PawnActionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PawnActionBase, 0x0070);
		}

		// class UBTTask_PlayAnimation : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PlayAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, AnimationToPlay, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_CS0Q, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, MyOwnerComp, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, CachedSkelMesh, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_NO1B, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlayAnimation, 0x00B0);
		}

		// class UBTTask_PlaySound : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlaySound, SoundToPlay, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlaySound, 0x0078);
		}

		// class UBTTask_PushPawnAction : public UBTTask_PawnActionBase
		TEST_METHOD(Class__AIModule__BTTask_PushPawnAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PushPawnAction, Action, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PushPawnAction, 0x0078);
		}

		// class UBTTask_RotateToFaceBBEntry : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_RotateToFaceBBEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, Precision, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, UnknownData_7SEI, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RotateToFaceBBEntry, 0x00A0);
		}

		// class UBTTask_RunBehavior : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_RunBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehavior, BehaviorAsset, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehavior, 0x0078);
		}

		// class UBTTask_RunBehaviorDynamic : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_RunBehaviorDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, InjectionTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, DefaultBehaviorAsset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, BehaviorAsset, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehaviorDynamic, 0x0088);
		}

		// class UBTTask_RunEQSQuery : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_RunEQSQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryTemplate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryParams, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, RunMode, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_7DOK, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSQueryBlackboardKey, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, bUseBBKey, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_20SP, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSRequest, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_X76M, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunEQSQuery, 0x0150);
		}

		// class UBTTask_SetTagCooldown : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_SetTagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, bAddToExistingDuration, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, UnknownData_KXPC, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownDuration, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SetTagCooldown, 0x0080);
		}

		// class UBTTask_Wait : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_Wait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, WaitTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, RandomDeviation, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Wait, 0x0078);
		}

		// class UBTTask_WaitBlackboardTime : public UBTTask_Wait
		TEST_METHOD(Class__AIModule__BTTask_WaitBlackboardTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_WaitBlackboardTime, BlackboardKey, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_WaitBlackboardTime, 0x00A0);
		}

		// class UCrowdAgentInterface : public UInterface
		TEST_METHOD(Class__AIModule__CrowdAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdAgentInterface, 0x0028);
		}

		// class UPathFollowingComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_DRQA, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MovementComp, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_HNDG, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MyNavData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_7ZIY, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingComponent, 0x0258);
		}

		// class UCrowdFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__AIModule__CrowdFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_ORMA, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, CharacterMovement, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, CrowdAgentMoveDirection, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_HODA, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdFollowingComponent, 0x0298);
		}

		// class UCrowdManager : public UCrowdManagerBase
		TEST_METHOD(Class__AIModule__CrowdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MyNavData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, AvoidanceConfig, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SamplingPatterns, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgents, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgentRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedAgents, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedWalls, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, NavmeshCheckInterval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOptimizationInterval, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SeparationDirClamp, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOffsetRadiusMultiplier, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, UnknownData_EZWB, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManager, 0x00F0);
		}

		// class ADetourCrowdAIController : public AAIController
		TEST_METHOD(Class__AIModule__DetourCrowdAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADetourCrowdAIController, 0x0330);
		}

		// class UEnvQuery : public UDataAsset
		TEST_METHOD(Class__AIModule__EnvQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, QueryName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, Options, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQuery, 0x0048);
		}

		// class UEnvQueryContext : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryContext)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext, 0x0028);
		}

		// class UEnvQueryContext_BlueprintBase : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryContext_BlueprintBase, UnknownData_BQ7R, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_BlueprintBase, 0x0030);
		}

		// class UEnvQueryContext_Item : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_Item)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Item, 0x0028);
		}

		// class UEnvQueryContext_Querier : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_Querier)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Querier, 0x0028);
		}

		// class UEnvQueryDebugHelpers : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryDebugHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryDebugHelpers, 0x0028);
		}

		// class UEnvQueryGenerator : public UEnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, OptionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, ItemType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, UnknownData_4CE9, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator, 0x0050);
		}

		// class UEnvQueryGenerator_ActorsOfClass : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ActorsOfClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchedActorClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, GenerateOnlyActorsInRadius, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchCenter, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ActorsOfClass, 0x00D0);
		}

		// class UEnvQueryGenerator_BlueprintBase : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratorsActionDescription, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, Context, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratedItemType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, UnknownData_877Q, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_BlueprintBase, 0x0080);
		}

		// class UEnvQueryGenerator_Composite : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Composite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, Generators, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, UnknownData_IFXC, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, ForcedItemType, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Composite, 0x0070);
		}

		// class UEnvQueryGenerator_ProjectedPoints : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ProjectedPoints)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ProjectedPoints, ProjectionData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ProjectedPoints, 0x0080);
		}

		// class UEnvQueryGenerator_Cone : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Cone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AlignedPointsDistance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, ConeDegrees, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AngleStep, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, Range, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, CenterActor, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, UnknownData_N2S8, 0x0169);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Cone, 0x0170);
		}

		// class UEnvQueryGenerator_CurrentLocation : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_CurrentLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_CurrentLocation, QueryContext, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_CurrentLocation, 0x0058);
		}

		// class UEnvQueryGenerator_Donut : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Donut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, InnerRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, OuterRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, NumberOfRings, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, PointsPerRing, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcDirection, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcAngle, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, bUseSpiralPattern, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_XMU5, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, Center, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_UDJV, 0x01C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Donut, 0x01D0);
		}

		// class UEnvQueryGenerator_OnCircle : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_OnCircle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, SpaceBetween, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, NumberOfPoints, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, PointOnCircleSpacingMethod, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_LYDB, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcDirection, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcAngle, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, AngleRadians, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_H5N4, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenter, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, bIgnoreAnyContextActorsWhenGeneratingCircle, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_PIOH, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenterZOffset, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, TraceData, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_EL05, 0x0209);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_OnCircle, 0x0210);
		}

		// class UEnvQueryGenerator_SimpleGrid : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_SimpleGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GridSize, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, SpaceBetween, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GenerateAround, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_SimpleGrid, 0x00F8);
		}

		// class UEnvQueryGenerator_PathingGrid : public UEnvQueryGenerator_SimpleGrid
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_PathingGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, PathToItem, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, NavigationFilter, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, ScanRangeMultiplier, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_PathingGrid, 0x0170);
		}

		// class UEnvQueryInstanceBlueprintWrapper : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryInstanceBlueprintWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_K4VQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_0NV5, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, ItemType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OptionIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_DI86, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OnQueryFinishedEvent, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryInstanceBlueprintWrapper, 0x0078);
		}

		// class UEnvQueryItemType : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryItemType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryItemType, UnknownData_S8YM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType, 0x0030);
		}

		// class UEnvQueryItemType_VectorBase : public UEnvQueryItemType
		TEST_METHOD(Class__AIModule__EnvQueryItemType_VectorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_VectorBase, 0x0030);
		}

		// class UEnvQueryItemType_ActorBase : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_ActorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_ActorBase, 0x0030);
		}

		// class UEnvQueryItemType_Actor : public UEnvQueryItemType_ActorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Actor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Actor, 0x0030);
		}

		// class UEnvQueryItemType_Direction : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Direction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Direction, 0x0030);
		}

		// class UEnvQueryItemType_Point : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Point)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Point, 0x0030);
		}

		// class UEnvQueryManager : public UAISubsystem
		TEST_METHOD(Class__AIModule__EnvQueryManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_I7W6, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, InstanceCache, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, LocalContexts, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, GCShieldedWrappers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_74DQ, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, MaxAllowedTestingTime, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, bTestQueriesUsingBreadth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_6PZR, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningThreshold, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningInterval, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryManager, 0x0140);
		}

		// class UEnvQueryOption : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Generator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Tests, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryOption, 0x0040);
		}

		// class UEnvQueryTest_Distance : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Distance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, TestMode, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, UnknownData_JHF9, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, DistanceTo, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Distance, 0x0208);
		}

		// class UEnvQueryTest_Dot : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Dot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineA, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineB, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, TestMode, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, bAbsoluteValue, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, UnknownData_KTGZ, 0x023A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Dot, 0x0240);
		}

		// class UEnvQueryTest_GameplayTags : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_GameplayTags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagQueryToMatch, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, bUpdatedToUseQuery, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagsToMatch, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, UnknownData_5XM1, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, GameplayTags, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_GameplayTags, 0x0268);
		}

		// class UEnvQueryTest_Overlap : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Overlap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Overlap, OverlapData, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Overlap, 0x0218);
		}

		// class UEnvQueryTest_Pathfinding : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Pathfinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, TestMode, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, UnknownData_FWCN, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, Context, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, PathFromContext, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, SkipUnreachable, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, FilterClass, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Pathfinding, 0x0280);
		}

		// class UEnvQueryTest_PathfindingBatch : public UEnvQueryTest_Pathfinding
		TEST_METHOD(Class__AIModule__EnvQueryTest_PathfindingBatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_PathfindingBatch, ScanRangeMultiplier, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_PathfindingBatch, 0x02B8);
		}

		// class UEnvQueryTest_Project : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Project)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Project, ProjectionData, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Project, 0x0228);
		}

		// class UEnvQueryTest_Random : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Random)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Random, 0x01F8);
		}

		// class UEnvQueryTest_Trace : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Trace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceData, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceFromContext, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ItemHeightOffset, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ContextHeightOffset, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, Context, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Trace, 0x02D8);
		}

		// class UEnvQueryTest_Volume : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Volume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, VolumeContext, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, VolumeClass, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, UnknownData_U9MQ, 0x0209);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Volume, 0x0210);
		}

		// class UEnvQueryTypes : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTypes, 0x0028);
		}

		// class UEQSQueryResultSourceInterface : public UInterface
		TEST_METHOD(Class__AIModule__EQSQueryResultSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSQueryResultSourceInterface, 0x0028);
		}

		// class UEQSRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__AIModule__EQSRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSRenderingComponent, UnknownData_OPWN, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSRenderingComponent, 0x0430);
		}

		// class AEQSTestingPawn : public ACharacter
		TEST_METHOD(Class__AIModule__EQSTestingPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_7MIS, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryTemplate, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryParams, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryConfig, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, TimeLimitPerStep, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, StepToDebugDraw, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, HighlightMode, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_WL24, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_8GX5, 0x04F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryingMode, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_YKRA, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, NavAgentProperties, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_8TV7, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEQSTestingPawn, 0x0550);
		}

		// class UGenericTeamAgentInterface : public UInterface
		TEST_METHOD(Class__AIModule__GenericTeamAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericTeamAgentInterface, 0x0028);
		}

		// class AGridPathAIController : public AAIController
		TEST_METHOD(Class__AIModule__GridPathAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGridPathAIController, 0x0330);
		}

		// class UGridPathFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__AIModule__GridPathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, GridManager, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, UnknownData_DA4S, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPathFollowingComponent, 0x0288);
		}

		// class UNavFilter_AIControllerDefault : public UNavigationQueryFilter
		TEST_METHOD(Class__AIModule__NavFilter_AIControllerDefault)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavFilter_AIControllerDefault, 0x0048);
		}

		// class ANavLinkProxy : public AActor
		TEST_METHOD(Class__AIModule__NavLinkProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_IGI8, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, PointLinks, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SegmentLinks, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SmartLinkComp, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, bSmartLinkIsRelevant, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_VAC2, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, OnSmartLinkReached, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavLinkProxy, 0x0278);
		}

		// class UNavLocalGridManager : public UObject
		TEST_METHOD(Class__AIModule__NavLocalGridManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLocalGridManager, UnknownData_E8KD, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLocalGridManager, 0x0058);
		}

		// class UPathFollowingManager : public UObject
		TEST_METHOD(Class__AIModule__PathFollowingManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingManager, 0x0028);
		}

		// class UPawnAction : public UObject
		TEST_METHOD(Class__AIModule__PawnAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ChildAction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ParentAction, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, OwnerComponent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, Instigator, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, BrainComp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_9P4G, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_S9TC, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction, 0x0098);
		}

		// class UPawnAction_BlueprintBase : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_BlueprintBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_BlueprintBase, 0x0098);
		}

		// class UPawnAction_Move : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Move)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalActor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalLocation, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, AcceptableRadius, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, FilterClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, UnknownData_P8HQ, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Move, 0x00E8);
		}

		// class UPawnAction_Repeat : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Repeat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ActionToRepeat, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, RecentActionCopy, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ChildFailureHandlingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, UnknownData_NMJS, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Repeat, 0x00B8);
		}

		// class UPawnAction_Sequence : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Sequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ActionSequence, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ChildFailureHandlingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_9ROA, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, RecentActionCopy, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_8SN2, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Sequence, 0x00C0);
		}

		// class UPawnAction_Wait : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Wait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, TimeToWait, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, UnknownData_DSUX, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Wait, 0x00A8);
		}

		// class UPawnActionsComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PawnActionsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ControlledPawn, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionStacks, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionEvents, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, CurrentAction, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, UnknownData_49LY, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnActionsComponent, 0x00E8);
		}

		// class UPawnSensingComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PawnSensingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingThreshold, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, LOSHearingThreshold, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SightRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SensingInterval, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingMaxSoundAge, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, UnknownData_MSEP, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnSeePawn, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnHearNoise, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionAngle, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionCosine, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnSensingComponent, 0x00F8);
		}

		// class UVisualLoggerExtension : public UObject
		TEST_METHOD(Class__AIModule__VisualLoggerExtension)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerExtension, 0x0028);
		}

		// class UUI_Mission_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Mission__UI_Mission_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Mission_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Mission_C, ExpandableArea_205, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Mission_C, ObjectiveBox, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Mission_C, WI_GenericHeader, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Mission_C, Selected, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Mission_C, UnknownData_JT2K, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Mission_C, Data, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Mission_C, Name, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Mission_C, HideFutureTasks, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Mission_C, 0x02A9);
		}

		// class UWI_Feedback_C : public UWI_Empty_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_Feedback__WI_Feedback_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Feedback_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Feedback_C, AreaCapturedAnim, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Feedback_C, FlagLostAnim, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Feedback_C, NiceShotAnim, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Feedback_C, UnstoppableAnim, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Feedback_C, HitStreakAnim, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Feedback_C, MoveUpAndFadeOut, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Feedback_C, _5InaRow_Image, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Feedback_C, AreaCaptured_Image, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Feedback_C, FeedbackText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Feedback_C, FlagLost_Image, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Feedback_C, NiceShot_Image, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Feedback_C, Unstoppable_Image, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Feedback_C, FeedbackQue, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Feedback_C, FeedbackTimer, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Feedback_C, ShotTypeTexts, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Feedback_C, NewVar_1, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_Feedback_C, 0x02D1);
		}

		// class AAIC_Racer_C : public AAIController
		TEST_METHOD(BlueprintGeneratedClass__AIC_Racer__AIC_Racer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIC_Racer_C, UberGraphFrame, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIC_Racer_C, CartMechanics, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIC_Racer_C, Spline, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIC_Racer_C, SplineKey, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIC_Racer_C, 0x0350);
		}

		// class UBT_GetPoint_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BT_GetPoint__BT_GetPoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBT_GetPoint_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBT_GetPoint_C, Out_location, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBT_GetPoint_C, Spline, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBT_GetPoint_C, Offset_, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBT_GetPoint_C, Last_Location, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBT_GetPoint_C, StuckCount, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBT_GetPoint_C, 0x00F4);
		}

		// class ULightPropagationVolumeBlendable : public UObject
		TEST_METHOD(Class__LightPropagationVolumeRuntime__LightPropagationVolumeBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_Q67W, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, Settings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, BlendWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_KHJC, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightPropagationVolumeBlendable, 0x0078);
		}

		// class UMapUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MapUi__MapUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, Black_back, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraIcon_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraIcon_3, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraIcon_4, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraIcon_5, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraIcon_6, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraIcon_7, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraIcon_8, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraIcon_9, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraIcon_10, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraIcon_11, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraIcon_12, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraIcon_13, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraIcon_14, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraIcon_15, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraIcon_16, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraIcon_17, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraIcon_18, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraIcon_19, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraIcon_20, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraIcon_21, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraIconsRoot, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, Charge_Icon, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, Charge_Icon_2, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, Charge_Icon_3, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, Charge_Icon_4, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, ChargeIconsRoot, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, Freddy_pos, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, FreddyIcon, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, MapImage, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, Mask, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, PlayerPos, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, DistanceFromPlayer, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, UnknownData_9U1E, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraIconMap, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraIcons, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, LastSelection, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CurrentSelection, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraClickedInMap, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, ReferenceData, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, Minimap, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CameraToIconMap, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, TopLeftBound, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, BottomRightBound, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, MinimapScale, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, MarkerIcons, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, CurrentIndex, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, UnknownData_1EK3, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, MiniMapReference, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, GolfMode, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, OnlyShowCurrentMissionCam, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, UnknownData_E9XM, 0x047A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, MapNames, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapUI_C, ChargeStation_Icons, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapUI_C, 0x04A0);
		}

		// class UChangeSpeed_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__ChangeSpeed__ChangeSpeed_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChangeSpeed_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChangeSpeed_C, Speed, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChangeSpeed_C, 0x00A4);
		}

		// class ABasicPowerStationEventHandler_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BasicPowerStationEventHandler__BasicPowerStationEventHandler_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasicPowerStationEventHandler_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasicPowerStationEventHandler_C, DefaultSceneRoot, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABasicPowerStationEventHandler_C, 0x0238);
		}

		// class APRE_Ventilation_BustOpen_C : public AActivatableBase_C
		TEST_METHOD(BlueprintGeneratedClass__PRE_Ventilation_BustOpen__PRE_Ventilation_BustOpen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, UnknownData_1FNH, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Ak, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, PhysicsSoundImpactFan, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, PhysicsSoundImpactGrate, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, PhysicalAnimation, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, SpringArm1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Blob, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule32, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule31, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule30, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule29, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule28, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule27, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule26, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule25, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule24, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule23, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule22, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule21, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule20, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule19, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule18, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule17, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule16, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule15, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule14, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule13, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule12, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule11, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule10, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule9, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule8, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule7, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule6, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule5, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule4, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule3, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule2, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule1, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Capsule, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, JumpscareLocation, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, Tentacle, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, MOD_Ventilation_MOD_Ventilation_Fan, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, MOD_Ventilation_MOD_Ventilation_Grate, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, MOD_Ventilation_MOD_Ventilation_Base, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, SearchForPlayerTime, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, VentHasOpened, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, UnknownData_DGVR, 0x03DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, TentacleController, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, JumpscareAudio, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, SearchMin, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, SearchMax, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, ceiling, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, UnknownData_DF0S, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, BoneName, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, CheckPhysicsGrate, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, UnknownData_2JJG, 0x0405);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, MaxImpactVelocity, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, GrateBumpCount, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Ventilation_BustOpen_C, FanBumpCount, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_Ventilation_BustOpen_C, 0x0414);
		}

		// class UFazcamChargeUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FazcamChargeUI__FazcamChargeUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazcamChargeUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazcamChargeUI_C, PowerDrain, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazcamChargeUI_C, BlinkingFlash, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazcamChargeUI_C, FillMeter, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazcamChargeUI_C, Charged_Fazcam, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazcamChargeUI_C, ChargeMeter, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazcamChargeUI_C, Charging_Fazcam, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazcamChargeUI_C, RechargeDone, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazcamChargeUI_C, RechargeTime, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFazcamChargeUI_C, 0x027C);
		}

		// class UCinematicSequenceHandler_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__CinematicSequenceHandler__CinematicSequenceHandler_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicSequenceHandler_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicSequenceHandler_C, CurrentCinematic, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicSequenceHandler_C, UnknownData_N1UL, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicSequenceHandler_C, CurrentSequencePlayer, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicSequenceHandler_C, ControlledPawn, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCinematicSequenceHandler_C, 0x00D0);
		}

		// class USequenceDirector_C : public ULevelSequenceDirector
		TEST_METHOD(BlueprintGeneratedClass__MontyBossBattleOutro_SequenceMaster__SequenceDirector_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceDirector_C, UberGraphFrame, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceDirector_C, 0x0038);
		}

		// class AFountainSpill_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__FountainSpill__FountainSpill_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFountainSpill_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFountainSpill_C, SpillComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFountainSpill_C, ParticleSystem, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFountainSpill_C, DefaultSceneRoot, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFountainSpill_C, Activated, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFountainSpill_C, 0x0249);
		}

		// class UInventoryItemButton_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InventoryItemButton__InventoryItemButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, IconButton, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, SelelctedImage, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, ItemSelected, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, IconImage, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, Grid, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, ItemCollectionMenu, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, ItemModel, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, IsSelected, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, UnknownData_ZK35, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, RowNumber, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, HasHoverFocus, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryItemButton_C, 0x0281);
		}

		// class UTeleportToLocation_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__TeleportToLocation__TeleportToLocation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTeleportToLocation_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTeleportToLocation_C, TeleportLocation, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTeleportToLocation_C, 0x00D8);
		}

		// class URoxyHowl_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__RoxyHowl__RoxyHowl_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyHowl_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyHowl_C, RoxyVO, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URoxyHowl_C, 0x00B0);
		}

		// class AAIC_FazerBlast_C : public AAIController
		TEST_METHOD(BlueprintGeneratedClass__AIC_FazerBlast__AIC_FazerBlast_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIC_FazerBlast_C, UberGraphFrame, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIC_FazerBlast_C, AIPerception, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIC_FazerBlast_C, MyPawnv2, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIC_FazerBlast_C, Private_LastFleeLocationUpdateSeconds, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIC_FazerBlast_C, UnknownData_4UKG, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIC_FazerBlast_C, Private_PreviousFleeLocations, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIC_FazerBlast_C, Private_LastFleeTargetUpdateSeconds, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIC_FazerBlast_C, UnknownData_GWSN, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIC_FazerBlast_C, Private_PreviousFleeTargets, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIC_FazerBlast_C, Private_LastFleeSeconds, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIC_FazerBlast_C, FleeDistance, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIC_FazerBlast_C, FleeTimeout, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIC_FazerBlast_C, UnknownData_E5D1, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIC_FazerBlast_C, P_NavHelperDestination, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIC_FazerBlast_C, P_NavHelper, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIC_FazerBlast_C, P_NavHelperLast, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIC_FazerBlast_C, DeactiveTimeout, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIC_FazerBlast_C, LastDeactiveSeconds, 0x03A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIC_FazerBlast_C, 0x03A8);
		}

		// class AFogVolume_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__FogVolume__FogVolume_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogVolume_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogVolume_C, Box, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogVolume_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogVolume_C, FogScenario, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFogVolume_C, 0x0248);
		}

		// class AActivatorBase_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ActivatorBase__ActivatorBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatorBase_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatorBase_C, InventoryConditional, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatorBase_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatorBase_C, CanUse, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatorBase_C, UnknownData_GKD1, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatorBase_C, ObjectsToActivate, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatorBase_C, IsActivatingObjects, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatorBase_C, CurrentActivatableState, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatorBase_C, CanBeDeactivated, 0x025A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatorBase_C, UnknownData_MV5K, 0x025B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatorBase_C, ActivatorSaveID, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatorBase_C, UnknownData_I1AB, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatorBase_C, RuntimeActivatables, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatorBase_C, CanBeActivated, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatorBase_C, UnknownData_3QDM, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatorBase_C, ActivateSound, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatorBase_C, CantActivateSound, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActivatorBase_C, 0x0290);
		}

		// class ABallCannonLimitedShotsPawn_C : public ABallCannonPawn_C
		TEST_METHOD(BlueprintGeneratedClass__BallCannonLimitedShotsPawn__BallCannonLimitedShotsPawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShotsPawn_C, UberGraphFrame, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShotsPawn_C, MontySphere, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShotsPawn_C, deltaTime, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABallCannonLimitedShotsPawn_C, 0x02CC);
		}

		// class ABP_MiniGameManger_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_MiniGameManger__BP_MiniGameManger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MiniGameManger_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MiniGameManger_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MiniGameManger_C, OnGameStart, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MiniGameManger_C, Started, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MiniGameManger_C, UnknownData_PGLV, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MiniGameManger_C, OnGameEnd, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MiniGameManger_C, ItemAward, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MiniGameManger_C, Name, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MiniGameManger_C, MiniGameCatagory, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MiniGameManger_C, Should_Quit_to_Main_Menu, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MiniGameManger_C, OnlyShowMissionCameras, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MiniGameManger_C, Should_Clear_AI, 0x027B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MiniGameManger_C, 0x027C);
		}

		// class APossessStaffbotButton_C : public ABasicButton_C
		TEST_METHOD(BlueprintGeneratedClass__PossessStaffbotButton__PossessStaffbotButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APossessStaffbotButton_C, UnknownData_7X1O, 0x02EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::APossessStaffbotButton_C, UberGraphFrame, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APossessStaffbotButton_C, StaffBot, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APossessStaffbotButton_C, 0x0300);
		}

		// class AEQ_LaserGun_C : public AEquippable_C
		TEST_METHOD(BlueprintGeneratedClass__EQ_LaserGun__EQ_LaserGun_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, SpotLight, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, MissionStateHandler, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, LaserLight, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, Gun, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, Pivot, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, PawnNoiseEmitter, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, GunTip, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, MoveGun_TransilateX_F1972A924D304562731CC58EA45F8CAD, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, MoveGun_RotateY_F1972A924D304562731CC58EA45F8CAD, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, MoveGun__Direction_F1972A924D304562731CC58EA45F8CAD, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, UnknownData_RECU, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, MoveGun, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, PullUpGun_NewTrack_0_A433B15F4EBF41568275C186D862197F, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, PullUpGun__Direction_A433B15F4EBF41568275C186D862197F, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, UnknownData_716C, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, PullUpGun, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, HitActor, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, FireTime, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, UnknownData_6GSP, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, MuzzleParticle, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, TrailParticle, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, UseFOV, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, UnknownData_2CZB, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, TimerHandle, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, TotalShots, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, ShotsLeft, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, ShotsLeft_, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, UnknownData_U1G6, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, GregoryOverlay, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_LaserGun_C, RechargeTime, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEQ_LaserGun_C, 0x02F4);
		}

		// class UStaffbot_ABP_Comedy_C : public UStaffbot_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Staffbot_ABP_Comedy__Staffbot_ABP_Comedy_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Comedy_C, UberGraphFrame, 0x2ED0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaffbot_ABP_Comedy_C, 0x2ED8);
		}

		// class URandomFloatRange_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__RandomFloatRange__RandomFloatRange_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomFloatRange_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomFloatRange_C, MinValue, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomFloatRange_C, MaxValue, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomFloatRange_C, BBReceiveValue, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URandomFloatRange_C, 0x00E0);
		}

		// class UPlayRummage_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__PlayRummage__PlayRummage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayRummage_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayRummage_C, RummageMin, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayRummage_C, RummageMax, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayRummage_C, WaitTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayRummage_C, Endless, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayRummage_C, 0x00BD);
		}

		// class UWI_InstructionCard_FlashlightRecharge_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_FlashlightRecharge__WI_InstructionCard_FlashlightRecharge_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FlashlightRecharge_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FlashlightRecharge_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FlashlightRecharge_C, VerticalBox_250, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FlashlightRecharge_C, WI_ImageScaled, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FlashlightRecharge_C, WI_ImageScaled_2, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_FlashlightRecharge_C, 0x0258);
		}

		// class APlayerAndAIHideInActor_C : public AHideInActor_C
		TEST_METHOD(BlueprintGeneratedClass__PlayerAndAIHideInActor__PlayerAndAIHideInActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerAndAIHideInActor_C, UnknownData_XBEK, 0x0325);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerAndAIHideInActor_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerAndAIHideInActor_C, AIHideCue, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerAndAIHideInActor_C, AIReleasePosition, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerAndAIHideInActor_C, PlayerAttackDetector, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerAndAIHideInActor_C, PlayerInRange, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerAndAIHideInActor_C, 0x0349);
		}

		// class UCameraProvider_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__CameraProvider__CameraProvider_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraProvider_C, 0x0028);
		}

		// class AA_Elevator_StreamViewpoint_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__A_Elevator_StreamViewpoint__A_Elevator_StreamViewpoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_StreamViewpoint_C, LevelStreamViewpoint, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_StreamViewpoint_C, DefaultSceneRoot, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AA_Elevator_StreamViewpoint_C, 0x0238);
		}

		// class UAudioCurveSourceComponent : public UAudioComponent
		TEST_METHOD(Class__FacialAnimation__AudioCurveSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, UnknownData_LSWY, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSourceBindingName, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSyncOffset, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, UnknownData_BFLF, 0x07E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCurveSourceComponent, 0x0810);
		}

		// class ACinematic_Actor_Freddy_C : public ACinematic_Actor_Base_C
		TEST_METHOD(BlueprintGeneratedClass__Cinematic_Actor_Freddy__Cinematic_Actor_Freddy_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACinematic_Actor_Freddy_C, UnknownData_6KTA, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACinematic_Actor_Freddy_C, UberGraphFrame, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACinematic_Actor_Freddy_C, CharacterHourlyMaterialComponent, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACinematic_Actor_Freddy_C, 0x0260);
		}

		// class USetInt_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__SetInt__SetInt_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetInt_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetInt_C, IntegerKey, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetInt_C, Value, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetInt_C, 0x00DC);
		}

		// class ABP_Underground_VentDoor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Underground_VentDoor__BP_Underground_VentDoor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Underground_VentDoor_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Underground_VentDoor_C, Ak, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Underground_VentDoor_C, Arrow, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Underground_VentDoor_C, Door, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Underground_VentDoor_C, Collsion, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Underground_VentDoor_C, MOD_VentHatch_Door, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Underground_VentDoor_C, MOD_VentHatch_Trim, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Underground_VentDoor_C, DefaultSceneRoot, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Underground_VentDoor_C, Door_Open_Close_NewTrack_0_664AEC5E4E05BE570DBCE4AB183F755D, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Underground_VentDoor_C, Door_Open_Close__Direction_664AEC5E4E05BE570DBCE4AB183F755D, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Underground_VentDoor_C, UnknownData_OI2Q, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Underground_VentDoor_C, Door_Open_Close, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Underground_VentDoor_C, 0x0278);
		}

		// class UFP_NormalShake_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__FP_NormalShake__FP_NormalShake_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFP_NormalShake_C, 0x0160);
		}

		// class UWI_InstructionCard_Endo_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_Endo__WI_InstructionCard_Endo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_Endo_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_Endo_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_Endo_C, VerticalBox_250, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_Endo_C, WI_ImageScaled, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_Endo_C, 0x0250);
		}

		// class UAnimNotify_PlayNiagaraEffect : public UAnimNotify
		TEST_METHOD(Class__NiagaraAnimNotifies__AnimNotify_PlayNiagaraEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, Template, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_BRKY, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_BFV7, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, SocketName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_IY4L, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayNiagaraEffect, 0x0090);
		}

		// class UAnimNotifyState_TimedNiagaraEffect : public UAnimNotifyState
		TEST_METHOD(Class__NiagaraAnimNotifies__AnimNotifyState_TimedNiagaraEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, Template, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, bDestroyAtEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, UnknownData_PF0E, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedNiagaraEffect, 0x0060);
		}

		// class UMontyLeap_C : public URoxyLeap_C
		TEST_METHOD(BlueprintGeneratedClass__MontyLeap__MontyLeap_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMontyLeap_C, 0x0138);
		}

		// class ASplinePathFork_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SplinePathFork__SplinePathFork_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplinePathFork_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplinePathFork_C, Trigger, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplinePathFork_C, ForwardDirection, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplinePathFork_C, ForwardPaths, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplinePathFork_C, BackwardPaths, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplinePathFork_C, Wait_Time, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplinePathFork_C, Wait_Time_Deviation, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplinePathFork_C, IsPrizeCounterGame, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASplinePathFork_C, 0x0269);
		}

		// class ASplineFollowerBase_C : public ACharacter
		TEST_METHOD(BlueprintGeneratedClass__SplineFollowerBase__SplineFollowerBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineFollowerBase_C, UnknownData_A0KO, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineFollowerBase_C, UberGraphFrame, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineFollowerBase_C, ForTesting, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineFollowerBase_C, AlwaysFaceCameraComponent, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineFollowerBase_C, ObstructionDetector, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineFollowerBase_C, SplineManager, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineFollowerBase_C, SplineFollowContext, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineFollowerBase_C, MovementSpeed, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineFollowerBase_C, MoveForward, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineFollowerBase_C, UnknownData_BBP9, 0x0525);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineFollowerBase_C, Direction, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineFollowerBase_C, MovementSpeedKey, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineFollowerBase_C, SplineManagerKey, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineFollowerBase_C, PathBlockedKey, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineFollowerBase_C, UnknownData_4W11, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineFollowerBase_C, PossiblePaths, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASplineFollowerBase_C, 0x0558);
		}

		// class UShatteredChicaHeadRotate_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__ShatteredChicaHeadRotate__ShatteredChicaHeadRotate_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShatteredChicaHeadRotate_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShatteredChicaHeadRotate_C, 0x00B0);
		}

		// class UShatteredChicaHeadRotateTimer_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__ShatteredChicaHeadRotateTimer__ShatteredChicaHeadRotateTimer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShatteredChicaHeadRotateTimer_C, UberGraphFrame, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShatteredChicaHeadRotateTimer_C, 0x00A0);
		}

		// class ACinematic_Actor_Base_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cinematic_Actor_Base__Cinematic_Actor_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACinematic_Actor_Base_C, SkeletalMesh, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACinematic_Actor_Base_C, Scene, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACinematic_Actor_Base_C, HourlyMaterials, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACinematic_Actor_Base_C, IndexToUse, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACinematic_Actor_Base_C, 0x024C);
		}

		// class UCable02_PAS04_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable02_PAS04_ABP__Cable02_PAS04_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable02_PAS04_ABP_C, 0x05E0);
		}

		// class UWI_InstructionCard_Jump_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_Jump__WI_InstructionCard_Jump_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_Jump_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_Jump_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_Jump_C, UI_TextAndIcons, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_Jump_C, VerticalBox_250, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_Jump_C, WI_ImageScaled, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_Jump_C, WI_ImageScaled_2, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_Jump_C, 0x0260);
		}

		// class AAIHideWorldCue_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__AIHideWorldCue__AIHideWorldCue_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIHideWorldCue_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIHideWorldCue_C, DefaultSceneRoot, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIHideWorldCue_C, 0x0238);
		}

		// class UWI_InstructionCard_PAS_TakeOffBowtie_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_PAS_TakeOffBowtie__WI_InstructionCard_PAS_TakeOffBowtie_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOffBowtie_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOffBowtie_C, Console_TextAndIcons, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOffBowtie_C, Image_18_Template, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOffBowtie_C, PC_TextAndIcons, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOffBowtie_C, TextBlock_48_Title, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOffBowtie_C, VerticalBox_250, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOffBowtie_C, WI_ImageScaled, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_PAS_TakeOffBowtie_C, 0x0268);
		}

		// class AOpenVentTrigger_C : public ATriggerBox
		TEST_METHOD(BlueprintGeneratedClass__OpenVentTrigger__OpenVentTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOpenVentTrigger_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOpenVentTrigger_C, Vents, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOpenVentTrigger_C, 0x0248);
		}

		// class UWI_Empty_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_Empty__WI_Empty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Empty_C, FreddyReference, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Empty_C, ParentWidgetReference, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_Empty_C, 0x0240);
		}

		// class UWI_InstructionCard_PAS_RoxyEyes_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_PAS_RoxyEyes__WI_InstructionCard_PAS_RoxyEyes_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_RoxyEyes_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_RoxyEyes_C, Console_TextAndIcons, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_RoxyEyes_C, Image_18_Template, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_RoxyEyes_C, PC_TextAndIcons, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_RoxyEyes_C, TextBlock_48_Title, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_RoxyEyes_C, VerticalBox_250, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_RoxyEyes_C, WI_ImageScaled, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_PAS_RoxyEyes_C, 0x0268);
		}

		// class UHuntMode_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__HuntMode__HuntMode_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHuntMode_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHuntMode_C, TypeToPlay, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHuntMode_C, UnknownData_0WRV, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHuntMode_C, LastPlayedTimestamp, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHuntMode_C, UseTimestamp, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHuntMode_C, UnknownData_SX1Z, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHuntMode_C, WaitTime, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHuntMode_C, UseCanPlay, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHuntMode_C, UnknownData_I4A3, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHuntMode_C, CanPlayKey, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHuntMode_C, lastplayedtime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHuntMode_C, HuntMode, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHuntMode_C, 0x011D);
		}

		// class ABP_ArrowIndicator_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_ArrowIndicator__BP_ArrowIndicator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ArrowIndicator_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ArrowIndicator_C, Arrowslider, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ArrowIndicator_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ArrowIndicator_C, Timeline_0_NewTrack_0_2408F79E4278A86EB70DF0B11BAEE9A8, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ArrowIndicator_C, Timeline_0__Direction_2408F79E4278A86EB70DF0B11BAEE9A8, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ArrowIndicator_C, UnknownData_WP4X, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ArrowIndicator_C, Timeline_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ArrowIndicator_C, FadeUPThenDown_NewTrack_0_749F62634336CD3FDE6BF6997B45AC17, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ArrowIndicator_C, FadeUPThenDown__Direction_749F62634336CD3FDE6BF6997B45AC17, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ArrowIndicator_C, UnknownData_6LEQ, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ArrowIndicator_C, FadeUPThenDown, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ArrowIndicator_C, RefToWidget, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ArrowIndicator_C, CurrentUPImage, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ArrowIndicator_C, CurrentUPindex, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ArrowIndicator_C, UnknownData_THKF, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ArrowIndicator_C, CurrentDOWNImage, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ArrowIndicator_C, CurrentDOWNindex, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ArrowIndicator_C, 0x0284);
		}

		// class ALaserTag_GM_C : public AGameModeBase
		TEST_METHOD(BlueprintGeneratedClass__LaserTag_GM__LaserTag_GM_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_GM_C, UberGraphFrame, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_GM_C, LazerTag_Elevator_Door_Open, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_GM_C, Scene, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_GM_C, LaserTagCurrentScore, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_GM_C, CurrentHighScore, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_GM_C, LaserTagGunRoomDoor, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_GM_C, LaserTagCountDown, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_GM_C, LaserTagElevator_Left, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_GM_C, LaserTagGameTimer, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_GM_C, LaserTagGameInSession, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_GM_C, UnknownData_1HQS, 0x0309);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_GM_C, Gregory, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_GM_C, LaserTagResetLocation, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_GM_C, WinnerLoungeDoor, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_GM_C, LaserTagHUDTimer, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_GM_C, music, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALaserTag_GM_C, 0x0338);
		}

		// class USequenceDirector_C : public ULevelSequenceDirector
		TEST_METHOD(BlueprintGeneratedClass__Monty_Intro_Shot_401__SequenceDirector_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceDirector_C, UberGraphFrame, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceDirector_C, 0x0038);
		}

		// class UKismetProceduralMeshLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ProceduralMeshComponent__KismetProceduralMeshLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetProceduralMeshLibrary, 0x0028);
		}

		// class UProceduralMeshComponent : public UMeshComponent
		TEST_METHOD(Class__ProceduralMeshComponent__ProceduralMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_5R01, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseComplexAsSimpleCollision, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseAsyncCooking, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_OKNK, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshBodySetup, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshSections, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, CollisionConvexElems, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, LocalBounds, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_9AR8, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, AsyncBodySetupQueue, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralMeshComponent, 0x0480);
		}

		// class UNiagaraMergeable : public UObject
		TEST_METHOD(Class__NiagaraCore__NiagaraMergeable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMergeable, 0x0028);
		}

		// class UNiagaraDataInterfaceBase : public UNiagaraMergeable
		TEST_METHOD(Class__NiagaraCore__NiagaraDataInterfaceBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceBase, 0x0028);
		}

		// class UStaffbot_PartyPass_LINK_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Staffbot_PartyPass_LINK__Staffbot_PartyPass_LINK_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, UnknownData_0AU5, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_TransitionResult_13, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_TransitionResult_12, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_TransitionResult_11, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_TransitionResult_10, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_TransitionResult_9, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_TransitionResult_8, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_SequencePlayer_13, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_StateResult_11, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_SequencePlayer_12, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_StateResult_10, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_SequencePlayer_11, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_StateResult_9, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_TransitionResult_7, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_TransitionResult_6, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_TransitionResult_5, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_TransitionResult_4, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_TransitionResult_3, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_TransitionResult_2, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_TransitionResult, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_SequencePlayer_10, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_StateResult_8, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_SequencePlayer_9, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_StateResult_7, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_SequencePlayer_8, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_StateResult_6, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_SequencePlayer_7, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_BlendListByBool_3, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_SequencePlayer_6, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_StateResult_5, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_SequencePlayer_5, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_BlendListByBool_2, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_SequencePlayer_4, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_StateResult_4, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_SequencePlayer_3, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_BlendListByBool, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_SequencePlayer_2, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_StateResult_3, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_SequencePlayer, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_StateResult_2, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_StateMachine_2, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_StateResult, 0x0F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AnimGraphNode_StateMachine, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, Stunned, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, canJumpscare, 0x1019);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, IsRequesting, 0x101A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, PassReceived, 0x101B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, HasPass, 0x101C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_PartyPass_LINK_C, AltReqAnim, 0x101D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaffbot_PartyPass_LINK_C, 0x101E);
		}

		// class UWheeledVehicleMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_ASSY, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_DMQG, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_S3NX, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Mass, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_62DX, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WheelSetups, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragCoefficient, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisWidth, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisHeight, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragArea, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, EstimatedMaxEngineSpeed, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxEngineRPM, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DebugDragMagnitude, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, InertiaTensorScale, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoad, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoadFiltered, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoad, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoadFiltered, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThresholdLongitudinalSpeed, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, LowForwardSpeedSubStepCount, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HighForwardSpeedSubStepCount, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_F4SQ, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Wheels, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_9J8M, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceRadius, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceHeight, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceConsiderationRadius, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOSteeringStep, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOThrottleStep, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceUID, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceGroup, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToAvoid, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToIgnore, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceWeight, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, PendingLaunchVelocity, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ReplicatedState, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_SKYG, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawSteeringInput, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawThrottleInput, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawBrakeInput, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInput, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInput, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInput, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInput, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, IdleBrakeInput, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, StopThreshold, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WrongDirectionThreshold, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInputRate, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInputRate, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInputRate, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInputRate, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_MBGY, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, OverrideController, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent, 0x0290);
		}

		// class USimpleWheeledVehicleMovementComponent : public UWheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__SimpleWheeledVehicleMovementComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleWheeledVehicleMovementComponent, 0x0290);
		}

		// class UTireConfig : public UDataAsset
		TEST_METHOD(Class__PhysXVehicles__TireConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, FrictionScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_QFBN, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, TireFrictionScales, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_BQJ6, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireConfig, 0x0050);
		}

		// class UVehicleAnimInstance : public UAnimInstance
		TEST_METHOD(Class__PhysXVehicles__VehicleAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_4B5E, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_F0HA, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, WheeledVehicleMovementComponent, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_M5I4, 0x0978);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleAnimInstance, 0x0980);
		}

		// class UVehicleWheel : public UObject
		TEST_METHOD(Class__PhysXVehicles__VehicleWheel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, CollisionMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bDontCreateShape, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAutoAdjustCollisionSize, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_GFFG, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Offset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeRadius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeWidth, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Mass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DampingRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SteerAngle, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAffectedByHandbrake, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_UT16, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireConfig, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffMaxLoad, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffValue, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LongStiffValue, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionForceOffset, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxRaise, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxDrop, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionNaturalFrequency, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionDampingRatio, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SweepType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_RRB4, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxBrakeTorque, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxHandBrakeTorque, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_UZI0, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, VehicleSim, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, WheelIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongSlip, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatSlip, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugNormalizedTireLoad, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_ZADW, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugWheelTorque, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongForce, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatForce, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Location, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, OldLocation, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Velocity, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_7A4W, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleWheel, 0x00F0);
		}

		// class AWheeledVehicle : public APawn
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, Mesh, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, VehicleMovement, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWheeledVehicle, 0x0298);
		}

		// class UWheeledVehicleMovementComponent4W : public UWheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent4W)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, EngineSetup, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, DifferentialSetup, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, AckermannAccuracy, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, TransmissionSetup, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, SteeringCurve, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent4W, 0x0408);
		}

		// class UTitle_NewGameSlotButton_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Title_NewGameSlotButton__Title_NewGameSlotButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_NewGameSlotButton_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_NewGameSlotButton_C, TitleButton, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_NewGameSlotButton_C, SaveSlot, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_NewGameSlotButton_C, OnSlotClicked, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTitle_NewGameSlotButton_C, 0x0260);
		}

		// class UFlashlightRechargeUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FlashlightRechargeUI__FlashlightRechargeUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightRechargeUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightRechargeUI_C, RechargeProgress, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlashlightRechargeUI_C, 0x0240);
		}

		// class USequenceDirector_C : public ULevelSequenceDirector
		TEST_METHOD(BlueprintGeneratedClass__MedScan_Sequence__SequenceDirector_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceDirector_C, UberGraphFrame, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceDirector_C, 0x0038);
		}

		// class UAnimatronic_ABP_Shattered_Roxy_C : public UAnimatronic_ABP_MASTER_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Animatronic_ABP_Shattered_Roxy__Animatronic_ABP_Shattered_Roxy_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Shattered_Roxy_C, UberGraphFrame, 0x8DE8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimatronic_ABP_Shattered_Roxy_C, 0x8DF0);
		}

		// class UAttackDoor_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__AttackDoor__AttackDoor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackDoor_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackDoor_C, CurrentBackstageDoor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackDoor_C, PathBlockedBB, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackDoor_C, CanDrainPower, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackDoor_C, Force_Stop, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAttackDoor_C, 0x0102);
		}

		// class AShatteredChica_C : public AChica_C
		TEST_METHOD(BlueprintGeneratedClass__ShatteredChica__ShatteredChica_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredChica_C, UnknownData_47KK, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredChica_C, UberGraphFrame, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredChica_C, InterpMoveComponent, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredChica_C, HeadAimLocation_1, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredChica_C, InterpParam, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredChica_C, RunSequenceBB, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredChica_C, HeadSpinTimerHandle, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredChica_C, HeadRotateBB, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredChica_C, CurrentHeadAngle, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredChica_C, HeadSpinRate, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredChica_C, HeadRotating, 0x0858);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShatteredChica_C, 0x0859);
		}

		// class URIG_DJ_Music_Man_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__RIG_DJ_Music_Man_ABP__RIG_DJ_Music_Man_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, UnknownData_IUJ1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_26, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_25, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_24, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_23, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_22, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_21, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_20, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_19, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_18, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_17, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_16, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_15, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_14, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_13, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_12, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_11, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_10, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_9, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_28, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_27, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_27, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_26, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_26, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_25, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_25, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_24, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_24, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_23, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_23, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_22, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_22, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_21, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_21, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_20, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_20, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_19, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_19, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_18, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_18, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_17, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_17, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_16, 0x0D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_16, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_15, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_15, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_14, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_14, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_13, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_13, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_12, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateMachine_4, 0x0FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_12, 0x10A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_BlendListByEnum, 0x1120);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_8, 0x11D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_7, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_6, 0x1220);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_5, 0x1248);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_4, 0x1270);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_3, 0x1298);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_11, 0x12C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_11, 0x12F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_10, 0x1368);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_10, 0x1398);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_9, 0x1410);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_9, 0x1440);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_8, 0x14B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_8, 0x14E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_7, 0x1560);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_7, 0x1590);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_6, 0x1608);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_6, 0x1638);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_5, 0x16B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateMachine_3, 0x16E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SaveCachedPose, 0x1790);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_UseCachedPose, 0x1848);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_LayeredBoneBlend, 0x1870);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_2, 0x1930);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_5, 0x1958);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_4, 0x19D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_4, 0x1A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_3, 0x1A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateMachine_2, 0x1AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult, 0x1B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_3, 0x1B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_2, 0x1BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_2, 0x1C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult, 0x1CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_StateMachine, 0x1CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_ModifyBone, 0x1D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_ComponentToLocalSpace, 0x1E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_LocalToComponentSpace, 0x1EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer, 0x1EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, LeftDoor, 0x1F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, CanReach, 0x1F41);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, UnknownData_NLX9, 0x1F42);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, CamshakeCurve, 0x1F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, DistanceShake, 0x1F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, UnknownData_H54A, 0x1F54);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, WorldSpaceAnim, 0x1F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, DJMM_Enum, 0x1F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, CanLeave, 0x1F61);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, isPhase2, 0x1F62);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, CanGrab, 0x1F63);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, canJumpscare, 0x1F64);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, CanEndBathroom, 0x1F65);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, Throw_L, 0x1F66);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, UnknownData_JA62, 0x1F67);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, gregDistance, 0x1F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, ScalePlayRate, 0x1F6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, UnknownData_GHAN, 0x1F6D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, PlayRate, 0x1F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, UnknownData_VTYY, 0x1F74);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, ChaseActor, 0x1F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, maxGregDist, 0x1F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, UnknownData_6EZN, 0x1F84);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, DJMMActor, 0x1F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, HasReversedAnim, 0x1F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, UnknownData_UGF9, 0x1F91);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_DJ_Music_Man_ABP_C, StopRotation, 0x1F94);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URIG_DJ_Music_Man_ABP_C, 0x1FA0);
		}

		// class UWorker_PerformTask_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__Worker_PerformTask__Worker_PerformTask_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_PerformTask_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_PerformTask_C, TP_Has_Prop, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_PerformTask_C, UnknownData_R6XU, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_PerformTask_C, SB_Has_Prop, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_PerformTask_C, StaffBot, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_PerformTask_C, PauseTask, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_PerformTask_C, CanDoTask, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_PerformTask_C, UnknownData_GTRM, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_PerformTask_C, State, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_PerformTask_C, StaffBotWorkerState, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorker_PerformTask_C, 0x0141);
		}

		// class USetDaycareWanderpoint_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__SetDaycareWanderpoint__SetDaycareWanderpoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetDaycareWanderpoint_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetDaycareWanderpoint_C, BBPacepoint, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetDaycareWanderpoint_C, 0x00D8);
		}

		// class AMainGamePC_C : public AFBPC_SharedController_C
		TEST_METHOD(BlueprintGeneratedClass__MainGamePC__MainGamePC_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, UberGraphFrame, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, FazwatchCheck, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, CinematicSequenceHandler, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, FazWatchMenu, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, CurrentUITab, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, FazwatchUp, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, UnknownData_D2RA, 0x061D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, BaseTurnRate, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, BaseLookUpRate, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, GameOverUI, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, bIsWatchUp, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, FlyingCollisionMode, 0x0631);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, UnknownData_SD2I, 0x0632);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, DebugOverlay, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, FlyingSpeed, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, UnknownData_32A4, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, OnPossessedPawnChanged, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, ForwardInput, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, RightInput, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, PlayerCheckpointLocation, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, UnknownData_LX7M, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, PlayerHUD, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, ReturnPawn, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, Can_Use_Fazwatch, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, UnknownData_11LZ, 0x0681);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, OnSkip, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, cur_item, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, UnknownData_C5EQ, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, DistortionActor, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, NextDistortionLevel, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, EnabledInputFlags, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, FirstPersonCharacter, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, MouseSensitivity, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, UnknownData_ZVIG, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, VOSkipper, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, PlayerSettingsSaveObject, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, TetherViewRotation, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, TetherOffset, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, TetherViewEnabled, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, UnknownData_9TVI, 0x0709);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, TetherMaxAngle, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, TetherMinAngle, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, CurrentGateState, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, PlayerSettingsSlotReal, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, ListenerOverrideEnabled, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, UnknownData_0S3I, 0x0729);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, ListenerAttachTo, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGamePC_C, WasAchivementCheckBroken, 0x0738);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMainGamePC_C, 0x0739);
		}

		// class ABP_PiratePoster_C : public ABP_DoorMaster_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PiratePoster__BP_PiratePoster_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PiratePoster_C, UnknownData_QDHL, 0x03BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PiratePoster_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PiratePoster_C, MOD_SingleHinge_MoviePoster, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PiratePoster_C, BonnieWorldState, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PiratePoster_C, FoxyWorldState, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PiratePoster_C, ChicaWorldState, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PiratePoster_C, FreddyWorldState, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PiratePoster_C, CharactersToGlow, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PiratePoster_C, 0x0440);
		}

		// class USunMan_Daycare_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__SunMan_Daycare_ABP__SunMan_Daycare_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, UnknownData_WPSQ, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, AnimGraphNode_UseCachedPose, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, AnimGraphNode_StateResult, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, AnimGraphNode_StateMachine, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, AnimGraphNode_SaveCachedPose, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, AnimGraphNode_SequencePlayer_6, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, AnimGraphNode_BlendListByBool_6, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, AnimGraphNode_BlendSpacePlayer, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, AnimGraphNode_BlendListByBool_5, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, AnimGraphNode_BlendListByBool_4, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, AnimGraphNode_SequencePlayer_5, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, AnimGraphNode_SequencePlayer_4, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, AnimGraphNode_BlendListByBool_3, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, AnimGraphNode_BlendListByBool_2, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, AnimGraphNode_SequencePlayer_3, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, AnimGraphNode_Slot, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, AnimGraphNode_SequencePlayer_2, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, AnimGraphNode_ModifyBone_2, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, AnimGraphNode_LocalToComponentSpace, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, AnimGraphNode_ComponentToLocalSpace, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, AnimGraphNode_ModifyBone, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, AnimGraphNode_BlendListByBool, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, AnimGraphNode_SequencePlayer, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, DeltaTimeX, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, TargetSpinePitch, 0x0E74);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, GroundColliderPitch, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, Head_Aim_Loc, 0x0E7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, RootTrace, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, RootRotation, 0x0E94);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, Spine1_jnt, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, Valid, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, isPhase2, 0x0EA9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, isMoving, 0x0EAA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, UnknownData_SV42, 0x0EAB);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, SpeedInput, 0x0EAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, isBlockingPlayer, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, UnknownData_BSQO, 0x0EB1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, Direction, 0x0EB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, NewVar_1, 0x0EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, IsCrouched, 0x0EBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, CarryingPlayer, 0x0EBD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, UnknownData_QN9O, 0x0EBE);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, Phase, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, isSad, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USunMan_Daycare_ABP_C, HeadAim, 0x0EC9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USunMan_Daycare_ABP_C, 0x0ECA);
		}

		// class UMoviePlayerSettings : public UObject
		TEST_METHOD(Class__MoviePlayer__MoviePlayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bWaitForMoviesToComplete, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bMoviesAreSkippable, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, UnknownData_IYUI, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, StartupMovies, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoviePlayerSettings, 0x0040);
		}

		// class UEyeBlinkUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__EyeBlinkUI__EyeBlinkUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEyeBlinkUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEyeBlinkUI_C, lower_eyelid, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEyeBlinkUI_C, upper_eyelid, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEyeBlinkUI_C, isBlinkActive, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEyeBlinkUI_C, UnknownData_LGG4, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEyeBlinkUI_C, eyeBlinkSequencer, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEyeBlinkUI_C, MMSeqActor, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEyeBlinkUI_C, Should_Remove_All_Widgets, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEyeBlinkUI_C, UnknownData_EDST, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEyeBlinkUI_C, On_Eyes_Open_2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEyeBlinkUI_C, On_Eyes_Shut_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEyeBlinkUI_C, On_Eyes_Open_1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEyeBlinkUI_C, On_Eyes_Shut_2, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEyeBlinkUI_C, Time, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEyeBlinkUI_C, Blink_Duration, 0x02A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEyeBlinkUI_C, 0x02A8);
		}

		// class UHeadAimService_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__HeadAimService__HeadAimService_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeadAimService_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeadAimService_C, AimWhileActive, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeadAimService_C, UnknownData_IXNA, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeadAimService_C, HeadAimTargetActorKey, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeadAimService_C, 0x00D0);
		}

		// class URoxyLeap_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__RoxyLeap__RoxyLeap_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyLeap_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyLeap_C, LeapDestination, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyLeap_C, LeapStart, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyLeap_C, FrameDistance, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyLeap_C, UnknownData_HLBQ, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyLeap_C, LeapDestinationKey, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyLeap_C, TickLeap, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyLeap_C, UnknownData_BWI6, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyLeap_C, PrepVO, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyLeap_C, MissedVO, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyLeap_C, LeapPrepSound, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyLeap_C, LeapSound, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyLeap_C, LandSound, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URoxyLeap_C, 0x0138);
		}

		// class APurpleMan_Tape_Actor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PurpleMan_Tape_Actor__PurpleMan_Tape_Actor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APurpleMan_Tape_Actor_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APurpleMan_Tape_Actor_C, SphereCollision, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APurpleMan_Tape_Actor_C, VisualSource, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APurpleMan_Tape_Actor_C, Tape_MOD, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APurpleMan_Tape_Actor_C, DefaultSceneRoot, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APurpleMan_Tape_Actor_C, IsVisibleToPlayer_, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APurpleMan_Tape_Actor_C, HasBeenCollected_, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::APurpleMan_Tape_Actor_C, UnknownData_YDLE, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::APurpleMan_Tape_Actor_C, InventoryName, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::APurpleMan_Tape_Actor_C, UnknownData_9IJU, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APurpleMan_Tape_Actor_C, TapesSaveDataObject, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APurpleMan_Tape_Actor_C, TapesSaveSlot, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APurpleMan_Tape_Actor_C, 0x0278);
		}

		// class AHideInActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__HideInActor__HideInActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, Arrow, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, SearchLocation, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, PeekLocation, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, HideLocation, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, DefaultSceneRoot, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, IsLow, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, HideType, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, UnknownData_QMXK, 0x025A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, HiddenPlayer, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, EnterSound, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, ExitSound, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, OnPlayerEnteredHide, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, OnPlayerExitedHide, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, StartSearchSound, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, EndSearchSound, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, PrevPawn, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, MontageInput, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, EnterInt, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, UnknownData_ZXG5, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, EnterLeftMontage, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, ExitLeftMontage, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, ExitBackMontage, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, EnterBackMontage, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, ExitRightMontage, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, EnterRightMontage, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, ExitFrontMontage, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, EnterFrontMontage, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, StartingVector, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, UnknownData_TZRW, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, ObjectType, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, CapsuleRadius, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideInActor_C, ConsideredHidingSpotForAchievement, 0x0324);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHideInActor_C, 0x0325);
		}

		// class UAnimatronicJiggleABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AnimatronicJiggleABP__AnimatronicJiggleABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, UnknownData_9L7F, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_ModifyBone_4, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_LookAt_4, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_AnimDynamics_20, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_AnimDynamics_19, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_AnimDynamics_18, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_AnimDynamics_17, 0x11F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_AnimDynamics_16, 0x1630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_AnimDynamics_15, 0x1A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_AnimDynamics_14, 0x1EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_AnimDynamics_13, 0x22F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_AnimDynamics_12, 0x2730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_AnimDynamics_11, 0x2B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_AnimDynamics_10, 0x2FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_AnimDynamics_9, 0x33F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_AnimDynamics_8, 0x3830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_AnimDynamics_7, 0x3C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_AnimDynamics_6, 0x40B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_Constraint_3, 0x44F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_Constraint_2, 0x45F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_AnimDynamics_5, 0x4700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_AnimDynamics_4, 0x4B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_ComponentToLocalSpace_2, 0x4F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_LinkedInputPose, 0x4FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_LocalToComponentSpace_2, 0x5018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, UnknownData_NH8U, 0x5038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_AnimDynamics_3, 0x5040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_LookAt_3, 0x5480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_SpringBone_15, 0x5630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_LocalToComponentSpace, 0x5758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_ComponentToLocalSpace, 0x5778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_SaveCachedPose_2, 0x5798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_ModifyBone_3, 0x5850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, UnknownData_3GJC, 0x5958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_AnimDynamics_2, 0x5960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_Root, 0x5DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_SpringBone_14, 0x5DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_SpringBone_13, 0x5EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_SpringBone_12, 0x6020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_SpringBone_11, 0x6148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_SpringBone_10, 0x6270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_SpringBone_9, 0x6398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_SpringBone_8, 0x64C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_SpringBone_7, 0x65E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_SpringBone_6, 0x6710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_SpringBone_5, 0x6838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_SpringBone_4, 0x6960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_SpringBone_3, 0x6A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_Constraint, 0x6BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, UnknownData_937K, 0x6CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_AnimDynamics, 0x6CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_ModifyBone_2, 0x7100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, UnknownData_Q7YW, 0x7208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_LookAt_2, 0x7210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_ModifyBone, 0x73C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, UnknownData_STDA, 0x74C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_LookAt, 0x74D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_SpringBone_2, 0x7680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_SpringBone, 0x77A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_BlendListByBool, 0x78D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_SaveCachedPose, 0x7970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_UseCachedPose_2, 0x7A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, AnimGraphNode_UseCachedPose, 0x7A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, JiggleDynamicAlpha, 0x7A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, JiggleAlphaScale, 0x7A7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, Shoulderpad_DynamicAlpha, 0x7A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicJiggleABP_C, canJumpscare, 0x7A84);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimatronicJiggleABP_C, 0x7A85);
		}

		// class UW_ScoreBoardRow_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_ScoreBoardRow__W_ScoreBoardRow_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreBoardRow_C, Image_396, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreBoardRow_C, Position, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreBoardRow_C, TextBlock_4, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreBoardRow_C, TextBlock_5, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreBoardRow_C, trackedPlayer, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreBoardRow_C, CheckPointManger, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_ScoreBoardRow_C, 0x0260);
		}

		// class UAnimNotify_RoxyServoMovement_C : public UAnimNotify_ServoMovement_C
		TEST_METHOD(BlueprintGeneratedClass__AnimNotify_RoxyServoMovement__AnimNotify_RoxyServoMovement_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_RoxyServoMovement_C, 0x0058);
		}

		// class AShatteredChicaSpawnTrigger_C : public ATeleportSpawnTrigger_C
		TEST_METHOD(BlueprintGeneratedClass__ShatteredChicaSpawnTrigger__ShatteredChicaSpawnTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredChicaSpawnTrigger_C, UberGraphFrame, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredChicaSpawnTrigger_C, GameTypeCheckDestroy, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredChicaSpawnTrigger_C, Sound, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredChicaSpawnTrigger_C, RequireTrigger, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShatteredChicaSpawnTrigger_C, 0x0321);
		}

		// class ACinematic_Actor_Freddy_Medscan_C : public ACinematic_Actor_Freddy_C
		TEST_METHOD(BlueprintGeneratedClass__Cinematic_Actor_Freddy_Medscan__Cinematic_Actor_Freddy_Medscan_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACinematic_Actor_Freddy_Medscan_C, 0x0260);
		}

		// class USequenceDirector_C : public ULevelSequenceDirector
		TEST_METHOD(BlueprintGeneratedClass__MontyOutro_Shot200__SequenceDirector_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceDirector_C, UberGraphFrame, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceDirector_C, 0x0038);
		}

		// class APRE_GtrGlf_Marker_0_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PRE_GtrGlf_Marker_1__PRE_GtrGlf_Marker_0_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Marker_0_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Marker_0_C, MOD_Marker_Numbers_Number_2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Marker_0_C, SpotLight, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Marker_0_C, Marker, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Marker_0_C, DefaultSceneRoot, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Marker_0_C, Marker_Number, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_GtrGlf_Marker_0_C, 0x0254);
		}

		// class AOGM_VannyBattle_C : public AMGM_OfficeGameManger_C
		TEST_METHOD(BlueprintGeneratedClass__OGM_VannyBattle__OGM_VannyBattle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_VannyBattle_C, UnknownData_HHSJ, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_VannyBattle_C, UberGraphFrame, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_VannyBattle_C, Drop_Trigger, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_VannyBattle_C, Vanny_Drop, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_VannyBattle_C, Roxy_Spawn, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_VannyBattle_C, Monty_Spawn, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_VannyBattle_C, Vanny_Spawn, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_VannyBattle_C, Spawn, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_VannyBattle_C, Drop, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_VannyBattle_C, Vanny_Path, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_VannyBattle_C, Monty_Path, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_VannyBattle_C, Roxy_Path, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_VannyBattle_C, Vanny_Drop_Path, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_VannyBattle_C, Open_Door, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_VannyBattle_C, Lair_Door, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_VannyBattle_C, Vanny, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_VannyBattle_C, Roxy, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_VannyBattle_C, Monty, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_VannyBattle_C, Active, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOGM_VannyBattle_C, 0x0401);
		}

		// class APRE_SM_Fridge_01a_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PRE_SM_Fridge_01a__PRE_SM_Fridge_01a_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_SM_Fridge_01a_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_SM_Fridge_01a_C, AmbientAudio, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_SM_Fridge_01a_C, StaticMesh, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_SM_Fridge_01a_C, DefaultSceneRoot, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_SM_Fridge_01a_C, OcclusionTrace, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_SM_Fridge_01a_C, EmitterPlaying, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_SM_Fridge_01a_C, 0x0271);
		}

		// class USplineFollowerUtil_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__SplineFollowerUtil__SplineFollowerUtil_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineFollowerUtil_C, 0x0028);
		}

		// class UFazerblast_BotVO_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__Fazerblast_BotVO__Fazerblast_BotVO_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerblast_BotVO_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerblast_BotVO_C, FlagToCapture, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerblast_BotVO_C, VOLine, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerblast_BotVO_C, LastPlayedVO, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFazerblast_BotVO_C, 0x00E4);
		}

		// class UCable04_PAS04_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable04_PAS04_ABP__Cable04_PAS04_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable04_PAS04_ABP_C, 0x05E0);
		}

		// class UCable03_PAS04_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable03_PAS04_ABP__Cable03_PAS04_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable03_PAS04_ABP_C, 0x05E0);
		}

		// class UCable03_PAS03_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable03_PAS03_ABP__Cable03_PAS03_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable03_PAS03_ABP_C, 0x05E0);
		}

		// class UWI_InstructionCard_CallFreddy_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_CallFreddy__WI_InstructionCard_CallFreddy_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CallFreddy_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CallFreddy_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CallFreddy_C, UI_TextAndIcons, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CallFreddy_C, VerticalBox_250, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CallFreddy_C, WI_ImageScaled, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_CallFreddy_C, 0x0258);
		}

		// class UWI_InstructionCard_PAS_TakeOutVoicebox_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_PAS_TakeOutVoicebox__WI_InstructionCard_PAS_TakeOutVoicebox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOutVoicebox_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOutVoicebox_C, Console_TextAndIcons, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOutVoicebox_C, Image_18_Template, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOutVoicebox_C, PC_TextAndIcons, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOutVoicebox_C, TextBlock_48_Title, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOutVoicebox_C, VerticalBox_250, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOutVoicebox_C, WI_ImageScaled, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_PAS_TakeOutVoicebox_C, 0x0268);
		}

		// class AMAP_GatorGolf_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__MAP_GatorGolf__MAP_GatorGolf_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_GatorGolf_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMAP_GatorGolf_C, 0x0238);
		}

		// class UMediaSource : public UObject
		TEST_METHOD(Class__MediaAssets__MediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSource, UnknownData_CVK8, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSource, 0x0080);
		}

		// class UBaseMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__BaseMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMediaSource, PlayerName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseMediaSource, 0x0088);
		}

		// class UFileMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__FileMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, FilePath, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, PrecacheFile, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, UnknownData_W7GV, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFileMediaSource, 0x00B0);
		}

		// class UMediaBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MediaAssets__MediaBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaBlueprintFunctionLibrary, 0x0028);
		}

		// class UMediaComponent : public UActorComponent
		TEST_METHOD(Class__MediaAssets__MediaComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaComponent, MediaTexture, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaComponent, MediaPlayer, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaComponent, 0x00C0);
		}

		// class UMediaPlayer : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnEndReached, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaClosed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpened, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpenFailed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackResumed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackSuspended, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnSeekCompleted, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnTracksChanged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheAhead, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehind, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehindGame, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, NativeAudioOut, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayOnOpen, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_61ZG, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_BNVB, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, Playlist, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlaylistIndex, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_P0U6, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, TimeDelay, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, HorizontalFieldOfView, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, VerticalFieldOfView, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, ViewRotation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_I97V, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayerGuid, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_083X, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlayer, 0x0138);
		}

		// class UMediaPlaylist : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlaylist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlaylist, Items, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlaylist, 0x0038);
		}

		// class UMediaSoundComponent : public USynthComponent
		TEST_METHOD(Class__MediaAssets__MediaSoundComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, Channels, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_Y9G1, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, DynamicRateAdjustment, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_JH26, 0x06D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentFactor, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentRange, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_F67K, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, MediaPlayer, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_1WPE, 0x06F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSoundComponent, 0x08D0);
		}

		// class UMediaTexture : public UTexture
		TEST_METHOD(Class__MediaAssets__MediaTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressX, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressY, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AutoClear, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_ABP5, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, ClearColor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, EnableGenMips, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, NumMips, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_RSM0, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, MediaPlayer, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_8PZW, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaTexture, 0x0188);
		}

		// class UPlatformMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__PlatformMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformMediaSource, MediaSource, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformMediaSource, 0x0088);
		}

		// class UStreamMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__StreamMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamMediaSource, StreamUrl, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamMediaSource, 0x0098);
		}

		// class UTimeSynchronizableMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__TimeSynchronizableMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, bUseTimeSynchronization, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, UnknownData_3810, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, FrameDelay, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, TimeDelay, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizableMediaSource, 0x0098);
		}

		// class UGameOverUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GameOverUI__GameOverUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverUI_C, TrailerSequence, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverUI_C, MainSequence, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverUI_C, Blackness, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverUI_C, CanvasPanel_2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverUI_C, LivesRemaining, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverUI_C, QuitButton, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverUI_C, RetryButton, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverUI_C, Static, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverUI_C, SurvivalScoreUI, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverUI_C, UpKey, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverUI_C, DownKey, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverUI_C, GamepadUp, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverUI_C, GamepadDown, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverUI_C, ButtonStyle, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverUI_C, TextBlockStyle, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverUI_C, GlobalAmbience, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverUI_C, AnimationDelay, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverUI_C, AnimationLengthSeconds, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverUI_C, UnknownData_PP2D, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverUI_C, AnimationDelayFinished, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverUI_C, AnimationFinished, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverUI_C, Original_VisibilityStateForRetry, 0x0811);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameOverUI_C, 0x0812);
		}

		// class APRE_BadgeHolder_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PRE_BadgeHolder__PRE_BadgeHolder_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, BadgeInstructionsState, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, FreddyNose_Button, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, Open_Close_Range, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, MOD_SecurityBadge, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, MOD_SecurityBadgeHolder_01, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, MOD_SecurityBadgeHolder_02, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, DefaultSceneRoot, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, Open_Open_5CA643F545D86ACD8A04A8BAA0EA07BE, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, Open__Direction_5CA643F545D86ACD8A04A8BAA0EA07BE, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, UnknownData_CZ14, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, Open, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, Press_Nose_Button_NewTrack_0_57D98FBC4A6FB4C10C16C3A2B119E9DC, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, Press_Nose_Button__Direction_57D98FBC4A6FB4C10C16C3A2B119E9DC, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, UnknownData_TXP6, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, Press_Nose_Button, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, Close_Close_V2_0065AABA487BDBCD6F160E9CD00DA8FA, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, Close__Direction_0065AABA487BDBCD6F160E9CD00DA8FA, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, UnknownData_PUZZ, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, Close, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, HasAlreadyCollected_, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, IsWithinRange_, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, UnknownData_0RX3, 0x029A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, OnCollectSecurityBadge, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, ItemAward, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, BadgeAward, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, Award_Item, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, Award_Badge, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, UnknownData_WUPQ, 0x02C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, OnInteract, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, OnAnimSequenceFinished, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, CurrentlyOpening_, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, CanClose, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_C, IsInteractible, 0x02EA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_BadgeHolder_C, 0x02EB);
		}

		// class UMasterUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MasterUI__MasterUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, Cam_Button, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, Cam_text, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, CamButtonBackground, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, CanvasPanel_2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, FazwatchMapUI, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, FlashlightBattery_Overlay, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, FlashlightMeter, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, L1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, MainMenu_Switch, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, Map, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, Map_Button, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, Map_Text, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, MapButtonBackground, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, Messages_Background, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, Messages_Button, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, Messages_Text, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, MessagesStar, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, MissionButtonBackground, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, Missions_Button, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, Missions_Text, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, MissionsStar, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, PanSlider, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, R1, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, RetainerBox_107, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, SecurityCameraUI, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, TiltSlider, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, WI_Messages, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, WI_MIssions, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, WorldMap, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, ZoomText, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, Hours, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, Minutes, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterUI_C, FazMsgNotification, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMasterUI_C, 0x0359);
		}

		// class UBFL_Post_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__BFL_Post__BFL_Post_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBFL_Post_C, 0x0028);
		}

		// class UWaitWhileBoolsAreEqual_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__WaitWhileBoolsAreEqual__WaitWhileBoolsAreEqual_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaitWhileBoolsAreEqual_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaitWhileBoolsAreEqual_C, ValueBB, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaitWhileBoolsAreEqual_C, Value, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWaitWhileBoolsAreEqual_C, 0x00D9);
		}

		// class UFazerBlast_CaptureFlag_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FazerBlast_CaptureFlag__FazerBlast_CaptureFlag_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_CaptureFlag_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_CaptureFlag_C, FlagToCapture, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFazerBlast_CaptureFlag_C, 0x00D8);
		}

		// class ULocationServices : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__LocationServicesBPLibrary__LocationServices)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocationServices, 0x0028);
		}

		// class ULocationServicesImpl : public UObject
		TEST_METHOD(Class__LocationServicesBPLibrary__LocationServicesImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocationServicesImpl, OnLocationChanged, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocationServicesImpl, 0x0038);
		}

		// class ACautionBotManager_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__CautionBotManager__CautionBotManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACautionBotManager_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACautionBotManager_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACautionBotManager_C, CautionBots, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACautionBotManager_C, 0x0248);
		}

		// class ABP_NoiseMakingTower_KiddieRide_Bike_C : public ABP_NoiseMakingTowerBaseInteractible_C
		TEST_METHOD(BlueprintGeneratedClass__BP_NoiseMakingTower_KiddieRide_Bike__BP_NoiseMakingTower_KiddieRide_Bike_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTower_KiddieRide_Bike_C, UberGraphFrame, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTower_KiddieRide_Bike_C, MOD_KiddieRide_Rocket_Ride, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTower_KiddieRide_Bike_C, MOD_KiddieRide_Rocket_Base, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTower_KiddieRide_Bike_C, Scene, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTower_KiddieRide_Bike_C, Timeline_0_Rotation_890F76034C893EF830345BB879ACF94D, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTower_KiddieRide_Bike_C, Timeline_0__Direction_890F76034C893EF830345BB879ACF94D, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTower_KiddieRide_Bike_C, UnknownData_03Q8, 0x02CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTower_KiddieRide_Bike_C, Timeline_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTower_KiddieRide_Bike_C, LoopTimes, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_NoiseMakingTower_KiddieRide_Bike_C, 0x02DC);
		}

		// class UStaminaComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__StaminaComponent__StaminaComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaminaComponent_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaminaComponent_C, CurrentStamina, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaminaComponent_C, MaxStamina, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaminaComponent_C, StaminaRefillRate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaminaComponent_C, StaminaDepleteRate, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaminaComponent_C, UsingStamina, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaminaComponent_C, UnknownData_YN2G, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaminaComponent_C, OnStaminaDepleted, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaminaComponent_C, OnStaminaReplenished, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaminaComponent_C, ReplenishingStamina, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaminaComponent_C, UnknownData_VD3T, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaminaComponent_C, LastStaminaUseTime, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaminaComponent_C, RefillWaitTime, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaminaComponent_C, 0x00FC);
		}

		// class USightProviderInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__SightProviderInterface__SightProviderInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USightProviderInterface_C, 0x0028);
		}

		// class UGetLocationFromPath_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__GetLocationFromPath__GetLocationFromPath_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetLocationFromPath_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetLocationFromPath_C, LocationKey, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetLocationFromPath_C, PathKey, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetLocationFromPath_C, PointIndexKey, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetLocationFromPath_C, 0x0128);
		}

		// class UWI_InstructionCard_CollectPrizeBoxes_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_CollectPrizeBoxes__WI_InstructionCard_CollectPrizeBoxes_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CollectPrizeBoxes_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CollectPrizeBoxes_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CollectPrizeBoxes_C, VerticalBox_250, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CollectPrizeBoxes_C, WI_ImageScaled, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_CollectPrizeBoxes_C, 0x0250);
		}

		// class AEastArcadeTrigger_C : public APlayerTrigger
		TEST_METHOD(BlueprintGeneratedClass__EastArcadeTrigger__EastArcadeTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEastArcadeTrigger_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEastArcadeTrigger_C, TimeCheckComponent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEastArcadeTrigger_C, LineSkipper, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEastArcadeTrigger_C, 0x02A8);
		}

		// class UPartsAndServArms_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__PartsAndServArms_ABP__PartsAndServArms_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, UnknownData_M6V4, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_BlendListByEnum, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SaveCachedPose, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_UseCachedPose_2, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_LayeredBoneBlend, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_UseCachedPose, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_28, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_27, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_26, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_25, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_24, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_23, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_22, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_21, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SequencePlayer_23, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateResult_23, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SequencePlayer_22, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateResult_22, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SequencePlayer_21, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateResult_21, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SequencePlayer_20, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateResult_20, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SequencePlayer_19, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateResult_19, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SequencePlayer_18, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateResult_18, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateMachine_4, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_20, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_19, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_18, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_17, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_16, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_15, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SequencePlayer_17, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateResult_17, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SequencePlayer_16, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateResult_16, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SequencePlayer_15, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateResult_15, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SequencePlayer_14, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateResult_14, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SequencePlayer_13, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateResult_13, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateMachine_3, 0x0F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_14, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_13, 0x1010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_12, 0x1038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_11, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_10, 0x1088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SequencePlayer_12, 0x10B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateResult_12, 0x1128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SequencePlayer_11, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateResult_11, 0x11D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SequencePlayer_10, 0x1200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateResult_10, 0x1278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SequencePlayer_9, 0x12A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateResult_9, 0x1320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SequencePlayer_8, 0x1350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateResult_8, 0x13C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateMachine_2, 0x13F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_Slot, 0x14A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_9, 0x14F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_8, 0x1518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_7, 0x1540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_6, 0x1568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_5, 0x1590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_4, 0x15B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_3, 0x15E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult_2, 0x1608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_TransitionResult, 0x1630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SequencePlayer_7, 0x1658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateResult_7, 0x16D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SequencePlayer_6, 0x1700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateResult_6, 0x1778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SequencePlayer_5, 0x17A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateResult_5, 0x1820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SequencePlayer_4, 0x1850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateResult_4, 0x18C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SequencePlayer_3, 0x18F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateResult_3, 0x1970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SequencePlayer_2, 0x19A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateResult_2, 0x1A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_SequencePlayer, 0x1A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateResult, 0x1AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, AnimGraphNode_StateMachine, 0x1AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, HatOn, 0x1BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, GameEnum, 0x1BA1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, HeadOn, 0x1BA2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, ArmOpen, 0x1BA3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, Reset, 0x1BA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, HandOn, 0x1BA5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, BowTieOn, 0x1BA6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, ChestplateOn, 0x1BA7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, L_Eye_IN, 0x1BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, R_eye_In, 0x1BA9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, VoiceBoxSwap_1, 0x1BAA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartsAndServArms_ABP_C, CanTest, 0x1BAB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartsAndServArms_ABP_C, 0x1BAC);
		}

		// class UEyeTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__EyeTracker__EyeTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEyeTrackerFunctionLibrary, 0x0028);
		}

		// class UEnterMazeTransition_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__EnterMazeTransition__EnterMazeTransition_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnterMazeTransition_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnterMazeTransition_C, 0x00B0);
		}

		// class UFindPointOfInterest_C : public UAIRoomTask_C
		TEST_METHOD(BlueprintGeneratedClass__FindPointOfInterest__FindPointOfInterest_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindPointOfInterest_C, UberGraphFrame, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindPointOfInterest_C, BBPointOfInterestTag, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindPointOfInterest_C, BBPointOfInterestLocation, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindPointOfInterest_C, BBPointOfInterestIndex, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindPointOfInterest_C, POISearchRadius, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindPointOfInterest_C, UnknownData_PMRU, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindPointOfInterest_C, BBPointOfInterestRoom, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindPointOfInterest_C, PossiblePOIs, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindPointOfInterest_C, 0x01B8);
		}

		// class UFindPlayerLocation_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FindPlayerLocation__FindPlayerLocation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindPlayerLocation_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindPlayerLocation_C, VectorKey, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindPlayerLocation_C, 0x00D8);
		}

		// class UStaffbot_ABP_Racer_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Staffbot_ABP_Racer__Staffbot_ABP_Racer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, UnknownData_5YKV, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, AnimGraphNode_SequencePlayer_2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, AnimGraphNode_ApplyAdditive, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, AnimGraphNode_SequencePlayer, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, AnimGraphNode_StateResult, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, AnimGraphNode_StateMachine, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, ExternalForce, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, DeltaTimeX, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, Spine_jnt, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, Staffbot_PA, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, PAProfileEnum, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, UnknownData_PEK6, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, PAProfileName, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, UnknownData_4NRQ, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, PhysicalAnimationComponent, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, CharacterMesh, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, BlendWeightChest, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, BlendWeight__L_Arm, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, L_Shoulder_jnt, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, R_Shoulder_jnt, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, Pawn, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, Neck_jnt, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, BlendWeightNeck, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, UseCurves, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, Con_ProfileEnum, 0x05AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, UnknownData_ZCWI, 0x05AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, ConstraintProfileName, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, MaxSpeed, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, Wheels_jnt, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, BlendWeightWheels, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, BlendWeight__R_Arm, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, BlendWeightProps, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, L_Prop_jnt, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, R_Prop_jnt, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, PropMesh_L, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, NewVar_1, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, StaffBotBoxes, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, IsHeadAiming, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, IsChestAiming, 0x05F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, UnknownData_6IB7, 0x05F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, MoveSpeedFwdInput, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, isMoving, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, UnknownData_5Y8C, 0x05F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, HeadAimAlpha, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, AimTarget, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, AimRotChest, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, ChestAimAlpha, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, Degrees_Float, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, AlertLevel, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, IsWarning, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, UnknownData_B3F4, 0x0625);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, AimRotNeck, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, Stunned, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, UnknownData_MHI2, 0x0635);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, PawnVelocity, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, MoveSpeedRightInput, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, isFazertag, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, CanFireLaser, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, IsPreview, 0x064A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, UnknownData_QTRO, 0x064B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, Current_Location, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, OldLocation, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, State, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, canJumpscare, 0x0665);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, HasProp, 0x0666);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, CanDoTask, 0x0667);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, TargetTaskPoint, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, CanSeePlayer, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, UnknownData_9SJ2, 0x0671);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, NCanSeePlayer, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, PreviousRotation, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, Current_Rotation, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, IsTurning_L, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, isTurning, 0x0695);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, UnknownData_ROP8, 0x0696);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, TurnRate, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, TurnLeft, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, TurnRight, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, TargetSpineOrientation, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, TurnRateMult, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, TurnAlpha, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, AimAtPlayer, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, UnknownData_L755, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, Head_jnt, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, Arm_Ik_eff_L, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, Arm_Ik_eff_R, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, Mid_jnt, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Racer_C, BlendWeightMid, 0x06F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaffbot_ABP_Racer_C, 0x06F8);
		}

		// class AStaffBotWorker_SplineFollower_C : public AStaffBotBase_C
		TEST_METHOD(BlueprintGeneratedClass__StaffBotWorker_SplineFollower__StaffBotWorker_SplineFollower_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, UnknownData_D3GM, 0x0652);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, UberGraphFrame, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, L_IK, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, R_IK, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, SM_Prop_02, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, ObstructionDetector, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, ObstructionDetector1, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, Path, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, DistanceAlongPath, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, Speed, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, Direction, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, LookDistance, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, State, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, UnknownData_R51J, 0x06A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, Obstructions, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, Greg, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, Gregory, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, DirectionAlongSpline, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, ForwardOnSpline, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, CanReversePath, 0x06D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, UnknownData_C26L, 0x06D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, TargetRotation, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, RotationInterpSpeed, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, OldState, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, UnknownData_IKXB, 0x06E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, Start_Point, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, IsManaged, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, TaskIsDone, 0x06F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, UnknownData_W43S, 0x06F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, Assigned_Task_Point, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, Manager, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, UseAnyTaskPoint, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, UnknownData_QR8Z, 0x0709);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, ElapsedTime, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, Oriented, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, UnknownData_4A28, 0x0711);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, PauseTask, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorker_SplineFollower_C, AlertName, 0x071C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaffBotWorker_SplineFollower_C, 0x0724);
		}

		// class UMontyDynamicsABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__MontyDynamicsABP__MontyDynamicsABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyDynamicsABP_C, UnknownData_SL7E, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyDynamicsABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyDynamicsABP_C, AnimGraphNode_ApplyAdditive, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyDynamicsABP_C, AnimGraphNode_Constraint, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyDynamicsABP_C, AnimGraphNode_ComponentToLocalSpace, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyDynamicsABP_C, AnimGraphNode_LinkedInputPose, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyDynamicsABP_C, AnimGraphNode_LocalToComponentSpace, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyDynamicsABP_C, AnimGraphNode_LayeredBoneBlend, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyDynamicsABP_C, AnimGraphNode_SequencePlayer_2, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyDynamicsABP_C, AnimGraphNode_Root, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyDynamicsABP_C, AnimGraphNode_SequencePlayer, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyDynamicsABP_C, AnimGraphNode_Trail, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyDynamicsABP_C, AnimGraphNode_AnimDynamics, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyDynamicsABP_C, AnimDynamics_Monty, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyDynamicsABP_C, UnknownData_LWXX, 0x0D81);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyDynamicsABP_C, TailDynamicAlpha, 0x0D84);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyDynamicsABP_C, Shattered, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyDynamicsABP_C, UnknownData_UKLA, 0x0D89);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyDynamicsABP_C, EaringDynamicAlpha, 0x0D8C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMontyDynamicsABP_C, 0x0D90);
		}

		// class AFlashlightRechargeStationManager_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__FlashlightRechargeStationManager__FlashlightRechargeStationManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStationManager_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStationManager_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStationManager_C, RechargeStations, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStationManager_C, CurrentStationID, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStationManager_C, RechargeTimeElapsed, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStationManager_C, RechargeTime, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStationManager_C, FlashlightCharged, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFlashlightRechargeStationManager_C, 0x0255);
		}

		// class APowerStation_DaycareAirlock_C : public APowerStation_Actor_C
		TEST_METHOD(BlueprintGeneratedClass__PowerStation_DaycareAirlock__PowerStation_DaycareAirlock_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_DaycareAirlock_C, UnknownData_8DZY, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_DaycareAirlock_C, PointLight2, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_DaycareAirlock_C, PointLight1, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStation_DaycareAirlock_C, PointLight, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APowerStation_DaycareAirlock_C, 0x0310);
		}

		// class AVanessaSpawnPoint_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__VanessaSpawnPoint__VanessaSpawnPoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanessaSpawnPoint_C, Billboard, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVanessaSpawnPoint_C, 0x0230);
		}

		// class ABP_NoiseMakingTowerBase_Pitchers_C : public ABP_NoiseMakingTowerBaseInteractible_C
		TEST_METHOD(BlueprintGeneratedClass__BP_NoiseMakingTowerBase_Pitchers__BP_NoiseMakingTowerBase_Pitchers_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Pitchers_C, UberGraphFrame, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Pitchers_C, MOD_WaterPitcher6, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Pitchers_C, MOD_WaterPitcher5, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Pitchers_C, MOD_WaterPitcher4, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Pitchers_C, W, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Pitchers_C, MOD_WaterPitcher3, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Pitchers_C, MOD_WaterPitcher2, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Pitchers_C, MOD_WaterPitcher1, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Pitchers_C, MOD_WaterPitcher, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Pitchers_C, force_NewTrack_0_1CFD630149F6ADCF1766949A69A9515F, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Pitchers_C, force__Direction_1CFD630149F6ADCF1766949A69A9515F, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Pitchers_C, UnknownData_G9JF, 0x02F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Pitchers_C, Force, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_NoiseMakingTowerBase_Pitchers_C, 0x0300);
		}

		// class UPathBlockerInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__PathBlockerInterface__PathBlockerInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathBlockerInterface_C, 0x0028);
		}

		// class ACableActor : public AActor
		TEST_METHOD(Class__CableComponent__CableActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACableActor, CableComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACableActor, 0x0230);
		}

		// class UCableComponent : public UMeshComponent
		TEST_METHOD(Class__CableComponent__CableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_GRFY, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndTo, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndToSocketName, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, EndLocation, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableLength, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSegments, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SubstepTime, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SolverIterations, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableStiffness, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableCollision, 0x046D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_1IEN, 0x046E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CollisionFriction, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableForce, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableGravityScale, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableWidth, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSides, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, TileMaterial, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_DK7S, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCableComponent, 0x04B0);
		}

		// class UAssetRegistryImpl : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetRegistryImpl, UnknownData_TYEL, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryImpl, 0x0778);
		}

		// class UAssetRegistryHelpers : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryHelpers, 0x0028);
		}

		// class UAssetRegistry : public UInterface
		TEST_METHOD(Class__AssetRegistry__AssetRegistry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistry, 0x0028);
		}

		// class ABallCannonPawn_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__BallCannonPawn__BallCannonPawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonPawn_C, UberGraphFrame, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonPawn_C, LevelStreamViewpoint, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonPawn_C, Camera, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonPawn_C, DefaultSceneRoot, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonPawn_C, HUD, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonPawn_C, ControlledBallCannon, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABallCannonPawn_C, 0x02B8);
		}

		// class AEnableFreddyCallTrigger_C : public APlayerTrigger
		TEST_METHOD(BlueprintGeneratedClass__EnableFreddyCallTrigger__EnableFreddyCallTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEnableFreddyCallTrigger_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEnableFreddyCallTrigger_C, CanCallFreddy, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEnableFreddyCallTrigger_C, ShouldUpdateEnterExitFreddy, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEnableFreddyCallTrigger_C, CanEnterExitFreddy, 0x027A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEnableFreddyCallTrigger_C, 0x027B);
		}

		// class UJsonUtilitiesDummyObject : public UObject
		TEST_METHOD(Class__JsonUtilities__JsonUtilitiesDummyObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJsonUtilitiesDummyObject, 0x0028);
		}

		// class UChaosClothConfig : public UClothConfigCommon
		TEST_METHOD(Class__ChaosCloth__ChaosClothConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, MassMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_NK7S, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UniformMass, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, TotalMass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, Density, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, MinPerParticleMass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, EdgeStiffness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, BendingStiffness, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AreaStiffness, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, VolumeStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, StrainLimitingStiffness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, LimitScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseGeodesicDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_NNUL, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, ShapeTargetStiffness, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, CollisionThickness, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, FrictionCoefficient, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, DampingCoefficient, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, DragCoefficient, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AnimDriveSpringStiffness, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseBendingElements, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseTetrahedralConstraints, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseThinShellVolumeConstraints, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseSelfCollisions, 0x0073);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseContinuousCollisionDetection, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_TNX5, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, LinearVelocityScale, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AngularVelocityScale, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothConfig, 0x0088);
		}

		// class UChaosClothSharedSimConfig : public UClothSharedConfigCommon
		TEST_METHOD(Class__ChaosCloth__ChaosClothSharedSimConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, IterationCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, SubdivisionCount, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, SelfCollisionThickness, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, CollisionThickness, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseDampingOverride, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_UAET, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, Damping, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseGravityOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_N41A, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, GravityScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, Gravity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseLocalSpaceSimulation, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseXPBDConstraints, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_GCHA, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothSharedSimConfig, 0x0058);
		}

		// class UChaosClothingSimulationFactory : public UClothingSimulationFactory
		TEST_METHOD(Class__ChaosCloth__ChaosClothingSimulationFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothingSimulationFactory, 0x0028);
		}

		// class UChaosClothingSimulationInteractor : public UClothingSimulationInteractor
		TEST_METHOD(Class__ChaosCloth__ChaosClothingSimulationInteractor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothingSimulationInteractor, UnknownData_Z8QK, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothingSimulationInteractor, 0x0040);
		}

		// class ACinematic_TargetActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cinematic_TargetActor__Cinematic_TargetActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACinematic_TargetActor_C, Arrow, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACinematic_TargetActor_C, 0x0230);
		}

		// class UTentacle_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Tentacle_ABP__Tentacle_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, UnknownData_GKXQ, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_TransitionResult_5, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_TransitionResult_4, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_TransitionResult_3, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_TransitionResult_2, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_TransitionResult, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_BlendSpacePlayer, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_ComponentToLocalSpace_2, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_ModifyBone_2, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_LocalToComponentSpace_2, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_ModifyBone, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_SequencePlayer_6, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_ApplyAdditive_2, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_StateResult_4, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_SequencePlayer_5, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_StateResult_3, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_SequencePlayer_4, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_StateResult_2, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_SequencePlayer_3, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_StateResult, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_StateMachine, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_BlendListByBool, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_SequencePlayer_2, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_ApplyAdditive, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_SequencePlayer, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_Root, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_ComponentToLocalSpace, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, AnimGraphNode_LocalToComponentSpace, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, canJumpscare, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, CanJump, 0x0D51);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, CanSearch, 0x0D52);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, UnknownData_M70E, 0x0D53);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, TargetRotation, 0x0D54);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, SearchMax, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, SearchMin, 0x0D64);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, Actor, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, YawTarget, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, DeltaTimeX, 0x0D74);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, NewYawTarget, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, UpdateYaw, 0x0D7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, UnknownData_IY9K, 0x0D7D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, SearchTime, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, ceiling, 0x0D84);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, UnknownData_JBI0, 0x0D85);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, BoneName, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, TargetPhysicsAlpha, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, PhysicsAlpha, 0x0D94);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, YawDelta, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, OldRotation, 0x0D9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, IdleStartPositionRandom, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, UnknownData_PW80, 0x0DAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTentacle_ABP_C, IdleAnimSequence, 0x0DB0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTentacle_ABP_C, 0x0DB8);
		}

		// class UDebugInstructionCardUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DebugInstructionCardUI__DebugInstructionCardUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugInstructionCardUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugInstructionCardUI_C, ButtonCanvasPanel, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugInstructionCardUI_C, ButtonScrollbox, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugInstructionCardUI_C, CardPanel, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugInstructionCardUI_C, Image_115, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugInstructionCardUI_C, InstructionCardSwitcher, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugInstructionCardUI_C, FirstButtonHasBeenSet, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugInstructionCardUI_C, UnknownData_AT70, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugInstructionCardUI_C, FirstButton, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugInstructionCardUI_C, 0x0270);
		}

		// class UBP_escalator_steps_3_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__BP_escalator_steps_3__BP_escalator_steps_3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_escalator_steps_3_C, UnknownData_XQSW, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_escalator_steps_3_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_escalator_steps_3_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_escalator_steps_3_C, AnimGraphNode_SequencePlayer, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_escalator_steps_3_C, stepSpeed, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_escalator_steps_3_C, 0x0324);
		}

		// class UWI_FinalScore_C : public UWI_Empty_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_FinalScore__WI_FinalScore_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FinalScore_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FinalScore_C, ShowFinalResults, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FinalScore_C, Background, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FinalScore_C, DmgStringValue, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FinalScore_C, FinalScoreStringValue, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FinalScore_C, HitsStringValue, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FinalScore_C, Image_79, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FinalScore_C, Score, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FinalScore_C, Damage, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FinalScore_C, Hits, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FinalScore_C, UnknownData_5Z20, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FinalScore_C, ScoreReference, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_FinalScore_C, 0x0290);
		}

		// class UFNAFGameInstance_C : public UFNAFGameInstanceBase
		TEST_METHOD(BlueprintGeneratedClass__FNAFGameInstance__FNAFGameInstance_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, UberGraphFrame, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, SaveSlotName, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, MainLevel, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, RaytracingEnabled, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, UnknownData_VKO3, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, VisualQualityLevel, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, HasRtx, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, UnknownData_EKMY, 0x01D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, Gregory, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, Has2080, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, UnknownData_LALW, 0x01E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, AreaToLoad, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, UseAISpawns, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, UnknownData_4EEF, 0x01F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, LoadLevelMap, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, InGamePlayTrailerMode, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, UnknownData_NFKG, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, TrailerModeChanged, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, WorldEntranceToUse, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, StartupNewGame, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, DLSSEnabled, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, UnknownData_CLIO, 0x028A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, AntiAliasLevel, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, ShowSurvivalPackages, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, SpawnAllSurvivalLocations, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, UnknownData_SFYB, 0x0292);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, MiniGolfCourseIndex, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, LoadSavedGameOnNextWorldLoad, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, RedReticle, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, UnknownData_AG91, 0x029A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, HapticFeedbackIntensityMultiplier, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, SubtitlesOn, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, SubtitlesLarge, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, UnknownData_CTCO, 0x02A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, Msgs_TimesReceived, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, InstructionCardsSeen, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, ShowInstructionCards, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, UnknownData_ANVV, 0x0309);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, FNAFSaveData, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, RuntimeVisualQualitySetting, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, RuntimeRaytraceQualitySettings, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, RuntimeMinSpecDetectedSetting, 0x031A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, RuntimeHasRunBenchmark, 0x031B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, UnknownData_HO8E, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, SavedSettings, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, WasAchievementCheckBroken, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, UnknownData_J4HV, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, GPUIndexQualityMap, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, SprintToggle, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, UnknownData_1AIV, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, EndGameCinematicPlayerUI, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, ActivityIDs, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFNAFGameInstance_C, ButtonMappings, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFNAFGameInstance_C, 0x03F0);
		}

		// class AFogSystem_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__FogSystem__FogSystem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogSystem_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogSystem_C, ExponentialHeightFog, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogSystem_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogSystem_C, FogTable, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogSystem_C, CurrentFogSettings, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogSystem_C, InterpSpeed, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogSystem_C, DeltaSeconds, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogSystem_C, CurrentScenario, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFogSystem_C, OverlappedVolumes, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFogSystem_C, 0x02A0);
		}

		// class UCable06_PAS02_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable06_PAS02_ABP__Cable06_PAS02_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable06_PAS02_ABP_C, 0x05E0);
		}

		// class UCable05_PAS04_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable05_PAS04_ABP__Cable05_PAS04_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable05_PAS04_ABP_C, 0x05E0);
		}

		// class UCable04_PAS03_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable04_PAS03_ABP__Cable04_PAS03_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable04_PAS03_ABP_C, 0x05E0);
		}

		// class AOGM_GatorGolf_C : public AMGM_OfficeGameManger_C
		TEST_METHOD(BlueprintGeneratedClass__OGM_GatorGolf__OGM_GatorGolf_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_GatorGolf_C, UnknownData_9H7K, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_GatorGolf_C, SetupSplineMovement, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_GatorGolf_C, SpawnLoaction, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_GatorGolf_C, AiBot, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOGM_GatorGolf_C, 0x02F0);
		}

		// class UDebugInventoryItem_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DebugInventoryItem__DebugInventoryItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugInventoryItem_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugInventoryItem_C, HaveItemCheckbox, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugInventoryItem_C, InventoryItemName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugInventoryItem_C, ItemName, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugInventoryItem_C, 0x0250);
		}

		// class URIG_PROP_DJMMHallway_Skeleton_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__RIG_PROP_DJMMHallway_Skeleton_ABP__RIG_PROP_DJMMHallway_Skeleton_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_PROP_DJMMHallway_Skeleton_ABP_C, UnknownData_RDIN, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_PROP_DJMMHallway_Skeleton_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_PROP_DJMMHallway_Skeleton_ABP_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_PROP_DJMMHallway_Skeleton_ABP_C, AnimGraphNode_SequencePlayer, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_PROP_DJMMHallway_Skeleton_ABP_C, AnimGraphNode_Slot, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_PROP_DJMMHallway_Skeleton_ABP_C, PlayRate, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_PROP_DJMMHallway_Skeleton_ABP_C, UnknownData_7C37, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_PROP_DJMMHallway_Skeleton_ABP_C, AnimInput, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URIG_PROP_DJMMHallway_Skeleton_ABP_C, 0x0378);
		}

		// class ASlideSystem_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SlideSystem__SlideSystem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlideSystem_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlideSystem_C, CameraSpline, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlideSystem_C, PlayerEntranceTrigger, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlideSystem_C, DefaultSceneRoot, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlideSystem_C, CanUse, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlideSystem_C, UnknownData_X13W, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlideSystem_C, SlideLevelSequence, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlideSystem_C, SequenceOptions, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASlideSystem_C, 0x028C);
		}

		// class UMagicLeapHandMeshingComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeapHandMeshing__MagicLeapHandMeshingComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHandMeshingComponent, 0x00B0);
		}

		// class UMagicLeapHandMeshingFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapHandMeshing__MagicLeapHandMeshingFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHandMeshingFunctionLibrary, 0x0028);
		}

		// class UWI_InstructionCard_CheckTheCameras_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_CheckTheCameras__WI_InstructionCard_CheckTheCameras_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CheckTheCameras_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CheckTheCameras_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CheckTheCameras_C, UI_TextAndIcons, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CheckTheCameras_C, VerticalBox_250, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CheckTheCameras_C, WI_ImageScaled, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_CheckTheCameras_C, 0x0258);
		}

		// class UAnimNotify_PlayMontageNotify : public UAnimNotify
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotify, NotifyName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotify, 0x0040);
		}

		// class UAnimNotify_PlayMontageNotifyWindow : public UAnimNotifyState
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotifyWindow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotifyWindow, NotifyName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotifyWindow, 0x0038);
		}

		// class UAnimSequencerInstance : public UAnimInstance
		TEST_METHOD(Class__AnimGraphRuntime__AnimSequencerInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequencerInstance, UnknownData_E1GR, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequencerInstance, 0x0270);
		}

		// class UKismetAnimationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AnimGraphRuntime__KismetAnimationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetAnimationLibrary, 0x0028);
		}

		// class UPlayMontageCallbackProxy : public UObject
		TEST_METHOD(Class__AnimGraphRuntime__PlayMontageCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnCompleted, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnBlendOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnInterrupted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyBegin, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, UnknownData_8I05, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayMontageCallbackProxy, 0x00A8);
		}

		// class USequencerAnimationSupport : public UInterface
		TEST_METHOD(Class__AnimGraphRuntime__SequencerAnimationSupport)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequencerAnimationSupport, 0x0028);
		}

		// class UInputBehavior : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputBehavior, UnknownData_3262, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehavior, 0x0030);
		}

		// class UAnyButtonInputBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__AnyButtonInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnyButtonInputBehavior, UnknownData_3UB6, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnyButtonInputBehavior, 0x0080);
		}

		// class UInteractiveGizmoBuilder : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmoBuilder, 0x0028);
		}

		// class UAxisAngleGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__AxisAngleGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisAngleGizmoBuilder, 0x0028);
		}

		// class UInteractiveGizmo : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmo, UnknownData_PRWA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmo, InputBehaviors, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmo, 0x0038);
		}

		// class UAxisAngleGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__AxisAngleGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_DO8B, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, AxisSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, AngleSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, bInInteraction, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_X2SN, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationAxis, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationPlaneX, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationPlaneY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionStartPoint, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionCurPoint, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionStartAngle, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionCurAngle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_KEX4, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisAngleGizmo, 0x00F0);
		}

		// class UAxisPositionGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__AxisPositionGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisPositionGizmoBuilder, 0x0028);
		}

		// class UAxisPositionGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__AxisPositionGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_V364, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, AxisSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, ParameterSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, bEnableSignedAxis, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, bInInteraction, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_CZHV, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionAxis, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionStartPoint, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionCurPoint, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionStartParameter, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionCurParameter, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, ParameterSign, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_8GSD, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisPositionGizmo, 0x00D8);
		}

		// class UGizmoConstantAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoConstantAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, UnknownData_LAO7, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, Direction, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoConstantAxisSource, 0x0048);
		}

		// class UGizmoConstantFrameAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoConstantFrameAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, UnknownData_ZS91, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, Direction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, TangentX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, TangentY, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoConstantFrameAxisSource, 0x0060);
		}

		// class UGizmoWorldAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoWorldAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, UnknownData_BEDC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, AxisIndex, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoWorldAxisSource, 0x0040);
		}

		// class UGizmoComponentAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, UnknownData_V8RA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, Component, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, AxisIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, bLocalAxes, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, UnknownData_SADO, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentAxisSource, 0x0040);
		}

		// class UInteractiveToolPropertySet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, UnknownData_J38O, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, CachedProperties, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, bIsPropertySetEnabled, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, UnknownData_6V68, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolPropertySet, 0x0050);
		}

		// class UBrushBaseProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__InteractiveToolsFramework__BrushBaseProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bSpecifyRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, UnknownData_WEFS, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushRadius, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushStrength, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushFalloffAmount, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bShowStrength, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bShowFalloff, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, UnknownData_PNJ9, 0x0066);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBaseProperties, 0x0068);
		}

		// class UInteractiveTool : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, UnknownData_54TF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, InputBehaviors, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, ToolPropertyObjects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, UnknownData_XI2A, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveTool, 0x0080);
		}

		// class USingleSelectionTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__SingleSelectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleSelectionTool, UnknownData_NG5X, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleSelectionTool, 0x0088);
		}

		// class UMeshSurfacePointTool : public USingleSelectionTool
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSurfacePointTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSurfacePointTool, UnknownData_09HC, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSurfacePointTool, 0x00C0);
		}

		// class UBaseBrushTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__InteractiveToolsFramework__BaseBrushTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, BrushProperties, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, bInBrushStroke, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, UnknownData_FP5N, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, LastBrushStamp, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, UnknownData_BOOI, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, PropertyClass, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, BrushStampIndicator, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseBrushTool, 0x01B8);
		}

		// class UBrushStampIndicatorBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__BrushStampIndicatorBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushStampIndicatorBuilder, 0x0028);
		}

		// class UBrushStampIndicator : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__BrushStampIndicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushRadius, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushFalloff, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushNormal, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawIndicatorLines, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawRadiusCircle, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawFalloffCircle, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_SWPP, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SampleStepCount, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, LineColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, LineThickness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDepthTested, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawSecondaryLines, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_AFJ5, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SecondaryLineThickness, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SecondaryLineColor, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_7O5P, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, AttachedComponent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_HJA6, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushStampIndicator, 0x00B0);
		}

		// class UClickDragInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, UnknownData_NS66, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, bUpdateModifiersDuringDrag, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, UnknownData_DPYR, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragInputBehavior, 0x0140);
		}

		// class ULocalClickDragInputBehavior : public UClickDragInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__LocalClickDragInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalClickDragInputBehavior, UnknownData_6M8D, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalClickDragInputBehavior, 0x0280);
		}

		// class UInteractiveToolBuilder : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolBuilder, 0x0028);
		}

		// class UClickDragToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragToolBuilder, 0x0028);
		}

		// class UClickDragTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragTool, UnknownData_ILW0, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragTool, 0x0088);
		}

		// class AInternalToolFrameworkActor : public AActor
		TEST_METHOD(Class__InteractiveToolsFramework__InternalToolFrameworkActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInternalToolFrameworkActor, 0x0228);
		}

		// class AGizmoActor : public AInternalToolFrameworkActor
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGizmoActor, 0x0228);
		}

		// class UGizmoBaseComponent : public UPrimitiveComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, Color, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, HoverSizeMultiplier, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, PixelHitDistanceThreshold, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, UnknownData_2P5V, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseComponent, 0x0410);
		}

		// class UGizmoArrowComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoArrowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Direction, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Gap, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Length, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Thickness, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, UnknownData_LVKX, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoArrowComponent, 0x0430);
		}

		// class UGizmoBoxComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Origin, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, UnknownData_LYA0, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Rotation, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Dimensions, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, LineThickness, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, bRemoveHiddenLines, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, bEnableAxisFlip, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, UnknownData_TSAN, 0x0442);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBoxComponent, 0x0450);
		}

		// class UGizmoCircleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoCircleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Normal, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Radius, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Thickness, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, NumSides, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, bViewAligned, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, bOnlyAllowFrontFacingHits, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, UnknownData_B2IK, 0x042A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoCircleComponent, 0x0430);
		}

		// class UGizmoTransformSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformSource, 0x0028);
		}

		// class UGizmoAxisSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisSource, 0x0028);
		}

		// class UGizmoClickTarget : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoClickTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoClickTarget, 0x0028);
		}

		// class UGizmoStateTarget : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoStateTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoStateTarget, 0x0028);
		}

		// class UGizmoFloatParameterSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoFloatParameterSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoFloatParameterSource, 0x0028);
		}

		// class UGizmoVec2ParameterSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoVec2ParameterSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoVec2ParameterSource, 0x0028);
		}

		// class UGizmoLineHandleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLineHandleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Normal, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, HandleSize, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Thickness, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Direction, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Length, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, bImageScale, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, UnknownData_A2UN, 0x0435);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLineHandleComponent, 0x0440);
		}

		// class UGizmoRectangleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoRectangleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, DirectionX, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, DirectionY, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, OffsetX, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, OffsetY, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, LengthX, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, LengthY, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, Thickness, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, SegmentFlags, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, UnknownData_UY8T, 0x043D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoRectangleComponent, 0x0440);
		}

		// class UGizmoLambdaHitTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLambdaHitTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLambdaHitTarget, UnknownData_PRXA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLambdaHitTarget, 0x00B0);
		}

		// class UGizmoComponentHitTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentHitTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, UnknownData_30OG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, Component, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, UnknownData_6A15, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentHitTarget, 0x0080);
		}

		// class UInputBehaviorSet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehaviorSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputBehaviorSet, Behaviors, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehaviorSet, 0x0038);
		}

		// class UInputBehaviorSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehaviorSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehaviorSource, 0x0028);
		}

		// class UInputRouter : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputRouter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, bAutoInvalidateOnHover, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, bAutoInvalidateOnCapture, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, UnknownData_GCWU, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, ActiveInputBehaviors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, UnknownData_WK7S, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputRouter, 0x00B0);
		}

		// class UInteractionMechanic : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractionMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionMechanic, UnknownData_ZQJJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionMechanic, 0x0030);
		}

		// class UInteractiveGizmoManager : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmoManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_JSQK, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, ActiveGizmos, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_BAZH, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, GizmoBuilders, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_M9ZP, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmoManager, 0x00B8);
		}

		// class UToolContextTransactionProvider : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__ToolContextTransactionProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolContextTransactionProvider, 0x0028);
		}

		// class UInteractiveToolManager : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_0HUE, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ActiveLeftTool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ActiveRightTool, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_Q91F, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ToolBuilders, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_BDLW, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolManager, 0x0138);
		}

		// class UToolFrameworkComponent : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__ToolFrameworkComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolFrameworkComponent, 0x0028);
		}

		// class UInteractiveToolsContext : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolsContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, UnknownData_CWQO, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, InputRouter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, ToolManager, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, GizmoManager, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, ToolManagerClass, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolsContext, 0x0098);
		}

		// class AIntervalGizmoActor : public AGizmoActor
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmoActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, UpIntervalComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, DownIntervalComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, ForwardIntervalComponent, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIntervalGizmoActor, 0x0240);
		}

		// class UIntervalGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmoBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmoBuilder, UnknownData_LSEQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntervalGizmoBuilder, 0x00C0);
		}

		// class UIntervalGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, StateTarget, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_IJ5J, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, TransformProxy, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, ActiveComponents, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, ActiveGizmos, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_LIMB, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, AxisYSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, AxisZSource, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_17BR, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntervalGizmo, 0x0130);
		}

		// class UGizmoBaseFloatParameterSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseFloatParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseFloatParameterSource, UnknownData_7M2T, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseFloatParameterSource, 0x0048);
		}

		// class UGizmoAxisIntervalParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisIntervalParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, FloatParameterSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, MinParameter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, MaxParameter, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisIntervalParameterSource, 0x0060);
		}

		// class UKeyAsModifierInputBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__KeyAsModifierInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyAsModifierInputBehavior, UnknownData_ETJW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyAsModifierInputBehavior, 0x0110);
		}

		// class UMeshSurfacePointToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSurfacePointToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSurfacePointToolBuilder, UnknownData_8XTM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSurfacePointToolBuilder, 0x0030);
		}

		// class UMouseHoverBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__MouseHoverBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMouseHoverBehavior, UnknownData_B5TU, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseHoverBehavior, 0x0098);
		}

		// class UMultiClickSequenceInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__MultiClickSequenceInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiClickSequenceInputBehavior, UnknownData_T6DP, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiClickSequenceInputBehavior, 0x0130);
		}

		// class UMultiSelectionTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__MultiSelectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiSelectionTool, UnknownData_B4J0, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiSelectionTool, 0x0090);
		}

		// class UGizmoLocalFloatParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLocalFloatParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, Value, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, LastChange, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, UnknownData_AD91, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLocalFloatParameterSource, 0x0058);
		}

		// class UGizmoBaseVec2ParameterSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseVec2ParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseVec2ParameterSource, UnknownData_NVO2, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseVec2ParameterSource, 0x0048);
		}

		// class UGizmoLocalVec2ParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLocalVec2ParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalVec2ParameterSource, Value, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalVec2ParameterSource, LastChange, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLocalVec2ParameterSource, 0x0060);
		}

		// class UGizmoAxisTranslationParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisTranslationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, UnknownData_COQP, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, Parameter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, LastChange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, CurTranslationAxis, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, CurTranslationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, UnknownData_4A4K, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, InitialTransform, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisTranslationParameterSource, 0x0110);
		}

		// class UGizmoPlaneTranslationParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoPlaneTranslationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, UnknownData_OSM9, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, Parameter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, LastChange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationNormal, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationAxisX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationAxisY, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, UnknownData_S630, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, InitialTransform, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoPlaneTranslationParameterSource, 0x0130);
		}

		// class UGizmoAxisRotationParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisRotationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, TransformSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, Angle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, LastChange, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, CurRotationAxis, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, CurRotationOrigin, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, UnknownData_TOBS, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, InitialTransform, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisRotationParameterSource, 0x00C0);
		}

		// class UGizmoUniformScaleParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoUniformScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, TransformSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, ScaleMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, Parameter, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, LastChange, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleOrigin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleNormal, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleAxisX, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleAxisY, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, UnknownData_YFED, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, InitialTransform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoUniformScaleParameterSource, 0x00F0);
		}

		// class UGizmoAxisScaleParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, TransformSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, ScaleMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, Parameter, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, LastChange, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, CurScaleAxis, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, CurScaleOrigin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, InitialTransform, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisScaleParameterSource, 0x00C0);
		}

		// class UGizmoPlaneScaleParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoPlaneScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, UnknownData_RSHM, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, ScaleMultiplier, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, Parameter, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, LastChange, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleOrigin, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleNormal, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleAxisX, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleAxisY, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, UnknownData_U9ZO, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, InitialTransform, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoPlaneScaleParameterSource, 0x0130);
		}

		// class UPlanePositionGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__PlanePositionGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanePositionGizmoBuilder, 0x0028);
		}

		// class UPlanePositionGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__PlanePositionGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, UnknownData_LF9M, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, AxisSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, ParameterSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bEnableSignedAxis, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bFlipX, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bFlipY, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bInInteraction, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionNormal, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionAxisX, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionAxisY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionStartPoint, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionCurPoint, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionStartParameter, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionCurParameter, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, ParameterSigns, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, UnknownData_4TDG, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanePositionGizmo, 0x0100);
		}

		// class USelectionSet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__SelectionSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectionSet, UnknownData_R7WW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelectionSet, 0x0040);
		}

		// class UMeshSelectionSet : public USelectionSet
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSelectionSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Vertices, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Edges, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Faces, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Groups, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionSet, 0x0080);
		}

		// class USingleClickInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, UnknownData_Z37O, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, HitTestOnRelease, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, UnknownData_YJVD, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickInputBehavior, 0x0130);
		}

		// class USingleClickToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickToolBuilder, 0x0028);
		}

		// class USingleClickTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickTool, UnknownData_UESG, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickTool, 0x0088);
		}

		// class UGizmoNilStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoNilStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoNilStateTarget, UnknownData_0DEZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoNilStateTarget, 0x0030);
		}

		// class UGizmoLambdaStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLambdaStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLambdaStateTarget, UnknownData_4B4R, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLambdaStateTarget, 0x00B0);
		}

		// class UGizmoObjectModifyStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoObjectModifyStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoObjectModifyStateTarget, UnknownData_HX30, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoObjectModifyStateTarget, 0x0058);
		}

		// class UGizmoTransformChangeStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformChangeStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, UnknownData_GM9Q, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, TransactionManager, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, UnknownData_9DKE, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformChangeStateTarget, 0x00E0);
		}

		// class ATransformGizmoActor : public AGizmoActor
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmoActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateX, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateY, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateZ, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateYZ, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateXZ, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateXY, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateX, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateY, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateZ, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, UniformScale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleX, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleY, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleZ, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleYZ, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleXZ, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleXY, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATransformGizmoActor, 0x02A8);
		}

		// class UTransformGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmoBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoBuilder, UnknownData_Q5FW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformGizmoBuilder, 0x00C0);
		}

		// class UTransformGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_VID6, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveTarget, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bSnapToWorldGrid, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bUseContextCoordinateSystem, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_OKX2, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, CurrentCoordinateSystem, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_Y87A, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_4LLM, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveComponents, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, NonuniformScaleComponents, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveGizmos, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_ABS2, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, CameraAxisSource, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisXSource, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisYSource, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisZSource, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisXSource, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisYSource, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisZSource, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, StateTarget, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ScaledTransformSource, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_WUFK, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformGizmo, 0x0180);
		}

		// class UTransformProxy : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__TransformProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, UnknownData_ZMH1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, bRotatePerObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, bSetPivotMode, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, UnknownData_VEMK, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, SharedTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, InitialSharedTransform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformProxy, 0x00F0);
		}

		// class UGizmoBaseTransformSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseTransformSource, UnknownData_HO6D, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseTransformSource, 0x0048);
		}

		// class UGizmoComponentWorldTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentWorldTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, Component, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, bModifyComponentOnTransform, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, UnknownData_JY02, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentWorldTransformSource, 0x0058);
		}

		// class UGizmoScaledTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoScaledTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoScaledTransformSource, ChildTransformSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoScaledTransformSource, UnknownData_H26S, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoScaledTransformSource, 0x00E0);
		}

		// class UGizmoTransformProxyTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformProxyTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformProxyTransformSource, Proxy, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformProxyTransformSource, 0x0050);
		}

		// class UWI_Gregory_FazNotification_C : public UWI_Empty_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_Gregory_FazNotification__WI_Gregory_FazNotification_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_FazNotification_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_FazNotification_C, Notification, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_FazNotification_C, Warning, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_FazNotification_C, DefaultFazwatch, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_FazNotification_C, NotificationFazwatch, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_FazNotification_C, OpenFazwatch, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_FazNotification_C, UI_TextAndIcons, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_FazNotification_C, WarningFazwatch, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_FazNotification_C, WarningTriangle, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_Gregory_FazNotification_C, 0x0288);
		}

		// class UFindNextBallCannon_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FindNextBallCannon__FindNextBallCannon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindNextBallCannon_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindNextBallCannon_C, BBTargetPosition, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindNextBallCannon_C, CurrentLocation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindNextBallCannon_C, UnknownData_TVQM, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindNextBallCannon_C, BossManager, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindNextBallCannon_C, 0x0110);
		}

		// class ADJMusicMan_Booth_C : public ASkeletalMeshActor
		TEST_METHOD(BlueprintGeneratedClass__DJMusicMan_Booth__DJMusicMan_Booth_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_Booth_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_Booth_C, Ak, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_Booth_C, Mission_Vanish_Condition, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_Booth_C, Mission_Active_Condition, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_Booth_C, Mission_Complete_Condition, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADJMusicMan_Booth_C, 0x02D8);
		}

		// class ULuminRuntimeSettings : public UObject
		TEST_METHOD(Class__LuminRuntimeSettings__LuminRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, PackageName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ApplicationDisplayName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, FrameTimingHint, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bProtectedContent, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bManualCallToAppReady, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bUseMobileRendering, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bUseVulkan, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_VRE8, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, Certificate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, IconModelPath, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, IconPortalPath, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, LocalizedIconInfos, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, VersionCode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, MinimumAPILevel, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, AppPrivileges, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ExtraComponentSubElements, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ExtraComponentElements, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, SpatializationPlugin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ReverbPlugin, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, OcclusionPlugin, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, SoundCueCookQualityIndex, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bRemoveDebugInfo, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_487M, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, VulkanValidationLayerLibs, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bFrameVignette, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_583B, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, LocalizedAppNames, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_T0KJ, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminRuntimeSettings, 0x0148);
		}

		// class UPlayerCrouchedService_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__PlayerCrouchedService__PlayerCrouchedService_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCrouchedService_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCrouchedService_C, PlayerCrouchedBBKey, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerCrouchedService_C, 0x00C8);
		}

		// class UBPI_DebugVis_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_DebugVis__BPI_DebugVis_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_DebugVis_C, 0x0028);
		}

		// class UStunableInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__StunableInterface__StunableInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStunableInterface_C, 0x0028);
		}

		// class AMoonmanFollowSimpleSplineController_C : public AFollowSimpleSplineController_C
		TEST_METHOD(BlueprintGeneratedClass__MoonmanFollowSimpleSplineController__MoonmanFollowSimpleSplineController_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMoonmanFollowSimpleSplineController_C, 0x0348);
		}

		// class AMontyJumpTell_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__MontyJumpTell__MontyJumpTell_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyJumpTell_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyJumpTell_C, Sphere, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyJumpTell_C, DefaultSceneRoot, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMontyJumpTell_C, 0x0240);
		}

		// class ABP_AmbienceVolume_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_AmbienceVolume__BP_AmbienceVolume_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AmbienceVolume_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AmbienceVolume_C, AmbianceVolume, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AmbienceVolume_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AmbienceVolume_C, Global_ambiance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AmbienceVolume_C, Location, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AmbienceVolume_C, Priority, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AmbienceVolume_C, music, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AmbienceVolume_C, AmbienceState, 0x027C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AmbienceVolume_C, 0x0284);
		}

		// class AEnterAtrium_Trigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__EnterAtrium_Trigger__EnterAtrium_Trigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEnterAtrium_Trigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEnterAtrium_Trigger_C, UpdateShowtime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEnterAtrium_Trigger_C, MissionStateCondition, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEnterAtrium_Trigger_C, lineskippper, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEnterAtrium_Trigger_C, 0x02B8);
		}

		// class USendUndergroundOGMDeathSignal_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__SendUndergroundOGMDeathSignal__SendUndergroundOGMDeathSignal_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USendUndergroundOGMDeathSignal_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USendUndergroundOGMDeathSignal_C, Type, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USendUndergroundOGMDeathSignal_C, 0x00B4);
		}

		// class UBlueprintGameplayTagLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameplayTags__BlueprintGameplayTagLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGameplayTagLibrary, 0x0028);
		}

		// class UGameplayTagAssetInterface : public UInterface
		TEST_METHOD(Class__GameplayTags__GameplayTagAssetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagAssetInterface, 0x0028);
		}

		// class UEditableGameplayTagQuery : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UnknownData_N5AW, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, RootExpression, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, TagQueryExportText_Helper, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQuery, 0x0098);
		}

		// class UEditableGameplayTagQueryExpression : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression, 0x0028);
		}

		// class UEditableGameplayTagQueryExpression_AnyTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_AllTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_NoTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_AnyExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, 0x0038);
		}

		// class UEditableGameplayTagQueryExpression_AllExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllExprMatch, 0x0038);
		}

		// class UEditableGameplayTagQueryExpression_NoExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoExprMatch, 0x0038);
		}

		// class UGameplayTagsManager : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_7S9S, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, TagSources, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_27SZ, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, GameplayTagTables, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_5HZL, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsManager, 0x0210);
		}

		// class UGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, GameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsList, 0x0048);
		}

		// class URestrictedGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__RestrictedGameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, RestrictedGameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URestrictedGameplayTagsList, 0x0048);
		}

		// class UGameplayTagsSettings : public UGameplayTagsList
		TEST_METHOD(Class__GameplayTags__GameplayTagsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, ImportTagsFromConfig, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, WarnOnInvalidTags, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, FastReplication, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, UnknownData_E9VX, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, InvalidTagCharacters, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CategoryRemapping, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagTableList, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagRedirects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CommonlyReplicatedTags, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NumBitsForContainerSize, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NetIndexFirstBitSegment, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, RestrictedConfigFiles, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsSettings, 0x00B8);
		}

		// class UGameplayTagsDeveloperSettings : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsDeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsDeveloperSettings, DeveloperConfigName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsDeveloperSettings, 0x0038);
		}

		// class UStaffbotKitchen_HoldProgress_C : public UWI_Empty_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__StaffbotKitchen_HoldProgress__StaffbotKitchen_HoldProgress_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbotKitchen_HoldProgress_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbotKitchen_HoldProgress_C, HoldEnd, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbotKitchen_HoldProgress_C, InteractMeterDynamic, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbotKitchen_HoldProgress_C, InteractMeterEmpty, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbotKitchen_HoldProgress_C, Interact_Dynamic_Mat, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaffbotKitchen_HoldProgress_C, 0x0268);
		}

		// class USaveGameUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SaveGameUI__SaveGameUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, AllExistingSlotsBox, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, Background_image, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, ChooseAnotherSlotButton, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, ExistingSlotsBackBox, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, ExistingSlotsBackButton, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, ExistingSlotsButton, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, ExistingSlotsMenu, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, ExitButton, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, ItemName, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, MenuSwitcher, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, NewSlotButton, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, NoButton_Overwrite, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, SaveGame_Overwrite_Options, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, SaveGame_TextBox, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, SaveGame_TextBox_2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, SaveGame_YesNo, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, SaveGameAccent, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, SaveGameBackBox, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, SaveGameBackButton, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, SaveGameMenu, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, SaveGameSlots, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, SaveGameSlotsMenu, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, VerifyOverwriteMenu, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, YesButton, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, YesButton_Overwrite, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, MenuButtonStyle, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, TextBlockStyle, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, TitleSaveSlotSelected, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, OnSaveGame, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameUI_C, ClickedEvent, 0x07F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveGameUI_C, 0x0800);
		}

		// class UAnimationDataSourceRegistry : public UObject
		TEST_METHOD(Class__AnimationCore__AnimationDataSourceRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationDataSourceRegistry, DataSources, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationDataSourceRegistry, 0x0078);
		}

		// class ABasePatrolController_C : public AAIController
		TEST_METHOD(BlueprintGeneratedClass__BasePatrolController__BasePatrolController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePatrolController_C, UberGraphFrame, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePatrolController_C, AIPerception, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePatrolController_C, MyPawnv2, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABasePatrolController_C, 0x0348);
		}

		// class UBI_Culture_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BI_Culture__BI_Culture_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBI_Culture_C, 0x0028);
		}

		// class UWI_Option_Language_DebugShortcut_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_Option_Language_DebugShortcut__WI_Option_Language_DebugShortcut_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Option_Language_DebugShortcut_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Option_Language_DebugShortcut_C, TextBlock_Shortcut, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_Option_Language_DebugShortcut_C, 0x0240);
		}

		// class AFreddyOffice_C : public AFreddy_C
		TEST_METHOD(BlueprintGeneratedClass__FreddyOffice__FreddyOffice_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyOffice_C, UberGraphFrame, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyOffice_C, VisualSource_1, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyOffice_C, SplineFollowerContext, 0x0928);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFreddyOffice_C, 0x0940);
		}

		// class ALineSkipper_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__LineSkipper__LineSkipper_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALineSkipper_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALineSkipper_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALineSkipper_C, Actor, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALineSkipper_C, 0x0240);
		}

		// class UMagicLeapSecureStorage : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapSecureStorage__MagicLeapSecureStorage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapSecureStorage, 0x0028);
		}

		// class APlayerSlidePawn_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__PlayerSlidePawn__PlayerSlidePawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerSlidePawn_C, UberGraphFrame, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerSlidePawn_C, SpotLight, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerSlidePawn_C, Capsule, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerSlidePawn_C, LevelStreamViewpoint, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerSlidePawn_C, SplineFollowMovement, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerSlidePawn_C, Camera, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerSlidePawn_C, DefaultSceneRoot, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerSlidePawn_C, SplineComponent, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerSlidePawn_C, OriginalPawn, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerSlidePawn_C, OnFinishedFollowingSpline, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerSlidePawn_C, 0x02E0);
		}

		// class ABurntrapController_C : public AAIController
		TEST_METHOD(BlueprintGeneratedClass__BurntrapController__BurntrapController_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABurntrapController_C, 0x0330);
		}

		// class UFreddy_Attack_Unstun_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__Freddy_Attack_Unstun__Freddy_Attack_Unstun_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Attack_Unstun_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFreddy_Attack_Unstun_C, 0x00B0);
		}

		// class AA_FazerBlast_FlagAttackSpawner_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__A_FazerBlast_FlagAttackSpawner__A_FazerBlast_FlagAttackSpawner_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_FlagAttackSpawner_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_FlagAttackSpawner_C, GameTypeCheckDestroy, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_FlagAttackSpawner_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_FlagAttackSpawner_C, PatrolPath, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_FlagAttackSpawner_C, Enabled, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_FlagAttackSpawner_C, UnknownData_70BR, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_FlagAttackSpawner_C, SpawnedBots, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AA_FazerBlast_FlagAttackSpawner_C, 0x0260);
		}

		// class UDmgTypeBP_Environmental_C : public UDamageType
		TEST_METHOD(BlueprintGeneratedClass__DmgTypeBP_Environmental__DmgTypeBP_Environmental_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDmgTypeBP_Environmental_C, 0x0040);
		}

		// class UBI_RoxyRacerEvents_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BI_RoxyRacerEvents__BI_RoxyRacerEvents_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBI_RoxyRacerEvents_C, 0x0028);
		}

		// class UBI_AIRaceInput_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BI_AIRaceInput__BI_AIRaceInput_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBI_AIRaceInput_C, 0x0028);
		}

		// class UDialogueFunctionLibrary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__DialogueFunctionLibrary__DialogueFunctionLibrary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueFunctionLibrary_C, 0x0028);
		}

		// class URIG_BallBlaster_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__RIG_BallBlaster_ABP__RIG_BallBlaster_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_BallBlaster_ABP_C, UnknownData_2CF6, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_BallBlaster_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_BallBlaster_ABP_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_BallBlaster_ABP_C, AnimGraphNode_LinkedInputPose, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_BallBlaster_ABP_C, AnimGraphNode_ModifyBone_2, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_BallBlaster_ABP_C, AnimGraphNode_ModifyBone, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_BallBlaster_ABP_C, AnimGraphNode_ComponentToLocalSpace, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_BallBlaster_ABP_C, AnimGraphNode_Constraint_2, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_BallBlaster_ABP_C, AnimGraphNode_Constraint, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_BallBlaster_ABP_C, AnimGraphNode_RigidBody, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_BallBlaster_ABP_C, AnimGraphNode_Slot, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_BallBlaster_ABP_C, AnimGraphNode_LocalToComponentSpace, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_BallBlaster_ABP_C, AnimGraphNode_BlendListByBool, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_BallBlaster_ABP_C, AnimGraphNode_SequencePlayer, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_BallBlaster_ABP_C, InputYaw, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_BallBlaster_ABP_C, InputPitch, 0x0E74);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_BallBlaster_ABP_C, CameraRotation, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_BallBlaster_ABP_C, DeltaTimeX, 0x0E84);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_BallBlaster_ABP_C, appliedRotation, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_BallBlaster_ABP_C, Max_Angle, 0x0E94);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_BallBlaster_ABP_C, IsBroken, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_BallBlaster_ABP_C, UnknownData_NI5Q, 0x0E99);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_BallBlaster_ABP_C, BrokenMEsh, 0x0E99);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URIG_BallBlaster_ABP_C, 0x0EC8);
		}

		// class UConfirmDelete_PopUp_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ConfirmDelete_PopUp__ConfirmDelete_PopUp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmDelete_PopUp_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmDelete_PopUp_C, BackButton, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmDelete_PopUp_C, CannotUndoText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmDelete_PopUp_C, DeleteButton, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmDelete_PopUp_C, FileName_Text, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmDelete_PopUp_C, Menu_Popup_Image, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmDelete_PopUp_C, TitleUI, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmDelete_PopUp_C, DeleteMenu_BackedOut, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmDelete_PopUp_C, DeleteGameFile, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConfirmDelete_PopUp_C, 0x0288);
		}

		// class UFindClosestBallCannon_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FindClosestBallCannon__FindClosestBallCannon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindClosestBallCannon_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindClosestBallCannon_C, BBTargetPosition, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindClosestBallCannon_C, BBCannon_Target, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindClosestBallCannon_C, 0x0100);
		}

		// class AStaircaseRoomTrigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__StaircaseRoomTrigger__StaircaseRoomTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaircaseRoomTrigger_C, UberGraphFrame, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaircaseRoomTrigger_C, 0x0280);
		}

		// class ASewer_Generator_C : public AGeneratorBase_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Sewer_Generator__Sewer_Generator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewer_Generator_C, UberGraphFrame, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewer_Generator_C, Mission_to_Update, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewer_Generator_C, Door_Controlled, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewer_Generator_C, Trigger, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewer_Generator_C, IsActivated, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewer_Generator_C, UnknownData_NEQR, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewer_Generator_C, Door_Button, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewer_Generator_C, Change_Light_State, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewer_Generator_C, Update_Mission, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewer_Generator_C, UnknownData_2YRR, 0x032A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASewer_Generator_C, SpotLights, 0x032A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASewer_Generator_C, 0x0340);
		}

		// class USecurityOfficePowerUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SecurityOfficePowerUI__SecurityOfficePowerUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityOfficePowerUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityOfficePowerUI_C, OfficePower, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityOfficePowerUI_C, TimeRemaining, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USecurityOfficePowerUI_C, 0x0248);
		}

		// class USecurityOfficeActivatableHandler_C : public UObject
		TEST_METHOD(BlueprintGeneratedClass__SecurityOfficeActivatableHandler__SecurityOfficeActivatableHandler_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityOfficeActivatableHandler_C, UberGraphFrame, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityOfficeActivatableHandler_C, Screen, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityOfficeActivatableHandler_C, Camera, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityOfficeActivatableHandler_C, Activatable, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityOfficeActivatableHandler_C, OfficeManager, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityOfficeActivatableHandler_C, PowerDrain, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USecurityOfficeActivatableHandler_C, 0x0054);
		}

		// class AMontyBallBucket_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__MontyBallBucket__MontyBallBucket_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBallBucket_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBallBucket_C, Ak, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBallBucket_C, Decal2, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBallBucket_C, Decal1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBallBucket_C, Decal, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBallBucket_C, SuckForce, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBallBucket_C, MOD_BucketScoopTrim, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBallBucket_C, MOD_BucketScoop, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBallBucket_C, MOD_BucketBracket, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBallBucket_C, BallCollector, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBallBucket_C, SM_Bucket, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBallBucket_C, DefaultSceneRoot, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBallBucket_C, NumberOfBallsInBucket, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBallBucket_C, RequiredBallCount, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBallBucket_C, MontyBossManager, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBallBucket_C, Dump_Button, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBallBucket_C, RefToMonitor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBallBucket_C, TimeLastBucketHit, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMontyBallBucket_C, 0x02CC);
		}

		// class UCable07_PAS02_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable07_PAS02_ABP__Cable07_PAS02_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable07_PAS02_ABP_C, 0x05E0);
		}

		// class UCable01_PAS04_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable01_PAS04_ABP__Cable01_PAS04_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable01_PAS04_ABP_C, 0x05E0);
		}

		// class UCable01_PAS03_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable01_PAS03_ABP__Cable01_PAS03_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable01_PAS03_ABP_C, 0x05E0);
		}

		// class UDestroyActor_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__DestroyActor__DestroyActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroyActor_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestroyActor_C, 0x00B0);
		}

		// class UFNAFGameInstanceInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__FNAFGameInstanceInterface__FNAFGameInstanceInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFNAFGameInstanceInterface_C, 0x0028);
		}

		// class UAkPortalComponent : public USceneComponent
		TEST_METHOD(Class__AkAudio__AkPortalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPortalComponent, bDynamic, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPortalComponent, InitialState, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPortalComponent, UnknownData_P4VJ, 0x01F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPortalComponent, ObstructionRefreshInterval, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPortalComponent, ObstructionCollisionChannel, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPortalComponent, UnknownData_34RR, 0x01F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkPortalComponent, 0x02B0);
		}

		// class AAkAcousticPortal : public AVolume
		TEST_METHOD(Class__AkAudio__AkAcousticPortal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAcousticPortal, Portal, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAcousticPortal, InitialState, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAcousticPortal, bRequiresStateMigration, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAcousticPortal, UnknownData_J842, 0x026A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAkAcousticPortal, 0x0270);
		}

		// class UAkAudioType : public UObject
		TEST_METHOD(Class__AkAudio__AkAudioType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioType, ShortID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioType, UnknownData_4UUE, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioType, UserData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAudioType, 0x0040);
		}

		// class UAkAcousticTexture : public UAkAudioType
		TEST_METHOD(Class__AkAudio__AkAcousticTexture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAcousticTexture, 0x0040);
		}

		// class UAkAcousticTextureSetComponent : public USceneComponent
		TEST_METHOD(Class__AkAudio__AkAcousticTextureSetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAcousticTextureSetComponent, UnknownData_SDTA, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAcousticTextureSetComponent, 0x020C);
		}

		// class AAkAmbientSound : public AActor
		TEST_METHOD(Class__AkAudio__AkAmbientSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAmbientSound, AkAudioEvent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAmbientSound, AkComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAmbientSound, StopWhenOwnerIsDestroyed, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAmbientSound, AutoPost, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAmbientSound, UnknownData_BZ3L, 0x023A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAkAmbientSound, 0x0268);
		}

		// class UAkAndroidInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkAndroidInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAndroidInitializationSettings, UnknownData_J7QR, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAndroidInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAndroidInitializationSettings, CommunicationSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAndroidInitializationSettings, AdvancedSettings, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAndroidInitializationSettings, 0x00F8);
		}

		// class UAkPlatformInfo : public UObject
		TEST_METHOD(Class__AkAudio__AkPlatformInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPlatformInfo, UnknownData_M7K7, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkPlatformInfo, 0x0070);
		}

		// class UAkAndroidPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkAndroidPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAndroidPlatformInfo, 0x0070);
		}

		// class UAkAssetData : public UObject
		TEST_METHOD(Class__AkAudio__AkAssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetData, CachedHash, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetData, UnknownData_JZNJ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAssetData, 0x0068);
		}

		// class UAkAssetDataWithMedia : public UAkAssetData
		TEST_METHOD(Class__AkAudio__AkAssetDataWithMedia)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataWithMedia, MediaList, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAssetDataWithMedia, 0x0078);
		}

		// class UAkAssetPlatformData : public UObject
		TEST_METHOD(Class__AkAudio__AkAssetPlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetPlatformData, CurrentAssetData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAssetPlatformData, 0x0030);
		}

		// class UAkAssetBase : public UAkAudioType
		TEST_METHOD(Class__AkAudio__AkAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetBase, PlatformAssetData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetBase, UnknownData_76LO, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAssetBase, 0x0050);
		}

		// class UAkAudioBank : public UAkAssetBase
		TEST_METHOD(Class__AkAudio__AkAudioBank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioBank, AutoLoad, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioBank, UnknownData_QNQX, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioBank, LocalizedPlatformAssetDataMap, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioBank, LinkedAkEvents, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioBank, CurrentLocalizedPlatformAssetData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioBank, UnknownData_OUJQ, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAudioBank, 0x0128);
		}

		// class UAkAssetDataSwitchContainerData : public UObject
		TEST_METHOD(Class__AkAudio__AkAssetDataSwitchContainerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataSwitchContainerData, GroupValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataSwitchContainerData, DefaultGroupValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataSwitchContainerData, MediaList, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataSwitchContainerData, Children, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAssetDataSwitchContainerData, 0x0078);
		}

		// class UAkAssetDataSwitchContainer : public UAkAssetDataWithMedia
		TEST_METHOD(Class__AkAudio__AkAssetDataSwitchContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataSwitchContainer, SwitchContainers, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataSwitchContainer, DefaultGroupValue, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAssetDataSwitchContainer, 0x0090);
		}

		// class UAkAudioEventData : public UAkAssetDataSwitchContainer
		TEST_METHOD(Class__AkAudio__AkAudioEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, MaxAttenuationRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, IsInfinite, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, UnknownData_SPW4, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, MinimumDuration, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, MaximumDuration, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, LocalizedMedia, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, PostedEvents, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, UserDefinedSends, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, PostedTriggers, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, GroupValues, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, UnknownData_SX6A, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAudioEventData, 0x0258);
		}

		// class UAkAudioEvent : public UAkAssetBase
		TEST_METHOD(Class__AkAudio__AkAudioEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, LocalizedPlatformAssetDataMap, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, RequiredBank, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, UnknownData_25VZ, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, CurrentLocalizedPlatformData, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, MaxAttenuationRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, IsInfinite, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, UnknownData_EYCD, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, MinimumDuration, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, MaximumDuration, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, UnknownData_5N9F, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAudioEvent, 0x00E0);
		}

		// class UAkGameObject : public USceneComponent
		TEST_METHOD(Class__AkAudio__AkGameObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGameObject, AkAudioEvent, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGameObject, EventName, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGameObject, UnknownData_Z3CS, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkGameObject, 0x0210);
		}

		// class UAkComponent : public UAkGameObject
		TEST_METHOD(Class__AkAudio__AkComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, bUseSpatialAudio, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_PDC5, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, OcclusionCollisionChannel, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_300L, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_4HWI, 0x021D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, OuterRadius, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, InnerRadius, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, EarlyReflectionAuxBus, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, EarlyReflectionAuxBusName, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, EarlyReflectionOrder, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, EarlyReflectionBusSendGain, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, EarlyReflectionMaxPathLength, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, roomReverbAuxBusGain, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, diffractionMaxEdges, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, diffractionMaxPaths, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, diffractionMaxPathLength, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_3RB6, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, StopWhenOwnerDestroyed, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_J4W0, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, AttenuationScalingFactor, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, OcclusionRefreshInterval, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, bUseReverbVolumes, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_AJEZ, 0x026D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkComponent, 0x03E0);
		}

		// class UAkAudioInputComponent : public UAkComponent
		TEST_METHOD(Class__AkAudio__AkAudioInputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioInputComponent, UnknownData_EZSN, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAudioInputComponent, 0x0410);
		}

		// class UAkAuxBus : public UAkAssetBase
		TEST_METHOD(Class__AkAudio__AkAuxBus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAuxBus, RequiredBank, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAuxBus, 0x0058);
		}

		// class UAkCheckBox : public UContentWidget
		TEST_METHOD(Class__AkAudio__AkCheckBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, UnknownData_P1F8, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, CheckedState, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, UnknownData_4JAY, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, CheckedStateDelegate, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, UnknownData_UFNJ, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, WidgetStyle, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, HorizontalAlignment, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, IsFocusable, 0x0A49);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, UnknownData_XCV4, 0x0A4A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, ThePropertyToControl, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, ItemToControl, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, AkOnCheckStateChanged, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, OnItemDropped, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, OnPropertyDropped, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, UnknownData_1XVB, 0x0AD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkCheckBox, 0x0B20);
		}

		// class UDrawPortalComponent : public UPrimitiveComponent
		TEST_METHOD(Class__AkAudio__DrawPortalComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPortalComponent, 0x03F0);
		}

		// class UDrawRoomComponent : public UPrimitiveComponent
		TEST_METHOD(Class__AkAudio__DrawRoomComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawRoomComponent, 0x03F0);
		}

		// class UAkFolder : public UAkAudioType
		TEST_METHOD(Class__AkAudio__AkFolder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkFolder, UnrealFolderPath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkFolder, WwiseFolderPath, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkFolder, UnknownData_PFTC, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkFolder, 0x00B8);
		}

		// class UAkGameplayStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkGameplayStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkGameplayStatics, 0x0028);
		}

		// class UAkCallbackInfo : public UObject
		TEST_METHOD(Class__AkAudio__AkCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCallbackInfo, AkComponent, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkCallbackInfo, 0x0030);
		}

		// class UAkEventCallbackInfo : public UAkCallbackInfo
		TEST_METHOD(Class__AkAudio__AkEventCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkEventCallbackInfo, PlayingID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkEventCallbackInfo, EventID, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkEventCallbackInfo, 0x0038);
		}

		// class UAkMIDIEventCallbackInfo : public UAkEventCallbackInfo
		TEST_METHOD(Class__AkAudio__AkMIDIEventCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMIDIEventCallbackInfo, UnknownData_KA7N, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMIDIEventCallbackInfo, 0x0048);
		}

		// class UAkMarkerCallbackInfo : public UAkEventCallbackInfo
		TEST_METHOD(Class__AkAudio__AkMarkerCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMarkerCallbackInfo, Identifier, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMarkerCallbackInfo, Position, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMarkerCallbackInfo, Label, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMarkerCallbackInfo, 0x0050);
		}

		// class UAkDurationCallbackInfo : public UAkEventCallbackInfo
		TEST_METHOD(Class__AkAudio__AkDurationCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, Duration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, EstimatedDuration, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, AudioNodeID, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, MediaID, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, bStreaming, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, UnknownData_NY0Y, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkDurationCallbackInfo, 0x0050);
		}

		// class UAkMusicSyncCallbackInfo : public UAkCallbackInfo
		TEST_METHOD(Class__AkAudio__AkMusicSyncCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMusicSyncCallbackInfo, PlayingID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMusicSyncCallbackInfo, SegmentInfo, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMusicSyncCallbackInfo, MusicSyncType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMusicSyncCallbackInfo, UnknownData_6U7P, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMusicSyncCallbackInfo, UserCueName, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMusicSyncCallbackInfo, 0x0070);
		}

		// class UAkGeometryComponent : public UAkAcousticTextureSetComponent
		TEST_METHOD(Class__AkAudio__AkGeometryComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, LOD, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, WeldingThreshold, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, UnknownData_EDD1, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, StaticMeshSurfaceOverride, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, CollisionMeshSurfaceOverride, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, UnknownData_29P1, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, AssociatedRoom, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, UnknownData_WEGI, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, GeometryData, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, SurfaceAreas, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, UnknownData_UJO1, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkGeometryComponent, 0x0390);
		}

		// class UAkGroupValue : public UAkAudioType
		TEST_METHOD(Class__AkAudio__AkGroupValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGroupValue, MediaDependencies, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGroupValue, GroupShortID, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGroupValue, UnknownData_4M1R, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkGroupValue, 0x0068);
		}

		// class UAkHololensInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkHololensInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkHololensInitializationSettings, UnknownData_P4L9, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkHololensInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkHololensInitializationSettings, CommunicationSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkHololensInitializationSettings, AdvancedSettings, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkHololensInitializationSettings, UnknownData_F6ST, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkHololensInitializationSettings, 0x00F8);
		}

		// class UAkHololensPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkHololensPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkHololensPlatformInfo, 0x0070);
		}

		// class UAkInitBankAssetData : public UAkAssetDataWithMedia
		TEST_METHOD(Class__AkAudio__AkInitBankAssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkInitBankAssetData, PluginInfos, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkInitBankAssetData, 0x0088);
		}

		// class UAkInitBank : public UAkAssetBase
		TEST_METHOD(Class__AkAudio__AkInitBank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkInitBank, AvailableAudioCultures, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkInitBank, DefaultLanguage, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkInitBank, 0x0070);
		}

		// class UAkIOSInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkIOSInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkIOSInitializationSettings, UnknownData_G292, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkIOSInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkIOSInitializationSettings, AudioSession, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkIOSInitializationSettings, UnknownData_FZUV, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkIOSInitializationSettings, CommunicationSettings, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkIOSInitializationSettings, AdvancedSettings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkIOSInitializationSettings, UnknownData_0CKF, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkIOSInitializationSettings, 0x0100);
		}

		// class UAkIOSPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkIOSPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkIOSPlatformInfo, 0x0070);
		}

		// class UAkItemBoolPropertiesConv : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkItemBoolPropertiesConv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkItemBoolPropertiesConv, 0x0028);
		}

		// class UAkItemBoolProperties : public UWidget
		TEST_METHOD(Class__AkAudio__AkItemBoolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemBoolProperties, OnSelectionChanged, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemBoolProperties, OnPropertyDragged, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemBoolProperties, UnknownData_4RX8, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkItemBoolProperties, 0x0148);
		}

		// class UAkItemPropertiesConv : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkItemPropertiesConv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkItemPropertiesConv, 0x0028);
		}

		// class UAkItemProperties : public UWidget
		TEST_METHOD(Class__AkAudio__AkItemProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemProperties, OnSelectionChanged, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemProperties, OnPropertyDragged, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemProperties, UnknownData_6129, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkItemProperties, 0x0148);
		}

		// class UAkLateReverbComponent : public USceneComponent
		TEST_METHOD(Class__AkAudio__AkLateReverbComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, UnknownData_YHZ4, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, SendLevel, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, FadeRate, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, Priority, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, AutoAssignAuxBus, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, UnknownData_QE4P, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, AuxBus, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, AuxBusName, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, UnknownData_HJSG, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, AuxBusManual, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, UnknownData_HZQH, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkLateReverbComponent, 0x0280);
		}

		// class UAkLinuxInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkLinuxInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLinuxInitializationSettings, UnknownData_V781, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLinuxInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLinuxInitializationSettings, CommunicationSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLinuxInitializationSettings, AdvancedSettings, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkLinuxInitializationSettings, 0x00F0);
		}

		// class UAkLinuxPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkLinuxPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkLinuxPlatformInfo, 0x0070);
		}

		// class UAkMacInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkMacInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMacInitializationSettings, UnknownData_H9YB, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMacInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMacInitializationSettings, CommunicationSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMacInitializationSettings, AdvancedSettings, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMacInitializationSettings, 0x00F0);
		}

		// class UAkMacPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkMacPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMacPlatformInfo, 0x0070);
		}

		// class UAkMediaAssetData : public UObject
		TEST_METHOD(Class__AkAudio__AkMediaAssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAssetData, IsStreamed, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAssetData, UseDeviceMemory, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAssetData, UnknownData_PNCB, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMediaAssetData, 0x0060);
		}

		// class UAkMediaAsset : public UObject
		TEST_METHOD(Class__AkAudio__AkMediaAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAsset, ID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAsset, AutoLoad, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAsset, UnknownData_BZMN, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAsset, UserData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAsset, CurrentMediaAssetData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAsset, UnknownData_KODJ, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMediaAsset, 0x0058);
		}

		// class UAkLocalizedMediaAsset : public UAkMediaAsset
		TEST_METHOD(Class__AkAudio__AkLocalizedMediaAsset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkLocalizedMediaAsset, 0x0058);
		}

		// class UAkExternalMediaAsset : public UAkMediaAsset
		TEST_METHOD(Class__AkAudio__AkExternalMediaAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkExternalMediaAsset, UnknownData_W3Q7, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkExternalMediaAsset, 0x00B8);
		}

		// class UAkPlatformInitialisationSettingsBase : public UInterface
		TEST_METHOD(Class__AkAudio__AkPlatformInitialisationSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkPlatformInitialisationSettingsBase, 0x0028);
		}

		// class UAkPS4InitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkPS4InitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPS4InitializationSettings, UnknownData_NQTC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPS4InitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPS4InitializationSettings, CommunicationSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPS4InitializationSettings, AdvancedSettings, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkPS4InitializationSettings, 0x00F0);
		}

		// class UAkPS4PlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkPS4PlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkPS4PlatformInfo, 0x0070);
		}

		// class UAkPS5InitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkPS5InitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPS5InitializationSettings, UnknownData_XF8A, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPS5InitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPS5InitializationSettings, CommunicationSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPS5InitializationSettings, AdvancedSettings, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPS5InitializationSettings, UnknownData_VYY1, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkPS5InitializationSettings, 0x00F0);
		}

		// class UAkDPXInitializationSettings : public UAkPS5InitializationSettings
		TEST_METHOD(Class__AkAudio__AkDPXInitializationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkDPXInitializationSettings, 0x00F0);
		}

		// class UAkPS5PlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkPS5PlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkPS5PlatformInfo, 0x0070);
		}

		// class AAkReverbVolume : public AVolume
		TEST_METHOD(Class__AkAudio__AkReverbVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, UnknownData_R5Y5, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, AuxBus, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, AuxBusName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, SendLevel, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, FadeRate, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, Priority, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, UnknownData_L30B, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, LateReverbComponent, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAkReverbVolume, 0x0298);
		}

		// class UAkRoomComponent : public UAkGameObject
		TEST_METHOD(Class__AkAudio__AkRoomComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, UnknownData_S31O, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, bDynamic, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, UnknownData_N5Y9, 0x0215);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, Priority, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, WallOcclusion, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, AuxSendLevel, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, AutoPost, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, UnknownData_J26Q, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, GeometryComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, UnknownData_LNCI, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkRoomComponent, 0x0240);
		}

		// class UAkRtpc : public UAkAudioType
		TEST_METHOD(Class__AkAudio__AkRtpc)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkRtpc, 0x0040);
		}

		// class UAkSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, MaxSimultaneousReverbVolumes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UnknownData_0SAH, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, WwiseProjectPath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, WwiseSoundDataFolder, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, bAutoConnectToWAAPI, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, DefaultOcclusionCollisionChannel, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, DefaultFitToGeometryCollisionChannel, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UnknownData_F858, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, AkGeometryMap, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, GlobalDecayAbsorption, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UnknownData_OSBW, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, DefaultReverbAuxBus, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, EnvironmentDecayAuxBusMap, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, HFDampingName, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, DecayEstimateName, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, TimeToFirstReflectionName, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, HFDampingRTPC, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, DecayEstimateRTPC, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, TimeToFirstReflectionRTPC, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, AudioInputEvent, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, AcousticTextureParamsMap, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, SplitSwitchContainerMedia, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, SplitMediaPerFolder, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UseEventBasedPackaging, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, EnableAutomaticAssetSynchronization, 0x024B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UnknownData_Q3I9, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, CommandletCommitMessage, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UnrealCultureToWwiseCulture, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, AskedToUseNewAssetManagement, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, bEnableMultiCoreRendering, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, MigratedEnableMultiCoreRendering, 0x02B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, FixupRedirectorsDuringMigration, 0x02B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UnknownData_5MI2, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, WwiseWindowsInstallationPath, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, WwiseMacInstallationPath, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UnknownData_TIWS, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSettings, 0x02E0);
		}

		// class UAkSettingsPerUser : public UObject
		TEST_METHOD(Class__AkAudio__AkSettingsPerUser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, WwiseWindowsInstallationPath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, WwiseMacInstallationPath, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, EnableAutomaticAssetSynchronization, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, UnknownData_T68R, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, WaapiIPAddress, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, WaapiPort, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, bAutoConnectToWAAPI, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, AutoSyncSelection, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, SuppressWwiseProjectPathWarnings, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, SoundDataGenerationSkipLanguage, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, UnknownData_AHFC, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSettingsPerUser, 0x0080);
		}

		// class UAkSlider : public UWidget
		TEST_METHOD(Class__AkAudio__AkSlider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, ValueDelegate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, UnknownData_2XSH, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, Orientation, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, UnknownData_CHQC, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, SliderBarColor, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, SliderHandleColor, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, IndentHandle, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, Locked, 0x0485);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, UnknownData_9V9O, 0x0486);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, StepSize, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, IsFocusable, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, UnknownData_AT4T, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, ThePropertyToControl, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, ItemToControl, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, OnValueChanged, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, OnItemDropped, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, OnPropertyDropped, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, UnknownData_YCLG, 0x0510);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSlider, 0x0530);
		}

		// class AAkSpatialAudioVolume : public AVolume
		TEST_METHOD(Class__AkAudio__AkSpatialAudioVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpatialAudioVolume, SurfaceReflectorSet, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpatialAudioVolume, LateReverb, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpatialAudioVolume, Room, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAkSpatialAudioVolume, 0x0278);
		}

		// class AAkSpotReflector : public AActor
		TEST_METHOD(Class__AkAudio__AkSpotReflector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpotReflector, EarlyReflectionAuxBus, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpotReflector, EarlyReflectionAuxBusName, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpotReflector, AcousticTexture, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpotReflector, DistanceScalingFactor, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpotReflector, Level, 0x024C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAkSpotReflector, 0x0250);
		}

		// class UAkStateValue : public UAkGroupValue
		TEST_METHOD(Class__AkAudio__AkStateValue)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkStateValue, 0x0068);
		}

		// class UAkSubmixInputComponent : public UAkAudioInputComponent
		TEST_METHOD(Class__AkAudio__AkSubmixInputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSubmixInputComponent, SubmixToRecord, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSubmixInputComponent, UnknownData_4FCG, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSubmixInputComponent, 0x0460);
		}

		// class UAkSurfaceReflectorSetComponent : public UAkAcousticTextureSetComponent
		TEST_METHOD(Class__AkAudio__AkSurfaceReflectorSetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSurfaceReflectorSetComponent, UnknownData_V6AI, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSurfaceReflectorSetComponent, AcousticPolys, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSurfaceReflectorSetComponent, UnknownData_I95J, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSurfaceReflectorSetComponent, AssociatedRoom, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSurfaceReflectorSetComponent, UnknownData_C4BJ, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSurfaceReflectorSetComponent, 0x0240);
		}

		// class UAkSwitchInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkSwitchInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSwitchInitializationSettings, UnknownData_SD4F, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSwitchInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSwitchInitializationSettings, CommunicationSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSwitchInitializationSettings, AdvancedSettings, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSwitchInitializationSettings, 0x00F0);
		}

		// class UAkSwitchPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkSwitchPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSwitchPlatformInfo, 0x0070);
		}

		// class UAkSwitchValue : public UAkGroupValue
		TEST_METHOD(Class__AkAudio__AkSwitchValue)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSwitchValue, 0x0068);
		}

		// class UAkTrigger : public UAkAudioType
		TEST_METHOD(Class__AkAudio__AkTrigger)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkTrigger, 0x0040);
		}

		// class UAkTVOSInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkTVOSInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkTVOSInitializationSettings, UnknownData_JS5B, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkTVOSInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkTVOSInitializationSettings, AudioSession, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkTVOSInitializationSettings, UnknownData_39CK, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkTVOSInitializationSettings, CommunicationSettings, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkTVOSInitializationSettings, AdvancedSettings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkTVOSInitializationSettings, UnknownData_LU18, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkTVOSInitializationSettings, 0x0100);
		}

		// class UAkTVOSPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkTVOSPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkTVOSPlatformInfo, 0x0070);
		}

		// class UAkWaapiCalls : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkWaapiCalls)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWaapiCalls, 0x0028);
		}

		// class USAkWaapiFieldNamesConv : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__SAkWaapiFieldNamesConv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USAkWaapiFieldNamesConv, 0x0028);
		}

		// class UAkWaapiJsonManager : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkWaapiJsonManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWaapiJsonManager, 0x0028);
		}

		// class UAkWaapiUriConv : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkWaapiUriConv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWaapiUriConv, 0x0028);
		}

		// class UAkWindowsInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkWindowsInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWindowsInitializationSettings, UnknownData_OAJI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWindowsInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWindowsInitializationSettings, CommunicationSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWindowsInitializationSettings, AdvancedSettings, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWindowsInitializationSettings, 0x00F8);
		}

		// class UAkWin32PlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkWin32PlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWin32PlatformInfo, 0x0070);
		}

		// class UAkWin64PlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkWin64PlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWin64PlatformInfo, 0x0070);
		}

		// class UAkWindowsPlatformInfo : public UAkWin64PlatformInfo
		TEST_METHOD(Class__AkAudio__AkWindowsPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWindowsPlatformInfo, 0x0070);
		}

		// class UAkWinGDKInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkWinGDKInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWinGDKInitializationSettings, UnknownData_Q050, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWinGDKInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWinGDKInitializationSettings, CommunicationSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWinGDKInitializationSettings, AdvancedSettings, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWinGDKInitializationSettings, UnknownData_38S3, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWinGDKInitializationSettings, 0x00F8);
		}

		// class UAkWinAnvilInitializationSettings : public UAkWinGDKInitializationSettings
		TEST_METHOD(Class__AkAudio__AkWinAnvilInitializationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWinAnvilInitializationSettings, 0x00F8);
		}

		// class UAkWinGDKPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkWinGDKPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWinGDKPlatformInfo, 0x0070);
		}

		// class UAkWinAnvilPlatformInfo : public UAkWinGDKPlatformInfo
		TEST_METHOD(Class__AkAudio__AkWinAnvilPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWinAnvilPlatformInfo, 0x0070);
		}

		// class UAkWwiseTree : public UWidget
		TEST_METHOD(Class__AkAudio__AkWwiseTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTree, OnSelectionChanged, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTree, OnItemDragged, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTree, UnknownData_GEV9, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWwiseTree, 0x0148);
		}

		// class UAkWwiseTreeSelector : public UWidget
		TEST_METHOD(Class__AkAudio__AkWwiseTreeSelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTreeSelector, OnSelectionChanged, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTreeSelector, OnItemDragged, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTreeSelector, UnknownData_K44K, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWwiseTreeSelector, 0x0168);
		}

		// class UAkXboxOneGDKInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkXboxOneGDKInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneGDKInitializationSettings, UnknownData_JG0Y, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneGDKInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneGDKInitializationSettings, ApuHeapSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneGDKInitializationSettings, CommunicationSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneGDKInitializationSettings, AdvancedSettings, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneGDKInitializationSettings, UnknownData_IIGX, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXboxOneGDKInitializationSettings, 0x00F8);
		}

		// class UAkXboxOneAnvilInitializationSettings : public UAkXboxOneGDKInitializationSettings
		TEST_METHOD(Class__AkAudio__AkXboxOneAnvilInitializationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXboxOneAnvilInitializationSettings, 0x00F8);
		}

		// class UAkXboxOneGDKPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkXboxOneGDKPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXboxOneGDKPlatformInfo, 0x0070);
		}

		// class UAkXboxOneAnvilPlatformInfo : public UAkXboxOneGDKPlatformInfo
		TEST_METHOD(Class__AkAudio__AkXboxOneAnvilPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXboxOneAnvilPlatformInfo, 0x0070);
		}

		// class UAkXboxOneInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkXboxOneInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneInitializationSettings, UnknownData_YZQ0, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneInitializationSettings, ApuHeapSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneInitializationSettings, CommunicationSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneInitializationSettings, AdvancedSettings, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneInitializationSettings, UnknownData_XWAO, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXboxOneInitializationSettings, 0x00F8);
		}

		// class UAkXboxOnePlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkXboxOnePlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXboxOnePlatformInfo, 0x0070);
		}

		// class UAkXSXInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkXSXInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXSXInitializationSettings, UnknownData_W5BO, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXSXInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXSXInitializationSettings, ApuHeapSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXSXInitializationSettings, CommunicationSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXSXInitializationSettings, AdvancedSettings, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXSXInitializationSettings, 0x00F8);
		}

		// class UAkMPXInitializationSettings : public UAkXSXInitializationSettings
		TEST_METHOD(Class__AkAudio__AkMPXInitializationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMPXInitializationSettings, 0x00F8);
		}

		// class UAkXSXPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkXSXPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXSXPlatformInfo, 0x0070);
		}

		// class UInterpTrackAkAudioEvent : public UInterpTrackVectorBase
		TEST_METHOD(Class__AkAudio__InterpTrackAkAudioEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAkAudioEvent, Events, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAkAudioEvent, UnknownData_QTO6, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAkAudioEvent, 0x00A8);
		}

		// class UInterpTrackAkAudioRTPC : public UInterpTrackFloatBase
		TEST_METHOD(Class__AkAudio__InterpTrackAkAudioRTPC)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAkAudioRTPC, Param, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAkAudioRTPC, UnknownData_78W1, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAkAudioRTPC, 0x00A8);
		}

		// class UInterpTrackInstAkAudioEvent : public UInterpTrackInst
		TEST_METHOD(Class__AkAudio__InterpTrackInstAkAudioEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAkAudioEvent, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAkAudioEvent, UnknownData_AOR2, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAkAudioEvent, 0x0030);
		}

		// class UInterpTrackInstAkAudioRTPC : public UInterpTrackInst
		TEST_METHOD(Class__AkAudio__InterpTrackInstAkAudioRTPC)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAkAudioRTPC, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAkAudioRTPC, UnknownData_0APE, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAkAudioRTPC, 0x0030);
		}

		// class UMovieSceneAkAudioEventSection : public UMovieSceneSection
		TEST_METHOD(Class__AkAudio__MovieSceneAkAudioEventSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_9Q07, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, Event, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, RetriggerEvent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_TS5K, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, ScrubTailLengthMs, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, StopAtSectionEnd, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_4QYY, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, EventName, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_IV29, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, MaxSourceDuration, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_PYA5, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, MaxDurationSourceID, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_YIJS, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAkAudioEventSection, 0x01C8);
		}

		// class UMovieSceneAkTrack : public UMovieSceneTrack
		TEST_METHOD(Class__AkAudio__MovieSceneAkTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkTrack, Sections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkTrack, UnknownData_DO3J, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAkTrack, 0x0070);
		}

		// class UMovieSceneAkAudioEventTrack : public UMovieSceneAkTrack
		TEST_METHOD(Class__AkAudio__MovieSceneAkAudioEventTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAkAudioEventTrack, 0x0070);
		}

		// class UMovieSceneAkAudioRTPCSection : public UMovieSceneSection
		TEST_METHOD(Class__AkAudio__MovieSceneAkAudioRTPCSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioRTPCSection, RTPC, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioRTPCSection, Name, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioRTPCSection, FloatCurve, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioRTPCSection, FloatChannelSerializationHelper, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioRTPCSection, RTPCChannel, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAkAudioRTPCSection, 0x0248);
		}

		// class UMovieSceneAkAudioRTPCTrack : public UMovieSceneAkTrack
		TEST_METHOD(Class__AkAudio__MovieSceneAkAudioRTPCTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAkAudioRTPCTrack, 0x0070);
		}

		// class UPostEventAsync : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__AkAudio__PostEventAsync)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostEventAsync, Completed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostEventAsync, UnknownData_BQSR, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostEventAsync, 0x00A0);
		}

		// class UPostEventAtLocationAsync : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__AkAudio__PostEventAtLocationAsync)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostEventAtLocationAsync, Completed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostEventAtLocationAsync, UnknownData_XNQG, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostEventAtLocationAsync, 0x0080);
		}

		// class UFoliageInstancedStaticMeshComponent : public UHierarchicalInstancedStaticMeshComponent
		TEST_METHOD(Class__Foliage__FoliageInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakePointDamage, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakeRadialDamage, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, GenerationGuid, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, UnknownData_ORTJ, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageInstancedStaticMeshComponent, 0x0650);
		}

		// class UFoliageStatistics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Foliage__FoliageStatistics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageStatistics, 0x0028);
		}

		// class UFoliageType : public UObject
		TEST_METHOD(Class__Foliage__FoliageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UpdateGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Density, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DensityAdjustmentFactor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Radius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSingleInstanceModeOverrideRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_N072, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SingleInstanceModeRadius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Scaling, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_89XH, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleZ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskByChannel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMask, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_YNOY, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskThreshold, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_MST1, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ZOffset, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_OG7X, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AlignMaxAngle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_E4HL, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RandomPitchAngle, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, GroundSlopeAngle, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Height, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_3TZY, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayers, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumLayerWeight, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_5JAJ, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ExclusionLandscapeLayers, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumExclusionLayerWeight, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayer, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_UFVR, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MeshBounds, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LowBoundOriginRadius, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Mobility, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_54WV, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CullDistance, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_ZNFW, 0x014A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverriddenLightMapRes, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightmapType, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_J1PH, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_NZDF, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, BodyInstance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomNavigableGeometry, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightingChannels, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_Q3BW, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_OPXS, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomDepthStencilValue, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, TranslucencySortPriority, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionRadius, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ShadeRadius, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, NumSteps, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, InitialSeedDensity, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AverageSpreadDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SpreadVariance, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SeedsPerStep, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DistributionSeed, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialSeedOffset, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bCanGrowInShade, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSpawnsInShade, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_7P99, 0x029E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialAge, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxAge, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverlapPriority, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ProceduralScale, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_0VB4, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleCurve, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ChangeCount, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_1H6R, 0x0346);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RuntimeVirtualTextures, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VirtualTextureCullMips, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VirtualTextureRenderPassType, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_TFJD, 0x035D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType, 0x0360);
		}

		// class UFoliageType_Actor : public UFoliageType
		TEST_METHOD(Class__Foliage__FoliageType_Actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, ActorClass, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, bShouldAttachToBaseComponent, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, UnknownData_GDKU, 0x0369);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_Actor, 0x0370);
		}

		// class UFoliageType_InstancedStaticMesh : public UFoliageType
		TEST_METHOD(Class__Foliage__FoliageType_InstancedStaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, Mesh, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, OverrideMaterials, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, ComponentClass, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_InstancedStaticMesh, 0x0380);
		}

		// class AInstancedFoliageActor : public AActor
		TEST_METHOD(Class__Foliage__InstancedFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedFoliageActor, UnknownData_ZBPX, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInstancedFoliageActor, 0x0278);
		}

		// class AInteractiveFoliageActor : public AStaticMeshActor
		TEST_METHOD(Class__Foliage__InteractiveFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, CapsuleComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, TouchingActorEntryPosition, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageVelocity, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageForce, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliagePosition, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamageImpulseScale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageTouchImpulseScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffness, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffnessQuadratic, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamping, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxDamageImpulse, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxTouchImpulse, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxForce, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, Mass, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, UnknownData_9F49, 0x0294);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInteractiveFoliageActor, 0x0298);
		}

		// class UInteractiveFoliageComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Foliage__InteractiveFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageComponent, UnknownData_PU1C, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveFoliageComponent, 0x0490);
		}

		// class AProceduralFoliageBlockingVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageBlockingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageBlockingVolume, ProceduralFoliageVolume, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageBlockingVolume, 0x0268);
		}

		// class UProceduralFoliageComponent : public UActorComponent
		TEST_METHOD(Class__Foliage__ProceduralFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, FoliageSpawner, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, TileOverlap, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, UnknownData_VHC0, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, SpawningVolume, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, ProceduralGuid, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageComponent, 0x00D8);
		}

		// class UProceduralFoliageSpawner : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, RandomSeed, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, TileSize, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, NumUniqueTiles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, MinimumQuadTreeSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_48WP, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, FoliageTypes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_RHPV, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageSpawner, 0x0068);
		}

		// class UProceduralFoliageTile : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageTile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, FoliageSpawner, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_YJPB, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, InstancesArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_5EYA, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageTile, 0x0158);
		}

		// class AProceduralFoliageVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageVolume, ProceduralComponent, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageVolume, 0x0268);
		}

		// class AToAtriumTrigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__ToAtriumTrigger__ToAtriumTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AToAtriumTrigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AToAtriumTrigger_C, MissionStateCondition, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AToAtriumTrigger_C, LineSkipper, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AToAtriumTrigger_C, 0x02B0);
		}

		// class UFindClosestSplinePoint_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FindClosestSplinePoint__FindClosestSplinePoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindClosestSplinePoint_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindClosestSplinePoint_C, SplineManagerBB, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindClosestSplinePoint_C, LocationOnSplineBB, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindClosestSplinePoint_C, 0x0100);
		}

		// class UThirdPerson_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__ThirdPerson_AnimBP__ThirdPerson_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThirdPerson_AnimBP_C, UnknownData_9ZNI, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThirdPerson_AnimBP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThirdPerson_AnimBP_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThirdPerson_AnimBP_C, AnimGraphNode_TransitionResult_4, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThirdPerson_AnimBP_C, AnimGraphNode_TransitionResult_3, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThirdPerson_AnimBP_C, AnimGraphNode_TransitionResult_2, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThirdPerson_AnimBP_C, AnimGraphNode_TransitionResult, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThirdPerson_AnimBP_C, AnimGraphNode_SequencePlayer_3, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThirdPerson_AnimBP_C, AnimGraphNode_StateResult_4, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThirdPerson_AnimBP_C, AnimGraphNode_SequencePlayer_2, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThirdPerson_AnimBP_C, AnimGraphNode_StateResult_3, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThirdPerson_AnimBP_C, AnimGraphNode_SequencePlayer, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThirdPerson_AnimBP_C, AnimGraphNode_StateResult_2, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThirdPerson_AnimBP_C, AnimGraphNode_BlendSpacePlayer, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThirdPerson_AnimBP_C, AnimGraphNode_StateResult, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThirdPerson_AnimBP_C, AnimGraphNode_StateMachine, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThirdPerson_AnimBP_C, IsInAir_, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThirdPerson_AnimBP_C, UnknownData_L3JS, 0x0701);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThirdPerson_AnimBP_C, Speed, 0x0704);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThirdPerson_AnimBP_C, 0x0708);
		}

		// class UMagicLeapControllerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapController__MagicLeapControllerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapControllerFunctionLibrary, 0x0028);
		}

		// class UMagicLeapTouchpadGesturesComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeapController__MagicLeapTouchpadGesturesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, UnknownData_F1WL, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, OnTouchpadGestureStart, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, OnTouchpadGestureContinue, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, OnTouchpadGestureEnd, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, UnknownData_BKPI, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapTouchpadGesturesComponent, 0x0140);
		}

		// class AMainGameStartupSequence_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__MainGameStartupSequence__MainGameStartupSequence_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameStartupSequence_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameStartupSequence_C, EscapeDaycare, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameStartupSequence_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameStartupSequence_C, FreddyStartGameLocation, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameStartupSequence_C, FreeFreddyMissionName, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameStartupSequence_C, GetOutMissionName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameStartupSequence_C, GameMode, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameStartupSequence_C, StartupMission, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameStartupSequence_C, IsNormalPlay, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameStartupSequence_C, UnknownData_RTZB, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameStartupSequence_C, WorldEntrance, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameStartupSequence_C, GregoryPawn, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameStartupSequence_C, FreddySurvivalStart, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameStartupSequence_C, GregorySurvivalStart, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameStartupSequence_C, SurvivalStartupMission, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameStartupSequence_C, GregoryStartGameLocation, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameStartupSequence_C, FreddyBootUp, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameStartupSequence_C, CinematicPlayer, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainGameStartupSequence_C, WasInFreddy, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMainGameStartupSequence_C, 0x03C9);
		}

		// class AFreddyEnterExitPawn_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__FreddyEnterExitPawn__FreddyEnterExitPawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyEnterExitPawn_C, UberGraphFrame, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyEnterExitPawn_C, Camera, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyEnterExitPawn_C, DefaultSceneRoot, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFreddyEnterExitPawn_C, 0x02A0);
		}

		// class UWaitForStunFinished_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__WaitForStunFinished__WaitForStunFinished_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaitForStunFinished_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWaitForStunFinished_C, 0x00B0);
		}

		// class ABP_WwiseStateTrigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__BP_WwiseStateTrigger__BP_WwiseStateTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_WwiseStateTrigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_WwiseStateTrigger_C, StateGroup, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_WwiseStateTrigger_C, State, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_WwiseStateTrigger_C, 0x0290);
		}

		// class USetString_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__SetString__SetString_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetString_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetString_C, BBString, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetString_C, Value, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetString_C, 0x00E8);
		}

		// class UWorker_SetState_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__Worker_SetState__Worker_SetState_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_SetState_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_SetState_C, State, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_SetState_C, StaffBotWorkerState, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorker_SetState_C, 0x00D9);
		}

		// class ABasicButton_C : public AButtonBase_C
		TEST_METHOD(BlueprintGeneratedClass__BasicButton__BasicButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasicButton_C, UberGraphFrame, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasicButton_C, Button_Mesh, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasicButton_C, Color, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasicButton_C, Slanted, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasicButton_C, SFXInitialized, 0x02ED);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABasicButton_C, 0x02EE);
		}

		// class AVanny_C : public AAISeeker_C
		TEST_METHOD(BlueprintGeneratedClass__Vanny__Vanny_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanny_C, UnknownData_2138, 0x07F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanny_C, UberGraphFrame, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanny_C, VannyDistortionActor, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanny_C, MaxDistanceForFX, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanny_C, UnknownData_TVV6, 0x080C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanny_C, EncounterCurve, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanny_C, AngleForLookAtDetection, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanny_C, RunCounter, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanny_C, AmountOfTimeBeforeRunning, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanny_C, EncounterMusicPlaying, 0x0824);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVanny_C, 0x0825);
		}

		// class UCameraOverrideComponent_C : public USceneComponent
		TEST_METHOD(BlueprintGeneratedClass__CameraOverrideComponent__CameraOverrideComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraOverrideComponent_C, UberGraphFrame, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraOverrideComponent_C, PreviousPawn, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraOverrideComponent_C, TargetActor, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraOverrideComponent_C, LookAtTime, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraOverrideComponent_C, UseTime, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraOverrideComponent_C, UnknownData_3GNN, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraOverrideComponent_C, PlayerCameraOverride, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraOverrideComponent_C, Sound, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraOverrideComponent_C, Hide_Previous_Pawn, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraOverrideComponent_C, Running, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraOverrideComponent_C, PossesGregoryOnEnd, 0x0242);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraOverrideComponent_C, 0x0243);
		}

		// class AMontyBossManager_C : public AMGM_OfficeGameManger_C
		TEST_METHOD(BlueprintGeneratedClass__MontyBossManager__MontyBossManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, UnknownData_A0BD, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, UberGraphFrame, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, TimeCheckComponent, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, IntroSequence, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, GameTypeCheckDestroy, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, Box, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, BossBeatenState, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, IntroLandings, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, PlatformArrivalZ, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, UnknownData_M9X2, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, MontySpawnLocation, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, Monty, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, MontyBallBucket, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, MoveToTrigger, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, BallCannons, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, EndGameTeleportationDestination, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, DeadState, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, UnknownData_5QBW, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, NumberOfTargets, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, TargetHit, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, P_LevelSwapLoad, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, Platform, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, Dump_Button, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, NumberGunsBroken, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, MaxGunsBroken, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, StartGameTeleportationDestination, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, RefTORideSpline, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, First_cannon, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, Gate, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, ShatteredMontySpawn, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, Mission_Name, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, UseRenderedCutscene, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, UnknownData_J1UP, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, Map_After, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, Map_Before, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossManager_C, P_LevelSwapUnload, 0x04C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMontyBossManager_C, 0x04CC);
		}

		// class UStaffbot_ABP_Security_C : public UStaffbot_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Staffbot_ABP_Security__Staffbot_ABP_Security_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_Security_C, UberGraphFrame, 0x2ED0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaffbot_ABP_Security_C, 0x2ED8);
		}

		// class ANavigationData : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_BH2Q, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RenderingComp, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, NavDataConfig, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_GK1T, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RuntimeGeneration, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_FZBZ, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, ObservedPathsTickInterval, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, DataVersion, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_3VLW, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, SupportedAreas, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_VSRG, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationData, 0x0408);
		}

		// class AAbstractNavData : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__AbstractNavData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAbstractNavData, 0x0408);
		}

		// class UCrowdManagerBase : public UObject
		TEST_METHOD(Class__NavigationSystem__CrowdManagerBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManagerBase, 0x0028);
		}

		// class UNavArea : public UNavAreaBase
		TEST_METHOD(Class__NavigationSystem__NavArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DefaultCost, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, FixedAreaEnteringCost, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, SupportedAgents, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, UnknownData_GASH, 0x0042);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea, 0x0048);
		}

		// class UNavArea_Default : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Default)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Default, 0x0048);
		}

		// class UNavArea_LowHeight : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_LowHeight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_LowHeight, 0x0048);
		}

		// class UNavArea_Null : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Null)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Null, 0x0048);
		}

		// class UNavArea_Obstacle : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Obstacle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Obstacle, 0x0048);
		}

		// class UNavAreaMeta : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta, 0x0048);
		}

		// class UNavAreaMeta_SwitchByAgent : public UNavAreaMeta
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta_SwitchByAgent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent0Area, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent1Area, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent2Area, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent3Area, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent4Area, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent5Area, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent6Area, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent7Area, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent8Area, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent9Area, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent10Area, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent11Area, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent12Area, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent13Area, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent14Area, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent15Area, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta_SwitchByAgent, 0x00C8);
		}

		// class UNavCollision : public UNavCollisionBase
		TEST_METHOD(Class__NavigationSystem__NavCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_WFAE, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, CylinderCollision, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, BoxCollision, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, AreaClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_YKDT, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollision, 0x00D8);
		}

		// class ANavigationGraph : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__NavigationGraph)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraph, 0x0408);
		}

		// class ANavigationGraphNode : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraphNode, 0x0228);
		}

		// class UNavigationGraphNodeComponent : public USceneComponent
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNodeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, Node, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, NextNodeComponent, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, PrevNodeComponent, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, UnknownData_CNXT, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationGraphNodeComponent, 0x0220);
		}

		// class UNavigationInvokerComponent : public UActorComponent
		TEST_METHOD(Class__NavigationSystem__NavigationInvokerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileGenerationRadius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileRemovalRadius, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationInvokerComponent, 0x00B8);
		}

		// class UNavigationPath : public UObject
		TEST_METHOD(Class__NavigationSystem__NavigationPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathUpdatedNotifier, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathPoints, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, RecalculateOnInvalidation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, UnknownData_XGA1, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPath, 0x0088);
		}

		// class UNavigationPathGenerator : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavigationPathGenerator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPathGenerator, 0x0028);
		}

		// class UNavigationQueryFilter : public UObject
		TEST_METHOD(Class__NavigationSystem__NavigationQueryFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, Areas, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, IncludeFlags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, ExcludeFlags, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, UnknownData_F18X, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationQueryFilter, 0x0048);
		}

		// class UNavigationSystemV1 : public UNavigationSystemBase
		TEST_METHOD(Class__NavigationSystem__NavigationSystemV1)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, MainNavData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, AbstractNavData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DefaultAgentName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, CrowdManagerClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_D0HU, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DataGatheringMode, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_91N5, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_IYAE, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, ActiveTilesUpdateInterval, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, SupportedAgents, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, SupportedAgentsMask, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_I8F5, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataSet, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataRegistrationQueue, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_LW16, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavDataRegisteredEvent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavigationGenerationFinishedDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_E2CA, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OperationMode, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_3X9X, 0x01BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DirtyAreasUpdateFreq, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_7Z1K, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemV1, 0x0538);
		}

		// class UNavigationSystemModuleConfig : public UNavigationSystemConfig
		TEST_METHOD(Class__NavigationSystem__NavigationSystemModuleConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemModuleConfig, UnknownData_14DF, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemModuleConfig, 0x0058);
		}

		// class ANavigationTestingActor : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationTestingActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_O4PM, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CapsuleComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, InvokerComponent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_SB3C, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, NavAgentProps, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, QueryingExtent, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_LYEY, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, MyNavData, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ProjectedLocation, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_YF0I, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CostLimitFactor, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, MinimumCostLimit, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_WC57, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CostDisplayMode, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_LJ0Q, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, TextCanvasOffset, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_MHAM, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingTime, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathCost, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingSteps, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OtherActor, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, FilterClass, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ShowStepIndex, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OffsetFromCornersDistance, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_YHD6, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationTestingActor, 0x0318);
		}

		// class UNavLinkComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, UnknownData_R15X, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, Links, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, UnknownData_JK2C, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkComponent, 0x0410);
		}

		// class UNavRelevantComponent : public UActorComponent
		TEST_METHOD(Class__NavigationSystem__NavRelevantComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_D8KR, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_MWXN, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, CachedNavParent, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantComponent, 0x00E0);
		}

		// class UNavLinkCustomComponent : public UNavRelevantComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_J3W4, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, NavLinkUserId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_HJ8N, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, EnabledAreaClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, DisabledAreaClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, SupportedAgents, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeStart, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeEnd, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkDirection, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_G8DM, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_PHYF, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleOffset, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleExtent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_Q947, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleAreaClass, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastRadius, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastInterval, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastChannel, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_N2F9, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomComponent, 0x0190);
		}

		// class UNavLinkCustomInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomInterface, 0x0028);
		}

		// class UNavLinkHostInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkHostInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkHostInterface, 0x0028);
		}

		// class UNavLinkRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkRenderingComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkRenderingComponent, 0x03F0);
		}

		// class UNavLinkTrivial : public UNavLinkDefinition
		TEST_METHOD(Class__NavigationSystem__NavLinkTrivial)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkTrivial, 0x0050);
		}

		// class ANavMeshBoundsVolume : public AVolume
		TEST_METHOD(Class__NavigationSystem__NavMeshBoundsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, SupportedAgents, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, UnknownData_804H, 0x0264);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavMeshBoundsVolume, 0x0268);
		}

		// class UNavMeshRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavMeshRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMeshRenderingComponent, UnknownData_FFG1, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMeshRenderingComponent, 0x0400);
		}

		// class UNavModifierComponent : public UNavRelevantComponent
		TEST_METHOD(Class__NavigationSystem__NavModifierComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, AreaClass, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, FailsafeExtent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, UnknownData_AZWP, 0x00F5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavModifierComponent, 0x0140);
		}

		// class ANavModifierVolume : public AVolume
		TEST_METHOD(Class__NavigationSystem__NavModifierVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, UnknownData_OMXH, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, AreaClass, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavModifierVolume, 0x0270);
		}

		// class UNavNodeInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavNodeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavNodeInterface, 0x0028);
		}

		// class ANavSystemConfigOverride : public AActor
		TEST_METHOD(Class__NavigationSystem__NavSystemConfigOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, NavigationSystemConfig, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, OverridePolicy, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, UnknownData_193R, 0x0232);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavSystemConfigOverride, 0x0238);
		}

		// class UNavTestRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavTestRenderingComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavTestRenderingComponent, 0x03F0);
		}

		// class URecastFilter_UseDefaultArea : public UNavigationQueryFilter
		TEST_METHOD(Class__NavigationSystem__RecastFilter_UseDefaultArea)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastFilter_UseDefaultArea, 0x0048);
		}

		// class ARecastNavMesh : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__RecastNavMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_4NVW, 0x040B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DrawOffset, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_6YJH, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TilePoolSize, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSizeUU, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellSize, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellHeight, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentRadius, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentHeight, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxHeight, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxSlope, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxStepHeight, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MinRegionArea, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MergeRegionSize, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimplificationError, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimultaneousTileGenerationJobsCount, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileNumberHardLimit, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefTileBits, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefNavPolyBits, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefSaltBits, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, NavMeshOriginOffset, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultDrawDistance, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxSearchNodes, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxHierarchicalSearchNodes, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionPartitioning, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerPartitioning, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_C3M0, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionChunkSplits, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerChunkSplits, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_FEZA, 0x047E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSetUpdateInterval, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, HeuristicScale, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, VerticalDeviationFromGroundCompensation, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_QCJ0, 0x048C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARecastNavMesh, 0x04C0);
		}

		// class URecastNavMeshDataChunk : public UNavigationDataChunk
		TEST_METHOD(Class__NavigationSystem__RecastNavMeshDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMeshDataChunk, UnknownData_4WBE, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastNavMeshDataChunk, 0x0040);
		}

		// class UWI_Option_Language_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_Option_Language__WI_Option_Language_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Option_Language_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Option_Language_C, HorizontalBox_Debug, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Option_Language_C, Language_BoxString, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Option_Language_C, Language_ComboBox, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Option_Language_C, Language_Text, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Option_Language_C, VerticalBox_Left, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Option_Language_C, VerticalBox_Right, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Option_Language_C, P_LanguageOptions, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Option_Language_C, P_CurrentCulture, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Option_Language_C, UnknownData_8TBJ, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Option_Language_C, ColumnSizeLeft, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Option_Language_C, ColumnSizeRight, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Option_Language_C, ColumnPaddingLeft, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Option_Language_C, ColumnPaddingRight, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Option_Language_C, Debug, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Option_Language_C, UnknownData_T5SR, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Option_Language_C, ArrowKeyPressed, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_Option_Language_C, 0x02C0);
		}

		// class AA_FazerBlast_Spawner_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__A_FazerBlast_Spawner__A_FazerBlast_Spawner_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_Spawner_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_Spawner_C, GameTypeCheckDestroy, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_Spawner_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_Spawner_C, PatrolPath, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_Spawner_C, Enabled, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AA_FazerBlast_Spawner_C, 0x0249);
		}

		// class UMagicLeapIdentity : public UObject
		TEST_METHOD(Class__MagicLeapIdentity__MagicLeapIdentity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapIdentity, UnknownData_AR4P, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapIdentity, 0x0038);
		}

		// class ABP_MiniMap_Plane_C : public AStaticMeshActor
		TEST_METHOD(BlueprintGeneratedClass__BP_MiniMap_Plane__BP_MiniMap_Plane_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MiniMap_Plane_C, BottomRight, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MiniMap_Plane_C, TopLeft, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MiniMap_Plane_C, 0x0248);
		}

		// class UMagicLeapImageTrackerComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeapImageTracker__MagicLeapImageTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, TargetImageTexture, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, Name, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, LongerDimension, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, bIsStationary, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, bUseUnreliablePose, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, UnknownData_RVBU, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnSetImageTargetSucceeded, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnSetImageTargetFailed, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnImageTargetFound, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnImageTargetLost, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnImageTargetUnreliableTracking, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, UnknownData_ULJ6, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapImageTrackerComponent, 0x0270);
		}

		// class UMagicLeapImageTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapImageTracker__MagicLeapImageTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapImageTrackerFunctionLibrary, 0x0028);
		}

		// class UWI_Gregory_Flashlight_C : public UWI_Empty_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_Gregory_Flashlight__WI_Gregory_Flashlight_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Flashlight_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Flashlight_C, DeadFlashlight, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Flashlight_C, Flash, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Flashlight_C, FadeOut, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Flashlight_C, FadeIn, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Flashlight_C, Blink, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Flashlight_C, FlashlightMeterFill, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Flashlight_C, FlashlightMeterFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Flashlight_C, PowerLevelDispatch, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Flashlight_C, Interact_Dynamic_Mat, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Flashlight_C, LowFlashlightBorder, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Flashlight_C, FullFlashlightBorder, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Flashlight_C, Stamina, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Flashlight_C, PowerState, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Flashlight_C, PowerLevel, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Flashlight_C, InitialDelay, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_Gregory_Flashlight_C, 0x02B1);
		}

		// class APRE_Elevator_General_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PRE_Elevator_General__PRE_Elevator_General_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, Freddy_Spawn, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, Play_mus_FreddysFanfare_80sSynth_elevator, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, Ak, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, Door, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, InsideOverlap, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, Scene_PawnInsideOverlaps, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, A_Elevator_StreamViewpoint_B, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, A_Elevator_StreamViewpoint_A, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, Box, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, Scene_WakeupOverlaps, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, BP_ArrowIndicator_B, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, BP_ArrowIndicator_A, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, Scene_ArrowIndicators, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, Scene_Audio, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, Door_B_Outer, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, Door_B_Inner, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, Scene_Door_B, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, Door_A_Outer, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, Door_A_Inner, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, Scene_Door_A, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, Button_B, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, Button_A, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, DefaultSceneRoot, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, P_Setup, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, P_IsTeleport, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, UnknownData_B4I7, 0x02EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, P_Buttons, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, P_Doors, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, P_ArrowIndicators, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, Debug, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, UnknownData_B66T, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, LevelsUpper, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, P_TeleportDestination, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, P_EnteredSide, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, P_TargetSide, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, P_MovementMode, 0x0362);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, UnknownData_K9GB, 0x0363);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, P_MovementMagnitude, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, P_HadCameraLag, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, UnknownData_E7K9, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, Shake_MovementChange, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, P_StartSeconds, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, UnknownData_D4O4, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, LevelsLower, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, P_NextShake, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, P_LastShakeDelay, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, Shake_Movement, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, Shake_MovementScale, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, DoorLockDuration, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, TeleportDestination, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, ShouldBlockOnSwap, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, UnknownData_38I5, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, P_DeltaSeconds, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, P_Index, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, MovementAccelerateScale, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, MovementDecelerateScale, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, TargetA, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, UnknownData_MDNZ, 0x03F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, OnWakeupOverlapEntered, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, OnWakeupOverlapLeave, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, PawnsInElevator, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, ChangeLighting, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, UnknownData_USPY, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, LightingLocationA, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, LightingLocationB, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, UnknownData_2NME, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, OnButtonPressed, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, PlayElevatorMusic, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, FreddyShouldAppearBehindDoorOnTeleportFail, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, UnknownData_CL9G, 0x048A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, StopEvent, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, RunLoopEvent, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_General_C, StopLoopEvent, 0x04A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_Elevator_General_C, 0x04A8);
		}

		// class ASunmanPhase1Trigger_C : public ATriggerSphere
		TEST_METHOD(BlueprintGeneratedClass__SunmanPhase1Trigger__SunmanPhase1Trigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASunmanPhase1Trigger_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASunmanPhase1Trigger_C, Return_Zone, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASunmanPhase1Trigger_C, Block_Zone, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASunmanPhase1Trigger_C, Sphere, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASunmanPhase1Trigger_C, Scene, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASunmanPhase1Trigger_C, PhaseBB, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASunmanPhase1Trigger_C, PlayerBB, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASunmanPhase1Trigger_C, InvestigationLocationBB, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASunmanPhase1Trigger_C, Daycare_Security_Office, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASunmanPhase1Trigger_C, 0x0298);
		}

		// class AStaffbotManager_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__StaffbotManager__StaffbotManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotManager_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotManager_C, StaffBotSpawnerComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotManager_C, ConditionalCheck, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotManager_C, DefaultSceneRoot, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotManager_C, StaffBot, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotManager_C, SpawnHourCondition, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotManager_C, PatrolHourCondition, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotManager_C, HasSpawned, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotManager_C, HasStartedPatrol, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotManager_C, UnknownData_S8ZL, 0x025A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotManager_C, NewEventDispatcher_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotManager_C, SpawnItemsCondition, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotManager_C, PatrolItemsCondition, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaffbotManager_C, 0x0290);
		}

		// class AMazercizeTicket_C : public APresentCollectible_C
		TEST_METHOD(BlueprintGeneratedClass__MazercizeTicket__MazercizeTicket_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMazercizeTicket_C, UnknownData_HJD8, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMazercizeTicket_C, UberGraphFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMazercizeTicket_C, LineSkipper, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMazercizeTicket_C, 0x0300);
		}

		// class ABP_MusicTriggerVolumeByMission_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__BP_MusicTriggerVolumeByMission__BP_MusicTriggerVolumeByMission_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MusicTriggerVolumeByMission_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MusicTriggerVolumeByMission_C, MissionsToPlayMusic, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MusicTriggerVolumeByMission_C, MusicActive, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MusicTriggerVolumeByMission_C, UnknownData_DD65, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MusicTriggerVolumeByMission_C, PlayEvent, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MusicTriggerVolumeByMission_C, StopEvent, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MusicTriggerVolumeByMission_C, 0x02A8);
		}

		// class UShatteredChicaMissionTextFormatter_C : public UMissionTextFormatter_C
		TEST_METHOD(BlueprintGeneratedClass__ShatteredChicaMissionTextFormatter__ShatteredChicaMissionTextFormatter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShatteredChicaMissionTextFormatter_C, Generators, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShatteredChicaMissionTextFormatter_C, Count, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShatteredChicaMissionTextFormatter_C, 0x0044);
		}

		// class APRE_Elevator_GatorGolf_C : public APRE_Elevator_WideBase_C
		TEST_METHOD(BlueprintGeneratedClass__PRE_Elevator_GatorGolf__PRE_Elevator_GatorGolf_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_GatorGolf_C, SM_Vines_011, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_GatorGolf_C, SM_Vines_010, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_GatorGolf_C, SM_vines_09, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_GatorGolf_C, SM_Vines_08, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_GatorGolf_C, Cover, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_Elevator_GatorGolf_C, 0x0748);
		}

		// class ASecurityOfficePowerMeter_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SecurityOfficePowerMeter__SecurityOfficePowerMeter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficePowerMeter_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficePowerMeter_C, Widget, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficePowerMeter_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficePowerMeter_C, TimeLeft, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficePowerMeter_C, UnknownData_6Y57, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficePowerMeter_C, Gamemanger, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficePowerMeter_C, TotalTime, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASecurityOfficePowerMeter_C, 0x0274);
		}

		// class UChaosDebugDrawComponent : public UActorComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosDebugDrawComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDebugDrawComponent, UnknownData_4QMW, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosDebugDrawComponent, 0x00B8);
		}

		// class UChaosEventListenerComponent : public UActorComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosEventListenerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosEventListenerComponent, UnknownData_F8GI, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosEventListenerComponent, 0x00B8);
		}

		// class UChaosGameplayEventDispatcher : public UChaosEventListenerComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosGameplayEventDispatcher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, UnknownData_VQD4, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, CollisionEventRegistrations, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, BreakEventRegistrations, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, UnknownData_ER7Q, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosGameplayEventDispatcher, 0x0270);
		}

		// class UChaosNotifyHandlerInterface : public UInterface
		TEST_METHOD(Class__ChaosSolverEngine__ChaosNotifyHandlerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosNotifyHandlerInterface, 0x0028);
		}

		// class UChaosSolverEngineBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverEngineBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolverEngineBlueprintLibrary, 0x0028);
		}

		// class UChaosSolver : public UObject
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolver, 0x0028);
		}

		// class AChaosSolverActor : public AActor
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, TimeStepMultiplier, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, CollisionIterations, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, PushOutIterations, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, PushOutPairIterations, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ClusterConnectionFactor, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ClusterUnionConnectionType, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateCollisionData, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_00SQ, 0x023E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, CollisionFilterSettings, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateBreakingData, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_I8YK, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, BreakingFilterSettings, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateTrailingData, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_TIV6, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, TrailingFilterSettings, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, bHasFloor, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_RNL7, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, FloorHeight, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, MassScale, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, bGenerateContactGraph, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ChaosDebugSubstepControl, 0x0285);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, SpriteComponent, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_AVS1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, GameplayEventDispatcherComponent, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChaosSolverActor, 0x02B0);
		}

		// class UChaosSolverSettings : public UDeveloperSettings
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverSettings, UnknownData_KA87, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverSettings, DefaultChaosSolverActorClass, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolverSettings, 0x0058);
		}

		// class UMissionTextFormatter_C : public UObject
		TEST_METHOD(BlueprintGeneratedClass__MissionTextFormatter__MissionTextFormatter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionTextFormatter_C, MissionName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionTextFormatter_C, 0x0030);
		}

		// class ASplineFollowerController_C : public AAIController
		TEST_METHOD(BlueprintGeneratedClass__SplineFollowerController__SplineFollowerController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineFollowerController_C, UberGraphFrame, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASplineFollowerController_C, 0x0338);
		}

		// class UInstructionCard_Decorator_C : public URichTextControlButtonDecorator
		TEST_METHOD(BlueprintGeneratedClass__InstructionCard_Decorator__InstructionCard_Decorator_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstructionCard_Decorator_C, 0x0030);
		}

		// class UAC_VehicleMechanics_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__AC_VehicleMechanics__AC_VehicleMechanics_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, GasLocation, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, UnknownData_UR3W, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, Parent, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, Target, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, ThroddleInput, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, SterringInput, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, HoverComponents, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, LastGroundTime, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, Grounded, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, UnknownData_Q096, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, AccelerationCurve, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, SterringCurve, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, DragCruve, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, AirResistence, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, Motor_Resistance, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, TireDampaning, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, BreakForce, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, PowerSlide, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, UnknownData_CVKF, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, PreviousSterring, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, CanMove, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, EngineOn, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, UnknownData_54VB, 0x012E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, SterringMultiplyer, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAC_VehicleMechanics_C, AddaptiveSterring, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAC_VehicleMechanics_C, 0x0135);
		}

		// class USecurity_PlayTurnAnim_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__Security_PlayTurnAnim__Security_PlayTurnAnim_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurity_PlayTurnAnim_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurity_PlayTurnAnim_C, RotateTimeKey, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurity_PlayTurnAnim_C, Time, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurity_PlayTurnAnim_C, Degrees, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USecurity_PlayTurnAnim_C, 0x00E0);
		}

		// class AStaffBotSecurityPatrol_C : public AStaffBotBase_C
		TEST_METHOD(BlueprintGeneratedClass__StaffBotSecurityPatrol__StaffBotSecurityPatrol_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotSecurityPatrol_C, UnknownData_QCKY, 0x0652);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotSecurityPatrol_C, UberGraphFrame, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotSecurityPatrol_C, SpotLight, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotSecurityPatrol_C, GodRay, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotSecurityPatrol_C, PointLight, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotSecurityPatrol_C, SecurityHat, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotSecurityPatrol_C, Flashlight, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotSecurityPatrol_C, SplineFollowerContext, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotSecurityPatrol_C, SplineManager, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotSecurityPatrol_C, SplineManagerKey, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotSecurityPatrol_C, SplineMovementSpeedKey, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotSecurityPatrol_C, WalkSpeed, 0x06B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaffBotSecurityPatrol_C, 0x06BC);
		}

		// class AChicaRummagePoint_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ChicaRummagePoint__ChicaRummagePoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AChicaRummagePoint_C, RummageDirection, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChicaRummagePoint_C, 0x0230);
		}

		// class USequenceDirector_C : public ULevelSequenceDirector
		TEST_METHOD(BlueprintGeneratedClass__MontyOutro_Shot400__SequenceDirector_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceDirector_C, UberGraphFrame, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceDirector_C, 0x0038);
		}

		// class UInvertControlsUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InvertControlsUI__InvertControlsUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvertControlsUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvertControlsUI_C, NoButton, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvertControlsUI_C, OptionsUI, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvertControlsUI_C, WidgetSwitcher_1066, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvertControlsUI_C, YesButton, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvertControlsUI_C, UpKey, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvertControlsUI_C, DownKey, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvertControlsUI_C, GamepadUp, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvertControlsUI_C, GamepadDown, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvertControlsUI_C, OnOptionSelected, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInvertControlsUI_C, 0x02C8);
		}

		// class ULuminARSessionFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAR__LuminARSessionFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARSessionFunctionLibrary, 0x0028);
		}

		// class ULuminARFrameFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAR__LuminARFrameFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARFrameFunctionLibrary, 0x0028);
		}

		// class ULuminARImageTrackingFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAR__LuminARImageTrackingFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARImageTrackingFunctionLibrary, 0x0028);
		}

		// class ULuminARSessionConfig : public UARSessionConfig
		TEST_METHOD(Class__MagicLeapAR__LuminARSessionConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, UnknownData_SU2C, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, PlanesQuery, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, MaxPlaneQueryResults, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, MinPlaneArea, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, bArbitraryOrientationPlaneDetection, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, UnknownData_HTT4, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, PlaneSearchExtents, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, PlaneQueryFlags, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, bDiscardZeroExtentPlanes, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, bDefaultUseUnreliablePose, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, UnknownData_OMZH, 0x013A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARSessionConfig, 0x0140);
		}

		// class ULuminARLightEstimate : public UARBasicLightEstimate
		TEST_METHOD(Class__MagicLeapAR__LuminARLightEstimate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARLightEstimate, AmbientIntensityNits, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARLightEstimate, 0x0050);
		}

		// class ULuminARCandidateImage : public UARCandidateImage
		TEST_METHOD(Class__MagicLeapAR__LuminARCandidateImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARCandidateImage, bUseUnreliablePose, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARCandidateImage, bImageIsStationary, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARCandidateImage, UnknownData_94HI, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARCandidateImage, 0x0060);
		}

		// class UWI_InstructionCard_PAS_FinishProcedure_Voicebox_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_PAS_FinishProcedure_Voicebox__WI_InstructionCard_PAS_FinishProcedure_Voicebox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_Voicebox_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_Voicebox_C, Console_TextAndIcons, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_Voicebox_C, Image_18_Template, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_Voicebox_C, PC_TextAndIcons, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_Voicebox_C, TextBlock_48_Title, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_Voicebox_C, VerticalBox_250, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_Voicebox_C, WI_ImageScaled, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_PAS_FinishProcedure_Voicebox_C, 0x0268);
		}

		// class UWI_InstructionCard_PAS_CloseArm_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_PAS_CloseArm__WI_InstructionCard_PAS_CloseArm_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_CloseArm_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_CloseArm_C, Console_TextAndIcons, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_CloseArm_C, Image_18_Template, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_CloseArm_C, PC_TextAndIcons, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_CloseArm_C, TextBlock_48_Title, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_CloseArm_C, VerticalBox_250, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_CloseArm_C, WI_ImageScaled, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_PAS_CloseArm_C, 0x0268);
		}

		// class USynthComponent : public USceneComponent
		TEST_METHOD(Class__AudioMixer__SynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_AVQE, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_QOXC, 0x01F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationSettings, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationOverrides, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySettings, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySet, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundClass, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SourceEffectChain, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmix, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmixSends, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, BusSends, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, Modulation, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, PreEffectBusSends, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_X2QZ, 0x0651);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerAttackTime, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerReleaseTime, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_SYGQ, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, OnAudioEnvelopeValue, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_ZZ88, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, Synth, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AudioComponent, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_NBW8, 0x06A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponent, 0x06D0);
		}

		// class UAudioGenerator : public UObject
		TEST_METHOD(Class__AudioMixer__AudioGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioGenerator, UnknownData_VI8E, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioGenerator, 0x00A8);
		}

		// class UAudioMixerBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AudioMixer__AudioMixerBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioMixerBlueprintLibrary, 0x0028);
		}

		// class USubmixEffectDynamicsProcessorPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectDynamicsProcessorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, UnknownData_6GIM, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, Settings, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDynamicsProcessorPreset, 0x0108);
		}

		// class USubmixEffectSubmixEQPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectSubmixEQPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, UnknownData_I2JA, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectSubmixEQPreset, 0x0088);
		}

		// class USubmixEffectReverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectReverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, UnknownData_66VC, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, Settings, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectReverbPreset, 0x00D0);
		}

		// class USubmixEffectReverbFastPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectReverbFastPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbFastPreset, UnknownData_0QCA, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbFastPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectReverbFastPreset, 0x00D8);
		}

		// class USynthSound : public USoundWaveProcedural
		TEST_METHOD(Class__AudioMixer__SynthSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, OwningSynthComponent, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, UnknownData_5H4H, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSound, 0x0380);
		}

		// class APlayerTeleportHandler_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PlayerTeleportHandler__PlayerTeleportHandler_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTeleportHandler_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTeleportHandler_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTeleportHandler_C, FadeDuration, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTeleportHandler_C, TeleportLocation, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTeleportHandler_C, TeleportRotation, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTeleportHandler_C, UnknownData_BEZ0, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTeleportHandler_C, OnTeleportFinished, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTeleportHandler_C, FadeInOnFinished, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTeleportHandler_C, ClockWasRunning, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerTeleportHandler_C, FadeOutOnStart, 0x026A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerTeleportHandler_C, 0x026B);
		}

		// class UCinematicSequence_FunctionsBP_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__CinematicSequence_FunctionsBP__CinematicSequence_FunctionsBP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCinematicSequence_FunctionsBP_C, 0x0028);
		}

		// class AActivatiblePathBlock_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ActivatiblePathBlock__ActivatiblePathBlock_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatiblePathBlock_C, DefaultSceneRoot, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatiblePathBlock_C, Activatable, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatiblePathBlock_C, ActivatableState, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActivatiblePathBlock_C, 0x0259);
		}

		// class AStaffbotWorker_Controller_C : public AAIController
		TEST_METHOD(BlueprintGeneratedClass__StaffbotWorker_Controller__StaffbotWorker_Controller_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotWorker_Controller_C, UberGraphFrame, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotWorker_Controller_C, KeyName, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaffbotWorker_Controller_C, 0x0340);
		}

		// class AStaffBotWorkerPath_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__StaffBotWorkerPath__StaffBotWorkerPath_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, StaffBot, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, TaskPoint_02, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, TaskPoint_01, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, Arrow, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, Path, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, SectionLength, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, CreateTaskPoint_01, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, CreateTaskPoint_02, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, Tp_01_HasProp, 0x0256);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, Tp_01_canResetProp, 0x0257);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, TP_01_CanDestroyProp, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, Tp_02_Has_Prop, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, TP_02_Can_Reset_Prop, 0x025A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, TP_02_Can_Destroy_Prop, 0x025B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, TaskPointOffset, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, CreateStaffbot, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, UnknownData_HJEC, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, Staffbot_Start, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, StaffbotVar, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, SB_RandomStart, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, SB_Use_AnyTask_Point, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, UnknownData_I57M, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, DynamicMaterial, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, PropMesh, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, PropScale, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotWorkerPath_C, PropOffset, 0x029C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaffBotWorkerPath_C, 0x02A8);
		}

		// class UPlayerNavDistance_C : public UNavDistanceServiceBase_C
		TEST_METHOD(BlueprintGeneratedClass__PlayerNavDistance__PlayerNavDistance_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNavDistance_C, UberGraphFrame, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerNavDistance_C, 0x00C8);
		}

		// class UWI_Timer_C : public UWI_Empty_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_Timer__WI_Timer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Timer_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Timer_C, MoveOutOfFrame, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Timer_C, MoveIntoFrame, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Timer_C, TimerText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Timer_C, Timer, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_Timer_C, 0x0264);
		}

		// class UWI_GameOver_C : public UWI_Empty_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_GameOver__WI_GameOver_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_GameOver_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_GameOver_C, Blink, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_GameOver_C, Border, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_GameOver_C, GameOver_Image, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_GameOver_C, 0x0260);
		}

		// class AStartupMissionTrigger_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__StartupMissionTrigger__StartupMissionTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, FreddyWayToGoDoneState, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, FreddyDoorJustOpenedState, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, FreddyPositionerWorldState, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, AtriumGateState1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, SceneCaptureComponent2D, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, MaintDoorSaveState, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, RotationThreshold, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, FreddyLookDirection, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, UpRotationThreshold, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, DownRotationThreshold, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, RightRotationThreshold, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, LeftRotationThreshold, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, GreenroomVolume, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, Billboard, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, LookOutWindowTrigger, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, VanessaRemoveBox, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, SetupSplineMovement, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, UnknownData_QL01, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, GregorySpawnTransform, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, MissionToComplete, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, NextMissionToStart, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, VanessaSpawnLocation, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, ExitFreddyInstruction, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, LookAroundInstruction, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, LookAtWindowInstruction, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, TakeFazwatchInstruction, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, OpenFazwatchInstruction, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, FreddyDoor, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, BackDoorButton, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, CanLookOutWindow, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, skip_all, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, UnknownData_BF2P, 0x03F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, MissionToStart, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, CanPlayDoorLockedSequence, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, UnknownData_WDEW, 0x03FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, Speaker, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, Characters, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, ExitDoor, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, play_wrong_door, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, DebugSkip, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, WrongDoorPlaying, 0x0442);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, UnknownData_8BL7, 0x0443);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, LineSkipper, 0x0443);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, MedScanSequence, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, NewVar_1, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, UnknownData_QGLX, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, PlayerController, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, FreddyLocation, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, MissionsWithoutFreddy, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, LookRightInstruction, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, LookLeftInstruction, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, LookDownInstruction, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, LookUpInstruction, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, MaintanenceDoor, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, FreddyPowerProximityActor, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, PausedMixState, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, UnknownData_FIE3, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, PlanarReflection, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStartupMissionTrigger_C, Freddy, 0x05C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStartupMissionTrigger_C, 0x05F0);
		}

		// class UWI_InstructionCard_PAS_ChicaVoicebox_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_PAS_ChicaVoicebox__WI_InstructionCard_PAS_ChicaVoicebox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ChicaVoicebox_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ChicaVoicebox_C, Console_TextAndIcons, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ChicaVoicebox_C, Image_18_Template, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ChicaVoicebox_C, PC_TextAndIcons, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ChicaVoicebox_C, TextBlock_48_Title, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ChicaVoicebox_C, VerticalBox_250, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ChicaVoicebox_C, WI_ImageScaled, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_PAS_ChicaVoicebox_C, 0x0268);
		}

		// class UFreddyInteractibleInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__FreddyInteractibleInterface__FreddyInteractibleInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFreddyInteractibleInterface_C, 0x0028);
		}

		// class UWI_InstructionCard_PAS_FinishProcedure_Ocular_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_PAS_FinishProcedure_Ocular__WI_InstructionCard_PAS_FinishProcedure_Ocular_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_Ocular_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_Ocular_C, Console_TextAndIcons, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_Ocular_C, Image_18_Template, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_Ocular_C, PC_TextAndIcons, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_Ocular_C, TextBlock_48_Title, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_Ocular_C, VerticalBox_250, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_Ocular_C, WI_ImageScaled, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_PAS_FinishProcedure_Ocular_C, 0x0268);
		}

		// class ACutSceneActor_Base_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__CutSceneActor_Base__CutSceneActor_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneActor_Base_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneActor_Base_C, PhysicalAnimation, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneActor_Base_C, StaticMesh, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneActor_Base_C, SkeletalMesh, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneActor_Base_C, DefaultSceneRoot, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneActor_Base_C, Animation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneActor_Base_C, JiggleScaleTarget, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneActor_Base_C, UnknownData_ECW4, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneActor_Base_C, AnimInstance, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneActor_Base_C, LoopCutScene, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneActor_Base_C, AnimDynEars, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneActor_Base_C, AnimDynChica, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneActor_Base_C, AnimDynRoxy, 0x026B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneActor_Base_C, AnimDynMonty, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneActor_Base_C, Shattered, 0x026D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACutSceneActor_Base_C, 0x026E);
		}

		// class APlayerControlledStaffBot_Kitchen_C : public APlayerControlledStaffBot_C
		TEST_METHOD(BlueprintGeneratedClass__PlayerControlledStaffBot_Kitchen__PlayerControlledStaffBot_Kitchen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerControlledStaffBot_Kitchen_C, UnknownData_AXHO, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerControlledStaffBot_Kitchen_C, UberGraphFrame, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerControlledStaffBot_Kitchen_C, SpotLight, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerControlledStaffBot_Kitchen_C, CameraAttachment, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerControlledStaffBot_Kitchen_C, SpringArm, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerControlledStaffBot_Kitchen_C, PointLight, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerControlledStaffBot_Kitchen_C, BP_BuildAPizza, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerControlledStaffBot_Kitchen_C, Camera, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerControlledStaffBot_Kitchen_C, OGM_Kitchen, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerControlledStaffBot_Kitchen_C, P_Start_Loc, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerControlledStaffBot_Kitchen_C, P_Start_Rot, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerControlledStaffBot_Kitchen_C, P_Rotate, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerControlledStaffBot_Kitchen_C, 0x0561);
		}

		// class UWheelFront_C : public UVehicleWheel
		TEST_METHOD(BlueprintGeneratedClass__WheelFront__WheelFront_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheelFront_C, 0x00F0);
		}

		// class AGolfBallHole_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__GolfBallHole__GolfBallHole_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGolfBallHole_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGolfBallHole_C, Sphere, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGolfBallHole_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGolfBallHole_C, HoleNumber, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGolfBallHole_C, UnknownData_E4BO, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGolfBallHole_C, HoleManager, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGolfBallHole_C, 0x0270);
		}

		// class UChicaBehindPlayerBreathing_End_Task_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__ChicaBehindPlayerBreathing_End_Task__ChicaBehindPlayerBreathing_End_Task_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChicaBehindPlayerBreathing_End_Task_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChicaBehindPlayerBreathing_End_Task_C, 0x00B0);
		}

		// class UFindClosestFreddyRechargeStation_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FindClosestFreddyRechargeStation__FindClosestFreddyRechargeStation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindClosestFreddyRechargeStation_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindClosestFreddyRechargeStation_C, BBLocation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindClosestFreddyRechargeStation_C, curr_dist, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindClosestFreddyRechargeStation_C, curr_vetor, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindClosestFreddyRechargeStation_C, curr_object, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindClosestFreddyRechargeStation_C, 0x00F0);
		}

		// class UMagicLeapEyeTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapEyeTracker__MagicLeapEyeTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapEyeTrackerFunctionLibrary, 0x0028);
		}

		// class UAlienHelm_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AlienHelm_ABP__AlienHelm_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlienHelm_ABP_C, UnknownData_FEXB, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlienHelm_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlienHelm_ABP_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlienHelm_ABP_C, AnimGraphNode_ModifyBone_3, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlienHelm_ABP_C, AnimGraphNode_ModifyBone_2, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlienHelm_ABP_C, AnimGraphNode_SpringBone_2, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlienHelm_ABP_C, AnimGraphNode_SpringBone, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlienHelm_ABP_C, UnknownData_VE7Q, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlienHelm_ABP_C, AnimGraphNode_LookAt_2, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlienHelm_ABP_C, AnimGraphNode_LookAt, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlienHelm_ABP_C, AnimGraphNode_ComponentToLocalSpace, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlienHelm_ABP_C, AnimGraphNode_LinkedInputPose, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlienHelm_ABP_C, AnimGraphNode_LocalToComponentSpace, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlienHelm_ABP_C, AnimGraphNode_ModifyBone, 0x0B28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlienHelm_ABP_C, 0x0C30);
		}

		// class UUpdateMissionOnActivated_C : public UUpdateMissionComponent
		TEST_METHOD(BlueprintGeneratedClass__UpdateMissionOnActivated__UpdateMissionOnActivated_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateMissionOnActivated_C, UberGraphFrame, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUpdateMissionOnActivated_C, 0x00C8);
		}

		// class AEndVO_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__EndVO__EndVO_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEndVO_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEndVO_C, DefaultSceneRoot, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEndVO_C, 0x0238);
		}

		// class ACinematic_TransformOriginActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cinematic_TransformOriginActor__Cinematic_TransformOriginActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACinematic_TransformOriginActor_C, DefaultSceneRoot, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACinematic_TransformOriginActor_C, 0x0230);
		}

		// class UCameraFunctions_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__CameraFunctions__CameraFunctions_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraFunctions_C, 0x0028);
		}

		// class UWI_Gregory_Interact_C : public UWI_Empty_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_Gregory_Interact__WI_Gregory_Interact_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Interact_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Interact_C, HoldEnd, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Interact_C, InteractMeterDynamic, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Interact_C, InteractMeterEmpty, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Interact_C, PowerLevelDispatch, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Interact_C, Interact_Dynamic_Mat, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_Gregory_Interact_C, 0x0278);
		}

		// class UOverlays : public UObject
		TEST_METHOD(Class__Overlay__Overlays)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlays, 0x0028);
		}

		// class UBasicOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__BasicOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicOverlays, Overlays, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasicOverlays, 0x0038);
		}

		// class ULocalizedOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__LocalizedOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, DefaultOverlays, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, LocaleToOverlaysMap, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalizedOverlays, 0x0080);
		}

		// class AFlashBeaconCollect_C : public APresentCollectible_C
		TEST_METHOD(BlueprintGeneratedClass__FlashBeaconCollect__FlashBeaconCollect_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashBeaconCollect_C, UnknownData_CNQQ, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashBeaconCollect_C, UberGraphFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashBeaconCollect_C, CheckIfNotInOverTime, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashBeaconCollect_C, LineSkipper, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFlashBeaconCollect_C, 0x0308);
		}

		// class ALaserTag_Gun_Door_C : public ALaserTag_Door_C
		TEST_METHOD(BlueprintGeneratedClass__LaserTag_Gun_Door__LaserTag_Gun_Door_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_Gun_Door_C, UnknownData_EPE0, 0x027B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_Gun_Door_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALaserTag_Gun_Door_C, 0x0288);
		}

		// class ARoxyAIController_C : public AAISeekerController_C
		TEST_METHOD(BlueprintGeneratedClass__RoxyAIController__RoxyAIController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARoxyAIController_C, UberGraphFrame, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARoxyAIController_C, 0x03E0);
		}

		// class ABP_NoiseMakingTowerBase_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_NoiseMakingTowerBase__BP_NoiseMakingTowerBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_C, Ak, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_C, ResetAnimLoc, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_C, Trigger, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_C, DefaultSceneRoot, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_C, Loudness, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_C, Do_Once, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_C, Wait_For_End_Overlap, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_C, UnknownData_PAX6, 0x0256);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_C, Time_To_Wait, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_C, is_overlapped, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_C, UnknownData_VIWP, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_C, ToppleEvent, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_C, ResetEvent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_C, OnToppled, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_NoiseMakingTowerBase_C, 0x0280);
		}

		// class UWI_InstructionCard_PAS_PutInEyes_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_PAS_PutInEyes__WI_InstructionCard_PAS_PutInEyes_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_PutInEyes_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_PutInEyes_C, Console_TextAndIcons, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_PutInEyes_C, Image_18_Template, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_PutInEyes_C, PC_TextAndIcons, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_PutInEyes_C, TextBlock_48_Title, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_PutInEyes_C, VerticalBox_250, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_PutInEyes_C, WI_ImageScaled, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_PAS_PutInEyes_C, 0x0268);
		}

		// class AMAP_TheWorld_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__MAP_TheWorld__MAP_TheWorld_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, BackstageCounter, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, UnknownData_NMWZ, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, BackstageLevels, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, MainLobbyLevels, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, LobbyLoaded, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, UnknownData_3A1X, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, MainLobbyCounter, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, BackstageLoaded, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, StageLoaded, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, ArcadesLoaded, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, LaserLoaded, 0x026B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, LaserTagCounter, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, LaserTagLevels, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, KitchenLoaded, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, UnknownData_CDMC, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, KitchenLevels, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, KitchenCount, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, RacerLoaded, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, UnknownData_97O9, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, ArcadeLevels, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, ArcadeCounter, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, UnknownData_GFRK, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, RacerLevels, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, RacerCounter, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, GolfCounter, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, GolfLevels, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, GolfLoaded, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, UnknownData_KGMD, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_TheWorld_C, StageAreaLevels, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMAP_TheWorld_C, 0x02F8);
		}

		// class UDDGIBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__RTXGI__DDGIBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDDGIBlueprintLibrary, 0x0028);
		}

		// class ADDGIVolume : public AActor
		TEST_METHOD(Class__RTXGI__DDGIVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADDGIVolume, BoxComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADDGIVolume, DDGIVolumeComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADDGIVolume, 0x0238);
		}

		// class UDDGIVolumeComponent : public USceneComponent
		TEST_METHOD(Class__RTXGI__DDGIVolumeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, UnknownData_K6GE, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, RaysPerProbe, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, UnknownData_DVHU, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, ProbeCounts, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, UpdatePriority, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, ProbeMaxRayDistance, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, ProbeHysteresis, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, ViewBias, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, NormalBias, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, LightingChannels, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, UnknownData_3HQB, 0x021D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, VolumeBlendDistance, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, VolumeBlendDistanceBlack, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, EnableProbeRelocation, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, EnableProbeScrolling, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, RuntimeStatic, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, UnknownData_VVSB, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, probeDistanceExponent, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, probeIrradianceEncodingGamma, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, probeChangeThreshold, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, probeBrightnessThreshold, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, ProbeMinFrontfaceDistance, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, ProbeBackfaceThreshold, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, LightMultiplier, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, EmissiveMultiplier, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, IrradianceScalar, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, LastOrigin, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, ProbeScrollOffset, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDDGIVolumeComponent, UnknownData_LMX3, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDDGIVolumeComponent, 0x0320);
		}

		// class URTXGIPluginSettings : public UDeveloperSettings
		TEST_METHOD(Class__RTXGI__RTXGIPluginSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URTXGIPluginSettings, IrradianceBits, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::URTXGIPluginSettings, DistanceBits, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::URTXGIPluginSettings, UnknownData_WQ8F, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URTXGIPluginSettings, DebugProbeRadius, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URTXGIPluginSettings, ProbeUpdateRayBudget, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URTXGIPluginSettings, UnknownData_12ON, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URTXGIPluginSettings, 0x0048);
		}

		// class UDJMusicManTextFormatter_C : public UMissionTextFormatter_C
		TEST_METHOD(BlueprintGeneratedClass__DJMusicManTextFormatter__DJMusicManTextFormatter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDJMusicManTextFormatter_C, WestArcadeOffice, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDJMusicManTextFormatter_C, 0x0058);
		}

		// class AVanessa_C : public AAISeeker_C
		TEST_METHOD(BlueprintGeneratedClass__Vanessa__Vanessa_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanessa_C, UnknownData_SG9L, 0x07F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanessa_C, UberGraphFrame, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanessa_C, GodRay, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanessa_C, Flashlight_Light, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanessa_C, BlockedByAITimer, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanessa_C, CaughtMissionName, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanessa_C, LostAndFoundSpawnLocation, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanessa_C, SendingToLostAndFound, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanessa_C, PlayerLooking, 0x0849);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanessa_C, UnknownData_DBCT, 0x084A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanessa_C, TypesToSpawn, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVanessa_C, NumToSpawn, 0x0860);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVanessa_C, 0x0864);
		}

		// class ALeavingMontyOffice_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__LeavingMontyOffice__LeavingMontyOffice_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALeavingMontyOffice_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALeavingMontyOffice_C, Box, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALeavingMontyOffice_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALeavingMontyOffice_C, MontyOfficeTrigger, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALeavingMontyOffice_C, 0x0248);
		}

		// class UFindRandLocationFromPoint_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FindRandLocationFromPoint__FindRandLocationFromPoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindRandLocationFromPoint_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindRandLocationFromPoint_C, CenterLocationKey, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindRandLocationFromPoint_C, Radius, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindRandLocationFromPoint_C, UnknownData_68Y2, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindRandLocationFromPoint_C, OutLocationKey, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindRandLocationFromPoint_C, 0x0108);
		}

		// class UPlayerIsFreddy_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__PlayerIsFreddy__PlayerIsFreddy_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerIsFreddy_C, 0x00A0);
		}

		// class UVannyThresholdMet_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__VannyThresholdMet__VannyThresholdMet_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyThresholdMet_C, MeterPercentage, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVannyThresholdMet_C, 0x00A4);
		}

		// class AStaffbotWorker_Manager_Base_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__StaffbotWorker_Manager_Base__StaffbotWorker_Manager_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotWorker_Manager_Base_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotWorker_Manager_Base_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotWorker_Manager_Base_C, Managed_Bots, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotWorker_Manager_Base_C, SyncJumpScares, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotWorker_Manager_Base_C, SyncObject, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotWorker_Manager_Base_C, UnknownData_9D4F, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotWorker_Manager_Base_C, deltaTime, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotWorker_Manager_Base_C, Managed_Paths, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotWorker_Manager_Base_C, ElapsedTime, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotWorker_Manager_Base_C, runTimer, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotWorker_Manager_Base_C, UnknownData_9283, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotWorker_Manager_Base_C, ResetTime, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaffbotWorker_Manager_Base_C, 0x026C);
		}

		// class ALaserTag_Door_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__LaserTag_Door__LaserTag_Door_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_Door_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_Door_C, Play_sfx_door_elevator_close_inGame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_Door_C, Play_sfx_door_elevator_open_inGame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_Door_C, LazerTag_Elevator_Door_Closed, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_Door_C, Door_Collision, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_Door_C, SM_Cor_Door_Left, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_Door_C, SM_Cor_Door_Right, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_Door_C, Scene, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_Door_C, Open_Door__Close_Door_Move_Door_0CA022E7445EA752160ECBB57CC51438, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_Door_C, Open_Door__Close_Door__Direction_0CA022E7445EA752160ECBB57CC51438, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_Door_C, UnknownData_LM21, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_Door_C, _Close_Door, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_Door_C, StartOpen, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_Door_C, EnableAutomaticDoor, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTag_Door_C, WaitToChange, 0x027A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALaserTag_Door_C, 0x027B);
		}

		// class UWI_InstructionCard_SwitchItems_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_SwitchItems__WI_InstructionCard_SwitchItems_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_SwitchItems_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_SwitchItems_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_SwitchItems_C, UI_TextAndIcons, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_SwitchItems_C, VerticalBox_250, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_SwitchItems_C, WI_ImageScaled, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_SwitchItems_C, 0x0258);
		}

		// class ATurnstileBarPlayerInteract_C : public ATurnstileBarOpenable_C
		TEST_METHOD(BlueprintGeneratedClass__TurnstileBarPlayerInteract__TurnstileBarPlayerInteract_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileBarPlayerInteract_C, UnknownData_7IKZ, 0x0272);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileBarPlayerInteract_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileBarPlayerInteract_C, PlayerInteractDetector, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATurnstileBarPlayerInteract_C, 0x0288);
		}

		// class ATurnstileEntry_C : public ADoorManager_C
		TEST_METHOD(BlueprintGeneratedClass__TurnstileEntry__TurnstileEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileEntry_C, UnknownData_SRZX, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileEntry_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileEntry_C, NoReEntryUpdate, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileEntry_C, MissionStateCondition, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileEntry_C, WorldStateHandler, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileEntry_C, RequireCompPass, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileEntry_C, PlayerTrigger, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileEntry_C, PlayerBlocker, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATurnstileEntry_C, 0x02F8);
		}

		// class AMainExitMissionTrigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__MainExitMissionTrigger__MainExitMissionTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainExitMissionTrigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainExitMissionTrigger_C, CompleteGetOut, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainExitMissionTrigger_C, MainExit, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainExitMissionTrigger_C, Triggered, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainExitMissionTrigger_C, UnknownData_0EVR, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainExitMissionTrigger_C, LineSkipper, 0x0291);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMainExitMissionTrigger_C, 0x02C0);
		}

		// class AStageLift_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__StageLift__StageLift_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, TimeCheckComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, MOD_StageLiftRailing, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, MOD_StageLiftRailTrim, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, Ak, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, TimeTrigger, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, MOD_Lift_MOD_LiftPipe, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, FreddyJumpOff, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, MissionStateCondition, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, ChildActor, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, StaticMeshComponent0, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, Scene1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, BottomTarget, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, Scene, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, RailingTimeline_HeightOffset_940E38AD456AF537D09597B04D80E5AF, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, RailingTimeline__Direction_940E38AD456AF537D09597B04D80E5AF, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, UnknownData_5JP1, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, RailingTimeline, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, MoveTimeline_HeightOffset_BBA25FCE40F76D9287D020B6EC69EC5F, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, MoveTimeline__Direction_BBA25FCE40F76D9287D020B6EC69EC5F, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, UnknownData_7Y6V, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, MoveTimeline, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, AtBottom, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, UnknownData_R9W8, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, PatrolPath, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, BottomTime, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, Lift_Landed_Start_Hour, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, Lift_Landed_Start_Minute, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, TImer_End_Hour, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, Time_End_Minute, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, UnknownData_QLTF, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, RefToSoundManager, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLift_C, RampBlocker, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStageLift_C, 0x0350);
		}

		// class AWestArcadeHolesManager_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__WestArcadeHolesManager__WestArcadeHolesManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWestArcadeHolesManager_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWestArcadeHolesManager_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWestArcadeHolesManager_C, Holes, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWestArcadeHolesManager_C, CurrentItem, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWestArcadeHolesManager_C, 0x0250);
		}

		// class UStaffbotKitchenHUD_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__StaffbotKitchenHUD__StaffbotKitchenHUD_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbotKitchenHUD_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbotKitchenHUD_C, WrongOrder_Anim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbotKitchenHUD_C, DoorPower, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbotKitchenHUD_C, DownloadTimeRemaining, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbotKitchenHUD_C, HUD_Frame, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbotKitchenHUD_C, PowerMeter_Background, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbotKitchenHUD_C, StaffbotKitchen_HoldProgress, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbotKitchenHUD_C, StaffbotKitchen_NextStep, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbotKitchenHUD_C, VerticalBox_Instructions, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbotKitchenHUD_C, P_Instructions, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbotKitchenHUD_C, OGM_Kitchen, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaffbotKitchenHUD_C, 0x0290);
		}

		// class UFreddy_Charge_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Freddy_Charge_ABP__Freddy_Charge_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, UnknownData_Z9NS, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, AnimGraphNode_SequencePlayer_2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, __CustomProperty_EaringDynamicAlpha_3C79D5AB4F16FF815D4D6F828B42F6EC, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, __CustomProperty_EarDynamicAlpha_3C79D5AB4F16FF815D4D6F828B42F6EC, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, __CustomProperty_AnimDynamics_Ears_3C79D5AB4F16FF815D4D6F828B42F6EC, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, UnknownData_S16G, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, AnimGraphNode_LinkedAnimGraph_2, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, __CustomProperty_Shoulderpad_DynamicAlpha_EC3BEC384F117C5D506776A52C8201B8, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, __CustomProperty_JiggleAlphaScale_EC3BEC384F117C5D506776A52C8201B8, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, __CustomProperty_JiggleDynamicAlpha_EC3BEC384F117C5D506776A52C8201B8, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, UnknownData_F5PC, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, AnimGraphNode_LinkedAnimGraph, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, AnimGraphNode_LookAt_4, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, AnimGraphNode_LookAt_3, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, AnimGraphNode_LocalToComponentSpace, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, AnimGraphNode_ComponentToLocalSpace, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, AnimGraphNode_LookAt_2, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, AnimGraphNode_LookAt, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, AnimGraphNode_Slot_2, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, AnimGraphNode_SequencePlayer, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, AnimGraphNode_Slot, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, AnimGraphNode_LayeredBoneBlend, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, HeadAimTarget, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, HeadAim, 0x0D54);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, UnknownData_2TVY, 0x0D55);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, HeadAimLoc, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Charge_ABP_C, HeadAimRot, 0x0D64);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFreddy_Charge_ABP_C, 0x0D70);
		}

		// class UCable02_PAS03_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable02_PAS03_ABP__Cable02_PAS03_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable02_PAS03_ABP_C, 0x05E0);
		}

		// class UHandlerComponentFactory : public UObject
		TEST_METHOD(Class__PacketHandler__HandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHandlerComponentFactory, 0x0028);
		}

		// class UPacketHandlerProfileConfig : public UObject
		TEST_METHOD(Class__PacketHandler__PacketHandlerProfileConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPacketHandlerProfileConfig, Components, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPacketHandlerProfileConfig, 0x0038);
		}

		// class UWI_SecurityScreenDisplay_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_SecurityScreenDisplay__WI_SecurityScreenDisplay_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_SecurityScreenDisplay_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_SecurityScreenDisplay_C, CanvasPanel_23, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_SecurityScreenDisplay_C, Class, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_SecurityScreenDisplay_C, NewVar_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_SecurityScreenDisplay_C, P_WidgetObject, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_SecurityScreenDisplay_C, 0x0258);
		}

		// class USetupSplineMovement_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__SetupSplineMovement__SetupSplineMovement_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetupSplineMovement_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetupSplineMovement_C, ChaseStateVar, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetupSplineMovement_C, SplineManagerVar, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetupSplineMovement_C, SplineManager, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetupSplineMovement_C, SplineMovementSpeedVar, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetupSplineMovement_C, MovementSpeed, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetupSplineMovement_C, 0x00FC);
		}

		// class UDbgGregoryStatesUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DbgGregoryStatesUI__DbgGregoryStatesUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDbgGregoryStatesUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDbgGregoryStatesUI_C, ChicaBeak, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDbgGregoryStatesUI_C, FreddyCall, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDbgGregoryStatesUI_C, FreddyEnterExit, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDbgGregoryStatesUI_C, Gregory_Sight, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDbgGregoryStatesUI_C, GregoryCrouch, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDbgGregoryStatesUI_C, MontyClaws, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDbgGregoryStatesUI_C, RoxyEyes, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDbgGregoryStatesUI_C, 0x0270);
		}

		// class UWI_Eula_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_Eula__WI_Eula_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Eula_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Eula_C, AcceptButton, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Eula_C, BlackBackground_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Eula_C, ScrollBox_31, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Eula_C, TermsAccepted, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_Eula_C, 0x0260);
		}

		// class APizzaMakerManager_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PizzaMakerManager__PizzaMakerManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APizzaMakerManager_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APizzaMakerManager_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APizzaMakerManager_C, CurrentPizzaStep, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APizzaMakerManager_C, UnknownData_7D1Z, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::APizzaMakerManager_C, NextStep, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APizzaMakerManager_C, PizzaCompleted, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APizzaMakerManager_C, UnknownData_LGN4, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::APizzaMakerManager_C, PizzaStations, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APizzaMakerManager_C, OnlyShowCurrentStation, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APizzaMakerManager_C, UnknownData_TK75, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APizzaMakerManager_C, OGM_Kitchen, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APizzaMakerManager_C, Reset_Time, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APizzaMakerManager_C, CanBake, 0x02DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APizzaMakerManager_C, 0x02DD);
		}

		// class UFlashlightProvider_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__FlashlightProvider__FlashlightProvider_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlashlightProvider_C, 0x0028);
		}

		// class UResetWeight_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__ResetWeight__ResetWeight_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UResetWeight_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResetWeight_C, WeightValue, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResetWeight_C, UnknownData_7XD8, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResetWeight_C, BBWeight, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResetWeight_C, 0x00E0);
		}

		// class URandomBoolWeighted_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__RandomBoolWeighted__RandomBoolWeighted_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomBoolWeighted_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomBoolWeighted_C, BBBool, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomBoolWeighted_C, WeightChange, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomBoolWeighted_C, UnknownData_5J20, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomBoolWeighted_C, BBCurrentWeight, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URandomBoolWeighted_C, 0x0108);
		}

		// class UGreg_FirstPerson_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Greg_FirstPerson_ABP__Greg_FirstPerson_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, UnknownData_E088, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_TransitionResult_7, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_TransitionResult_6, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_TransitionResult_5, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_TransitionResult_4, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_TransitionResult_3, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_TransitionResult_2, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_TransitionResult, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_SequencePlayer_20, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_StateResult_6, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_SequencePlayer_19, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_StateResult_5, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_SequencePlayer_18, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_StateResult_4, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_SequencePlayer_17, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_SequencePlayer_16, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_SequencePlayer_15, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_SequencePlayer_14, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_SequencePlayer_13, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_BlendListByEnum_4, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_StateResult_3, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_SequencePlayer_12, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_SequencePlayer_11, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_SequencePlayer_10, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_SequencePlayer_9, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_SequencePlayer_8, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_BlendListByEnum_3, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_StateResult_2, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_BlendSpacePlayer_3, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_BlendSpacePlayer_2, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_BlendSpacePlayer, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_SequencePlayer_7, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_SequencePlayer_6, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_BlendListByEnum_2, 0x0FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_BlendListByBool, 0x1068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_SequencePlayer_5, 0x1108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_SequencePlayer_4, 0x1180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_SequencePlayer_3, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_SequencePlayer_2, 0x1270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_SequencePlayer, 0x12E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_BlendListByEnum, 0x1360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_StateResult, 0x1410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_StateMachine, 0x1440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_Slot_2, 0x14F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_LayeredBoneBlend, 0x1538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_SaveCachedPose, 0x15F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_UseCachedPose_2, 0x16B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_UseCachedPose, 0x16D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, AnimGraphNode_Slot, 0x1700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, ItemEnum, 0x1748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, HasFazWatch, 0x1749);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, bFazwatchUP, 0x174A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, UnknownData_TPXL, 0x174B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, SpeedInput, 0x174C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, isMoving, 0x1750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, UnknownData_DBP6, 0x1751);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, GregPawn, 0x1758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, SwitchItem, 0x1760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, isDown, 0x1761);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, UnknownData_B8OM, 0x1762);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, NewEquip, 0x1768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGreg_FirstPerson_ABP_C, CanPlayFazWatchAnim, 0x1770);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGreg_FirstPerson_ABP_C, 0x1771);
		}

		// class AStaffBotBase_C : public ACharacter
		TEST_METHOD(BlueprintGeneratedClass__StaffBotBase__StaffBotBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, UnknownData_QMP2, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, UberGraphFrame, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, JumpscareTransform, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, SpringArm, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, AutoAlertRadius, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, EyeTarget, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, VisualSource, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, Sight, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, SM_Prop_01, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, PhysicalAnimation, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, HasJumpscared, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, UnknownData_JTLK, 0x0509);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, StaffbotAnimInstance, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, isJumpscaring, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, UnknownData_Q2B2, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, deltaTime, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, HasProp, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, UnknownData_GBJ7, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, HitByLaserKey, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, PlayerLocationKey, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, Stunned, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, UnknownData_A8B7, 0x0535);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, HeadAimTargetActor, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, HeadAim, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, UnknownData_3RSF, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, MovementAudioLoop, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, MovementAudioStop, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, CanEnterDoors, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, IsWarning, 0x0559);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, StaffbotJobEnum, 0x055A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, StaffbotRigEnum, 0x055B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, OverrideDefaultMaterials, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, UnknownData_0EUB, 0x055D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, MaterialDictionary, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, StaffbotMaterialOverride, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, UnknownData_WH2R, 0x05B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, InteractionPointWaitTimeKey, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, InteractionPointHitKey, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, TriggerAutoAlertKey, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, WarningCountKey, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, UnknownData_1CIS, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, OcclusionTrace, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, StaffbotEnabledKey, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, StaffbotPatrollingKey, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, TypesToAlert, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, NumberOfBotsToAlert, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, UnknownData_C3ON, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, TensionSystem, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, EmitterPlaying, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotBase_C, InAudibleRange, 0x0651);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaffBotBase_C, 0x0652);
		}

		// class URIG_ServiceCart_Skeleton_AnimBlueprint_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__RIG_ServiceCart_Skeleton_AnimBlueprint__RIG_ServiceCart_Skeleton_AnimBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_ServiceCart_Skeleton_AnimBlueprint_C, UnknownData_63EF, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_ServiceCart_Skeleton_AnimBlueprint_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_ServiceCart_Skeleton_AnimBlueprint_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_ServiceCart_Skeleton_AnimBlueprint_C, AnimGraphNode_SequencePlayer, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_ServiceCart_Skeleton_AnimBlueprint_C, AnimGraphNode_Slot, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_ServiceCart_Skeleton_AnimBlueprint_C, AnimGraphNode_ComponentToLocalSpace, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_ServiceCart_Skeleton_AnimBlueprint_C, AnimGraphNode_LocalToComponentSpace, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_ServiceCart_Skeleton_AnimBlueprint_C, Yaw_Rot, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_ServiceCart_Skeleton_AnimBlueprint_C, UnknownData_2ZT7, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_ServiceCart_Skeleton_AnimBlueprint_C, PlayAnim, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_ServiceCart_Skeleton_AnimBlueprint_C, CanPlay, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URIG_ServiceCart_Skeleton_AnimBlueprint_C, 0x03B9);
		}

		// class AP_FollowCamera_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__P_FollowCamera__P_FollowCamera_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_FollowCamera_C, UberGraphFrame, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_FollowCamera_C, Camera, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_FollowCamera_C, SpringArm, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_FollowCamera_C, RotateAround_NewTrack_0_9068C46E4F6A976CFB40F2B518A9F83E, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_FollowCamera_C, RotateAround__Direction_9068C46E4F6A976CFB40F2B518A9F83E, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_FollowCamera_C, UnknownData_6U4W, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_FollowCamera_C, RotateAround, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_FollowCamera_C, PullBackTimeline_NewTrack_0_4A7E949E4BAC65A9D8E9479E2D44B90D, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_FollowCamera_C, PullBackTimeline__Direction_4A7E949E4BAC65A9D8E9479E2D44B90D, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_FollowCamera_C, UnknownData_QN9L, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_FollowCamera_C, PullBackTimeline, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_FollowCamera_C, Actor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_FollowCamera_C, CurentTimerSequence, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_FollowCamera_C, Offset_Spring_Position, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_FollowCamera_C, StartArmLength, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_FollowCamera_C, Target_ArmLength, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_FollowCamera_C, UnknownData_QW6C, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_FollowCamera_C, MainTickTimer, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_FollowCamera_C, RotationOffset, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_FollowCamera_C, TargetRotaion, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_FollowCamera_C, Target_Sprint_offset, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_FollowCamera_C, StartOffsetPosition, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_FollowCamera_C, ScoreBoard, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AP_FollowCamera_C, 0x0328);
		}

		// class UNewGameCinematicPlayerUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__newGameCinematicPlayerUI__NewGameCinematicPlayerUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewGameCinematicPlayerUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewGameCinematicPlayerUI_C, Image_89, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewGameCinematicPlayerUI_C, ObjectiveList, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewGameCinematicPlayerUI_C, TextSurroundingKeyIcon, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewGameCinematicPlayerUI_C, CinematicCutscene, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewGameCinematicPlayerUI_C, Sound, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewGameCinematicPlayerUI_C, Media_Player, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewGameCinematicPlayerUI_C, CanFade, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewGameCinematicPlayerUI_C, UnknownData_LFKM, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewGameCinematicPlayerUI_C, Time, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewGameCinematicPlayerUI_C, Fade_Duration, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewGameCinematicPlayerUI_C, CanStop, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewGameCinematicPlayerUI_C, UnknownData_FXG4, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewGameCinematicPlayerUI_C, Controller_sound, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewGameCinematicPlayerUI_C, PlayingIntroVideo, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewGameCinematicPlayerUI_C, UnknownData_HR3R, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewGameCinematicPlayerUI_C, HoldTimeToSkip, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewGameCinematicPlayerUI_C, IsHoldingSkipButton, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewGameCinematicPlayerUI_C, CanFadeOut, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewGameCinematicPlayerUI_C, UnknownData_LXEY, 0x02C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewGameCinematicPlayerUI_C, Volume, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewGameCinematicPlayerUI_C, SequencerVO, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNewGameCinematicPlayerUI_C, 0x02D0);
		}

		// class UWI_SplashScreen_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_SplashScreen__WI_SplashScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_SplashScreen_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_SplashScreen_C, LegalAndLogosAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_SplashScreen_C, SteelWoolAnim, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_SplashScreen_C, BlackBackground, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_SplashScreen_C, Fnaf_Logo, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_SplashScreen_C, InstaLod_Logo, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_SplashScreen_C, Legal_And_Logos, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_SplashScreen_C, Static_Background, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_SplashScreen_C, SteelWool_Logo, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_SplashScreen_C, UE_Logo, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_SplashScreen_C, WI_Eula, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_SplashScreen_C, wwise_logo, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_SplashScreen_C, AcceptedTerms, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_SplashScreen_C, UnknownData_B9K0, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_SplashScreen_C, CurrentAnim, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_SplashScreen_C, NoMoreLogos, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_SplashScreen_C, PlayerSettingsData, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_SplashScreen_C, HaveTermsBeenUpdated, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_SplashScreen_C, 0x02C1);
		}

		// class UAmbientAudio_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__AmbientAudio__AmbientAudio_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbientAudio_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbientAudio_C, Audio, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbientAudio_C, israndom, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbientAudio_C, UnknownData_GGOJ, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbientAudio_C, PlayingID, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAmbientAudio_C, 0x00C8);
		}

		// class UChicaVoiceInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__ChicaVoiceInterface__ChicaVoiceInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChicaVoiceInterface_C, 0x0028);
		}

		// class UFindNextPoint_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FindNextPoint__FindNextPoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindNextPoint_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindNextPoint_C, BB_PathIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindNextPoint_C, BB_PathVector, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindNextPoint_C, BB_PreviousLocation, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindNextPoint_C, PossibleLocations, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindNextPoint_C, LocalPoints, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindNextPoint_C, PatrolPoint, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindNextPoint_C, NextPathPointIndex, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindNextPoint_C, FailOnNoPath, 0x0154);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindNextPoint_C, 0x0155);
		}

		// class ALobbyMainEntrance_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__LobbyMainEntrance__LobbyMainEntrance_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyMainEntrance_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyMainEntrance_C, TimeCheckComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyMainEntrance_C, GetOutFinished, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyMainEntrance_C, Ak, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyMainEntrance_C, RIG_MainRollup_Door, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyMainEntrance_C, DoorMover, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyMainEntrance_C, Scene, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyMainEntrance_C, PlanAEscape, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyMainEntrance_C, Widget2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyMainEntrance_C, Widget1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyMainEntrance_C, Cube, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyMainEntrance_C, IsClosed, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyMainEntrance_C, UnknownData_6OND, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyMainEntrance_C, CloseAnim, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALobbyMainEntrance_C, 0x0290);
		}

		// class AFrameRateActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__FrameRateActor__FrameRateActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrameRateActor_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrameRateActor_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrameRateActor_C, FrameCount, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrameRateActor_C, ElapsedTime, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrameRateActor_C, FPS, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrameRateActor_C, Active, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrameRateActor_C, CreateDebugUIFrameRate, 0x0245);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFrameRateActor_C, 0x0246);
		}

		// class APlayerControlledStaffBot_C : public AFNAFBasePlayerCharacter
		TEST_METHOD(BlueprintGeneratedClass__PlayerControlledStaffBot__PlayerControlledStaffBot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerControlledStaffBot_C, UberGraphFrame, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerControlledStaffBot_C, Capsule, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerControlledStaffBot_C, LevelStreamViewpoint, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerControlledStaffBot_C, PlayerInteractComponent, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerControlledStaffBot_C, PreviousPawn, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerControlledStaffBot_C, StartLocation, 0x04F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerControlledStaffBot_C, 0x0504);
		}

		// class UKeyBindingIcon_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__KeyBindingIcon__KeyBindingIcon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingIcon_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingIcon_C, Keyboard_Key, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingIcon_C, Keyboard_Key_Image, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingIcon_C, RichText_Gamepad_Key, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingIcon_C, GamePadIcons, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingIcon_C, KeyName, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingIcon_C, ExtraIcons, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingIcon_C, Override, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingIcon_C, UnknownData_3R22, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingIcon_C, IconMap, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyBindingIcon_C, 0x0350);
		}

		// class ALAF_Display1_C : public ASecurityScreenDisplayBase_C
		TEST_METHOD(BlueprintGeneratedClass__LAF_Display1__LAF_Display1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALAF_Display1_C, UnknownData_BNW8, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALAF_Display1_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALAF_Display1_C, InitialMaterial, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALAF_Display1_C, ElementIndex, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALAF_Display1_C, 0x02C4);
		}

		// class UActorSequence : public UMovieSceneSequence
		TEST_METHOD(Class__ActorSequence__ActorSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, MovieScene, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, ObjectReferences, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequence, 0x0370);
		}

		// class UActorSequenceComponent : public UActorComponent
		TEST_METHOD(Class__ActorSequence__ActorSequenceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, PlaybackSettings, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, UnknownData_RESV, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, Sequence, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, SequencePlayer, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequenceComponent, 0x00D8);
		}

		// class UActorSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__ActorSequence__ActorSequencePlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequencePlayer, 0x0888);
		}

		// class UObject
		TEST_METHOD(Class__CoreUObject__Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, VfTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, InternalIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Class, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Outer, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObject, 0x0028);
		}

		// class UInterface : public UObject
		TEST_METHOD(Class__CoreUObject__Interface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface, 0x0028);
		}

		// class UGCObjectReferencer : public UObject
		TEST_METHOD(Class__CoreUObject__GCObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGCObjectReferencer, UnknownData_13N7, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCObjectReferencer, 0x0070);
		}

		// class UTextBuffer : public UObject
		TEST_METHOD(Class__CoreUObject__TextBuffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBuffer, UnknownData_EYYS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBuffer, 0x0050);
		}

		// class UField : public UObject
		TEST_METHOD(Class__CoreUObject__Field)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UField, Next, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UField, 0x0030);
		}

		// class UStruct : public UField, public FStructBaseChain
		TEST_METHOD(Class__CoreUObject__Struct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, SuperField, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Children, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ChildProperties, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertySize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, MinAlignment, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Script, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertyLink, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, RefLink, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, DestructorLink, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PostConstructLink, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ScriptAndPropertyObjectReferences, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, UnresolvedScriptProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, UnversionedSchema, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStruct, 0x00B0);
		}

		// class UScriptStruct : public UStruct
		TEST_METHOD(Class__CoreUObject__ScriptStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptStruct, UnknownData_1NCL, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptStruct, 0x00C0);
		}

		// class UPackage : public UObject
		TEST_METHOD(Class__CoreUObject__Package)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackage, UnknownData_HJNJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackage, 0x00A0);
		}

		// class UClass : public UStruct
		TEST_METHOD(Class__CoreUObject__Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClass, UnknownData_503F, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClass, 0x0230);
		}

		// class UFunction : public UStruct
		TEST_METHOD(Class__CoreUObject__Function)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FunctionFlags, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, NumParms, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ParmsSize, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_PF1Z2OKROJ, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ReturnValueOffset, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCId, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCResponseId, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_CKEM41UCBG, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FirstPropertyToInit, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphFunction, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphCallOffset, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_S9YIW17ZZ3, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, Func, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunction, 0x00E0);
		}

		// class UDelegateFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__DelegateFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateFunction, 0x00E0);
		}

		// class USparseDelegateFunction : public UDelegateFunction
		TEST_METHOD(Class__CoreUObject__SparseDelegateFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USparseDelegateFunction, UnknownData_ZM1L, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USparseDelegateFunction, 0x00F0);
		}

		// class UDynamicClass : public UClass
		TEST_METHOD(Class__CoreUObject__DynamicClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicClass, UnknownData_9OSO, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicClass, 0x02B0);
		}

		// class UPackageMap : public UObject
		TEST_METHOD(Class__CoreUObject__PackageMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMap, UnknownData_GWBW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMap, 0x00E0);
		}

		// class UEnum : public UField
		TEST_METHOD(Class__CoreUObject__Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnum, UnknownData_TGZ9, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnum, 0x0060);
		}

		// class ULinkerPlaceholderClass : public UClass
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderClass, UnknownData_P9SN, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderClass, 0x03E8);
		}

		// class ULinkerPlaceholderExportObject : public UObject
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderExportObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderExportObject, UnknownData_JXIB, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderExportObject, 0x00F0);
		}

		// class ULinkerPlaceholderFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderFunction, UnknownData_RF06, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderFunction, 0x0298);
		}

		// class UMetaData : public UObject
		TEST_METHOD(Class__CoreUObject__MetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetaData, UnknownData_CN9H, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetaData, 0x00C8);
		}

		// class UObjectRedirector : public UObject
		TEST_METHOD(Class__CoreUObject__ObjectRedirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectRedirector, UnknownData_QHJE, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectRedirector, 0x0030);
		}

		// class UProperty : public UField
		TEST_METHOD(Class__CoreUObject__Property)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProperty, UnknownData_3ZDU, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProperty, 0x0070);
		}

		// class UEnumProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__EnumProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnumProperty, UnknownData_A6FJ, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnumProperty, 0x0080);
		}

		// class UArrayProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__ArrayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrayProperty, UnknownData_EXIN, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrayProperty, 0x0078);
		}

		// class UObjectPropertyBase : public UProperty
		TEST_METHOD(Class__CoreUObject__ObjectPropertyBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPropertyBase, UnknownData_U3MR, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectPropertyBase, 0x0078);
		}

		// class UBoolProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__BoolProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoolProperty, UnknownData_4HR0, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolProperty, 0x0078);
		}

		// class UNumericProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NumericProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNumericProperty, 0x0070);
		}

		// class UByteProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__ByteProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UByteProperty, UnknownData_XVG1, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UByteProperty, 0x0078);
		}

		// class UObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__ObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectProperty, 0x0078);
		}

		// class UClassProperty : public UObjectProperty
		TEST_METHOD(Class__CoreUObject__ClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassProperty, UnknownData_XNP0, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassProperty, 0x0080);
		}

		// class UDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__DelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDelegateProperty, UnknownData_8TB4, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateProperty, 0x0078);
		}

		// class UDoubleProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__DoubleProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoubleProperty, 0x0070);
		}

		// class UFloatProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__FloatProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatProperty, 0x0070);
		}

		// class UIntProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__IntProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntProperty, 0x0070);
		}

		// class UInt8Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int8Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt8Property, 0x0070);
		}

		// class UInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt16Property, 0x0070);
		}

		// class UInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt64Property, 0x0070);
		}

		// class UInterfaceProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__InterfaceProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterfaceProperty, UnknownData_7NMI, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterfaceProperty, 0x0078);
		}

		// class ULazyObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__LazyObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULazyObjectProperty, 0x0078);
		}

		// class UMapProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MapProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProperty, UnknownData_2WTV, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapProperty, 0x0098);
		}

		// class UMulticastDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MulticastDelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMulticastDelegateProperty, UnknownData_UUI6, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegateProperty, 0x0078);
		}

		// class UMulticastInlineDelegateProperty : public UMulticastDelegateProperty
		TEST_METHOD(Class__CoreUObject__MulticastInlineDelegateProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastInlineDelegateProperty, 0x0078);
		}

		// class UMulticastSparseDelegateProperty : public UMulticastDelegateProperty
		TEST_METHOD(Class__CoreUObject__MulticastSparseDelegateProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastSparseDelegateProperty, 0x0078);
		}

		// class UNameProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NameProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNameProperty, 0x0070);
		}

		// class USetProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__SetProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetProperty, UnknownData_O0OY, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetProperty, 0x0090);
		}

		// class USoftObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__SoftObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftObjectProperty, 0x0078);
		}

		// class USoftClassProperty : public USoftObjectProperty
		TEST_METHOD(Class__CoreUObject__SoftClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoftClassProperty, UnknownData_X577, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftClassProperty, 0x0080);
		}

		// class UStrProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StrProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStrProperty, 0x0070);
		}

		// class UStructProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StructProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructProperty, UnknownData_KT09, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStructProperty, 0x0078);
		}

		// class UUInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt16Property, 0x0070);
		}

		// class UUInt32Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt32Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt32Property, 0x0070);
		}

		// class UUInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt64Property, 0x0070);
		}

		// class UWeakObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__WeakObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeakObjectProperty, 0x0078);
		}

		// class UTextProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__TextProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextProperty, 0x0070);
		}

		// class UPropertyWrapper : public UObject
		TEST_METHOD(Class__CoreUObject__PropertyWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyWrapper, UnknownData_FDL7, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyWrapper, 0x0030);
		}

		// class UMulticastDelegatePropertyWrapper : public UPropertyWrapper
		TEST_METHOD(Class__CoreUObject__MulticastDelegatePropertyWrapper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegatePropertyWrapper, 0x0030);
		}

		// class UMulticastInlineDelegatePropertyWrapper : public UMulticastDelegatePropertyWrapper
		TEST_METHOD(Class__CoreUObject__MulticastInlineDelegatePropertyWrapper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastInlineDelegatePropertyWrapper, 0x0030);
		}

		// class UMovieScenePropertyTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, SectionToKey, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyPath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertyTrack, 0x0088);
		}

		// class UMovieSceneTransformOrigin : public UInterface
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformOrigin)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformOrigin, 0x0028);
		}

		// class UMovieScene3DConstraintSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintId, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintBindingID, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintSection, 0x0108);
		}

		// class UMovieScene3DAttachSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachSocketName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachComponentName, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentLocationRule, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentRotationRule, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentScaleRule, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentLocationRule, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentRotationRule, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentScaleRule, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, UnknownData_625O, 0x011E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachSection, 0x0120);
		}

		// class UMovieScene3DConstraintTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintTrack, ConstraintSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintTrack, 0x0068);
		}

		// class UMovieScene3DAttachTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachTrack, 0x0068);
		}

		// class UMovieScene3DPathSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, TimingCurve, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, FrontAxisEnum, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UpAxisEnum, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_FZR7, 0x01AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_NA05, 0x01AD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathSection, 0x01B0);
		}

		// class UMovieScene3DPathTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathTrack, 0x0068);
		}

		// class UMovieScene3DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, TransformMask, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_VHFH, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Translation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Rotation, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Scale, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, ManualWeight, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_C4VW, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, bUseQuaternionInterpolation, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_GTT1, 0x072D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformSection, 0x0730);
		}

		// class UMovieScene3DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformTrack, 0x0088);
		}

		// class UMovieSceneActorReferenceSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorReferenceData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidIndexCurve, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidStrings, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceSection, 0x0220);
		}

		// class UMovieSceneActorReferenceTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceTrack, 0x0088);
		}

		// class UMovieSceneAudioSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, Sound, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartFrameOffset, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartOffset, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioStartTime, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioDilationFactor, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioVolume, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_RKCV, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, SoundVolume, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, PitchMultiplier, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttachActorData, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bSuppressSubtitles, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bOverrideAttenuation, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_SP3W, 0x02F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttenuationSettings, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnQueueSubtitles, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioFinished, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioPlaybackPercent, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioSection, 0x0330);
		}

		// class UMovieSceneAudioTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioTrack, AudioSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioTrack, 0x0068);
		}

		// class UMovieSceneBoolSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, DefaultValue, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, UnknownData_AR8S, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, BoolCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolSection, 0x0178);
		}

		// class UMovieSceneBoolTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolTrack, 0x0088);
		}

		// class UMovieSceneByteSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteSection, ByteCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteSection, 0x0178);
		}

		// class UMovieSceneByteTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteTrack, Enum, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteTrack, 0x0090);
		}

		// class UMovieSceneCameraAnimSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, AnimData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, CameraAnim, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayRate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendInTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendOutTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, bLooping, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, UnknownData_GOEF, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimSection, 0x0120);
		}

		// class UMovieSceneCameraAnimTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimTrack, CameraAnimSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimTrack, 0x0068);
		}

		// class UMovieSceneCameraCutSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraGuid, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraBindingID, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutSection, 0x0108);
		}

		// class UMovieSceneCameraCutTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, bCanBlend, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, UnknownData_05AH, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, Sections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutTrack, 0x0070);
		}

		// class UMovieSceneCameraShakeSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeClass, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlayScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlaySpace, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_GNYB, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UserDefinedPlaySpace, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_MKDC, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSection, 0x0120);
		}

		// class UMovieSceneCameraShakeTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeTrack, CameraShakeSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeTrack, 0x0068);
		}

		// class UMovieSceneCinematicShotSection : public UMovieSceneSubSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, ShotDisplayName, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, DisplayName, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotSection, 0x0180);
		}

		// class UMovieSceneCinematicShotTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotTrack, 0x0068);
		}

		// class UMovieSceneColorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, RedCurve, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, GreenCurve, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, BlueCurve, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, AlphaCurve, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorSection, 0x0360);
		}

		// class UMovieSceneColorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, bIsSlateColor, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, UnknownData_U6ZG, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorTrack, 0x0090);
		}

		// class UMovieSceneEnumSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumSection, EnumCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumSection, 0x0178);
		}

		// class UMovieSceneEnumTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumTrack, Enum, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumTrack, 0x0090);
		}

		// class UMovieSceneEulerTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEulerTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEulerTransformTrack, 0x0088);
		}

		// class UMovieSceneEventSectionBase : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSectionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSectionBase, 0x00E0);
		}

		// class UMovieSceneEventRepeaterSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventRepeaterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventRepeaterSection, Event, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventRepeaterSection, 0x0108);
		}

		// class UMovieSceneEventSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, Events, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, EventData, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSection, 0x01E0);
		}

		// class UMovieSceneEventTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_U6AN, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, EventPosition, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_BUBK, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, EventReceivers, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, Sections, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTrack, 0x0080);
		}

		// class UMovieSceneEventTriggerSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTriggerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTriggerSection, EventChannel, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTriggerSection, 0x0168);
		}

		// class UMovieSceneFloatSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFloatSection, FloatCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatSection, 0x0180);
		}

		// class UMovieSceneFadeSection : public UMovieSceneFloatSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, FadeColor, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, UnknownData_EF9E, 0x0191);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeSection, 0x0198);
		}

		// class UMovieSceneFloatTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatTrack, 0x0088);
		}

		// class UMovieSceneFadeTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeTrack, 0x0088);
		}

		// class UMovieSceneIntegerSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneIntegerSection, IntegerCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerSection, 0x0170);
		}

		// class UMovieSceneIntegerTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerTrack, 0x0088);
		}

		// class UMovieSceneLevelVisibilitySection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilitySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, Visibility, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, UnknownData_VLZE, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, LevelNames, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilitySection, 0x00F8);
		}

		// class UMovieSceneLevelVisibilityTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilityTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilityTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilityTrack, 0x0068);
		}

		// class UMovieSceneMaterialTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialTrack, 0x0068);
		}

		// class UMovieSceneMaterialParameterCollectionTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialParameterCollectionTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialParameterCollectionTrack, MPC, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialParameterCollectionTrack, 0x0070);
		}

		// class UMovieSceneComponentMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, MaterialIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, UnknownData_FT3I, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentMaterialTrack, 0x0070);
		}

		// class UMovieSceneObjectPropertySection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneObjectPropertySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertySection, ObjectChannel, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneObjectPropertySection, 0x01A0);
		}

		// class UMovieSceneObjectPropertyTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneObjectPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertyTrack, PropertyClass, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneObjectPropertyTrack, 0x0090);
		}

		// class UMovieSceneParameterSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParameterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, BoolParameterNamesAndCurves, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ScalarParameterNamesAndCurves, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, Vector2DParameterNamesAndCurves, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, VectorParameterNamesAndCurves, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ColorParameterNamesAndCurves, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, TransformParameterNamesAndCurves, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParameterSection, 0x0140);
		}

		// class UMovieSceneParticleParameterTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleParameterTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleParameterTrack, 0x0068);
		}

		// class UMovieSceneParticleSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleSection, ParticleKeys, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleSection, 0x0178);
		}

		// class UMovieSceneParticleTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleTrack, ParticleSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleTrack, 0x0068);
		}

		// class UMovieScenePrimitiveMaterialSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePrimitiveMaterialSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialSection, MaterialChannel, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePrimitiveMaterialSection, 0x01A0);
		}

		// class UMovieScenePrimitiveMaterialTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePrimitiveMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, MaterialIndex, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, UnknownData_7V1F, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePrimitiveMaterialTrack, 0x0090);
		}

		// class UMovieSceneSkeletalAnimationSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Params, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, AnimSequence, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Animation, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartOffset, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, EndOffset, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, PlayRate, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_M2IG, 0x01D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, SlotName, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationSection, 0x01E0);
		}

		// class UMovieSceneSkeletalAnimationTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, AnimationSections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, bUseLegacySectionIndexBlend, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_X73Y, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationTrack, 0x0070);
		}

		// class UMovieSceneSlomoSection : public UMovieSceneFloatSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoSection, 0x0180);
		}

		// class UMovieSceneSlomoTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoTrack, 0x0088);
		}

		// class UMovieSceneSpawnSection : public UMovieSceneBoolSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSpawnSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnSection, 0x0178);
		}

		// class UMovieSceneSpawnTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSpawnTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, Sections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, ObjectGuid, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnTrack, 0x0078);
		}

		// class UMovieSceneStringSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneStringSection, StringCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringSection, 0x0180);
		}

		// class UMovieSceneStringTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringTrack, 0x0088);
		}

		// class UMovieSceneTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformTrack, 0x0088);
		}

		// class UMovieSceneVectorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, Curves, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, ChannelsUsed, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, UnknownData_X18F, 0x0364);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorSection, 0x0368);
		}

		// class UMovieSceneVectorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, NumChannelsUsed, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, UnknownData_04U6, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorTrack, 0x0090);
		}

		// class UMovieSceneVisibilityTrack : public UMovieSceneBoolTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVisibilityTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVisibilityTrack, 0x0088);
		}

		// class AKitchen_EmergencyUIActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Kitchen_EmergencyUIActor__Kitchen_EmergencyUIActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchen_EmergencyUIActor_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchen_EmergencyUIActor_C, EmergencyUI, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchen_EmergencyUIActor_C, DefaultSceneRoot, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKitchen_EmergencyUIActor_C, 0x0240);
		}

		// class UABP_FunctionLibrary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__ABP_FunctionLibrary__ABP_FunctionLibrary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UABP_FunctionLibrary_C, 0x0028);
		}

		// class UAnimatronicBPInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__AnimatronicBPInterface__AnimatronicBPInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimatronicBPInterface_C, 0x0028);
		}

		// class UWI_FloatingButtonIcon_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_FloatingButtonIcon__WI_FloatingButtonIcon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FloatingButtonIcon_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FloatingButtonIcon_C, Button_Image, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_FloatingButtonIcon_C, ButtonType, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_FloatingButtonIcon_C, 0x0241);
		}

		// class UPartsAndServiceABP_Interface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__PartsAndServiceABP_Interface__PartsAndServiceABP_Interface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartsAndServiceABP_Interface_C, 0x0028);
		}

		// class APRE_GtrGlf_Barrel_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PRE_GtrGlf_Barrel__PRE_GtrGlf_Barrel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Barrel_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Barrel_C, MOD_GtrGlf_Boat, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Barrel_C, Subtle_bob_NewTrack_0_FCA82E3A42130F5C026F1385B84159A2, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Barrel_C, Subtle_bob__Direction_FCA82E3A42130F5C026F1385B84159A2, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Barrel_C, UnknownData_5CE2, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Barrel_C, Subtle_bob, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Barrel_C, Updated_Z_Rotation, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Barrel_C, Updated_X_Rotation, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Barrel_C, Total_height_Adjust, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Barrel_C, Intensity_Height, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Barrel_C, Intensity_ZRotate, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_Barrel_C, Intensity_XRotate, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_GtrGlf_Barrel_C, 0x0260);
		}

		// class UItemCollectionUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ItemCollectionUI__ItemCollectionUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, AcceptRichText, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, BackButton, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, BackButtonRichText, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, BackButtonRichText_2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, BackButtonRichText_3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, Background_BlackImage, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, Background_PuepleBacking, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, ClothesButton, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, CollectionGrid, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, EquipmentButton, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, FoodButton, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, ItemImageView, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, ItemModelImageView, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, ItemName, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, ItemName_Accent, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, MiscButton, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, RetroCDButton, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, TrophiesButton, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, InventoryCategorySelectionIndex, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, UnknownData_VFXW, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, OnInventorySelectionUpdated, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, InventoryType, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, UnknownData_57UR, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, ButtonRef, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, ModelTumbler, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, TitleUI, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, PauseUI, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, CurrentlySelectedButton, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCollectionUI_C, RetroCDItemNames, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemCollectionUI_C, 0x0320);
		}

		// class UWorker_Warning_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__Worker_Warning__Worker_Warning_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_Warning_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_Warning_C, Warning, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_Warning_C, WarningCountKey, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorker_Warning_C, 0x00E0);
		}

		// class UIncrementInteger_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__IncrementInteger__IncrementInteger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIncrementInteger_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIncrementInteger_C, IntegerKey, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIncrementInteger_C, 0x00D8);
		}

		// class ASignalActorLoaded_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SignalActorLoaded__SignalActorLoaded_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASignalActorLoaded_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASignalActorLoaded_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASignalActorLoaded_C, ActorSoftRef, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASignalActorLoaded_C, OnActorLoaded, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASignalActorLoaded_C, 0x0270);
		}

		// class AScreenStaticSwitcher_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ScreenStaticSwitcher__ScreenStaticSwitcher_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenStaticSwitcher_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenStaticSwitcher_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenStaticSwitcher_C, Screens, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenStaticSwitcher_C, ArrayOfMeshes, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenStaticSwitcher_C, ArrayOfMats, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenStaticSwitcher_C, useScreensaver_, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenStaticSwitcher_C, OFF_, 0x0269);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScreenStaticSwitcher_C, 0x026A);
		}

		// class UShatteredMonty_PlayMontage_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__ShatteredMonty_PlayMontage__ShatteredMonty_PlayMontage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShatteredMonty_PlayMontage_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShatteredMonty_PlayMontage_C, OldMoveMode, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShatteredMonty_PlayMontage_C, 0x00B1);
		}

		// class UIsShatteredRoxy_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__IsShatteredRoxy__IsShatteredRoxy_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsShatteredRoxy_C, 0x00A0);
		}

		// class UWI_InstructionCard_UseFreddy_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_UseFreddy__WI_InstructionCard_UseFreddy_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_UseFreddy_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_UseFreddy_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_UseFreddy_C, UI_TextAndIcons, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_UseFreddy_C, UI_TextAndIcons_2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_UseFreddy_C, VerticalBox_250, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_UseFreddy_C, WI_ImageScaled, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_UseFreddy_C, WI_ImageScaled_2, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_UseFreddy_C, 0x0268);
		}

		// class ARoxy_C : public AAISeeker_C
		TEST_METHOD(BlueprintGeneratedClass__Roxy__Roxy_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARoxy_C, UnknownData_CRN4, 0x07F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARoxy_C, UberGraphFrame, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARoxy_C, RoxyHowl, 0x0800);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARoxy_C, 0x0810);
		}

		// class UTapeSaveGameObject_C : public USaveGame
		TEST_METHOD(BlueprintGeneratedClass__TapeSaveGameObject__TapeSaveGameObject_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTapeSaveGameObject_C, CollectedTapesData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTapeSaveGameObject_C, TapesDonePlaying, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTapeSaveGameObject_C, InInventoryTapes, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTapeSaveGameObject_C, NoOfTapesDone, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTapeSaveGameObject_C, 0x009C);
		}

		// class UShootAtPlayer_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__ShootAtPlayer__ShootAtPlayer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShootAtPlayer_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShootAtPlayer_C, Accurcy, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShootAtPlayer_C, UnknownData_A6YB, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShootAtPlayer_C, LastKnownKey, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShootAtPlayer_C, ShootSkey, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShootAtPlayer_C, 0x0108);
		}

		// class UWI_Freddy_Clock_C : public UWI_Empty_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_Freddy_Clock__WI_Freddy_Clock_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Freddy_Clock_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Freddy_Clock_C, Blink, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Freddy_Clock_C, AmPmText, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Freddy_Clock_C, ClockBackground, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Freddy_Clock_C, ClockText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Freddy_Clock_C, Am_Pm, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Freddy_Clock_C, PM, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Freddy_Clock_C, UnknownData_PDZN, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Freddy_Clock_C, MinuteTracker, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_Freddy_Clock_C, 0x0288);
		}

		// class UStaffbot_LocationAim_LINK_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Staffbot_LocationAim_LINK__Staffbot_LocationAim_LINK_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, UnknownData_6595, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AnimGraphNode_LayeredBoneBlend_2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AnimGraphNode_SaveCachedPose_2, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AnimGraphNode_UseCachedPose_6, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AnimGraphNode_UseCachedPose_5, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AnimGraphNode_LinkedInputPose, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AnimGraphNode_RotationOffsetBlendSpace_2, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AnimGraphNode_SaveCachedPose, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AnimGraphNode_BlendListByEnum, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AnimGraphNode_UseCachedPose_4, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AnimGraphNode_LookAt_3, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AnimGraphNode_LookAt_2, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AnimGraphNode_ComponentToLocalSpace_2, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AnimGraphNode_LocalToComponentSpace_2, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AnimGraphNode_UseCachedPose_3, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AnimGraphNode_LayeredBoneBlend, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AnimGraphNode_UseCachedPose_2, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AnimGraphNode_RotationOffsetBlendSpace, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AnimGraphNode_UseCachedPose, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AnimGraphNode_LookAt, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AnimGraphNode_LocalToComponentSpace, 0x1010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AnimGraphNode_ComponentToLocalSpace, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, IsHeadAiming, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, UnknownData_2W1I, 0x1051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AimRotChest, 0x1054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AimTarget, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, AimAlpha, 0x106C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_LocationAim_LINK_C, jobEnum, 0x1070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaffbot_LocationAim_LINK_C, 0x1071);
		}

		// class ACamera_C : public ASecurityCamera
		TEST_METHOD(BlueprintGeneratedClass__Camera__Camera_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, PS4HighQulaitySceneCapture, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, LowQulaitySceneCapture, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, HighQulaitySceneCapture, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, LevelStreamViewpoint, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, DebugText, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, RenderDetector, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, Camera, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, CurrentConicAngle, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, CurrentForwardAngle, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, VisibilityAngle, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, StartingForwardAngle, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, DetectionDistance, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, ForwardAngleDelta, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, ConicAngleDelta, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, ZoomAmount, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, PanAmount, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, CanPan, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, UnknownData_GJKS, 0x02F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, CameraPanAngle, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, deltaTime, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, CameraPanSpeed, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, CameraPanTarget, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, LightOn, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, UnknownData_7OEY, 0x0309);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, TiltAmount, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, InitialPitch, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, InitialYaw, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, IsOperable, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, CameraOperational, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, UnknownData_U9BQ, 0x031A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, LocationName, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, IconOffset, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, StreamReady, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, UnknownData_5CFF, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, OnLevelsLoaded, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, ReferenceSet, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, ForceCapture, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, UnknownData_HEKD, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, Target, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, ServoAudioPlaying, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, UnknownData_8780, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, PastServoSpeeds, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, ServoTopSpeed, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, ForceCaptureFrames, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, MaxForceCaptureFrames, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, SightEnabled, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, CanRender, 0x03DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, HandledByManager, 0x03DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, UnknownData_HEJ9, 0x03DF);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, CameraRenderTarget, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, CameraRenderTargetManager, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, CamerRenderTargetManagerRef, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACamera_C, CurrentSceneCapture, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACamera_C, 0x0420);
		}

		// class AJumpscarePawn_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__JumpscarePawn__JumpscarePawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, UberGraphFrame, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, SpotLight1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, LevelStreamViewpoint, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, Camera, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, DefaultSceneRoot, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, Timeline_1_Max_946A675A44E7168E92D14D97F182C860, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, Timeline_1__Direction_946A675A44E7168E92D14D97F182C860, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, UnknownData_Q1V8, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, Timeline_2, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, Timeline_0_NewTrack_0_A3348FB94BB909F03E0CC3B44069B8E5, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, Timeline_0__Direction_A3348FB94BB909F03E0CC3B44069B8E5, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, UnknownData_W21M, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, Timeline_1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, CanEscape, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, UnknownData_62UY, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, GregoryPawn, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, KillTimer, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, IsLethal, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, UnknownData_305A, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, deltaTime, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, TargetIntensity, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, CamShakeScale, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, BlendOutTime, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, jumpscareTimer, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJumpscarePawn_C, ActorPerformingScare, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AJumpscarePawn_C, 0x0308);
		}

		// class UFinalChoiceUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FinalChoiceUI__FinalChoiceUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFinalChoiceUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFinalChoiceUI_C, LeaveButton, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFinalChoiceUI_C, StayButton, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFinalChoiceUI_C, VannyButton, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFinalChoiceUI_C, HoveredOutline_Color, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFinalChoiceUI_C, NormalOutline_Color, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFinalChoiceUI_C, Stay, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFinalChoiceUI_C, Leave, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFinalChoiceUI_C, Vanny, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFinalChoiceUI_C, 0x0288);
		}

		// class ABurntrap_Freddy_C : public AFreddy_C
		TEST_METHOD(BlueprintGeneratedClass__Burntrap_Freddy__Burntrap_Freddy_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABurntrap_Freddy_C, UberGraphFrame, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABurntrap_Freddy_C, PlayerCaptureTrigger, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABurntrap_Freddy_C, IsHacked, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABurntrap_Freddy_C, UnknownData_LOPI, 0x0929);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABurntrap_Freddy_C, HackTimeMax, 0x092C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABurntrap_Freddy_C, HackTime, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABurntrap_Freddy_C, ChargeTimer, 0x0934);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABurntrap_Freddy_C, ChargeTimerMax, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABurntrap_Freddy_C, HasGregory, 0x093C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABurntrap_Freddy_C, UnknownData_HWV3, 0x093D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABurntrap_Freddy_C, RechargeStations, 0x093D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABurntrap_Freddy_C, LineSkipper, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABurntrap_Freddy_C, Manager, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABurntrap_Freddy_C, Is_In_Recharge_Station, 0x0980);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABurntrap_Freddy_C, 0x0981);
		}

		// class ANoDaycarePassTrigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__NoDaycarePassTrigger__NoDaycarePassTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANoDaycarePassTrigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANoDaycarePassTrigger_C, LineSkipper, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANoDaycarePassTrigger_C, Played, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANoDaycarePassTrigger_C, 0x02A9);
		}

		// class AMontyBossTargetBP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__MontyBossTargetBP__MontyBossTargetBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossTargetBP_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossTargetBP_C, PointLight, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossTargetBP_C, SM_Target2, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossTargetBP_C, MontyBossManager, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossTargetBP_C, Index, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossTargetBP_C, UnknownData_1MCR, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossTargetBP_C, Hit_Emissive, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMontyBossTargetBP_C, 0x0278);
		}

		// class ADbgPlayerPawn_C : public ASpectatorPawn
		TEST_METHOD(BlueprintGeneratedClass__DbgPlayerPawn__DbgPlayerPawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADbgPlayerPawn_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADbgPlayerPawn_C, LevelStreamViewpoint, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADbgPlayerPawn_C, PointLight, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADbgPlayerPawn_C, 0x02C8);
		}

		// class AOvertimeVanessaTrigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__OvertimeVanessaTrigger__OvertimeVanessaTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOvertimeVanessaTrigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOvertimeVanessaTrigger_C, GetOut, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOvertimeVanessaTrigger_C, 0x0288);
		}

		// class AEnterMontyGolfTrigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__EnterMontyGolfTrigger__EnterMontyGolfTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEnterMontyGolfTrigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEnterMontyGolfTrigger_C, LineSkipper, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEnterMontyGolfTrigger_C, Manager, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEnterMontyGolfTrigger_C, 0x02D0);
		}

		// class AMontyBossMonitor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__MontyBossMonitor__MontyBossMonitor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossMonitor_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossMonitor_C, MOD_MontyWaveCutOut, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossMonitor_C, MOD_MontySplashCutOut, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossMonitor_C, MOD_MontyMeterBoard, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossMonitor_C, DefaultSceneRoot, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossMonitor_C, MoveTo, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossMonitor_C, UnknownData_SEMM, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossMonitor_C, CurveConverter, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossMonitor_C, CurrentPercent, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyBossMonitor_C, DT, 0x0264);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMontyBossMonitor_C, 0x0268);
		}

		// class URotate_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__Rotate__Rotate_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URotate_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotate_C, RotationSpeed, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotate_C, ForwardSpeed, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URotate_C, 0x00B8);
		}

		// class UDatasmithObjectTemplate : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithObjectTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithObjectTemplate, UnknownData_XPQS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithObjectTemplate, 0x0030);
		}

		// class UDatasmithActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, Layers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, Tags, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithActorTemplate, 0x00D0);
		}

		// class UDatasmithAdditionalData : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithAdditionalData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAdditionalData, 0x0028);
		}

		// class ADatasmithAreaLightActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, LightType, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, LightShape, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_YXYX, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Dimensions, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Intensity, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IntensityUnits, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_WOCK, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Color, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Temperature, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IESTexture, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, bUseIESBrightness, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_2PSX, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IESBrightnessScale, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Rotation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SourceRadius, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SourceLength, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, AttenuationRadius, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SpotlightInnerAngle, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SpotlightOuterAngle, 0x027C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithAreaLightActor, 0x0280);
		}

		// class UDatasmithAreaLightActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, LightType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, LightShape, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_QN1A, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Dimensions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Color, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Intensity, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IntensityUnits, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_UBC2, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Temperature, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IESTexture, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, bUseIESBrightness, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_0J74, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IESBrightnessScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Rotation, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, SourceRadius, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, SourceLength, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, AttenuationRadius, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAreaLightActorTemplate, 0x00A0);
		}

		// class UDatasmithAssetImportData : public UAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetImportData, 0x0028);
		}

		// class UDatasmithStaticMeshImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshImportData, 0x0028);
		}

		// class UDatasmithStaticMeshCADImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshCADImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshCADImportData, 0x0028);
		}

		// class UDatasmithSceneImportData : public UAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneImportData, 0x0028);
		}

		// class UDatasmithTranslatedSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithTranslatedSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithTranslatedSceneImportData, 0x0028);
		}

		// class UDatasmithCADImportSceneData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithCADImportSceneData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCADImportSceneData, 0x0028);
		}

		// class UDatasmithMDLSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithMDLSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithMDLSceneImportData, 0x0028);
		}

		// class UDatasmithGLTFSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithGLTFSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Generator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Version, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, UnknownData_ORUX, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Author, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, License, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Source, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithGLTFSceneImportData, 0x0070);
		}

		// class UDatasmithStaticMeshGLTFImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshGLTFImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshGLTFImportData, SourceMeshName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshGLTFImportData, 0x0038);
		}

		// class UDatasmithFBXSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithFBXSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, bGenerateLightmapUVs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, UnknownData_7QYY, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, TexturesDir, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, IntermediateSerialization, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, bColorizeMaterials, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, UnknownData_0ABV, 0x0042);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithFBXSceneImportData, 0x0048);
		}

		// class UDatasmithDeltaGenAssetImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenAssetImportData, 0x0028);
		}

		// class UDatasmithDeltaGenSceneImportData : public UDatasmithFBXSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bMergeNodes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bOptimizeDuplicatedNodes, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bRemoveInvisibleNodes, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bSimplifyNodeHierarchy, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportVar, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_J82P, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, VarPath, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportPos, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_Y1ET, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, PosPath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportTml, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_S9VH, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, TmlPath, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenSceneImportData, 0x0090);
		}

		// class UDatasmithVREDAssetImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDAssetImportData, 0x0028);
		}

		// class UDatasmithVREDSceneImportData : public UDatasmithFBXSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bMergeNodes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bOptimizeDuplicatedNodes, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportMats, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_7YXW, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, MatsPath, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportVar, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bCleanVar, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_N7OL, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, VarPath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportLightInfo, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_P3YP, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, LightInfoPath, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportClipInfo, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_25GN, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, ClipInfoPath, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDSceneImportData, 0x00A8);
		}

		// class UDatasmithIFCSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithIFCSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithIFCSceneImportData, 0x0028);
		}

		// class UDatasmithStaticMeshIFCImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshIFCImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshIFCImportData, SourceGlobalId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshIFCImportData, 0x0038);
		}

		// class UDatasmithAssetUserData : public UAssetUserData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAssetUserData, MetaData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetUserData, 0x0078);
		}

		// class UDatasmithCineCameraActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithCineCameraActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraActorTemplate, LookatTrackingSettings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCineCameraActorTemplate, 0x0060);
		}

		// class UDatasmithCineCameraComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithCineCameraComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FilmbackSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, LensSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FocusSettings, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentFocalLength, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentAperture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, UnknownData_L81I, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, PostProcessSettings, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCineCameraComponentTemplate, 0x0090);
		}

		// class UDatasmithContentBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DatasmithContent__DatasmithContentBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithContentBlueprintLibrary, 0x0028);
		}

		// class UDatasmithCustomActionBase : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithCustomActionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCustomActionBase, UnknownData_N34A, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCustomActionBase, 0x0030);
		}

		// class ADatasmithImportedSequencesActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithImportedSequencesActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithImportedSequencesActor, ImportedSequences, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithImportedSequencesActor, 0x0238);
		}

		// class UDatasmithOptionsBase : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithOptionsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithOptionsBase, 0x0028);
		}

		// class UDatasmithCommonTessellationOptions : public UDatasmithOptionsBase
		TEST_METHOD(Class__DatasmithContent__DatasmithCommonTessellationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCommonTessellationOptions, Options, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCommonTessellationOptions, 0x0038);
		}

		// class UDatasmithImportOptions : public UDatasmithOptionsBase
		TEST_METHOD(Class__DatasmithContent__DatasmithImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, SearchPackagePolicy, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialConflictPolicy, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, TextureConflictPolicy, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, StaticMeshActorImportPolicy, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, LightImportPolicy, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, CameraImportPolicy, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, OtherActorImportPolicy, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialQuality, 0x002F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_UWAE, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, BaseOptions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, ReimportOptions, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_7I3B, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, Filename, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, FilePath, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_TV8H, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithImportOptions, 0x0078);
		}

		// class UDatasmithLandscapeTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithLandscapeTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, LandscapeMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, StaticLightingLOD, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, UnknownData_2F5O, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithLandscapeTemplate, 0x0040);
		}

		// class UDatasmithLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_IH5L, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_D7IV, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, Intensity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, Temperature, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESBrightnessScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightColor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_Z2FF, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightFunctionMaterial, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESTexture, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithLightComponentTemplate, 0x0068);
		}

		// class UDatasmithMaterialInstanceTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithMaterialInstanceTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, ParentMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, ScalarParameterValues, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, VectorParameterValues, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, TextureParameterValues, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, StaticParameters, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithMaterialInstanceTemplate, 0x0198);
		}

		// class UDatasmithPointLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithPointLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, IntensityUnits, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, UnknownData_027D, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceRadius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceLength, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, AttenuationRadius, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithPointLightComponentTemplate, 0x0040);
		}

		// class UDatasmithPostProcessVolumeTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithPostProcessVolumeTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPostProcessVolumeTemplate, Settings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPostProcessVolumeTemplate, UnknownData_WJ9Q, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithPostProcessVolumeTemplate, 0x0080);
		}

		// class UDatasmithScene : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithScene)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithScene, UnknownData_ZN7V, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithScene, 0x0030);
		}

		// class ADatasmithSceneActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithSceneActor, Scene, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithSceneActor, RelatedActors, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithSceneActor, 0x0280);
		}

		// class UDatasmithSceneComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, RelativeTransform, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, Mobility, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_2UIC, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, AttachParent, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, Tags, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneComponentTemplate, 0x00E0);
		}

		// class UDatasmithSkyLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSkyLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, UnknownData_FZNS, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, CubemapResolution, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, Cubemap, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSkyLightComponentTemplate, 0x0040);
		}

		// class UDatasmithSpotLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSpotLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, InnerConeAngle, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, OuterConeAngle, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSpotLightComponentTemplate, 0x0038);
		}

		// class UDatasmithStaticMeshComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, StaticMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, OverrideMaterials, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshComponentTemplate, 0x0048);
		}

		// class UDatasmithStaticMeshTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, SectionInfoMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapCoordinateIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapResolution, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, BuildSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, StaticMaterials, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshTemplate, 0x00A8);
		}

		// class UIsPlayerHiding_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__IsPlayerHiding__IsPlayerHiding_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsPlayerHiding_C, 0x00A0);
		}

		// class UFindMontyJumpDestination_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FindMontyJumpDestination__FindMontyJumpDestination_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMontyJumpDestination_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMontyJumpDestination_C, MaxJumpDistance, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMontyJumpDestination_C, DiffPlayerToMonty, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMontyJumpDestination_C, MinDistanceFromPlayer, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMontyJumpDestination_C, MaxDistanceFromPlayer, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMontyJumpDestination_C, MontyLocation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMontyJumpDestination_C, NavQueryExtent, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMontyJumpDestination_C, BBJumpMarker, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindMontyJumpDestination_C, 0x0108);
		}

		// class ABP_DoorMaster_C : public AActivatableBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DoorMaster__BP_DoorMaster_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, UnknownData_D2K3, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, Decal1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, Decal, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, Door, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, PlayerCollision_SecurityDouble, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, PlayerCollision_Double, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, PlayerCollision_LaserTag, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, PlayerCollision_Single, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, Rotator2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, Rotator1, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, SecurityDoorRotator2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, SecurityDoorRotator1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, MOD_Star_Plaque, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, Mesh, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, DoorMesh_3, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, DoorMesh_2, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, DoorMesh_1, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, Door_Collision, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, Open_Door__Close_Door_Move_Door_EC8CD7C648A27AEAA7307CB9A6CE4381, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, Open_Door__Close_Door__Direction_EC8CD7C648A27AEAA7307CB9A6CE4381, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, UnknownData_I3U5, 0x0305);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, _Close_Door, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, DoorType, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, UnknownData_1UL7, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, SpeedMULT, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, CharactersInDoor, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, OnFailedSecurityCheck, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, DoorBlockedDirection, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, UnknownData_KQQB, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, OnDoorLockStateChanged, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, EmmisiveColor, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, DoorColor, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, DoorMat, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, StarOff_, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, UnknownData_WYI9, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, StarMat, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, Character_Select, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, UnknownData_SIRZ, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, Door_Open, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, Door_Closed, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, DoorOpen_, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, InvertDirection, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, Is_Player, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, UnknownData_7IFZ, 0x03A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, Loudness, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, UnknownData_00XT, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, GreenRoomMaterial, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, DoorNeeds, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, IgnoreLineTraceInteract, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, DoorCanPlayErrorSound, 0x03BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, ShowLockDecalWhenLocked, 0x03BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DoorMaster_C, UseDoorTypeForAudio, 0x03BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DoorMaster_C, 0x03BD);
		}

		// class UOptionsUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__OptionsUI__OptionsUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, AcceptButton, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, AntiAlias_ComboBox, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, ApplyChangesButton_Audio, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, ApplyChangesButton_General, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, ApplyChangesButton_Video, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, BackButton, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, BackButtonRichText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, BackButtonRichText_2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, BackButtonRichText_3, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, BackButtonRichText_4, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, BackButtonRichText_5, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, BackButtonRichText_6, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, Brightness_Slidebar, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, ChangesNotAppliedPopUp, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, Colorblind_ComboBox, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, ColorBlindSeverity_Slidebar, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, Contrast_Slidebar, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, ControlsOptionButton, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, CreditsButton, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, Effects_ComboBox, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, Gamma_Slidebar, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, GeneralOptionButton, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, GraphicsQuality_ComboBox, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, Image, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, Image_2, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, Image_220, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, InstructionCard_ComboBox, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, JumpscareVolume_Slidebar, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, LocalizationText, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, MasterVolume_Slidebar, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, MusicVolume_Slidebar, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, Options_ControlsUI, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, OptionsBackground, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, OptionsMenu_WidgetSwitcher, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, OptionsSkrim, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, OptionsVerticalBox, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, PCRayTracingLevel_ComboBox, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, PCVisualQualityLevel_ComboBox, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, PlaybackDevice_ComboBox, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, PS5VisualQualityPreference_ComboBox, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, Resolution_ComboBox, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, RestoreDefaultsButton_Audio, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, RestoreDefaultsButton_General, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, RestoreDefaultsButton_Video, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, Reticle_ComboBox, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, SFXVolume_Slidebar, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, Shading_ComboBox, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, Shadows_ComboBox, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, SoundOptionButton, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, Subtitles_ComboBox, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, TextBlock_424, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, VersionText, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, VideoOptionButton, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, ViewDistance_ComboBox, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, VoiceVolume_Slidebar, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, WI_Option_Language, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, WI_RollingCredits, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, WindowMode_ComboBox, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, SubMenuOpen, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, ColorBlindnessType, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, UnknownData_RRAV, 0x040A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, ColorBlindnessSeverity, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, ColorBlindnessString, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, _720_x_480_Res, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, _1280_x_720_Res, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, _1920_x_1080_Res, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, _2560_x_1440_Res, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, FullscreenMode, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, UnknownData_7T6E, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, PlayerSettingsData, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, SaveGameObject, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, TitleUI, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, PauseUI, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, AdjustFocus, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, ChangesMadeAndNotSaved, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, UnknownData_C71N, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsUI_C, TempSaveGameObject, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOptionsUI_C, 0x0480);
		}

		// class AMessageCollectible_MontyClue_C : public AMessageCollectible_C
		TEST_METHOD(BlueprintGeneratedClass__MessageCollectible_MontyClue__MessageCollectible_MontyClue_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMessageCollectible_MontyClue_C, UnknownData_ELBI, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMessageCollectible_MontyClue_C, UberGraphFrame, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMessageCollectible_MontyClue_C, UpdateThrillSeekerMission, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMessageCollectible_MontyClue_C, 0x02C8);
		}

		// class UFontBulkData : public UObject
		TEST_METHOD(Class__SlateCore__FontBulkData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontBulkData, UnknownData_SPLC, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontBulkData, 0x0078);
		}

		// class UFontFaceInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontFaceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFaceInterface, 0x0028);
		}

		// class UFontProviderInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontProviderInterface, 0x0028);
		}

		// class USlateTypes : public UObject
		TEST_METHOD(Class__SlateCore__SlateTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTypes, 0x0028);
		}

		// class USlateWidgetStyleAsset : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleAsset, CustomStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleAsset, 0x0030);
		}

		// class USlateWidgetStyleContainerBase : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleContainerBase, UnknownData_7CPG, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerBase, 0x0030);
		}

		// class USlateWidgetStyleContainerInterface : public UInterface
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerInterface, 0x0028);
		}

		// class UBFL_FNAF9_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__BFL_FNAF9__BFL_FNAF9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBFL_FNAF9_C, 0x0028);
		}

		// class UPickAndPlayAudioCue_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__PickAndPlayAudioCue__PickAndPlayAudioCue_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickAndPlayAudioCue_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickAndPlayAudioCue_C, AudioCues, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPickAndPlayAudioCue_C, 0x00C0);
		}

		// class AShatteredMontyPile_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ShatteredMontyPile__ShatteredMontyPile_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredMontyPile_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredMontyPile_C, MontyClawsCollectible, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredMontyPile_C, MOD_MontyGlasses, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredMontyPile_C, Sparks1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredMontyPile_C, Sparks, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredMontyPile_C, ShatteredLegs, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredMontyPile_C, UpdateMission_ThrillSeeker, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredMontyPile_C, GameTypeCheckDestroy, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredMontyPile_C, ShatteredMonty, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredMontyPile_C, DefaultSceneRoot, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredMontyPile_C, Is_Sparking, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredMontyPile_C, UnknownData_EP6R, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredMontyPile_C, Beam1, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredMontyPile_C, Beam2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredMontyPile_C, Beam3, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShatteredMontyPile_C, 0x02F8);
		}

		// class UWmfMediaSettings : public UObject
		TEST_METHOD(Class__WmfMediaFactory__WmfMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, AllowNonStandardCodecs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, LowLatency, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, NativeAudioOut, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, HardwareAcceleratedVideoDecoding, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, UnknownData_96DZ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWmfMediaSettings, 0x0030);
		}

		// class ABP_MasterHologram_01_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_MasterHologram_01__BP_MasterHologram_01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, HologramStand_PoseableMesh_01, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Mesh_LightBeam_Materials, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Hologram_Base_Emissive_Tint_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Hologram_Base_Emissive_Tint_2, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Use_LightBeam_, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, UnknownData_HX9V, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Hologram_Rotation_Speed, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Hologram_Emissive_Intensity, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Hologram_Emissive_Intensity___Lightbeams, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Hologram_Emissive_Cloud_Intensity, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, WPO_Intensity, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Light_Mobility, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, UnknownData_D0MX, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Intensity, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Attenuation_Radius, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Use_Light_, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Use_Emissive_Tint_1_for_Light_Color_, 0x0285);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, UnknownData_4IY8, 0x0286);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Hologram_Position, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, UnknownData_DSB8, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Point_Light, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Mesh_Scale, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Scale_Vector, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Put_Light_at_BP_Origin_, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Use_Backface_Cull_, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, UnknownData_HM6U, 0x02B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Depth_Bias, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, LightBeam_Max_Draw_Distance, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Light_Offset_Vertical, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, LightBeam_Material_Fade_Distance, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Use_Hologram_Stand_, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, UnknownData_BRE6, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Stand_Skeletal_Mesh, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Eye_Bone_Location_Master, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Put_Hologram_Stand_on_Wall_, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, UnknownData_MJFB, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_C, Hologram_Stand_Rotation, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MasterHologram_01_C, 0x02EC);
		}

		// class AVentExit_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__VentExit__VentExit_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentExit_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentExit_C, Arrow, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentExit_C, DefaultSceneRoot, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVentExit_C, 0x0240);
		}

		// class UBPI_MainGameGM_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_MainGameGM__BPI_MainGameGM_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_MainGameGM_C, 0x0028);
		}

		// class UDJMMBPInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__DJMMBPInterface__DJMMBPInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDJMMBPInterface_C, 0x0028);
		}

		// class UAIInformationProvider_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__AIInformationProvider__AIInformationProvider_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIInformationProvider_C, 0x0028);
		}

		// class APRE_PartyDoor_Long_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PRE_PartyDoor_Long__PRE_PartyDoor_Long_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, Decal3, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, Decal2, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, Decal1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, Decal, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, PlayerBlocker_Long, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, PlayerBlocker_Short, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, MOD_PartyDoor_Gate01, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, Gate, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, MOD_PartyDoor_Beam06, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, LongBeamsGroup, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, ShortBeamsGroup, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, Door_Collision, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, MOD_PartyDoor_Beam02, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, Orientation, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, Door, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, WorldState, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, MOD_PartyDoor_Beam03, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, MOD_PartyDoor_Beam01, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, MOD_PartyDoor_Beam04, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, MOD_PartyDoor_Beam05, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, DefaultSceneRoot, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, DoorMover_Close_0EC2106742FDAD9DF61B6884353E67E2, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, DoorMover_Open_0EC2106742FDAD9DF61B6884353E67E2, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, DoorMover__Direction_0EC2106742FDAD9DF61B6884353E67E2, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, UnknownData_7QG2, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, DoorMover, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, Long_Door_, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, Can_Activate, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, UnknownData_QSTS, 0x02F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, DoorMat, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, RandomDesign_, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, UnknownData_GY3O, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, Design_DisabledByRandom_, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, Currentz, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, UnknownData_CA7P, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, PawnsInDoorway, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, Open_Door, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, Close_Door, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, FinishClosing, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, FinishOpening, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_C, ShowLockDecalWhenLocked, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_PartyDoor_Long_C, 0x0341);
		}

		// class UImgMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__ImgMedia__ImgMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, FrameRateOverride, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, ProxyOverride, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, SequencePath, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSource, 0x00B0);
		}

		// class UAlwaysFaceCameraComponent_C : public USceneComponent
		TEST_METHOD(BlueprintGeneratedClass__AlwaysFaceCameraComponent__AlwaysFaceCameraComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlwaysFaceCameraComponent_C, UberGraphFrame, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlwaysFaceCameraComponent_C, 0x01F8);
		}

		// class URIG_Hook_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__RIG_Hook_ABP__RIG_Hook_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Hook_ABP_C, UnknownData_DUNK, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Hook_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Hook_ABP_C, AnimGraphNode_ModifyBone_3, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Hook_ABP_C, AnimGraphNode_LinkedInputPose, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Hook_ABP_C, AnimGraphNode_BlendListByBool, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Hook_ABP_C, AnimGraphNode_SaveCachedPose, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Hook_ABP_C, AnimGraphNode_Root, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Hook_ABP_C, AnimGraphNode_UseCachedPose_2, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Hook_ABP_C, AnimGraphNode_ModifyBone_2, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Hook_ABP_C, AnimGraphNode_LocalToComponentSpace_3, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Hook_ABP_C, AnimGraphNode_ComponentToLocalSpace_3, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Hook_ABP_C, AnimGraphNode_LocalToComponentSpace_2, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Hook_ABP_C, AnimGraphNode_ComponentToLocalSpace_2, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Hook_ABP_C, AnimGraphNode_LocalToComponentSpace, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Hook_ABP_C, AnimGraphNode_ComponentToLocalSpace, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Hook_ABP_C, AnimGraphNode_UseCachedPose, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Hook_ABP_C, AnimGraphNode_ModifyBone, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Hook_ABP_C, MoonManMesh, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Hook_ABP_C, IsFlying, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Hook_ABP_C, UnknownData_GNIZ, 0x08A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Hook_ABP_C, MeshYaw, 0x08AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Hook_ABP_C, TargetLocation, 0x08B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URIG_Hook_ABP_C, 0x08BC);
		}

		// class UAnimNotify_MontyShatteredServo_C : public UAnimNotify_MontyServoMovement_C
		TEST_METHOD(BlueprintGeneratedClass__AnimNotify_MontyShatteredServo__AnimNotify_MontyShatteredServo_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_MontyShatteredServo_C, 0x0058);
		}

		// class APlaySequenceTrigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__PlaySequenceTrigger__PlaySequenceTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_C, TimeCheckComponent, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_C, LeadingEmitter, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_C, GameTypeCheckDestroy, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_C, CameraOverrideComponent, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_C, Sequence, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_C, On_Sequence_Stop, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_C, CineCamera, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_C, PlayerCam, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_C, sequence_key, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_C, DisablePlayerInput, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_C, UnknownData_WRVL, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_C, WwiseCinematicState, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_C, WwiseCinematicStateGroup, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_C, UnknownData_8ZUM, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_C, LMMSplineFollowerActor, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_C, DestroyAI, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_C, UnknownData_LQOS, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_C, LMMSplineFollowerManager, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_C, PlayLeadingEmitter, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_C, UnknownData_AL3R, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_C, EmitterStopEvent, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_C, Hide_Hud, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaySequenceTrigger_C, 0x0391);
		}

		// class AStaffbotInteractionPoint_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__StaffbotInteractionPoint__StaffbotInteractionPoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotInteractionPoint_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotInteractionPoint_C, InteractionResetCollision, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotInteractionPoint_C, InteractionPoint, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotInteractionPoint_C, WaitTime, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotInteractionPoint_C, IsEnabled, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaffbotInteractionPoint_C, 0x0245);
		}

		// class UWI_RollingCredits_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_RollingCredits__WI_RollingCredits_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_RollingCredits_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_RollingCredits_C, Timer, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_RollingCredits_C, FinalThanks, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_RollingCredits_C, Background_BlackImage, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_RollingCredits_C, CreditsBox, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_RollingCredits_C, Names_Text, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_RollingCredits_C, Names_Text_2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_RollingCredits_C, Names_Text_3, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_RollingCredits_C, Names_Text_8, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_RollingCredits_C, Names_Text_9, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_RollingCredits_C, Team_Text, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_RollingCredits_C, Team_Text_2, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_RollingCredits_C, Team_Text_3, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_RollingCredits_C, Team_Text_9, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_RollingCredits_C, ThanksText, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_RollingCredits_C, Timer_Text, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_RollingCredits_C, StartingPosition, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_RollingCredits_C, 0x02B4);
		}

		// class AP_RC_GoCart_C : public AP_GoKart_C
		TEST_METHOD(BlueprintGeneratedClass__P_RC_GoCart__P_RC_GoCart_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_RC_GoCart_C, UberGraphFrame, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AP_RC_GoCart_C, 0x0378);
		}

		// class ABP_VentCover_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_VentCover__BP_VentCover_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_VentCover_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_VentCover_C, Arrow, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_VentCover_C, UpdateMission, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_VentCover_C, Box, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_VentCover_C, SM_Vent_B, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_VentCover_C, DefaultSceneRoot, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_VentCover_C, last_loc, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_VentCover_C, first_open, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_VentCover_C, Front, 0x025A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_VentCover_C, Back, 0x025B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_VentCover_C, 0x025C);
		}

		// class UPlayVO_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__PlayVO__PlayVO_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayVO_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayVO_C, TypeToPlay, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayVO_C, UnknownData_RWX2, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayVO_C, LastPlayedTimestamp, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayVO_C, UseTimestamp, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayVO_C, UnknownData_PF1X, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayVO_C, WaitTime, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayVO_C, UseCanPlay, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayVO_C, UnknownData_8KZF, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayVO_C, CanPlayKey, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayVO_C, lastplayedtime, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayVO_C, 0x011C);
		}

		// class AP_VukKartRacer_Staffbot_C : public AP_VukKartRacer_C
		TEST_METHOD(BlueprintGeneratedClass__P_VukKartRacer_Staffbot__P_VukKartRacer_Staffbot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_VukKartRacer_Staffbot_C, UberGraphFrame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_VukKartRacer_Staffbot_C, MissionStateHandler1, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_VukKartRacer_Staffbot_C, MissionStateHandler, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_VukKartRacer_Staffbot_C, MOD_HelmBasic1, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_VukKartRacer_Staffbot_C, StaticMesh, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_VukKartRacer_Staffbot_C, SkeletalMesh, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_VukKartRacer_Staffbot_C, End_Gregory_Teleport_Location, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_VukKartRacer_Staffbot_C, LeftIK, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_VukKartRacer_Staffbot_C, RightIK, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_VukKartRacer_Staffbot_C, StaffBotRacer, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_VukKartRacer_Staffbot_C, AnimInstance, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AP_VukKartRacer_Staffbot_C, 0x03D8);
		}

		// class UFazwatchMapUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FazwatchMapUI__FazwatchMapUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, LegendAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, BlackBackground, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, Charge_Icon, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, Charge_Icon_2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, Charge_Icon_3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, Charge_Icon_4, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, Charge_Icon_5, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, Charge_Icon_6, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, Charge_Icon_7, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, Charge_Icon_8, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, Charge_Icon_9, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, Charge_Icon_10, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, ChargeIconsRoot, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, Floor1Button, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, Floor2Button, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, Floor3Button, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, Floor4Button, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, FloorB1Button, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, FloorB2Button, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, FloorButtonBox, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, Freddy_pos, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, LegendButton, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, MainFloorButton, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, MapSwitcher, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, minimap00, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, minimap01, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, minimap02, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, minimap03, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, minimap05, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, minimapB1, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, minimapB2, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, PlayerPos, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, SecurityBadge_Overlay, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, SecurityLevel_Text, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, ActiveFloorIndex, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, LegendOpen, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, UnknownData_R13J, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, BottomRightBound, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, TopLeftBound, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, MiniMapReference, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, MapNames, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, MapMatchFound, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, UnknownData_9ULB, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, ReferenceData, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, CurrentLevelName, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, MapIndex, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, UnknownData_7Z6R, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazwatchMapUI_C, ChargeStation_Icons, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFazwatchMapUI_C, 0x03A8);
		}

		// class APRE_PartyDoor_Locked_Activatable_C : public APRE_PartyDoor_Long_C
		TEST_METHOD(BlueprintGeneratedClass__PRE_PartyDoor_Locked_Activatable__PRE_PartyDoor_Locked_Activatable_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Locked_Activatable_C, UnknownData_RKE0, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Locked_Activatable_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Locked_Activatable_C, State, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_PartyDoor_Locked_Activatable_C, 0x0351);
		}

		// class APRE_PartyDoor_Long_UnlockAfterMission_C : public APRE_PartyDoor_Long_C
		TEST_METHOD(BlueprintGeneratedClass__PRE_PartyDoor_Long_UnlockAfterMission__PRE_PartyDoor_Long_UnlockAfterMission_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_UnlockAfterMission_C, UnknownData_U9TR, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_UnlockAfterMission_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_UnlockAfterMission_C, MissionStateHandler, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_PartyDoor_Long_UnlockAfterMission_C, 0x0358);
		}

		// class AStaffBotCleaning_C : public AStaffBotBase_C
		TEST_METHOD(BlueprintGeneratedClass__StaffBotCleaning__StaffBotCleaning_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotCleaning_C, UnknownData_8QG3, 0x0652);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotCleaning_C, UberGraphFrame, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotCleaning_C, WalkSpeed, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotCleaning_C, UnknownData_4S7Z, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotCleaning_C, SplineManager, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotCleaning_C, SplineFollowerContext, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotCleaning_C, SplineMovementSpeedKey, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotCleaning_C, SplineManagerKey, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaffBotCleaning_C, 0x0698);
		}

		// class UTitle_ComboBox_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Title_ComboBox__Title_ComboBox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_ComboBox_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_ComboBox_C, ComboBoxSubText, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_ComboBox_C, ComboBoxText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_ComboBox_C, LeftArrow, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_ComboBox_C, RightArrow, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_ComboBox_C, SettingsName_text, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_ComboBox_C, TextValue, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_ComboBox_C, ComboBoxValues, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_ComboBox_C, DefaultValue, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_ComboBox_C, CurrentValue, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_ComboBox_C, ChangesApplied, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_ComboBox_C, ArrowKeyPressed, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_ComboBox_C, HoveredEvent, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_ComboBox_C, ClickedEvent, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTitle_ComboBox_C, 0x02C0);
		}

		// class UStaffbot_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Staffbot_ABP__Staffbot_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_1Z4F, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_Root_2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_LinkedInputPose, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_ModifyBone_3, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_ModifyBone_2, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_LocalToComponentSpace_2, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_ComponentToLocalSpace_2, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_Root, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_TransitionResult_22, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_TransitionResult_21, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_TransitionResult_20, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_TransitionResult_19, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_TransitionResult_18, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SequencePlayer_23, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_StateResult_18, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SequencePlayer_22, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_StateResult_17, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SequencePlayer_21, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_StateResult_16, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_TransitionResult_17, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_TransitionResult_16, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_TransitionResult_15, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_TransitionResult_14, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SequencePlayer_20, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_BlendListByBool_4, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SequencePlayer_19, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_StateResult_15, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SequencePlayer_18, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_StateResult_14, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SequencePlayer_17, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_BlendListByBool_3, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SequencePlayer_16, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SequencePlayer_15, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_BlendListByBool_2, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_StateResult_13, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_StateMachine_5, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_StateResult_12, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_StateMachine_4, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_BlendListByEnum_2, 0x0FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SequencePlayer_14, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_BlendListByEnum, 0x10F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SaveCachedPose_2, 0x11A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_UseCachedPose_9, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_UseCachedPose_8, 0x1288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_UseCachedPose_7, 0x12B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_UseCachedPose_6, 0x12D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_UseCachedPose_5, 0x1300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_UseCachedPose_4, 0x1328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_ApplyAdditive_3, 0x1350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_BlendSpacePlayer, 0x1418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_LinkedAnimLayer, 0x14F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_Time_BCAB4F524DF88F3CDCCB3B8890C6DE16, 0x15A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_CanJumpscare_BCAB4F524DF88F3CDCCB3B8890C6DE16, 0x15AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_88CU, 0x15AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_AimTarget_BCAB4F524DF88F3CDCCB3B8890C6DE16, 0x15B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_IsWarning_BCAB4F524DF88F3CDCCB3B8890C6DE16, 0x15BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_IsMoving_BCAB4F524DF88F3CDCCB3B8890C6DE16, 0x15BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_D27H, 0x15BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_R_WristAim_BCAB4F524DF88F3CDCCB3B8890C6DE16, 0x15C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_IsHeadAiming_BCAB4F524DF88F3CDCCB3B8890C6DE16, 0x15CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_SQ7X, 0x15CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_LinkedAnimGraph_7, 0x15D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_CanDie_FC7C08844A9114C322E91E960F40A464, 0x1670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_Stunned_FC7C08844A9114C322E91E960F40A464, 0x1671);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_CanFireLaser_FC7C08844A9114C322E91E960F40A464, 0x1672);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_CanSeePlayer_FC7C08844A9114C322E91E960F40A464, 0x1673);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_Y6FK, 0x1674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_LinkedAnimGraph_6, 0x1678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_LockR_Shoulder_Alpha_88093F724F8404A57ED8C7B427553A7B, 0x1718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_R_Wrist2Rotation_88093F724F8404A57ED8C7B427553A7B, 0x171C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_RWristLocation_88093F724F8404A57ED8C7B427553A7B, 0x1728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_BTSD, 0x1734);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_LinkedAnimGraph_5, 0x1738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_jobEnum_2223EB084956692E101AC39C3EB08AB6, 0x17D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_UBX0, 0x17D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_AimTarget_2223EB084956692E101AC39C3EB08AB6, 0x17DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_IsHeadAiming_2223EB084956692E101AC39C3EB08AB6, 0x17E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_5KJK, 0x17E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_LinkedAnimGraph_4, 0x17F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_HasPass_41487E5C4BB83CC4B35EB7AB8EAFE4BB, 0x1890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_IsRequesting_41487E5C4BB83CC4B35EB7AB8EAFE4BB, 0x1891);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_CanJumpscare_41487E5C4BB83CC4B35EB7AB8EAFE4BB, 0x1892);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_Stunned_41487E5C4BB83CC4B35EB7AB8EAFE4BB, 0x1893);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_LW2Q, 0x1894);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_LinkedAnimGraph_3, 0x1898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_UseCachedPose_3, 0x1938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_isAlerting_BD4C8E04418147F7938792A16F49D632, 0x1960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_isWarning_BD4C8E04418147F7938792A16F49D632, 0x1961);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_67JQ, 0x1962);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_WarningLevel_BD4C8E04418147F7938792A16F49D632, 0x1964);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, __CustomProperty_isAiming_BD4C8E04418147F7938792A16F49D632, 0x1968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_HE31, 0x1969);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_LinkedAnimGraph_2, 0x1970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_Slot, 0x1A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_TransitionResult_13, 0x1A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_TransitionResult_12, 0x1A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_TransitionResult_11, 0x1AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_TransitionResult_10, 0x1AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_TransitionResult_9, 0x1AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_TransitionResult_8, 0x1B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SequencePlayer_13, 0x1B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_StateResult_11, 0x1BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SequencePlayer_12, 0x1BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_StateResult_10, 0x1C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SequencePlayer_11, 0x1C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_LayeredBoneBlend, 0x1D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SequencePlayer_10, 0x1DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_ApplyAdditive_2, 0x1E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SequencePlayer_9, 0x1F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_StateResult_9, 0x1F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SequencePlayer_8, 0x1FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_StateResult_8, 0x2030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SequencePlayer_7, 0x2060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_StateResult_7, 0x20D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_StateMachine_3, 0x2108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_LinkedAnimGraph, 0x21B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SaveCachedPose, 0x2258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_UseCachedPose_2, 0x2310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_TransitionResult_7, 0x2338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_TransitionResult_6, 0x2360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_TransitionResult_5, 0x2388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_TransitionResult_4, 0x23B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_TransitionResult_3, 0x23D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SequencePlayer_6, 0x2400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_StateResult_6, 0x2478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SequencePlayer_5, 0x24A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_StateResult_5, 0x2520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SequencePlayer_4, 0x2550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_StateResult_4, 0x25C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_TransitionResult_2, 0x25F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_TransitionResult, 0x2620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_ApplyAdditive, 0x2648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SequencePlayer_3, 0x2710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SequencePlayer_2, 0x2788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_StateResult_3, 0x2800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_SequencePlayer, 0x2830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_StateResult_2, 0x28A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_StateMachine_2, 0x28D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_StateResult, 0x2988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_StateMachine, 0x29B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_ComponentToLocalSpace, 0x2A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_LocalToComponentSpace, 0x2A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_ModifyBone, 0x2AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_UseCachedPose, 0x2BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimGraphNode_BlendListByBool, 0x2BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, ExternalForce, 0x2C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, DeltaTimeX, 0x2C84);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, Spine_jnt, 0x2C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, Staffbot_PA, 0x2C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, PAProfileEnum, 0x2C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_J7YB, 0x2C99);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, PAProfileName, 0x2C9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_3IXR, 0x2CA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, PhysicalAnimationComponent, 0x2CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, CharacterMesh, 0x2CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, BlendWeightChest, 0x2CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, BlendWeight__L_Arm, 0x2CBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, L_Shoulder_jnt, 0x2CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, R_Shoulder_jnt, 0x2CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, Pawn, 0x2CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, Neck_jnt, 0x2CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, BlendWeightNeck, 0x2CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UseCurves, 0x2CE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, Con_ProfileEnum, 0x2CE5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_0O2F, 0x2CE6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, ConstraintProfileName, 0x2CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, MaxSpeed, 0x2CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, Wheels_jnt, 0x2CF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, BlendWeightWheels, 0x2CFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, BlendWeight__R_Arm, 0x2D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, BlendWeightProps, 0x2D04);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, L_Prop_jnt, 0x2D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, R_Prop_jnt, 0x2D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, PropMesh_L, 0x2D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, StaffBotBoxes, 0x2D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, IsHeadAiming, 0x2D24);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, IsChestAiming, 0x2D25);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_DP01, 0x2D26);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, MoveSpeedFwdInput, 0x2D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, isMoving, 0x2D2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_45A1, 0x2D2D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, HeadAimAlpha, 0x2D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AimTarget, 0x2D34);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AimRotChest, 0x2D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, ChestAimAlpha, 0x2D4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, Degrees_Float, 0x2D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AlertLevel, 0x2D54);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, IsWarning, 0x2D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_2PNB, 0x2D59);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AimRotNeck, 0x2D5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, Stunned, 0x2D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_MFCW, 0x2D69);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, PawnVelocity, 0x2D6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, MoveSpeedRightInput, 0x2D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, isFazertag, 0x2D7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, CanFireLaser, 0x2D7D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, IsPreview, 0x2D7E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_34QQ, 0x2D7F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, Current_Location, 0x2D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, OldLocation, 0x2D8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, canJumpscare, 0x2D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, HasProp, 0x2D99);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, CanDoTask, 0x2D9A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_3OD7, 0x2D9B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, TargetTaskPoint, 0x2DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, CanSeePlayer, 0x2DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_Z6WN, 0x2DA9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, NCanSeePlayer, 0x2DAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, PreviousRotation, 0x2DB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, IsTurning_L, 0x2DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, isTurning, 0x2DC1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_KE66, 0x2DC2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, TurnRate, 0x2DC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, TurnLeft, 0x2DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, TurnRight, 0x2DD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, TargetSpineOrientation, 0x2DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, TurnRateMult, 0x2DEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, TurnAlpha, 0x2DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AimAtPlayer, 0x2DF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_86IS, 0x2DF5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, Head_jnt, 0x2DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AimRotInterpSpeed, 0x2E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AimAlphaInterpSpeed, 0x2E04);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, InterpAimAlphas, 0x2E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, LockR_Shoulder, 0x2E09);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_1Q8S, 0x2E0A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, R_Wrist2Rotation, 0x2E0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, RWristLocation, 0x2E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, LockR_Shoulder_Alpha, 0x2E24);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, L_IK_Alpha, 0x2E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, R_IK_Alpha, 0x2E2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, L_IK_On, 0x2E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, R_IK_On, 0x2E31);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_DMIJ, 0x2E32);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, L_IK_Target, 0x2E34);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, R_IK_Target, 0x2E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, LWristLocation, 0x2E4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, L_Wrist2Rotation, 0x2E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, LockL_Shoulder, 0x2E64);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimationMode, 0x2E65);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_9ZD2, 0x2E66);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, CutSceneAnim, 0x2E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, LoopCutScene, 0x2E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, jobEnum, 0x2E71);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_GX8U, 0x2E72);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, DirectionMovement, 0x2E74);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, R_WristAim, 0x2E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, r_Wheel_roll, 0x2E8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, l_Wheel_roll, 0x2E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, CurrentRotation, 0x2E94);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, PartyPassReceived, 0x2EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, PlayerHasPartyPass, 0x2EA1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, UnknownData_CAOM, 0x2EA2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, WarningLevel, 0x2EA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, IsAlerting, 0x2EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, isMovementSoundPlaying, 0x2EA9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, SpineDynamicsON, 0x2EAA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, RArmDynamicsOn, 0x2EAB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, LArmDynamicsOn, 0x2EAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, HeadDynamicsOn, 0x2EAD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, canDie, 0x2EAE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, isPerforming, 0x2EAF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, PerformanceAnim, 0x2EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, AnimVODT, 0x2EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, PreviousPerformanceAnim, 0x2EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, SequenceLength, 0x2EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_ABP_C, TurnTime, 0x2ECC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaffbot_ABP_C, 0x2ED0);
		}

		// class ADebuggableAICharacter_C : public AFNAFBaseAICharacter
		TEST_METHOD(BlueprintGeneratedClass__DebuggableAICharacter__DebuggableAICharacter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebuggableAICharacter_C, UberGraphFrame, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebuggableAICharacter_C, DBG_MaterialMapping, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebuggableAICharacter_C, 0x04D8);
		}

		// class USplineForkDetectService_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__SplineForkDetectService__SplineForkDetectService_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineForkDetectService_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineForkDetectService_C, RandomPathIndex, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineForkDetectService_C, 0x00A4);
		}

		// class UChicaBehindPlayerBreathing_Task_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__ChicaBehindPlayerBreathing_Task__ChicaBehindPlayerBreathing_Task_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChicaBehindPlayerBreathing_Task_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChicaBehindPlayerBreathing_Task_C, 0x00B0);
		}

		// class USequenceDirector_C : public ULevelSequenceDirector
		TEST_METHOD(BlueprintGeneratedClass__MontyOutro_Shot500__SequenceDirector_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceDirector_C, UberGraphFrame, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceDirector_C, 0x0038);
		}

		// class APartsAndServicesTrigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__PartsAndServicesTrigger__PartsAndServicesTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartsAndServicesTrigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartsAndServicesTrigger_C, MissionStateCondition, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartsAndServicesTrigger_C, LineSkipper, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartsAndServicesTrigger_C, 0x02B0);
		}

		// class UBPI_PauseUI_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_PauseUI__BPI_PauseUI_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_PauseUI_C, 0x0028);
		}

		// class UDebugOverlay_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DebugOverlay__DebugOverlay_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugOverlay_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugOverlay_C, FPSCounter, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugOverlay_C, LevelLoadingText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugOverlay_C, LevelStreamers, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugOverlay_C, LightScenario, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugOverlay_C, RoomInfo, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugOverlay_C, RoomName, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugOverlay_C, TextBlock_267, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugOverlay_C, TextBlock_370, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugOverlay_C, VannyMeter, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugOverlay_C, VannyMeterBox, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugOverlay_C, WorldCoord, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugOverlay_C, 0x0290);
		}

		// class UBlockerUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BlockerUI__BlockerUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockerUI_C, Image_86, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlockerUI_C, 0x0238);
		}

		// class UNiagaraDataInterface : public UNiagaraDataInterfaceBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterface, UnknownData_9M31, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterface, 0x0030);
		}

		// class UMovieSceneNiagaraTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraTrack, 0x0068);
		}

		// class UMovieSceneNiagaraParameterTrack : public UMovieSceneNiagaraTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraParameterTrack, Parameter, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraParameterTrack, 0x0090);
		}

		// class UMovieSceneNiagaraBoolParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraBoolParameterTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraBoolParameterTrack, 0x0090);
		}

		// class UMovieSceneNiagaraColorParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraColorParameterTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraColorParameterTrack, 0x0090);
		}

		// class UMovieSceneNiagaraFloatParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraFloatParameterTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraFloatParameterTrack, 0x0090);
		}

		// class UMovieSceneNiagaraIntegerParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraIntegerParameterTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraIntegerParameterTrack, 0x0090);
		}

		// class UMovieSceneNiagaraSystemSpawnSection : public UMovieSceneSection
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraSystemSpawnSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionStartBehavior, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_X2Z6, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionEvaluateBehavior, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_74XK, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionEndBehavior, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_J3FM, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, AgeUpdateMode, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_ZNX9, 0x00ED);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraSystemSpawnSection, 0x00F0);
		}

		// class UMovieSceneNiagaraSystemTrack : public UMovieSceneNiagaraTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraSystemTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraSystemTrack, 0x0068);
		}

		// class UMovieSceneNiagaraVectorParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraVectorParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, ChannelsUsed, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, UnknownData_XWH0, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraVectorParameterTrack, 0x0098);
		}

		// class ANiagaraActor : public AActor
		TEST_METHOD(Class__Niagara__NiagaraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraActor, NiagaraComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraActor, UnknownData_BQXI, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraActor, 0x0238);
		}

		// class UNiagaraComponent : public UFXSystemComponent
		TEST_METHOD(Class__Niagara__NiagaraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, Asset, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, TickBehavior, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_VCOK, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, OverrideParameters, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_0F39, 0x0509);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_J1YC, 0x0535);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, MaxTimeBeforeForceUpdateTransform, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_KJMG, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, OnSystemFinished, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachParent, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachSocketName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachLocationRule, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachRotationRule, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachScaleRule, 0x0562);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_U4DY, 0x0564);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponent, 0x05A0);
		}

		// class UNiagaraComponentPool : public UObject
		TEST_METHOD(Class__Niagara__NiagaraComponentPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentPool, WorldParticleSystemPools, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentPool, UnknownData_3TDJ, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponentPool, 0x0080);
		}

		// class UNiagaraConvertInPlaceUtilityBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraConvertInPlaceUtilityBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraConvertInPlaceUtilityBase, 0x0028);
		}

		// class UNiagaraDataInterfaceAudioSubmix : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSubmix, Submix, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioSubmix, 0x0038);
		}

		// class UNiagaraDataInterfaceAudioOscilloscope : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioOscilloscope)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, Submix, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, Resolution, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, ScopeInMilliseconds, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioOscilloscope, 0x0040);
		}

		// class UNiagaraDataInterfaceAudioSpectrum : public UNiagaraDataInterfaceAudioSubmix
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioSpectrum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, Resolution, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, MinimumFrequency, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, MaximumFrequency, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, NoiseFloorDb, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioSpectrum, 0x0048);
		}

		// class UNiagaraDataInterfaceCamera : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, PlayerControllerIndex, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, UnknownData_ETK9, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCamera, 0x0038);
		}

		// class UNiagaraDataInterfaceCollisionQuery : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCollisionQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCollisionQuery, UnknownData_WDKD, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCollisionQuery, 0x0040);
		}

		// class UNiagaraDataInterfaceCurveBase : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, ShaderLUT, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTMinTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTMaxTime, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTInvTimeRange, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTNumSamplesMinusOne, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, UnknownData_JBJV, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurveBase, 0x0058);
		}

		// class UNiagaraDataInterfaceColorCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceColorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, RedCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, GreenCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, BlueCurve, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, AlphaCurve, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceColorCurve, 0x0258);
		}

		// class UNiagaraDataInterfaceCurlNoise : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurlNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurlNoise, Seed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurlNoise, UnknownData_QLL7, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurlNoise, 0x0040);
		}

		// class UNiagaraDataInterfaceCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurve, Curve, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurve, 0x00D8);
		}

		// class UNiagaraParticleCallbackHandler : public UInterface
		TEST_METHOD(Class__Niagara__NiagaraParticleCallbackHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParticleCallbackHandler, 0x0028);
		}

		// class UNiagaraDataInterfaceExport : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceExport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, CallbackHandlerParameter, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceExport, 0x0058);
		}

		// class UNiagaraDataInterfaceRWBase : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRWBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRWBase, OutputShaderStages, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRWBase, IterationShaderStages, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRWBase, 0x00D0);
		}

		// class UNiagaraDataInterfaceGrid2D : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsX, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsY, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsMaxAxis, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumAttributes, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, SetGridFromMaxAxis, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, UnknownData_AWRI, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, WorldBBoxSize, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, UnknownData_XSMY, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2D, 0x00F0);
		}

		// class UNiagaraDataInterfaceGrid2DCollection : public UNiagaraDataInterfaceGrid2D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2DCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, UnknownData_UP01, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2DCollection, 0x0140);
		}

		// class UNiagaraDataInterfaceGrid3D : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, NumVoxels, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, VoxelSize, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, SetGridFromVoxelSize, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, UnknownData_PXSK, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, WorldBBoxSize, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid3D, 0x00F0);
		}

		// class UNiagaraDataInterfaceNeighborGrid3D : public UNiagaraDataInterfaceGrid3D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceNeighborGrid3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceNeighborGrid3D, MaxNeighborsPerVoxel, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceNeighborGrid3D, UnknownData_29JN, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceNeighborGrid3D, 0x00F8);
		}

		// class UNiagaraDataInterfaceOcclusion : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceOcclusion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceOcclusion, 0x0030);
		}

		// class UNiagaraDataInterfaceParticleRead : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceParticleRead)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceParticleRead, EmitterName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceParticleRead, 0x0040);
		}

		// class UNiagaraDataInterfaceSimpleCounter : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSimpleCounter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSimpleCounter, 0x0030);
		}

		// class UNiagaraDataInterfaceSkeletalMesh : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, Source, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, MeshUserParameter, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SourceComponent, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SkinningMode, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_9YFC, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SamplingRegions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, WholeMeshLOD, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_E9OC, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, FilteredBones, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, FilteredSockets, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, ExcludeBoneName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_EK6N, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSkeletalMesh, 0x00B8);
		}

		// class UNiagaraDataInterfaceSpline : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSpline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSpline, Source, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSpline, 0x0038);
		}

		// class UNiagaraDataInterfaceStaticMesh : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceStaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, DefaultMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, Source, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SourceComponent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SectionFilter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, UnknownData_5JIB, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceStaticMesh, 0x0060);
		}

		// class UNiagaraDataInterfaceTexture : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceTexture, Texture, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceTexture, 0x0038);
		}

		// class UNiagaraDataInterfaceVector2DCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVector2DCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector2DCurve, XCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector2DCurve, YCurve, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVector2DCurve, 0x0158);
		}

		// class UNiagaraDataInterfaceVector4Curve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVector4Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, XCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, YCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, ZCurve, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, WCurve, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVector4Curve, 0x0258);
		}

		// class UNiagaraDataInterfaceVectorCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVectorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, XCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, YCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, ZCurve, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVectorCurve, 0x01D8);
		}

		// class UNiagaraDataInterfaceVectorField : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVectorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, Field, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileX, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileY, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileZ, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, UnknownData_UE7U, 0x003B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVectorField, 0x0040);
		}

		// class UNiagaraDataInterfaceVolumeTexture : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVolumeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVolumeTexture, Texture, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVolumeTexture, 0x0038);
		}

		// class UNiagaraEditorDataBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEditorDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEditorDataBase, 0x0028);
		}

		// class UNiagaraEffectType : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEffectType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UpdateFrequency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_KM45, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, CullReaction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_USJP, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, DetailLevelScalabilitySettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, SystemScalabilitySettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, EmitterScalabilitySettings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_IPS3, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEffectType, 0x0100);
		}

		// class UNiagaraEmitter : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, bLocalSpace, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, bDeterminism, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_RTLA, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, RandomSeed, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, AllocationMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_CC3E, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, PreAllocationCount, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UpdateScriptProps, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SpawnScriptProps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, EmitterSpawnScriptProps, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, EmitterUpdateScriptProps, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SimTarget, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_5HR1, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, FixedBounds, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MinDetailLevel, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxDetailLevel, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, GlobalSpawnCountScaleOverrides, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_QBGF, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, Platforms, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, ScalabilityOverrides, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_BLRO, 0x0149);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxDeltaTimePerTick, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, DefaultShaderStageIndex, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxUpdateIterations, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SpawnStages, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_P7M7, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UniqueEmitterName, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, RendererProperties, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, EventHandlerScriptProps, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SimulationStages, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, GPUComputeScript, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SharedEventGeneratorIds, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_AORN, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEmitter, 0x02B0);
		}

		// class UNiagaraEventReceiverEmitterAction : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEventReceiverEmitterAction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEventReceiverEmitterAction, 0x0028);
		}

		// class UNiagaraEventReceiverEmitterAction_SpawnParticles : public UNiagaraEventReceiverEmitterAction
		TEST_METHOD(Class__Niagara__NiagaraEventReceiverEmitterAction_SpawnParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, NumParticles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, UnknownData_CTQ7, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, 0x0030);
		}

		// class UNiagaraFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Niagara__NiagaraFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraFunctionLibrary, 0x0028);
		}

		// class UNiagaraRendererProperties : public UNiagaraMergeable
		TEST_METHOD(Class__Niagara__NiagaraRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, SortOrderHint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, bIsEnabled, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, bMotionBlurEnabled, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, UnknownData_42A8, 0x002E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraRendererProperties, 0x0050);
		}

		// class UNiagaraLightRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraLightRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_7GR8, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, RadiusScale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, ColorAdd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_232J, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, LightRenderingEnabledBinding, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, LightExponentBinding, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, PositionBinding, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, ColorBinding, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, RadiusBinding, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, VolumetricScatteringBinding, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraLightRendererProperties, 0x0338);
		}

		// class UNiagaraMeshRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraMeshRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ParticleMesh, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SortMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_YMAI, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_S9EQ, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, OverrideMaterials, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SubImageSize, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_ITWM, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, FacingMode, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_AG68, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_TUF1, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, LockedAxis, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, LockedAxisSpace, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_9RYK, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, PositionBinding, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ColorBinding, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, VelocityBinding, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MeshOrientationBinding, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ScaleBinding, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SubImageIndexBinding, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterialBinding, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial1Binding, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial2Binding, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial3Binding, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MaterialRandomBinding, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, CustomSortingBinding, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, NormalizedAgeBinding, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, CameraOffsetBinding, 0x06B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMeshRendererProperties, 0x0728);
		}

		// class UNiagaraParameterCollectionInstance : public UObject
		TEST_METHOD(Class__Niagara__NiagaraParameterCollectionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, Collection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, OverridenParameters, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, ParameterStorage, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParameterCollectionInstance, 0x00F8);
		}

		// class UNiagaraParameterCollection : public UObject
		TEST_METHOD(Class__Niagara__NiagaraParameterCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, Namespace, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, Parameters, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, DefaultInstance, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, CompileId, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParameterCollection, 0x0058);
		}

		// class UNiagaraPrecompileContainer : public UObject
		TEST_METHOD(Class__Niagara__NiagaraPrecompileContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPrecompileContainer, Scripts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPrecompileContainer, System, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPrecompileContainer, 0x0040);
		}

		// class ANiagaraPreviewBase : public AActor
		TEST_METHOD(Class__Niagara__NiagaraPreviewBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraPreviewBase, 0x0228);
		}

		// class UNiagaraPreviewAxis : public UObject
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis, 0x0028);
		}

		// class UNiagaraPreviewAxis_InterpParamBase : public UNiagaraPreviewAxis
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, Param, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, Count, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, UnknownData_QD9B, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamBase, 0x0038);
		}

		// class UNiagaraPreviewAxis_InterpParamInt32 : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamInt32, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamInt32, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamInt32, 0x0040);
		}

		// class UNiagaraPreviewAxis_InterpParamFloat : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamFloat, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamFloat, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamFloat, 0x0040);
		}

		// class UNiagaraPreviewAxis_InterpParamVector2D : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector2D, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector2D, Max, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector2D, 0x0048);
		}

		// class UNiagaraPreviewAxis_InterpParamVector : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector, Max, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector, 0x0050);
		}

		// class UNiagaraPreviewAxis_InterpParamVector4 : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, UnknownData_46KK, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, Max, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector4, 0x0060);
		}

		// class UNiagaraPreviewAxis_InterpParamLinearColor : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamLinearColor, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamLinearColor, Max, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamLinearColor, 0x0058);
		}

		// class ANiagaraPreviewGrid : public AActor
		TEST_METHOD(Class__Niagara__NiagaraPreviewGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, System, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, ResetMode, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, UnknownData_DV7Y, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewAxisX, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewAxisY, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewClass, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, SpacingX, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, SpacingY, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, NumX, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, NumY, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewComponents, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, UnknownData_EE11, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraPreviewGrid, 0x0278);
		}

		// class UNiagaraRibbonRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraRibbonRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, Material, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, MaterialUserParamBinding, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, FacingMode, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_ZC92, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV0TilingDistance, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV0Scale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV0Offset, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV0AgeOffsetMode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_OK78, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV1TilingDistance, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV1Scale, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV1Offset, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV1AgeOffsetMode, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DrawDirection, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_H67V, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, CurveTension, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationMode, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_N3KO, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationFactor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, bUseConstantFactor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_ANFY, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationAngle, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, bScreenSpaceTessellation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_47SV, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, PositionBinding, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, ColorBinding, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, VelocityBinding, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, NormalizedAgeBinding, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonTwistBinding, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonWidthBinding, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonFacingBinding, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonIdBinding, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonLinkOrderBinding, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, MaterialRandomBinding, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterialBinding, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial1Binding, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial2Binding, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial3Binding, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraRibbonRendererProperties, 0x0760);
		}

		// class UNiagaraScript : public UObject
		TEST_METHOD(Class__Niagara__NiagaraScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, Usage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_MVRF, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UsageIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UsageId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, RapidIterationParameters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, ScriptExecutionParamStore, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, ScriptExecutionBoundParameters, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedScriptVMId, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_UN3O, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedScriptVM, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedParameterCollectionReferences, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedDefaultDataInterfaces, 0x0510);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScript, 0x0520);
		}

		// class UNiagaraScriptSourceBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraScriptSourceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScriptSourceBase, UnknownData_ILP9, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScriptSourceBase, 0x0048);
		}

		// class UNiagaraSettings : public UDeveloperSettings
		TEST_METHOD(Class__Niagara__NiagaraSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, AdditionalParameterTypes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, AdditionalPayloadTypes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, AdditionalParameterEnums, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultEffectType, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, QualityLevels, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultEffectTypePtr, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSettings, 0x0098);
		}

		// class UNiagaraSimulationStageBase : public UNiagaraMergeable
		TEST_METHOD(Class__Niagara__NiagaraSimulationStageBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, Script, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, SimulationStageName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSimulationStageBase, 0x0038);
		}

		// class UNiagaraSimulationStageGeneric : public UNiagaraSimulationStageBase
		TEST_METHOD(Class__Niagara__NiagaraSimulationStageGeneric)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, IterationSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, UnknownData_UN0R, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, Iterations, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, UnknownData_LOC0, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, DataInterface, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSimulationStageGeneric, 0x0070);
		}

		// class UNiagaraSpriteRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraSpriteRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, Material, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialUserParamBinding, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, Alignment, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, FacingMode, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_NKPF, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, PivotInUVSpace, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SortMode, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_3UQP, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SubImageSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_JTXT, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MinFacingCameraBlendDistance, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaxFacingCameraBlendDistance, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_C3OA, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, PositionBinding, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, ColorBinding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, VelocityBinding, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteRotationBinding, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteSizeBinding, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteFacingBinding, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteAlignmentBinding, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SubImageIndexBinding, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterialBinding, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial1Binding, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial2Binding, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial3Binding, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, CameraOffsetBinding, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UVScaleBinding, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialRandomBinding, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, CustomSortingBinding, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, NormalizedAgeBinding, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_BZQE, 0x08A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSpriteRendererProperties, 0x08B0);
		}

		// class UNiagaraSystem : public UFXSystemAsset
		TEST_METHOD(Class__Niagara__NiagaraSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_20GQ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bDumpDebugSystemInfo, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bDumpDebugEmitterInfo, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_8AF4, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_0DZA, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, EffectType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bOverrideScalabilitySettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_87NY, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ScalabilityOverrides, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemScalabilityOverrides, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, EmitterHandles, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ParameterCollectionOverrides, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemSpawnScript, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemUpdateScript, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_C4AY, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemCompiledData, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ExposedParameters, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, FixedBounds, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bAutoDeactivate, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_8SQ6, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTime, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTickCount, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTickDelta, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bHasSystemScriptDIsWithPerInstanceData, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_OELU, 0x0435);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UserDINamesReadInSystemScripts, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_J8B9, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSystem, 0x0478);
		}

		// class UWI_InstructionCard_FlashBeacon_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_FlashBeacon__WI_InstructionCard_FlashBeacon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FlashBeacon_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FlashBeacon_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FlashBeacon_C, UI_TextAndIcons, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FlashBeacon_C, UI_TextAndIcons_2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FlashBeacon_C, UI_TextAndIcons_3, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FlashBeacon_C, UI_TextAndIcons_4, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FlashBeacon_C, VerticalBox_250, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FlashBeacon_C, WI_ImageScaled, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FlashBeacon_C, WI_ImageScaled_2, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_FlashBeacon_C, 0x0278);
		}

		// class AGtrStr_4_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__GtrStr_5__GtrStr_4_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGtrStr_4_C, Box3, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGtrStr_4_C, Box1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGtrStr_4_C, Box, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGtrStr_4_C, StaticMesh, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGtrStr_4_C, 0x0248);
		}

		// class UAnimSharingStateInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingStateInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, AnimationToPlay, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, PermutationTimeOffset, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, PlayRate, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, bStateBool, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, UnknownData_3JW4, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, Instance, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, UnknownData_2YIY, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingStateInstance, 0x0290);
		}

		// class UAnimSharingTransitionInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingTransitionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, FromComponent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, ToComponent, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, BlendTime, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, bBlendBool, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, UnknownData_5NSD, 0x027D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingTransitionInstance, 0x0280);
		}

		// class UAnimSharingAdditiveInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingAdditiveInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, BaseComponent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, AdditiveAnimation, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, Alpha, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, bStateBool, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, UnknownData_NHCX, 0x027D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingAdditiveInstance, 0x0280);
		}

		// class UAnimSharingInstance : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimSharingInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, RegisteredActors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_NBLH, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, StateProcessor, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_V3N4, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UsedAnimationSequences, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_1KUS, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, StateEnum, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, SharingActor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_MHB9, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingInstance, 0x0138);
		}

		// class UAnimationSharingManager : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, Skeletons, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, PerSkeletonData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, UnknownData_C26A, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingManager, 0x0088);
		}

		// class UAnimationSharingSetup : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingSetup, SkeletonSetups, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingSetup, ScalabilitySettings, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingSetup, 0x0048);
		}

		// class UAnimationSharingStateProcessor : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingStateProcessor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingStateProcessor, AnimationStateEnum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingStateProcessor, 0x0050);
		}

		// class USignificanceManager : public UObject
		TEST_METHOD(Class__SignificanceManager__SignificanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USignificanceManager, UnknownData_MK1C, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USignificanceManager, SignificanceManagerClassName, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USignificanceManager, 0x0120);
		}

		// class AFBPC_SharedController_C : public AFNAFBasePlayerController
		TEST_METHOD(BlueprintGeneratedClass__FBPC_SharedController__FBPC_SharedController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFBPC_SharedController_C, UberGraphFrame, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFBPC_SharedController_C, P_VoiceOverLines, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFBPC_SharedController_C, P_Subtitles, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFBPC_SharedController_C, P_SubtitlesStandalone, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFBPC_SharedController_C, P_ShiftDown, 0x05E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFBPC_SharedController_C, ForceStandaloneSubtitles, 0x05E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFBPC_SharedController_C, Debug, 0x05E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFBPC_SharedController_C, Debug_Subtitles, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFBPC_SharedController_C, UnknownData_D3ZV, 0x05E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFBPC_SharedController_C, PauseUIClass, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFBPC_SharedController_C, PauseWidget, 0x05F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFBPC_SharedController_C, 0x05F8);
		}

		// class UUpdatePlayerPosition_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__UpdatePlayerPosition__UpdatePlayerPosition_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdatePlayerPosition_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdatePlayerPosition_C, BBPlayerPosition, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUpdatePlayerPosition_C, 0x00C8);
		}

		// class USetChaseMode_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__SetChaseMode__SetChaseMode_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetChaseMode_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetChaseMode_C, ChaseMode, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetChaseMode_C, AffectHeadAim, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetChaseMode_C, TrackPlayer, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetChaseMode_C, UnknownData_V0VU, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetChaseMode_C, TrackingLocation, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetChaseMode_C, TrackingActor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetChaseMode_C, UseOverrideSpeed, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetChaseMode_C, UnknownData_TI1V, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetChaseMode_C, OverrideSpeed, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetChaseMode_C, 0x0110);
		}

		// class USetSeekMode_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__SetSeekMode__SetSeekMode_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetSeekMode_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetSeekMode_C, SeekMode, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetSeekMode_C, 0x00B1);
		}

		// class AOutOfBoundsCue_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__OutOfBoundsCue__OutOfBoundsCue_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOutOfBoundsCue_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOutOfBoundsCue_C, Box, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOutOfBoundsCue_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOutOfBoundsCue_C, play_audio, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOutOfBoundsCue_C, UnknownData_W1XD, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOutOfBoundsCue_C, LineSkipper, 0x0241);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOutOfBoundsCue_C, 0x0270);
		}

		// class URIG_Stroller_Skeleton_AnimBlueprint_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__RIG_Stroller_Skeleton_AnimBlueprint__RIG_Stroller_Skeleton_AnimBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Stroller_Skeleton_AnimBlueprint_C, UnknownData_KCPN, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Stroller_Skeleton_AnimBlueprint_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Stroller_Skeleton_AnimBlueprint_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Stroller_Skeleton_AnimBlueprint_C, AnimGraphNode_TransitionResult_2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Stroller_Skeleton_AnimBlueprint_C, AnimGraphNode_TransitionResult, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Stroller_Skeleton_AnimBlueprint_C, AnimGraphNode_SequencePlayer_2, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Stroller_Skeleton_AnimBlueprint_C, AnimGraphNode_StateResult_2, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Stroller_Skeleton_AnimBlueprint_C, AnimGraphNode_SequencePlayer, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Stroller_Skeleton_AnimBlueprint_C, AnimGraphNode_StateResult, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Stroller_Skeleton_AnimBlueprint_C, AnimGraphNode_StateMachine, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Stroller_Skeleton_AnimBlueprint_C, AnimGraphNode_Slot, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_Stroller_Skeleton_AnimBlueprint_C, IsBeingSearched, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URIG_Stroller_Skeleton_AnimBlueprint_C, 0x0541);
		}

		// class UHideCueObjectInterface : public UInterface
		TEST_METHOD(Class__RoomSystem__HideCueObjectInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHideCueObjectInterface, 0x0028);
		}

		// class UAIHideLocationInterface : public UInterface
		TEST_METHOD(Class__RoomSystem__AIHideLocationInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIHideLocationInterface, 0x0028);
		}

		// class UDoorInterface : public UInterface
		TEST_METHOD(Class__RoomSystem__DoorInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoorInterface, 0x0028);
		}

		// class UPOIBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__RoomSystem__POIBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPOIBlueprintLibrary, 0x0028);
		}

		// class UPOIResultBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__RoomSystem__POIResultBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPOIResultBlueprintLibrary, 0x0028);
		}

		// class ARoomAreaBase : public AActor
		TEST_METHOD(Class__RoomSystem__RoomAreaBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARoomAreaBase, MapName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARoomAreaBase, CharacterDetectorsRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARoomAreaBase, CharacterDetectors, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARoomAreaBase, RoomEntryPoints, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARoomAreaBase, AdjacentRooms, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARoomAreaBase, HideActors, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARoomAreaBase, AIHideActors, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARoomAreaBase, AICharactersInRoom, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARoomAreaBase, PointsOfInterest, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARoomAreaBase, bPlayerIsInRoom, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARoomAreaBase, UnknownData_BRCD, 0x02E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARoomAreaBase, 0x0308);
		}

		// class URoomSystem : public UWorldSubsystem
		TEST_METHOD(Class__RoomSystem__RoomSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URoomSystem, OnPlayerEnteredRoom, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoomSystem, OnPlayerExitedRoom, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoomSystem, OnRoomLoaded, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoomSystem, OnRoomUnloaded, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoomSystem, UnknownData_XL8N, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URoomSystem, 0x0100);
		}

		// class URoomSystemSettings : public UDeveloperSettings
		TEST_METHOD(Class__RoomSystem__RoomSystemSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URoomSystemSettings, PlayerRoomHeatIncreaseRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoomSystemSettings, PlayerRoomHeatDecayRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoomSystemSettings, PlayerRoomRecentDecay, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoomSystemSettings, AIRoomHeatIncreaseRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoomSystemSettings, AIRoomHeatDecayRate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoomSystemSettings, MaxPOIHeat, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoomSystemSettings, POINearIncreasePerSecond, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoomSystemSettings, POIHeatIncreaseOnCollect, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URoomSystemSettings, 0x0058);
		}

		// class URoomVisibilityData : public UObject
		TEST_METHOD(Class__RoomSystem__RoomVisibilityData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URoomVisibilityData, RoomVisibilityPoints, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URoomVisibilityData, 0x0038);
		}

		// class AItemRandomizer : public AActor
		TEST_METHOD(Class__RandomItemSystem__ItemRandomizer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItemRandomizer, 0x0228);
		}

		// class ARandomItemGroup : public AActor
		TEST_METHOD(Class__RandomItemSystem__RandomItemGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARandomItemGroup, PossibleLocations, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARandomItemGroup, 0x0238);
		}

		// class UChangeStatus_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__ChangeStatus__ChangeStatus_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChangeStatus_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChangeStatus_C, BB_ChaseStatus, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChangeStatus_C, Status, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChangeStatus_C, 0x00D9);
		}

		// class USetHeadAim_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__SetHeadAim__SetHeadAim_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetHeadAim_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetHeadAim_C, EnableHeadAim, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetHeadAim_C, UnknownData_Q4WH, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetHeadAim_C, TargetActor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetHeadAim_C, TargetLocation, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetHeadAim_C, 0x0108);
		}

		// class ABurntrap_C : public AAISeeker_C
		TEST_METHOD(BlueprintGeneratedClass__Burntrap__Burntrap_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABurntrap_C, UnknownData_SEIX, 0x07F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABurntrap_C, UberGraphFrame, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABurntrap_C, Health, 0x0800);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABurntrap_C, 0x0804);
		}

		// class URIG_CartHidePoint_Skeleton_AnimBlueprint_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__RIG_CartHidePoint_Skeleton_AnimBlueprint__RIG_CartHidePoint_Skeleton_AnimBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_CartHidePoint_Skeleton_AnimBlueprint_C, UnknownData_X5OH, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_CartHidePoint_Skeleton_AnimBlueprint_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_CartHidePoint_Skeleton_AnimBlueprint_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_CartHidePoint_Skeleton_AnimBlueprint_C, AnimGraphNode_Slot, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_CartHidePoint_Skeleton_AnimBlueprint_C, AnimGraphNode_TransitionResult_2, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_CartHidePoint_Skeleton_AnimBlueprint_C, AnimGraphNode_TransitionResult, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_CartHidePoint_Skeleton_AnimBlueprint_C, AnimGraphNode_SequencePlayer_2, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_CartHidePoint_Skeleton_AnimBlueprint_C, AnimGraphNode_StateResult_2, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_CartHidePoint_Skeleton_AnimBlueprint_C, AnimGraphNode_SequencePlayer, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_CartHidePoint_Skeleton_AnimBlueprint_C, AnimGraphNode_StateResult, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_CartHidePoint_Skeleton_AnimBlueprint_C, AnimGraphNode_StateMachine, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_CartHidePoint_Skeleton_AnimBlueprint_C, IsBeingSearched, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_CartHidePoint_Skeleton_AnimBlueprint_C, UnknownData_P9WC, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_CartHidePoint_Skeleton_AnimBlueprint_C, StartPos, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_CartHidePoint_Skeleton_AnimBlueprint_C, CartSearchSequence, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URIG_CartHidePoint_Skeleton_AnimBlueprint_C, 0x0550);
		}

		// class UFreddyOverlay_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FreddyOverlay__FreddyOverlay_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyOverlay_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyOverlay_C, LowPowerAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyOverlay_C, BottomLeftUIBox, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyOverlay_C, BottomMidUIBox, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyOverlay_C, BottomRightUIBox, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyOverlay_C, ExitText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyOverlay_C, ExitTextAndIcon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyOverlay_C, FreddyHudImage, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyOverlay_C, LowPowerImage, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyOverlay_C, LowPowerOverlay, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyOverlay_C, MiddleUIBox, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyOverlay_C, MidLeftUIBox, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyOverlay_C, MidRightUIBox, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyOverlay_C, RoxyHudImage, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyOverlay_C, TopLeftUIBox, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyOverlay_C, TopMidUIBox, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyOverlay_C, TopRightUIBox, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyOverlay_C, WI_Freddy_Clock, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyOverlay_C, WI_Freddy_FazNotification, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyOverlay_C, WI_PowerLevel, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyOverlay_C, FreddyRef, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyOverlay_C, MasterCam, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFreddyOverlay_C, 0x02D9);
		}

		// class ASplinePathwayManager_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SplinePathwayManager__SplinePathwayManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplinePathwayManager_C, Root, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplinePathwayManager_C, StartingSplines, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplinePathwayManager_C, AllSplines, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplinePathwayManager_C, SplineForks, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplinePathwayManager_C, AllForks, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASplinePathwayManager_C, 0x02B0);
		}

		// class ASecurityOffice_Daycare_C : public ASecurityOfficeManager_C
		TEST_METHOD(BlueprintGeneratedClass__SecurityOffice_Daycare__SecurityOffice_Daycare_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, SunmanDropLocation, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, WorldStateHandler, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, DaycareEndState, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, SunmanSpawnedHandler, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, MissionStateCondition, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, InventoryConditional, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, Wander_Point_5, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, Wander_Point_4, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, Wander_Point_3, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, Wander_Point_2, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, Wander_Point_1, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, Wander_Points, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, DeskArea1, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, DeskArea, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, Pace_Point_2, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, Pace_Point_1, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, Pace_Points, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, Moonman_Exit, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, Moonman_Spawn, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, Sunman_Spawn, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, End_Points, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, FlashlightCollectListener, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, PlayerBlocker_2, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, PlayerBlocker_1, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, Cube, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, TEMP_Text, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, AlwaysFaceCameraComponent, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, FlashlightRechargeStation, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, Moonman, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, Player_Sequence_Trigger, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, PhaseBB, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, Sequence, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, SplineManagerBB, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, Spline_Pathway_Manager, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, Movement_Speed_BB, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, Sunman_Phase_1_Trigger, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, MultiInputActivator, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, PlayerBB, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, InsidePlayPen, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, UnknownData_QEFY, 0x0539);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, Generator_Count, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, SlideIntoFunMissionName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, LetThereBeLightMissionName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, CineCamera, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, PlayerCam, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, BlendInTime, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, BlendOutTime, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, InsideDeskArea, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, UnknownData_AEO1, 0x0589);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, InvestigationLocationBB, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, NoiseMakingTowerBB, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, InvestigationRoomBB, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, GregoryVOPlayed, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, UnknownData_B5UY, 0x05A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, LineSkipper, 0x05A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, skiplines, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, UnknownData_ACNP, 0x05D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, SplineSpawnLocation, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, VOTriggered, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, VOPlaying, 0x0611);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, UnknownData_HSQ4, 0x0612);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, TensionSystem, 0x0612);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, Button, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_Daycare_C, StartupSetup, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASecurityOffice_Daycare_C, 0x0649);
		}

		// class UAnimatronic_Shattered_Monty_C : public UAnimatronic_ABP_MASTER_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Animatronic_Shattered_Monty__Animatronic_Shattered_Monty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_Shattered_Monty_C, UberGraphFrame, 0x8DE8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimatronic_Shattered_Monty_C, 0x8DF0);
		}

		// class ACollectibleTape_C : public ACollectible_C
		TEST_METHOD(BlueprintGeneratedClass__CollectibleTape__CollectibleTape_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACollectibleTape_C, UnknownData_B9A0, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACollectibleTape_C, UberGraphFrame, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACollectibleTape_C, StaticMesh, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACollectibleTape_C, HasBeenCollected_, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACollectibleTape_C, progressSoundPlaying, 0x0299);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACollectibleTape_C, 0x029A);
		}

		// class AHidingSpotEnterExitPawn_C : public AFreddyEnterExitPawn_C
		TEST_METHOD(BlueprintGeneratedClass__HidingSpotEnterExitPawn__HidingSpotEnterExitPawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHidingSpotEnterExitPawn_C, UberGraphFrame, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHidingSpotEnterExitPawn_C, GregoryLight, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHidingSpotEnterExitPawn_C, 0x02B0);
		}

		// class UHideAnimInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__HideAnimInterface__HideAnimInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHideAnimInterface_C, 0x0028);
		}

		// class UAnimNotify_ChicaServoMovement_C : public UAnimNotify_ServoMovement_C
		TEST_METHOD(BlueprintGeneratedClass__AnimNotify_ChicaServoMovement__AnimNotify_ChicaServoMovement_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ChicaServoMovement_C, 0x0058);
		}

		// class UVCartAnimationBlueprint_C : public UVehicleAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__VCartAnimationBlueprint__VCartAnimationBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVCartAnimationBlueprint_C, UberGraphFrame, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVCartAnimationBlueprint_C, AnimGraphNode_Root, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVCartAnimationBlueprint_C, AnimGraphNode_MeshRefPose, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVCartAnimationBlueprint_C, AnimGraphNode_WheelHandler, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVCartAnimationBlueprint_C, AnimGraphNode_ComponentToLocalSpace, 0x0AA8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVCartAnimationBlueprint_C, 0x0AC8);
		}

		// class UAnimNotify_RoxyShatteredServo_C : public UAnimNotify_RoxyServoMovement_C
		TEST_METHOD(BlueprintGeneratedClass__AnimNotify_RoxyShatteredServo__AnimNotify_RoxyShatteredServo_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_RoxyShatteredServo_C, 0x0058);
		}

		// class AAIChicaController_C : public AAISeekerController_C
		TEST_METHOD(BlueprintGeneratedClass__AIChicaController__AIChicaController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIChicaController_C, UberGraphFrame, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIChicaController_C, 0x03E0);
		}

		// class UTitle_Slidebar_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Title_Slidebar__Title_Slidebar_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_Slidebar_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_Slidebar_C, Image_55, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_Slidebar_C, ProgressBar, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_Slidebar_C, ProgressBarBackground, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_Slidebar_C, Slider, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_Slidebar_C, SliderBar_Text, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_Slidebar_C, Slider_Text, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_Slidebar_C, SliderValueChanged, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_Slidebar_C, MinValue, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_Slidebar_C, MaxValue, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_Slidebar_C, HoveredEvent, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTitle_Slidebar_C, 0x0298);
		}

		// class UPickSplineFork_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__PickSplineFork__PickSplineFork_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickSplineFork_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPickSplineFork_C, 0x00B0);
		}

		// class ABP_ReturnFazerBlaster_C : public AActivatableBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ReturnFazerBlaster__BP_ReturnFazerBlaster_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ReturnFazerBlaster_C, UnknownData_PX0P, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ReturnFazerBlaster_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ReturnFazerBlaster_C, MissionStateCondition, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ReturnFazerBlaster_C, InventoryConditional, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ReturnFazerBlaster_C, Player_Overlap, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ReturnFazerBlaster_C, StaticMesh, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ReturnFazerBlaster_C, Manager, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ReturnFazerBlaster_C, Button, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ReturnFazerBlaster_C, Elevator, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ReturnFazerBlaster_C, State, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ReturnFazerBlaster_C, UnknownData_NDNC, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ReturnFazerBlaster_C, Door, 0x0311);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ReturnFazerBlaster_C, 0x0340);
		}

		// class ABurntrap_PowerStation_Actor_C : public APowerStation_Actor_C
		TEST_METHOD(BlueprintGeneratedClass__Burntrap_PowerStation_Actor__Burntrap_PowerStation_Actor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABurntrap_PowerStation_Actor_C, UnknownData_YAED, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABurntrap_PowerStation_Actor_C, UberGraphFrame, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABurntrap_PowerStation_Actor_C, 0x0300);
		}

		// class USplineForkProvider_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__SplineForkProvider__SplineForkProvider_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineForkProvider_C, 0x0028);
		}

		// class UDisplayLocationService_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__DisplayLocationService__DisplayLocationService_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplayLocationService_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplayLocationService_C, LocationKey, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplayLocationService_C, 0x00C8);
		}

		// class UFindHidingLocation_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FindHidingLocation__FindHidingLocation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindHidingLocation_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindHidingLocation_C, OutHideActorKey, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindHidingLocation_C, OutSearchLocationKey, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindHidingLocation_C, 0x0100);
		}

		// class URummagerInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__RummagerInterface__RummagerInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URummagerInterface_C, 0x0028);
		}

		// class ABurntrapHackPointBP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BurntrapHackPointBP__BurntrapHackPointBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABurntrapHackPointBP_C, Arrow, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABurntrapHackPointBP_C, StaticMeshComponent0, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABurntrapHackPointBP_C, 0x0238);
		}

		// class AOGM_Underground_C : public AMGM_OfficeGameManger_C
		TEST_METHOD(BlueprintGeneratedClass__OGM_Underground__OGM_Underground_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, UnknownData_0AHR, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, UberGraphFrame, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Burntrap_Freddy_Spawn, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Way_Point_Roxy_2, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Way_Point_Roxy_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Way_Point_Chica_2, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Way_Point_Chica_1, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Way_Point_Monty, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Spawn_Burn_Trap_1, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Burn_Trap_Spawn, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Spawn_Roxy_2, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Spawn_Monty_1, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Monty_Spawn, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Spawn_Roxy_1, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Roxy_Spawn, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Spawn_Chica_2, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Spawn_Chica_1, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Chica_Spawn, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Part_Number, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Wave_Number, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Chica_Can_Spawn, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Roxy_Can_Spawn, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Monty_Can_Spawn, 0x034A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Tangle_Can_Spawn, 0x034B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Tangle_Respawn_Delay, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Monty_Respawn_Delay, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, UnknownData_9OZ7, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Door_Controllers, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, DoorCurrentPower, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, DoorPower, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, DoorPowerRate, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, UnknownData_ES4Q, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, DoorMeter1, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, DoorMeter2, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Vent_Controller, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, VentCurrentPower, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, VentPower, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, VentPowerRate, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, UnknownData_YOFS, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, VentMeter, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, TentacleController, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Monty_Respawn_Delay_Wave_2, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Monty_Respawn_Delay_Wave_3, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Tangle_Respawn_Delay_Wave_4, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, UnknownData_BJT2, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Curr_Spawn, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, ChicaSpawned, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, RoxySpawned, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, MontySpawned, 0x03CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, UnknownData_Y28W, 0x03CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Power_Stations, 0x03CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, AudioWave, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, UnknownData_XUPW, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Underground_C, Buttons, 0x03E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOGM_Underground_C, 0x03F8);
		}

		// class UMovieSceneSignedObject : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSignedObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, Signature, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, UnknownData_WVPT, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSignedObject, 0x0050);
		}

		// class UMovieSceneSection : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_F329, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, Easing, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, SectionRange, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PreRollFrames, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostRollFrames, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, RowIndex, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, OverlapPriority, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_4X6S, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, StartTime, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EndTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PrerollTime, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostrollTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_BBFU, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, bSupportsInfiniteRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, BlendType, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_UJHP, 0x00CB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSection, 0x00E0);
		}

		// class UMovieSceneTrack : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_0A9P, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, bIsEvalDisabled, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_M6FW, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrack, 0x0058);
		}

		// class UMovieSceneNameableTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__MovieSceneNameableTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNameableTrack, 0x0058);
		}

		// class UMovieSceneSequence : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, PrecompiledEvaluationTemplate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, DefaultCompletionMode, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bParentContextsAreSignificant, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bPlayableDirectly, 0x0342);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, UnknownData_PAY9, 0x0343);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequence, 0x0348);
		}

		// class UMovieSceneSequencePlayer : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_SV33, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlay, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlayReverse, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnStop, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPause, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnFinished, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Status, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_7XG0, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_0ML9, 0x045D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Sequence, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, StartTime, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, DurationFrames, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, CurrentNumLoops, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_36WZ, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackSettings, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_TXED, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, RootTemplateInstance, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_PVIB, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, NetSyncProps, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackClient, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_W6VV, 0x0848);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequencePlayer, 0x0888);
		}

		// class UMovieSceneSubSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__MovieSceneSubSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, Parameters, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, StartOffset, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TimeScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, PrerollTime, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, SubSequence, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, ActorToRecord, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, UnknownData_40VQ, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetSequenceName, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetPathToRecordTo, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubSection, 0x0158);
		}

		// class UMovieSceneSubTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieScene__MovieSceneSubTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubTrack, 0x0068);
		}

		// class UMovieSceneCustomClockSource : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneCustomClockSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCustomClockSource, 0x0028);
		}

		// class UMovieScenePlaybackClient : public UInterface
		TEST_METHOD(Class__MovieScene__MovieScenePlaybackClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePlaybackClient, 0x0028);
		}

		// class UMovieScene : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieScene)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Spawnables, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Possessables, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ObjectBindings, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, BindingGroups, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MasterTracks, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CameraCutTrack, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, SelectionRange, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, PlaybackRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, TickResolution, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, DisplayRate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, EvaluationType, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ClockSource, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, UnknownData_71AD, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CustomClockSourcePath, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MarkedFrames, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene, 0x0148);
		}

		// class UMovieSceneBindingOverrides : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, BindingData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, UnknownData_2KIM, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOverrides, 0x0090);
		}

		// class UMovieSceneBindingOwnerInterface : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOwnerInterface, 0x0028);
		}

		// class UMovieSceneBuiltInEasingFunction : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBuiltInEasingFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_VN0J, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_G2A0, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBuiltInEasingFunction, 0x0038);
		}

		// class UMovieSceneEasingExternalCurve : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneEasingExternalCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, UnknownData_D84Q, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, Curve, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingExternalCurve, 0x0038);
		}

		// class UMovieSceneEasingFunction : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneEasingFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingFunction, 0x0028);
		}

		// class UMovieSceneFolder : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneFolder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, FolderName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildFolders, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildMasterTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildObjectBindingStrings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, UnknownData_KSR4, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFolder, 0x0070);
		}

		// class UMovieSceneKeyProxy : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneKeyProxy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneKeyProxy, 0x0028);
		}

		// class UTestMovieSceneTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, bHighPassFilter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, UnknownData_L6F3, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, SectionArray, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneTrack, 0x0070);
		}

		// class UTestMovieSceneSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSection, 0x00E0);
		}

		// class UTestMovieSceneSequence : public UMovieSceneSequence
		TEST_METHOD(Class__MovieScene__TestMovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSequence, MovieScene, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSequence, 0x0350);
		}

		// class UTestMovieSceneSubTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneSubTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSubTrack, SectionArray, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSubTrack, 0x0078);
		}

		// class UTestMovieSceneSubSection : public UMovieSceneSubSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSubSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSubSection, 0x0158);
		}

		// class UWI_InstructionCard_HidingPlaces_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_HidingPlaces__WI_InstructionCard_HidingPlaces_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_HidingPlaces_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_HidingPlaces_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_HidingPlaces_C, UI_TextAndIcons, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_HidingPlaces_C, VerticalBox_250, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_HidingPlaces_C, WI_ImageScaled, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_HidingPlaces_C, 0x0258);
		}

		// class UAmbisonicsEncodingSettings : public USoundfieldEncodingSettingsBase
		TEST_METHOD(Class__SoundFields__AmbisonicsEncodingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbisonicsEncodingSettings, AmbisonicsOrder, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbisonicsEncodingSettings, UnknownData_1LHB, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAmbisonicsEncodingSettings, 0x0030);
		}

		// class UWI_InstructionCard_PAS_TakeOffFaceplate_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_PAS_TakeOffFaceplate__WI_InstructionCard_PAS_TakeOffFaceplate_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOffFaceplate_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOffFaceplate_C, Console_TextAndIcons, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOffFaceplate_C, Image_18_Template, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOffFaceplate_C, PC_TextAndIcons, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOffFaceplate_C, TextBlock_48_Title, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOffFaceplate_C, VerticalBox_250, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOffFaceplate_C, WI_ImageScaled, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_PAS_TakeOffFaceplate_C, 0x0268);
		}

		// class ASaveGameActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SaveGameActor__SaveGameActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASaveGameActor_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASaveGameActor_C, SaveStationText, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASaveGameActor_C, Play_sfx_saveStation_screen_glitch_lp, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASaveGameActor_C, TextRender, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASaveGameActor_C, PointLight1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASaveGameActor_C, PointLight, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASaveGameActor_C, MOD_ManualSavePoint_02, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASaveGameActor_C, MOD_ManualSavePoint_01, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASaveGameActor_C, Arrow, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASaveGameActor_C, Scene, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASaveGameActor_C, Collection_Range, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASaveGameActor_C, PlayerInteractHoldComponent, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASaveGameActor_C, PlayerTrigger, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASaveGameActor_C, IsActive, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASaveGameActor_C, progressSoundPlaying, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASaveGameActor_C, UnknownData_16BG, 0x0292);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASaveGameActor_C, OnGameSave, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASaveGameActor_C, OcclusionTrace, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASaveGameActor_C, EmitterPlaying, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASaveGameActor_C, Glitching, 0x02D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASaveGameActor_C, 0x02D2);
		}

		// class UEditableMeshAdapter : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMeshAdapter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshAdapter, 0x0028);
		}

		// class UEditableGeometryCollectionAdapter : public UEditableMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableGeometryCollectionAdapter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, GeometryCollection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, OriginalGeometryCollection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, GeometryCollectionLODIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, UnknownData_5RI5, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGeometryCollectionAdapter, 0x00D8);
		}

		// class UEditableMesh : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_25JX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, Adapters, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_7XLN, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, TextureCoordinateCount, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_SE8Q, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, PendingCompactCounter, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, SubdivisionCount, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_UEL0, 0x0524);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMesh, 0x0708);
		}

		// class UEditableMeshFactory : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMeshFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshFactory, 0x0028);
		}

		// class UEditableStaticMeshAdapter : public UEditableMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableStaticMeshAdapter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, OriginalStaticMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMeshLODIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, UnknownData_YXUH, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableStaticMeshAdapter, 0x00E0);
		}

		// class Afootstep_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__footstep__footstep_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Afootstep_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::Afootstep_C, DefaultSceneRoot, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Afootstep_C, 0x0238);
		}

		// class UMarkerIcon_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MarkerIcon__MarkerIcon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMarkerIcon_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMarkerIcon_C, Image_91, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMarkerIcon_C, Single_Mission, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMarkerIcon_C, Double_Mission, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMarkerIcon_C, Multi_Mission, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMarkerIcon_C, No_Mission, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMarkerIcon_C, Location, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMarkerIcon_C, 0x0461);
		}

		// class UTimeCheckComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__TimeCheckComponent__TimeCheckComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeCheckComponent_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeCheckComponent_C, StartTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeCheckComponent_C, EndTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeCheckComponent_C, OnTimeStart, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeCheckComponent_C, OnTimeEnd, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeCheckComponent_C, UseTimeRange, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeCheckComponent_C, ExcludeMoonManTimes, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeCheckComponent_C, UnknownData_OMQF, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeCheckComponent_C, MoonManTimeHit, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeCheckComponent_C, UseTimeChangeEvent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeCheckComponent_C, StartTriggered, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeCheckComponent_C, EndTriggered, 0x0102);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeCheckComponent_C, UnknownData_Y9RF, 0x0103);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeCheckComponent_C, ConditionalsDelegates, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeCheckComponent_C, 0x0118);
		}

		// class UCable04_PAS02_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable04_PAS02_ABP__Cable04_PAS02_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable04_PAS02_ABP_C, 0x05E0);
		}

		// class USecurityCameraUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SecurityCameraUI__SecurityCameraUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, Cam, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, CameraDisplay, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, CameraName, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, MapUI, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, ScaleBox_236, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, ThumbstickImage, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, ZoomIN, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, ZoomInImage, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, ZoomOut, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, ZoomOutImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, PanAmount, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, ZoomAmount, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, CurrentCamera, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, CanChange, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, UnknownData_CD55, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, InputMove, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, LastInput, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, CurentMove, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, ZoomInHandle, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, ZoomOutHandle, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, CameraDisplayMateral, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, SelectedCamera, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, new_select, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, UnknownData_WMNC, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, TempSelectedCamera, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, PrevCamera, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, WaitForRaise, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, UnknownData_HM2R, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, GolfCamIndex, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, changecamera, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, UnknownData_UZGF, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, VisibleCameras, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, CameraRow0, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, CameraRow1, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, CameraRow2, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecurityCameraUI_C, CameraRow3, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USecurityCameraUI_C, 0x0348);
		}

		// class ABP_MiniGame_Activator_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_MiniGame_Activator__BP_MiniGame_Activator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MiniGame_Activator_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MiniGame_Activator_C, GameTypeCheckDestroy, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MiniGame_Activator_C, PlayerInteractComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MiniGame_Activator_C, Sphere, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MiniGame_Activator_C, DefaultSceneRoot, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MiniGame_Activator_C, CanUse, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MiniGame_Activator_C, Type, 0x0251);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MiniGame_Activator_C, 0x0252);
		}

		// class ADoorLockSystem_C : public AActivatableBase_C
		TEST_METHOD(BlueprintGeneratedClass__DoorLockSystem__DoorLockSystem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorLockSystem_C, UnknownData_U3UU, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorLockSystem_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorLockSystem_C, Billboard, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorLockSystem_C, Door, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorLockSystem_C, UnlockTimer, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorLockSystem_C, DoorLockTime, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorLockSystem_C, AmountToDrain, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADoorLockSystem_C, 0x02B8);
		}

		// class UMovieSceneGeometryCollectionSection : public UMovieSceneSection
		TEST_METHOD(Class__GeometryCollectionTracks__MovieSceneGeometryCollectionSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCollectionSection, Params, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCollectionSection, 0x0110);
		}

		// class UMovieSceneGeometryCollectionTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__GeometryCollectionTracks__MovieSceneGeometryCollectionTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCollectionTrack, AnimationSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCollectionTrack, 0x0068);
		}

		// class UMouseCursorUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MouseCursorUI__MouseCursorUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMouseCursorUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMouseCursorUI_C, SB_Cursor, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseCursorUI_C, 0x0240);
		}

		// class UFazerBlast_FindLocationAtDistance_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FazerBlast_FindLocationAtDistance__FazerBlast_FindLocationAtDistance_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_FindLocationAtDistance_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_FindLocationAtDistance_C, BB_TargetLocation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_FindLocationAtDistance_C, BB_VoiceTrigger, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_FindLocationAtDistance_C, BB_LastKnownLocation, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_FindLocationAtDistance_C, SamplePointRadius, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_FindLocationAtDistance_C, SampleDistance, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_FindLocationAtDistance_C, Direction, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_FindLocationAtDistance_C, TraceLimit, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_FindLocationAtDistance_C, FleeOrFollow, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_FindLocationAtDistance_C, Debug, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_FindLocationAtDistance_C, UnknownData_G04F, 0x0142);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_FindLocationAtDistance_C, DebugTime, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_FindLocationAtDistance_C, MaxTiltZ, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_FindLocationAtDistance_C, SurfacePadding, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_FindLocationAtDistance_C, Weight_Follow_Length, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_FindLocationAtDistance_C, Weight_Follow_DotProduct, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_FindLocationAtDistance_C, Weight_Follow_DotProduct_ActorForward, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_FindLocationAtDistance_C, FleeRadius, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_FindLocationAtDistance_C, Weight_Flee_Length, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_FindLocationAtDistance_C, Weight_Flee_DotProduct, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_FindLocationAtDistance_C, Weight_Flee_DotProduct_ActorForward, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_FindLocationAtDistance_C, AverageLengths, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_FindLocationAtDistance_C, FleeHeight, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFazerBlast_FindLocationAtDistance_C, 0x0174);
		}

		// class APRE_ElevatorDoor_General_C : public APRE_ElevatorDoor_Master_C
		TEST_METHOD(BlueprintGeneratedClass__PRE_ElevatorDoor_General__PRE_ElevatorDoor_General_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_General_C, UberGraphFrame, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_General_C, Box, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_ElevatorDoor_General_C, 0x0310);
		}

		// class URIG_FirstAidBooth_Skeleton_AnimBlueprint_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__RIG_FirstAidBooth_Skeleton_AnimBlueprint__RIG_FirstAidBooth_Skeleton_AnimBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_FirstAidBooth_Skeleton_AnimBlueprint_C, UnknownData_6EM6, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_FirstAidBooth_Skeleton_AnimBlueprint_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_FirstAidBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_FirstAidBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_TransitionResult_5, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_FirstAidBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_TransitionResult_4, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_FirstAidBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_TransitionResult_3, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_FirstAidBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_TransitionResult_2, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_FirstAidBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_TransitionResult, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_FirstAidBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_SequencePlayer_3, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_FirstAidBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_StateResult_3, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_FirstAidBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_SequencePlayer_2, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_FirstAidBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_StateResult_2, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_FirstAidBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_SequencePlayer, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_FirstAidBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_StateResult, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_FirstAidBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_StateMachine, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_FirstAidBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_Slot, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_FirstAidBooth_Skeleton_AnimBlueprint_C, IsBeingSearched, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_FirstAidBooth_Skeleton_AnimBlueprint_C, IsPeeking, 0x0661);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URIG_FirstAidBooth_Skeleton_AnimBlueprint_C, 0x0662);
		}

		// class USequenceDirector_C : public ULevelSequenceDirector
		TEST_METHOD(BlueprintGeneratedClass__MontyBossBattleIntroMaster__SequenceDirector_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceDirector_C, UberGraphFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceDirector_C, RideSpline, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceDirector_C, 0x0060);
		}

		// class UStopInvestigating_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__StopInvestigating__StopInvestigating_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStopInvestigating_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStopInvestigating_C, BB_Investigating, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStopInvestigating_C, 0x00D8);
		}

		// class ABallCannonLimitedShots_C : public ABallCannon_C
		TEST_METHOD(BlueprintGeneratedClass__BallCannonLimitedShots__BallCannonLimitedShots_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShots_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShots_C, SparkLight, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShots_C, AmmoWidget, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShots_C, SparksN, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShots_C, Box, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShots_C, Smoke, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShots_C, Monty_Smash_Loc, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShots_C, BallShotTransform1, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShots_C, RIG_BallBlaster, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShots_C, MOD_BallBlaster_02, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShots_C, Sphere, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShots_C, NumBalls, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShots_C, DelayForBallCollect, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShots_C, MaxBallCount, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShots_C, Reset_Threshold, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShots_C, MontyBossManagerRef, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShots_C, BTKeyName, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShots_C, IsBroken, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShots_C, UnknownData_6B63, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShots_C, Max_Angle, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonLimitedShots_C, Allow_Firing, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABallCannonLimitedShots_C, 0x03C9);
		}

		// class ABP_LazerPlanetManager_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_LazerPlanetManager__BP_LazerPlanetManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LazerPlanetManager_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LazerPlanetManager_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LazerPlanetManager_C, Planet1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LazerPlanetManager_C, Planet2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LazerPlanetManager_C, PlanetMaterials, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_LazerPlanetManager_C, 0x0298);
		}

		// class UCable_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable_ABP__Cable_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCable_ABP_C, UnknownData_ST0X, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCable_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCable_ABP_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCable_ABP_C, AnimGraphNode_TransitionResult_3, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCable_ABP_C, AnimGraphNode_TransitionResult_2, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCable_ABP_C, AnimGraphNode_TransitionResult, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCable_ABP_C, AnimGraphNode_SequencePlayer_3, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCable_ABP_C, AnimGraphNode_StateResult_3, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCable_ABP_C, AnimGraphNode_SequencePlayer_2, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCable_ABP_C, AnimGraphNode_StateResult_2, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCable_ABP_C, AnimGraphNode_SequencePlayer, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCable_ABP_C, AnimGraphNode_StateResult, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCable_ABP_C, AnimGraphNode_StateMachine, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCable_ABP_C, CableIN, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCable_ABP_C, UnknownData_OQ67, 0x05C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCable_ABP_C, InAnim, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCable_ABP_C, OutAnim, 0x05D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable_ABP_C, 0x05E0);
		}

		// class AMultiInputActivator_C : public AActivatorBase_C
		TEST_METHOD(BlueprintGeneratedClass__MultiInputActivator__MultiInputActivator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMultiInputActivator_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMultiInputActivator_C, Activators, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMultiInputActivator_C, OnCantActivate, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMultiInputActivator_C, OnCanActivate, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMultiInputActivator_C, 0x02C8);
		}

		// class APRE_Elevator_WideBase_C : public APRE_Elevator_NarrowBase_C
		TEST_METHOD(BlueprintGeneratedClass__PRE_Elevator_WideBase__PRE_Elevator_WideBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_WideBase_C, UberGraphFrame, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_WideBase_C, Play_sfx_elevator_arch_bulbs_on_lp1, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_WideBase_C, Play_sfx_elevator_arch_bulbs_on_lp, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_WideBase_C, SM_DinerA_IntTrimA_VarA3, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_WideBase_C, SM_DinerA_IntTrimA_VarA, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_WideBase_C, MOD_ElevatorArch1, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_WideBase_C, MOD_ElevatorArch, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_WideBase_C, MOD_PartyDoor_Beam03, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_WideBase_C, MOD_PartyDoor_BeamBase, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_WideBase_C, MOD_PartyDoor_Beam02, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_WideBase_C, MOD_PartyDoor_Beam01, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_WideBase_C, MOD_PartyDoor_BeamBase1, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_WideBase_C, MOD_PartyDoor_Beam06, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_WideBase_C, MOD_PartyDoor_Beam05, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_WideBase_C, MOD_PartyDoor_Beam04, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_WideBase_C, WideMeshes, 0x0718);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_Elevator_WideBase_C, 0x0720);
		}

		// class UWorker_OrientToNewDirection_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__Worker_OrientToNewDirection__Worker_OrientToNewDirection_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_OrientToNewDirection_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_OrientToNewDirection_C, Direction_Along_Spline, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_OrientToNewDirection_C, Forward_Along_Spline, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_OrientToNewDirection_C, At_Start_Of_Spline, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_OrientToNewDirection_C, At_End_Of_Spline, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_OrientToNewDirection_C, StaffBot, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_OrientToNewDirection_C, deltaTime, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_OrientToNewDirection_C, UnknownData_O7CG, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_OrientToNewDirection_C, Path, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_OrientToNewDirection_C, LocalDistanceAlongPath, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_OrientToNewDirection_C, UnknownData_UFKH, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_OrientToNewDirection_C, Distance_Along_Path, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_OrientToNewDirection_C, TargetRotation, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_OrientToNewDirection_C, RotationInterpSpeed, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_OrientToNewDirection_C, TargetSet, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_OrientToNewDirection_C, UnknownData_7TSU, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_OrientToNewDirection_C, PauseTask, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_OrientToNewDirection_C, BBTargetRotation, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_OrientToNewDirection_C, TurnDirection, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorker_OrientToNewDirection_C, 0x0204);
		}

		// class UWorker_FollowSpline_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__Worker_FollowSpline__Worker_FollowSpline_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, StaffBot, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, Path, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, Forward_on_Spline, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, Speed, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, UnknownData_MMSI, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, Direction_Along_Spline, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, LocalDistanceAlongPath, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, UnknownData_U5C3, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, At_End_Of_Spline, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, At_Start_Of_Spline, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, deltaTime, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, UnknownData_D0IA, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, DistanceAlongPath, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, PauseTask, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, TargetSpeed, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, SpeedInterpSpeed, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, MaxSpeed, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, UnknownData_6RKS, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, AccelCurve, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, DistanceToEnd, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, UnknownData_VKO7, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, DecelCurve, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, AnimInstance, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, AimBlendOn_Curve, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, AimBlendOff_Curve, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_FollowSpline_C, StartDistance, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorker_FollowSpline_C, 0x020C);
		}

		// class UWI_InstructionCard_ReCharge_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_ReCharge__WI_InstructionCard_ReCharge_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_ReCharge_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_ReCharge_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_ReCharge_C, VerticalBox_250, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_ReCharge_C, WI_ImageScaled, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_ReCharge_C, 0x0250);
		}

		// class UModularSynthPresetBank : public UObject
		TEST_METHOD(Class__Synthesis__ModularSynthPresetBank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthPresetBank, Presets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthPresetBank, 0x0038);
		}

		// class UModularSynthLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Synthesis__ModularSynthLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthLibrary, 0x0028);
		}

		// class UModularSynthComponent : public USynthComponent
		TEST_METHOD(Class__Synthesis__ModularSynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthComponent, VoiceCount, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthComponent, UnknownData_H2XV, 0x06D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthComponent, 0x0D70);
		}

		// class USourceEffectBitCrusherPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectBitCrusherPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectBitCrusherPreset, UnknownData_4D98, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectBitCrusherPreset, Settings, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectBitCrusherPreset, 0x0078);
		}

		// class USourceEffectChorusPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectChorusPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectChorusPreset, UnknownData_PQZU, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectChorusPreset, Settings, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectChorusPreset, 0x0098);
		}

		// class USourceEffectDynamicsProcessorPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectDynamicsProcessorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectDynamicsProcessorPreset, UnknownData_Z2MA, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectDynamicsProcessorPreset, Settings, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectDynamicsProcessorPreset, 0x00B8);
		}

		// class UEnvelopeFollowerListener : public UActorComponent
		TEST_METHOD(Class__Synthesis__EnvelopeFollowerListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvelopeFollowerListener, OnEnvelopeFollowerUpdate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvelopeFollowerListener, UnknownData_YPPT, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvelopeFollowerListener, 0x00D0);
		}

		// class USourceEffectEnvelopeFollowerPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectEnvelopeFollowerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEnvelopeFollowerPreset, UnknownData_PWVF, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEnvelopeFollowerPreset, Settings, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectEnvelopeFollowerPreset, 0x0080);
		}

		// class USourceEffectEQPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectEQPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEQPreset, UnknownData_VE3E, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEQPreset, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectEQPreset, 0x0088);
		}

		// class USourceEffectFilterPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectFilterPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFilterPreset, UnknownData_P7U9, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFilterPreset, Settings, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectFilterPreset, 0x0080);
		}

		// class USourceEffectFoldbackDistortionPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectFoldbackDistortionPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFoldbackDistortionPreset, UnknownData_DU91, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFoldbackDistortionPreset, Settings, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectFoldbackDistortionPreset, 0x0080);
		}

		// class USourceEffectMidSideSpreaderPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectMidSideSpreaderPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectMidSideSpreaderPreset, UnknownData_YD0W, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectMidSideSpreaderPreset, Settings, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectMidSideSpreaderPreset, 0x0080);
		}

		// class USourceEffectPannerPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectPannerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPannerPreset, UnknownData_2HUZ, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPannerPreset, Settings, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectPannerPreset, 0x0078);
		}

		// class USourceEffectPhaserPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectPhaserPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPhaserPreset, UnknownData_VTR5, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPhaserPreset, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectPhaserPreset, 0x0088);
		}

		// class USourceEffectRingModulationPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectRingModulationPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectRingModulationPreset, UnknownData_MJGK, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectRingModulationPreset, Settings, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectRingModulationPreset, 0x0090);
		}

		// class USourceEffectSimpleDelayPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectSimpleDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectSimpleDelayPreset, UnknownData_E2M6, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectSimpleDelayPreset, Settings, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectSimpleDelayPreset, 0x0098);
		}

		// class USourceEffectStereoDelayPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectStereoDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectStereoDelayPreset, UnknownData_A7YT, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectStereoDelayPreset, Settings, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectStereoDelayPreset, 0x0090);
		}

		// class USourceEffectWaveShaperPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectWaveShaperPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectWaveShaperPreset, UnknownData_D51B, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectWaveShaperPreset, Settings, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectWaveShaperPreset, 0x0078);
		}

		// class UAudioImpulseResponse : public UObject
		TEST_METHOD(Class__Synthesis__AudioImpulseResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, ImpulseResponse, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, NumChannels, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, SampleRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, NormalizationVolumeDb, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, UnknownData_61ZR, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, IRData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioImpulseResponse, 0x0058);
		}

		// class USubmixEffectConvolutionReverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectConvolutionReverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, Settings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, ImpulseResponse, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, BlockSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, bEnableHardwareAcceleration, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, UnknownData_O4WX, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectConvolutionReverbPreset, 0x00B8);
		}

		// class USubmixEffectDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, UnknownData_QXLT, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, Settings, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, DynamicSettings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, UnknownData_6OMC, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDelayPreset, 0x0090);
		}

		// class USubmixEffectFilterPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectFilterPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFilterPreset, UnknownData_ZQ4T, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFilterPreset, Settings, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectFilterPreset, 0x0080);
		}

		// class USubmixEffectFlexiverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectFlexiverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFlexiverbPreset, UnknownData_84L6, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFlexiverbPreset, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectFlexiverbPreset, 0x0088);
		}

		// class USubmixEffectTapDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectTapDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, UnknownData_P674, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, Settings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, UnknownData_EFKD, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectTapDelayPreset, 0x00B0);
		}

		// class USynth2DSlider : public UWidget
		TEST_METHOD(Class__Synthesis__Synth2DSlider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueX, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueY, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueXDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueYDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, SliderHandleColor, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, IndentHandle, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, Locked, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_ZOU2, 0x03FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, StepSize, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, IsFocusable, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_RY1V, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnMouseCaptureBegin, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnMouseCaptureEnd, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnControllerCaptureBegin, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnControllerCaptureEnd, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnValueChangedX, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnValueChangedY, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_0411, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynth2DSlider, 0x0478);
		}

		// class UGranularSynth : public USynthComponent
		TEST_METHOD(Class__Synthesis__GranularSynth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGranularSynth, GranulatedSoundWave, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGranularSynth, UnknownData_9AY1, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGranularSynth, 0x0A90);
		}

		// class UMonoWaveTableSynthPreset : public UObject
		TEST_METHOD(Class__Synthesis__MonoWaveTableSynthPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, PresetName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_76WJ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, LockKeyframesToGrid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, WaveTableResolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_F6GM, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, WaveTable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_2BDC, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMonoWaveTableSynthPreset, 0x0170);
		}

		// class USynthComponentMonoWaveTable : public USynthComponent
		TEST_METHOD(Class__Synthesis__SynthComponentMonoWaveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, OnTableAltered, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, OnNumTablesChanged, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, CurrentPreset, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, UnknownData_KI5C, 0x06F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponentMonoWaveTable, 0x0E10);
		}

		// class USynthSamplePlayer : public USynthComponent
		TEST_METHOD(Class__Synthesis__SynthSamplePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, SoundWave, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, OnSampleLoaded, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, OnSamplePlaybackProgress, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, UnknownData_CEZB, 0x06F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSamplePlayer, 0x0800);
		}

		// class USynthKnob : public UWidget
		TEST_METHOD(Class__Synthesis__SynthKnob)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, StepSize, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, MouseSpeed, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, MouseFineTuneSpeed, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_2QWV, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ParameterName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ParameterUnits, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ValueDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, WidgetStyle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, Locked, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, IsFocusable, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_KTFG, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnMouseCaptureBegin, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnMouseCaptureEnd, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnControllerCaptureBegin, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnControllerCaptureEnd, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnValueChanged, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_MSYJ, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthKnob, 0x0400);
		}

		// class USetCreepMode_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__SetCreepMode__SetCreepMode_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCreepMode_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCreepMode_C, enable, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetCreepMode_C, 0x00B1);
		}

		// class UPlayerInViewService_C : public USightDetectionService_C
		TEST_METHOD(BlueprintGeneratedClass__PlayerInViewService__PlayerInViewService_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInViewService_C, UnknownData_WDYR, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInViewService_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInViewService_C, StartSightTime, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInViewService_C, PlayerIsVisible, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInViewService_C, UnknownData_4KEY, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInViewService_C, AmountOfTimeSeen, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInViewService_C, UnknownData_6JN4, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInViewService_C, AmountOfTimeSeenBB, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInViewService_C, PlayerVisibleBB, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInViewService_C, Gregory, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInViewService_C, SeenLocationBB, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInViewService_C, PlayerActorKey, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInViewService_C, 0x0168);
		}

		// class UWI_InstructionCard_FreddyOutOfPower_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_FreddyOutOfPower__WI_InstructionCard_FreddyOutOfPower_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FreddyOutOfPower_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FreddyOutOfPower_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FreddyOutOfPower_C, VerticalBox_250, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FreddyOutOfPower_C, WI_ImageScaled, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_FreddyOutOfPower_C, 0x0250);
		}

		// class ATurnstileBarOpenable_MontyBattle_C : public ATurnstileBarOpenable_C
		TEST_METHOD(BlueprintGeneratedClass__TurnstileBarOpenable_MontyBattle__TurnstileBarOpenable_MontyBattle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnstileBarOpenable_MontyBattle_C, Left_, 0x0272);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATurnstileBarOpenable_MontyBattle_C, 0x0273);
		}

		// class UFP_CrouchBob_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__FP_CrouchBob__FP_CrouchBob_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFP_CrouchBob_C, 0x0160);
		}

		// class UBT_MoveToVuk_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BT_MoveToVuk__BT_MoveToVuk_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBT_MoveToVuk_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBT_MoveToVuk_C, BB_TargetLocation, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBT_MoveToVuk_C, 0x00D8);
		}

		// class UAnimatronic_ABP_Freddy_C : public UAnimatronic_ABP_MASTER_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Animatronic_ABP_Freddy__Animatronic_ABP_Freddy_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Freddy_C, UberGraphFrame, 0x8DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Freddy_C, PlayerisGregory, 0x8DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Freddy_C, first_open, 0x8DF1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Freddy_C, first_close, 0x8DF2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Freddy_C, ForceOpenChest, 0x8DF3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Freddy_C, isopen_sound, 0x8DF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Freddy_C, GamePlayOpenChest, 0x8DF5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Freddy_C, AllowSound, 0x8DF6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Freddy_C, UnknownData_IQM7, 0x8DF7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Freddy_C, PawnVelocity, 0x8DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Freddy_C, ZeroVector, 0x8E04);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Freddy_C, AimRotation, 0x8E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Freddy_C, LastAimRotation, 0x8E1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Freddy_C, TurnThreshold, 0x8E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Freddy_C, ChestOpenDistance, 0x8E2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Freddy_C, waveMontage, 0x8E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Freddy_C, UnknownData_RNWK, 0x8E31);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Freddy_C, waveWaitTime, 0x8E34);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Freddy_C, TurnInPlaceRot, 0x8E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Freddy_C, LastTurnInPlaceRot, 0x8E44);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Freddy_C, WaveTimer, 0x8E50);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimatronic_ABP_Freddy_C, 0x8E58);
		}

		// class ABP_GeneratorIndicator_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_GeneratorIndicator__BP_GeneratorIndicator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GeneratorIndicator_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GeneratorIndicator_C, LightSchaft, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GeneratorIndicator_C, FleaLocation, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GeneratorIndicator_C, Sphere, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GeneratorIndicator_C, RectLight, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GeneratorIndicator_C, MOD_GeneratorIndicator, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GeneratorIndicator_C, DefaultSceneRoot, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GeneratorIndicator_C, Daycare_Office, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GeneratorIndicator_C, On, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_GeneratorIndicator_C, 0x0289);
		}

		// class ASpawnMoonmanSplineFollowerTrigger_C : public ASplinePathway_C
		TEST_METHOD(BlueprintGeneratedClass__SpawnMoonmanSplineFollowerTrigger__SpawnMoonmanSplineFollowerTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawnMoonmanSplineFollowerTrigger_C, UberGraphFrame, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawnMoonmanSplineFollowerTrigger_C, Arrow, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawnMoonmanSplineFollowerTrigger_C, Box, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawnMoonmanSplineFollowerTrigger_C, Security_Office, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpawnMoonmanSplineFollowerTrigger_C, 0x0290);
		}

		// class UFindLocationOnSide_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FindLocationOnSide__FindLocationOnSide_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindLocationOnSide_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindLocationOnSide_C, DistanceToRight, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindLocationOnSide_C, UnknownData_DXOB, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindLocationOnSide_C, LocationKey, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindLocationOnSide_C, 0x00E0);
		}

		// class ABP_FazerButton_Reset_C : public ABasicButton_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FazerButton_Reset__BP_FazerButton_Reset_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FazerButton_Reset_C, UnknownData_MDUU, 0x02EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FazerButton_Reset_C, UberGraphFrame, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FazerButton_Reset_C, MissionStateCondition, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FazerButton_Reset_C, MATFazerButton_EmissiveColor, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FazerButton_Reset_C, Manager, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FazerButton_Reset_C, 0x0330);
		}

		// class AFirstPersonCharacter_C : public AFNAFBasePlayerCharacter
		TEST_METHOD(BlueprintGeneratedClass__FirstPersonCharacter__FirstPersonCharacter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, UberGraphFrame, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, PlayerInteractHoldComponent, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, PlayerInteractComponent, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, WidgetInteraction, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, RotatePointForLeft, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, FirstPersonCamera, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, LeanPoint, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, SpringArm, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, Timeline_0_NewTrack_0_8C6F882C4CD08F9499A6988CEF065743, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, Timeline_0__Direction_8C6F882C4CD08F9499A6988CEF065743, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, UnknownData_EUQT, 0x0515);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, Timeline_1, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, Arm_Roll_FOV_0A3D884B4B78E92B4079788A5491A805, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, Arm_Roll_Rotate_0A3D884B4B78E92B4079788A5491A805, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, Arm_Roll__Direction_0A3D884B4B78E92B4079788A5491A805, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, UnknownData_086N, 0x0529);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, Arm_Roll, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, GunOffset, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, BaseTurnRate, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, BaseLookUpRate, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, HapticIntensityMultiplier, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, UsingMotionControllers_, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, UnknownData_43TS, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, Footsteps_LastPosition, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, Footsteps_Distance, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, Footsteps_StepDistance, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, Footsteps_BeginPlay, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, LastStepRight_, 0x0569);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, IsSprinting, 0x056A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, IsZoomed, 0x056B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, deltaTime, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, TargetFOV, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, FOV_Interp_Speed, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, Walk_CamShake_Scale, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, IsCrouched, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, IsWalkingBackwards, 0x057D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, UnknownData_2EZD, 0x057E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, ProneTimer, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, DefaultWalkSpeed, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, IsExhausted, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, UnknownData_7S3Z, 0x058D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, PreviousTapTime, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, TapThreshold, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, TapNumber, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, TapHeld, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, UnknownData_LS2Y, 0x059D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, FootstepVolumeCurve, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, CrouchToggleAllowed, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, UnknownData_TGTF, 0x05A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, CameraLagSpeedGamepad, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, PossessedBy, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, Watch_Up, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, UnknownData_9BJU, 0x05B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, RunSpeed, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, SuperRunSpeed, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, HitResult, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, ForwardInput, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, MoveRollAmount, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, CanSprint, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, UnknownData_VF4I, 0x0655);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, MaxSprintInputAngle, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, UnknownData_04G1, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, LookDownSlideCurve, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, MovePitchAmount, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, UnknownData_PNQU, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, CameraPreTeleportRelTran, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, CameraInitialOffset, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, WalkingFOV, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, FazwatchFOV, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, StoredPriority, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, min_distance, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, UnknownData_1CDY, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, HapticsCurve, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, AllowDoorEntry, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, ps5_vibration, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, UnknownData_A61G, 0x06CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, ProximityAudio, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, CamShakeScaleOverride, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, TimeLastFootstep, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, SpawnTime, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, P_ShouldStopHoldTimer, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, GravityScaleManipulationEnabled, 0x06E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, UnknownData_DXYO, 0x06E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, BallSpawnTime, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, playhaptics, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, UnknownData_CQB4, 0x06ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, FXBallsWalk, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, FXBallsRun, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, FxBallsBackward, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, FXBallsJump, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, InFazerblast, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstPersonCharacter_C, PreviousStepMaterial, 0x0711);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFirstPersonCharacter_C, 0x0712);
		}

		// class ACantCallFreddyOverlap_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__CantCallFreddyOverlap__CantCallFreddyOverlap_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACantCallFreddyOverlap_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACantCallFreddyOverlap_C, MissionStateCondition, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACantCallFreddyOverlap_C, Box, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACantCallFreddyOverlap_C, DefaultSceneRoot, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACantCallFreddyOverlap_C, IsOverlapping, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACantCallFreddyOverlap_C, Reset_On_End_Overlap, 0x0249);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACantCallFreddyOverlap_C, 0x024A);
		}

		// class AStaffBotSecirutyPatrolController_C : public AAIController
		TEST_METHOD(BlueprintGeneratedClass__StaffBotSecirutyPatrolController__StaffBotSecirutyPatrolController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffBotSecirutyPatrolController_C, UberGraphFrame, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaffBotSecirutyPatrolController_C, 0x0338);
		}

		// class UAllowJumpService_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__AllowJumpService__AllowJumpService_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllowJumpService_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllowJumpService_C, BBJumpTime, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllowJumpService_C, BBPlayerDistance, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllowJumpService_C, BBRunSequence, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllowJumpService_C, BBAllowJump, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllowJumpService_C, MinJumpTime, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllowJumpService_C, MaxJumpTime, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllowJumpService_C, MinPlayerDistance, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllowJumpService_C, MaxPlayerDistance, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllowJumpService_C, BBAllowDrop, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllowJumpService_C, MinDropChance, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllowJumpService_C, MaxDropChance, 0x017C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAllowJumpService_C, 0x0180);
		}

		// class UResetVoiceTrigger_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__ResetVoiceTrigger__ResetVoiceTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UResetVoiceTrigger_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResetVoiceTrigger_C, BB_TriggerVoice, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResetVoiceTrigger_C, 0x00D8);
		}

		// class URoomVisitInfoFunctions_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__RoomVisitInfoFunctions__RoomVisitInfoFunctions_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URoomVisitInfoFunctions_C, 0x0028);
		}

		// class UFindHidingLocationWithoutPlayer_C : public UFindHidingLocation_C
		TEST_METHOD(BlueprintGeneratedClass__FindHidingLocationWithoutPlayer__FindHidingLocationWithoutPlayer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindHidingLocationWithoutPlayer_C, RangeLocation, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindHidingLocationWithoutPlayer_C, RangeDistance, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindHidingLocationWithoutPlayer_C, 0x012C);
		}

		// class ASunmanMoonmanController_C : public AAIController
		TEST_METHOD(BlueprintGeneratedClass__SunmanMoonmanController__SunmanMoonmanController_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASunmanMoonmanController_C, 0x0330);
		}

		// class UVOPlayableActor_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__VOPlayableActor__VOPlayableActor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOPlayableActor_C, 0x0028);
		}

		// class APRE_SM_IndustrialFridgeCountcer_02a_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PRE_SM_IndustrialFridgeCountcer_02a__PRE_SM_IndustrialFridgeCountcer_02a_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_SM_IndustrialFridgeCountcer_02a_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_SM_IndustrialFridgeCountcer_02a_C, AmbientAudio, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_SM_IndustrialFridgeCountcer_02a_C, StaticMesh, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_SM_IndustrialFridgeCountcer_02a_C, DefaultSceneRoot, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_SM_IndustrialFridgeCountcer_02a_C, OcclusionTrace, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_SM_IndustrialFridgeCountcer_02a_C, EmitterPlaying, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_SM_IndustrialFridgeCountcer_02a_C, 0x0271);
		}

		// class UWI_InstructionCard_SaveStation_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_SaveStation__WI_InstructionCard_SaveStation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_SaveStation_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_SaveStation_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_SaveStation_C, UI_TextAndIcons, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_SaveStation_C, VerticalBox_250, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_SaveStation_C, WI_ImageScaled, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_SaveStation_C, 0x0258);
		}

		// class UWI_InstructionCard_NoiseMaker_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_NoiseMaker__WI_InstructionCard_NoiseMaker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_NoiseMaker_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_NoiseMaker_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_NoiseMaker_C, UI_TextAndIcons, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_NoiseMaker_C, VerticalBox_250, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_NoiseMaker_C, WI_ImageScaled, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_NoiseMaker_C, 0x0258);
		}

		// class UWI_InstructionCard_PAS_TakeOutEyes_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_PAS_TakeOutEyes__WI_InstructionCard_PAS_TakeOutEyes_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOutEyes_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOutEyes_C, Console_TextAndIcons, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOutEyes_C, Image_18_Template, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOutEyes_C, PC_TextAndIcons, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOutEyes_C, TextBlock_48_Title, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOutEyes_C, VerticalBox_250, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOutEyes_C, WI_ImageScaled, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_PAS_TakeOutEyes_C, 0x0268);
		}

		// class UPlayerHUD_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PlayerHUD__PlayerHUD_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, MoveInformationText_TopRight, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, MoveMissionHUDAnim, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, ShowInstructionsAnim, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, OutOfStaminaAnim, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, BadgeAnim, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, HoldSetOpacity, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, HoldAccept, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, HoldCancel, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, InformationAnim, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, BadgeUpdateInformation, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, ExtraInfoPanel, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, HoldProgress, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, Hours, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, Informational, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, InformationBackground, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, InformationItemImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, InformationPanel, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, Minutes, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, MissionHUD, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, ObjectiveDisplayUpgrade, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, ObjectiveList, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, OutOfStamina, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, RequirementBackground, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, RequirementItemImage, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, RequirementPanel, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, RequirementText, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, SaveIndicator, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, StaminaBar, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, VersionNumber, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, WI_InstructionCard, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, Loaded_Kitchen, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, UnknownData_HT4P, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, InteractionsTableID, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, UnknownData_MJZW, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, HoldProgressMaterial, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, HideObjectiveListTimer, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, OriginalStaminaColor, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, IsRunningHold, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, UnknownData_JOH6, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, InstructionCardsList, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, CollectedItemsQue, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, CollectedItemNameList, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, CollectedItemImageList, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, HideRequirementPanelTimer, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, LastInteractable, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUD_C, KeyIconMappings, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerHUD_C, 0x0440);
		}

		// class UChangeFreddyState_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__ChangeFreddyState__ChangeFreddyState_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChangeFreddyState_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChangeFreddyState_C, StateKey, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChangeFreddyState_C, NewState, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChangeFreddyState_C, 0x00D9);
		}

		// class AGtrStr_1_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__GtrStr_2__GtrStr_1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGtrStr_1_C, Box1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGtrStr_1_C, Box, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGtrStr_1_C, StaticMesh, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGtrStr_1_C, 0x0240);
		}

		// class UWI_InstructionCard_CallFreddy_Problem_OutOfPower_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_CallFreddy_Problem_OutOfPower__WI_InstructionCard_CallFreddy_Problem_OutOfPower_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CallFreddy_Problem_OutOfPower_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CallFreddy_Problem_OutOfPower_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CallFreddy_Problem_OutOfPower_C, TextBlock_48_Title_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CallFreddy_Problem_OutOfPower_C, VerticalBox_250, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CallFreddy_Problem_OutOfPower_C, WI_ImageScaled, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_CallFreddy_Problem_OutOfPower_C, 0x0258);
		}

		// class AC_FazerBlast_Bot_C : public AStaffBotBase_C
		TEST_METHOD(BlueprintGeneratedClass__C_FazerBlast_Bot__C_FazerBlast_Bot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, UnknownData_WSZN, 0x0652);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, UberGraphFrame, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, ExplosionLight, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, Electricity1, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, Explosion, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, Electricity, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, RIG_AlienHelm, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, EnemyFeedbackWidget, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, EQ_LaserGun, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, GunTip, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, HitPointBack, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, HitPointBeltBack, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, HitPointLKnee, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, HitPointRKnee, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, HitPointHead, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, HitPointBelt, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, HitPointLShoulder, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, HitPointRShoulder, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, HitPointChest, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, PatrolPoints, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, StartingPoint, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, ScoreValue, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, IsDeacitve, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, Should_Destroy, 0x06F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, UnknownData_NRGW, 0x06FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, ScorePerBox, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, OnHit_Deactivate, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, OnHit_Flee, 0x0751);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, UnknownData_SV26, 0x0752);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, EnemyFeedbackWi, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, PlayerHealthWi, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, VOLines, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, RandomVOLines, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AC_FazerBlast_Bot_C, VOPlaying, 0x07C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AC_FazerBlast_Bot_C, 0x07C9);
		}

		// class UBurntrap_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Burntrap_ABP__Burntrap_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, UnknownData_9CQ6, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_BlendListByEnum, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_SequencePlayer_7, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_SequencePlayer_6, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_TransitionResult_7, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_TransitionResult_6, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_TransitionResult_5, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_TransitionResult_4, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_TransitionResult_3, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_TransitionResult_2, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_SequencePlayer_5, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_StateResult_7, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_TransitionResult, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_SequencePlayer_4, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_StateResult_6, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_SequencePlayer_3, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_StateResult_5, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_StateMachine_2, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_StateResult_4, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_SequencePlayer_2, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_StateResult_3, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_BlendSpacePlayer, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_StateResult_2, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_SequencePlayer, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_StateResult, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_StateMachine, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_LocalToComponentSpace, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_ComponentToLocalSpace, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, UnknownData_IFVV, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_AnimDynamics_2, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimGraphNode_AnimDynamics, 0x0FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, AnimationMode, 0x1410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, LoopCutScene, 0x1411);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, UnknownData_D8RX, 0x1412);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, CutSceneAnim, 0x1418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, Pawn, 0x1420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, DeltaTimeX, 0x1428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, SpeedInput, 0x142C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, isMoving, 0x1430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, canDie, 0x1431);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBurntrap_ABP_C, CanHack, 0x1432);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBurntrap_ABP_C, 0x1433);
		}

		// class UCable05_PAS03_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable05_PAS03_ABP__Cable05_PAS03_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable05_PAS03_ABP_C, 0x05E0);
		}

		// class UCable05_PAS02_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable05_PAS02_ABP__Cable05_PAS02_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable05_PAS02_ABP_C, 0x05E0);
		}

		// class ABP_NoiseMakingTowerBase_Plates_C : public ABP_NoiseMakingTowerBaseInteractible_C
		TEST_METHOD(BlueprintGeneratedClass__BP_NoiseMakingTowerBase_Plates__BP_NoiseMakingTowerBase_Plates_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, UberGraphFrame, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_BrokenPlate_MOD_BrokenPlate8, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_BrokenPlate_MOD_BrokenPlate7, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_BrokenPlate_MOD_BrokenPlate6, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_BrokenPlate_MOD_BrokenPlate5, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_BrokenPlate_MOD_BrokenPlate4, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_BrokenPlate_MOD_BrokenPlate3, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_BrokenPlate_MOD_BrokenPlate2, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_BrokenPlate_MOD_BrokenPlate1, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_BrokenPlate_MOD_BrokenPlate, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_SoupPlateB_016, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_SoupPlateB_015, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_BrokenPlate_MOD_BrokenPlate9, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_SoupPlateB_012, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_SoupPlateB_011, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_SoupPlateB_09, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_SoupPlateB_08, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_SoupPlateB_07, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_SoupPlateB_06, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_SoupPlateB_05, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_SoupPlateB_04, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_SoupPlateB_03, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_SoupPlateB_02, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_SoupPlateB_01, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, MOD_SoupPlateB_014, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBase_Plates_C, Mesh, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_NoiseMakingTowerBase_Plates_C, 0x0378);
		}

		// class AA_RaceSpline_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__A_RaceSpline__A_RaceSpline_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_RaceSpline_C, Spline, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_RaceSpline_C, DefaultSceneRoot, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AA_RaceSpline_C, 0x0238);
		}

		// class UAVB_GoCart_C : public UVehicleAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AVB_GoCart__AVB_GoCart_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAVB_GoCart_C, UberGraphFrame, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAVB_GoCart_C, AnimGraphNode_Root, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAVB_GoCart_C, AnimGraphNode_LinkedInputPose, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAVB_GoCart_C, AnimGraphNode_LocalToComponentSpace, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAVB_GoCart_C, AnimGraphNode_ModifyBone_4, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAVB_GoCart_C, AnimGraphNode_ComponentToLocalSpace, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAVB_GoCart_C, AnimGraphNode_ModifyBone_3, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAVB_GoCart_C, AnimGraphNode_ModifyBone_2, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAVB_GoCart_C, AnimGraphNode_ModifyBone, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAVB_GoCart_C, Rotation, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAVB_GoCart_C, Speed, 0x0E94);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAVB_GoCart_C, Turning, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAVB_GoCart_C, InputStearing, 0x0E9C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAVB_GoCart_C, 0x0EA0);
		}

		// class UFazerBlast_SetRotationMode_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FazerBlast_SetRotationMode__FazerBlast_SetRotationMode_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_SetRotationMode_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazerBlast_SetRotationMode_C, RotateToPlayer, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFazerBlast_SetRotationMode_C, 0x00B1);
		}

		// class ASecurityScreenDisplayBase_C : public AStaticMeshActor
		TEST_METHOD(BlueprintGeneratedClass__SecurityScreenDisplayBase__SecurityScreenDisplayBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityScreenDisplayBase_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityScreenDisplayBase_C, Widget, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityScreenDisplayBase_C, RenderCamera, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityScreenDisplayBase_C, StartOn, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityScreenDisplayBase_C, UnknownData_JJSF, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityScreenDisplayBase_C, Media_Player, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityScreenDisplayBase_C, SecurityScreenDisplay, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityScreenDisplayBase_C, OnStopVideo, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityScreenDisplayBase_C, OnScreenActive, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityScreenDisplayBase_C, Screen_Element_Index, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityScreenDisplayBase_C, SetToStatic_, 0x02AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASecurityScreenDisplayBase_C, 0x02AD);
		}

		// class APRE_BadgeHolder_WestArcade_C : public APRE_BadgeHolder_C
		TEST_METHOD(BlueprintGeneratedClass__PRE_BadgeHolder_WestArcade__PRE_BadgeHolder_WestArcade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_WestArcade_C, UnknownData_0ABJ, 0x02EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_WestArcade_C, DJ_Music_Man_Condition1, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_BadgeHolder_WestArcade_C, DJ_Music_Man_Condition, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_BadgeHolder_WestArcade_C, 0x0300);
		}

		// class UCustomMeshComponent : public UMeshComponent
		TEST_METHOD(Class__CustomMeshComponent__CustomMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshComponent, UnknownData_JR78, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshComponent, UnknownData_4MUB, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomMeshComponent, 0x0430);
		}

		// class ADJMM_Chase_Blocker_Actor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__DJMM_Chase_Blocker_Actor__DJMM_Chase_Blocker_Actor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, DJMM_Chase_Location_Actor_Arcade02a1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, DJMM_Chase_Location_Actor_Arcade01b2, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, DJMM_Chase_Location_Actor_Arcade01b1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, DJMM_Chase_Location_Actor_Shelves01, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, DJMM_Chase_Location_Actor_Arcade02a, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, DJMM_Chase_Location_Actor_ServiceCart, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, DJMM_Chase_Location_Actor_Arcade01b, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, DJMM_Chase_Location_Actor_Locker1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, DJMM_Chase_Location_Actor_Locker, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, RIG_PROP_ArcadeCab02a1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, SecF, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, RIG_PROP_ArcadeCab01b2, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, RIG_PROP_ArcadeCab01b1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, SecE, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, RIG_PROP_Shelves01, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, RIG_PROP_ArcadeCab02a, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, SecD, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, RIG_PROP_Locker1, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, SecC, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, RIG_PROP_Locker, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, SecB, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, RIG_PROP_ServiceCart, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, RIG_PROP_ArcadeCab01b, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, SecA, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, DefaultSceneRoot, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, PlayRate, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, UnknownData_LHR4, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, Prop_ArcadeCab01b_SecA, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, Prop_ServiceCart_SecA, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, Prop_Locker_SecB, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, Prop_Locker_SecC, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, Prop_ArcadeCab02a_SecC, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, Prop_Shelves_SecD, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, Prop_ArcadeCab01b_SecE_01, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, Prop_ArcadeCab01b_SecE_02, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, Prop_ArcadeCab02a_SecF, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, distancecurve, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMM_Chase_Blocker_Actor_C, HapticFeedbackIntensityMultiplier, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADJMM_Chase_Blocker_Actor_C, 0x0354);
		}

		// class USetEndoState_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__SetEndoState__SetEndoState_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetEndoState_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetEndoState_C, EndoStateKey, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetEndoState_C, NewState, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetEndoState_C, 0x00D9);
		}

		// class UWI_InstructionCard_SecurityBadges_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_SecurityBadges__WI_InstructionCard_SecurityBadges_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_SecurityBadges_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_SecurityBadges_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_SecurityBadges_C, VerticalBox_250, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_SecurityBadges_C, WI_ImageScaled, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_SecurityBadges_C, 0x0250);
		}

		// class APowerStationPlayerInteractible_DaycareAirlock_C : public APowerStationPlayerInteractible_C
		TEST_METHOD(BlueprintGeneratedClass__PowerStationPlayerInteractible_DaycareAirlock__PowerStationPlayerInteractible_DaycareAirlock_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationPlayerInteractible_DaycareAirlock_C, UnknownData_EZ3M, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationPlayerInteractible_DaycareAirlock_C, UberGraphFrame, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationPlayerInteractible_DaycareAirlock_C, UpdateEscapeDaycare, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APowerStationPlayerInteractible_DaycareAirlock_C, 0x02A8);
		}

		// class ABackstageOffice_Door_C : public ABP_DoorMaster_C
		TEST_METHOD(BlueprintGeneratedClass__BackstageOffice_Door__BackstageOffice_Door_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, UnknownData_GW9F, 0x03BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, ShockLight, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, ShockLight1, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, LightSocket1, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, LightSocket, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, ElectricShock7, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, ElectricShock6, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, ElectricShock5, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, ElectricShock4, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, ElectricShock3, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, ElectricShock2, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, ElectricShock1, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, ElectricShock, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, CurrentDoorPower, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, DoorInitialPower, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, OnDoorDrained, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, CanOpen, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, UnknownData_NHG0, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, DoorInitialPowerMin, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, DoorInitialPowerMax, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, UnknownData_3PLD, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, OnActorOverlap, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, CanOverlap, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, UnknownData_05LV, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, LightOriginalPos, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, LightOriginalPos2, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, flickerlights, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, UnknownData_N4T9, 0x047D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, PowerMeter, 0x047D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, OtherDoor, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, ForcedOpen, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, UnknownData_WY85, 0x04D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABackstageOffice_Door_C, OtherInitialPower, 0x04D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABackstageOffice_Door_C, 0x04D8);
		}

		// class UGooglePADFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GooglePAD__GooglePADFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGooglePADFunctionLibrary, 0x0028);
		}

		// class UMeshDescription : public UObject
		TEST_METHOD(Class__MeshDescription__MeshDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescription, 0x0028);
		}

		// class UMeshDescriptionBase : public UObject
		TEST_METHOD(Class__MeshDescription__MeshDescriptionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshDescriptionBase, UnknownData_PWNZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescriptionBase, 0x0390);
		}

		// class ULaserGun_Interactable_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__LaserGun_Interactable__LaserGun_Interactable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULaserGun_Interactable_C, 0x0028);
		}

		// class USurvivalScoreUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SurvivalScoreUI__SurvivalScoreUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivalScoreUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivalScoreUI_C, GoldCount, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivalScoreUI_C, GreenCount, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivalScoreUI_C, PinkCount, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivalScoreUI_C, PurpleCount, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivalScoreUI_C, RedCount, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivalScoreUI_C, TotalScore, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivalScoreUI_C, YellowCount, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivalScoreUI_C, SurvivalRandomizer, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvivalScoreUI_C, 0x0298);
		}

		// class UScoreItemElementUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ScoreItemElementUI__ScoreItemElementUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScoreItemElementUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScoreItemElementUI_C, CountText, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScoreItemElementUI_C, ItemText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScoreItemElementUI_C, PointsPerItem, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScoreItemElementUI_C, Score, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScoreItemElementUI_C, Text, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScoreItemElementUI_C, 0x0270);
		}

		// class UDebugTaskUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DebugTaskUI__DebugTaskUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTaskUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTaskUI_C, TaskCheckBox, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTaskUI_C, TaskTitle, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTaskUI_C, TaskID, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTaskUI_C, MissionName, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTaskUI_C, TaskIndex, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTaskUI_C, UnknownData_P843, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTaskUI_C, OnTaskChecked, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTaskUI_C, AllowMissionUpdate, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTaskUI_C, CompleteMission, 0x0271);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugTaskUI_C, 0x0272);
		}

		// class ABP_NoiseMakingTower_KiddieRide_Coupe_C : public ABP_NoiseMakingTowerBaseInteractible_C
		TEST_METHOD(BlueprintGeneratedClass__BP_NoiseMakingTower_KiddieRide_Coupe__BP_NoiseMakingTower_KiddieRide_Coupe_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTower_KiddieRide_Coupe_C, UberGraphFrame, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTower_KiddieRide_Coupe_C, MOD_KiddieRide_Rocket_Ride, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTower_KiddieRide_Coupe_C, MOD_KiddieRide_Rocket_Base, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTower_KiddieRide_Coupe_C, Scene, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTower_KiddieRide_Coupe_C, Timeline_0_Rotation_FD1A294C44CC5BB223B46393F0E46BE0, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTower_KiddieRide_Coupe_C, Timeline_0__Direction_FD1A294C44CC5BB223B46393F0E46BE0, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTower_KiddieRide_Coupe_C, UnknownData_CVGO, 0x02CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTower_KiddieRide_Coupe_C, Timeline_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTower_KiddieRide_Coupe_C, LoopTimes, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_NoiseMakingTower_KiddieRide_Coupe_C, 0x02DC);
		}

		// class UFP_IdleBob_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__FP_IdleBob__FP_IdleBob_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFP_IdleBob_C, 0x0160);
		}

		// class UViewInformationService_C : public USightDetectionService_C
		TEST_METHOD(BlueprintGeneratedClass__ViewInformationService__ViewInformationService_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewInformationService_C, UnknownData_FY87, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewInformationService_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewInformationService_C, VisibleInformationProviders, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewInformationService_C, ClosestInformationProviderKey, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewInformationService_C, InformationProviderDistance, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewInformationService_C, 0x0110);
		}

		// class UWI_GenericHeader_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_GenericHeader__WI_GenericHeader_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_GenericHeader_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_GenericHeader_C, Header, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_GenericHeader_C, HeaderBackgroundImage, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_GenericHeader_C, NewMissionStar, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_GenericHeader_C, Subheader, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_GenericHeader_C, HeaderText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_GenericHeader_C, SubText, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_GenericHeader_C, Texture, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_GenericHeader_C, Selected, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_GenericHeader_C, 0x0311);
		}

		// class ABrokenFreddy_Trigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__BrokenFreddy_Trigger__BrokenFreddy_Trigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrokenFreddy_Trigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrokenFreddy_Trigger_C, TimeCheckComponent, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrokenFreddy_Trigger_C, Freddy, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrokenFreddy_Trigger_C, LineSkipper, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrokenFreddy_Trigger_C, RehearsalSpaceMission, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrokenFreddy_Trigger_C, 0x02E0);
		}

		// class UAnimNotify_ServoMovement_C : public UAnimNotify_AkLoopingAudio_C
		TEST_METHOD(BlueprintGeneratedClass__AnimNotify_ServoMovement__AnimNotify_ServoMovement_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_ServoMovement_C, UnknownData_6TDV, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_ServoMovement_C, Velocity, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ServoMovement_C, 0x0058);
		}

		// class UNamedInterfaces : public UObject
		TEST_METHOD(Class__OnlineSubsystem__NamedInterfaces)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaces, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaceDefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, UnknownData_HSI0, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedInterfaces, 0x0060);
		}

		// class UTurnBasedMatchInterface : public UInterface
		TEST_METHOD(Class__OnlineSubsystem__TurnBasedMatchInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedMatchInterface, 0x0028);
		}

		// class UFirstPersonFreddyArms_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__FirstPersonFreddyArms_ABP__FirstPersonFreddyArms_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFirstPersonFreddyArms_ABP_C, UnknownData_CJ3P, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFirstPersonFreddyArms_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFirstPersonFreddyArms_ABP_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFirstPersonFreddyArms_ABP_C, AnimGraphNode_TransitionResult_2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFirstPersonFreddyArms_ABP_C, AnimGraphNode_TransitionResult, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFirstPersonFreddyArms_ABP_C, AnimGraphNode_SequencePlayer_2, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFirstPersonFreddyArms_ABP_C, AnimGraphNode_StateResult_2, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFirstPersonFreddyArms_ABP_C, AnimGraphNode_SequencePlayer, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFirstPersonFreddyArms_ABP_C, AnimGraphNode_StateResult, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFirstPersonFreddyArms_ABP_C, AnimGraphNode_StateMachine, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFirstPersonFreddyArms_ABP_C, PlayAnim, 0x04F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFirstPersonFreddyArms_ABP_C, 0x04F9);
		}

		// class AKitchenEntrance_Trigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__KitchenEntrance_Trigger__KitchenEntrance_Trigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenEntrance_Trigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenEntrance_Trigger_C, UpdateMissionOnActivated, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenEntrance_Trigger_C, MissionStateCondition, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenEntrance_Trigger_C, LineSkipper, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKitchenEntrance_Trigger_C, 0x02B8);
		}

		// class AGatorRideCart_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__GatorRideCart__GatorRideCart_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorRideCart_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorRideCart_C, RIG_BallBlaster, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorRideCart_C, MOD_Monty_Ride_02, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorRideCart_C, MOD_FreddyCart, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorRideCart_C, SplineFollowMovement, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorRideCart_C, DefaultSceneRoot, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorRideCart_C, LoopingAudioPlayingID, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGatorRideCart_C, 0x025C);
		}

		// class UDebugVisComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__DebugVisComponent__DebugVisComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugVisComponent_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugVisComponent_C, MeshMaterialMap, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugVisComponent_C, 0x0108);
		}

		// class ABPClockB_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BPClockB__BPClockB_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABPClockB_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABPClockB_C, SM_Clock_A_Second, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABPClockB_C, SM_Clock_A_Minute, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABPClockB_C, SM_Clock_A_Hour, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABPClockB_C, SM_Clock_B, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABPClockB_C, HoursOffset, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABPClockB_C, MinutesOffset, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABPClockB_C, 0x0258);
		}

		// class AControlPointMeshActor : public AActor
		TEST_METHOD(Class__Landscape__ControlPointMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPointMeshActor, ControlPointMeshComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AControlPointMeshActor, 0x0230);
		}

		// class UControlPointMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__ControlPointMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlPointMeshComponent, VirtualTextureMainPassMaxDrawDistance, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlPointMeshComponent, UnknownData_UFCA, 0x0484);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlPointMeshComponent, 0x0490);
		}

		// class ALandscapeProxy : public AActor
		TEST_METHOD(Class__Landscape__LandscapeProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SplineComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeGuid, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeSectionOffset, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MaxLODLevel, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistanceFactor, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODFalloff, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_5O0U, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentScreenSizeToUseSubSections, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LOD0ScreenSize, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LOD0DistributionSetting, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistributionSetting, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSize, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UseTessellationComponentScreenSizeFalloff, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_RJO8, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSizeFalloff, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, OccluderGeometryLOD, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingLOD, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, DefaultPhysMaterial, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StreamingDistanceMultiplier, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_QZ0L, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterial, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_GEKR, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeHoleMaterial, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterialsOverride, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bMeshHoles, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MeshHolesMaxLod, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_MH3X, 0x02CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, RuntimeVirtualTextures, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureNumLods, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureLodBias, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureRenderPassType, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_J5Y5, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NegativeZBoundsExtension, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, PositiveZBoundsExtension, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_UGCH, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeComponents, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionComponents, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, FoliageComponents, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_V282, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bHasLandscapeGrass, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_YSQ2, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingResolution, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_SSEE, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightingChannels, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_GGUW, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_TDYA, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CustomDepthStencilValue, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LDMaxDrawDistance, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightmassSettings, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionMipLevel, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SimpleCollisionMipLevel, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionThickness, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_WEC0, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, BodyInstance, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_K1M6, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentSizeQuads, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SubsectionSizeQuads, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NumSubsections, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_IBSS, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseDynamicMaterialInstance, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NavigationGeometryGatheringMode, 0x04F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseLandscapeForCullingInvisibleHLODVertices, 0x04F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bHasLayersContent, 0x04F7);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, WeightmapUsageMap, 0x04F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeProxy, 0x0548);
		}

		// class ALandscape : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__Landscape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscape, 0x0548);
		}

		// class ALandscapeBlueprintBrushBase : public AActor
		TEST_METHOD(Class__Landscape__LandscapeBlueprintBrushBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeBlueprintBrushBase, 0x0228);
		}

		// class ULandscapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseX, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseY, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ComponentSizeQuads, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SubsectionSizeQuads, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NumSubsections, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_4GEO, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterial, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideHoleMaterial, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterials, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstances, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstancesDynamic, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODIndexToMaterialIndex, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialIndexToDisabledTessellationMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, XYOffsetmapTexture, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapScaleBias, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapSubsectionOffset, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_SZ6O, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapScaleBias, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CachedLocalBox, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionComponent, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapTexture, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapLayerAllocations, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapTextures, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MapBuildDataId, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, IrrelevantLights, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionMipLevel, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SimpleCollisionMipLevel, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NegativeZBoundsExtension, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, PositiveZBoundsExtension, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StaticLightingResolution, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ForcedLOD, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODBias, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StateId, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, BakedTextureMaterialGuid, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_KI4A, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, GIBakedBaseColorTexture, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileBlendableLayerMask, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_EUXM, 0x0569);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterface, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterfaces, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileWeightmapTextures, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_9NBJ, 0x0598);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeComponent, 0x05E0);
		}

		// class ALandscapeGizmoActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActor, 0x0228);
		}

		// class ALandscapeGizmoActiveActor : public ALandscapeGizmoActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActiveActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeGizmoActiveActor, UnknownData_3U7L, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActiveActor, 0x0278);
		}

		// class ULandscapeGizmoRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeGizmoRenderComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGizmoRenderComponent, 0x03F0);
		}

		// class ULandscapeGrassType : public UObject
		TEST_METHOD(Class__Landscape__LandscapeGrassType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassVarieties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_7LA6, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassDensity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, PlacementJitter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, StartCullDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, EndCullDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, RandomRotation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, AlignToSurface, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_SQL5, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGrassType, 0x0060);
		}

		// class ULandscapeHeightfieldCollisionComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeHeightfieldCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, ComponentLayerInfos, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseX, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseY, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionSizeQuads, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionScale, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SimpleCollisionSizeQuads, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_Q90H, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionQuadFlags, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, HeightfieldGuid, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CachedLocalBox, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, RenderComponent, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_OPCA, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CookedPhysicalMaterials, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_QARN, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeHeightfieldCollisionComponent, 0x04D0);
		}

		// class ULandscapeInfo : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeActor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeGuid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentSizeQuads, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, SubsectionSizeQuads, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentNumSubsections, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, DrawScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_FDDP, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, Proxies, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_C1MC, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfo, 0x0210);
		}

		// class ULandscapeInfoMap : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfoMap, UnknownData_U8UT, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfoMap, 0x0080);
		}

		// class ULandscapeLayerInfoObject : public UObject
		TEST_METHOD(Class__Landscape__LandscapeLayerInfoObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, PhysMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, Hardness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerUsageDebugColor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, UnknownData_Z5C0, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeLayerInfoObject, 0x0050);
		}

		// class ULandscapeMaterialInstanceConstant : public UMaterialInstanceConstant
		TEST_METHOD(Class__Landscape__LandscapeMaterialInstanceConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, TextureStreamingInfo, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, UnknownData_0PI1, 0x0421);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMaterialInstanceConstant, 0x0428);
		}

		// class ULandscapeMeshCollisionComponent : public ULandscapeHeightfieldCollisionComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, MeshGuid, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, UnknownData_V19W, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshCollisionComponent, 0x04F0);
		}

		// class ALandscapeMeshProxyActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeMeshProxyActor, LandscapeMeshProxyComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeMeshProxyActor, 0x0230);
		}

		// class ULandscapeMeshProxyComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, LandscapeGuid, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyComponentBases, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyLOD, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, UnknownData_15C4, 0x04A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshProxyComponent, 0x04B0);
		}

		// class ULandscapeSettings : public UDeveloperSettings
		TEST_METHOD(Class__Landscape__LandscapeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSettings, MaxNumberOfLayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSettings, UnknownData_WRBB, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSettings, 0x0040);
		}

		// class ULandscapeSplinesComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeSplinesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, ControlPoints, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, Segments, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, CookedForeignMeshComponents, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplinesComponent, 0x0420);
		}

		// class ULandscapeSplineControlPoint : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Width, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LayerWidthRatio, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, SideFalloff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LeftSideFalloffFactor, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, RightSideFalloffFactor, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LeftSideLayerFalloffFactor, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, RightSideLayerFalloffFactor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, EndFalloff, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, ConnectedSegments, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Points, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Bounds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, UnknownData_EJ7I, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LocalMeshComponent, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineControlPoint, 0x00A8);
		}

		// class ULandscapeSplineSegment : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Connections, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, SplineInfo, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Points, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Bounds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, UnknownData_QORB, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, LocalMeshComponents, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineSegment, 0x00B0);
		}

		// class ALandscapeStreamingProxy : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__LandscapeStreamingProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, LandscapeActor, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, UnknownData_B64F, 0x0564);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeStreamingProxy, 0x0568);
		}

		// class ULandscapeSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Landscape__LandscapeSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSubsystem, UnknownData_X9RP, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSubsystem, 0x0098);
		}

		// class ULandscapeWeightmapUsage : public UObject
		TEST_METHOD(Class__Landscape__LandscapeWeightmapUsage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeWeightmapUsage, ChannelUsage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeWeightmapUsage, LayerGuid, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeWeightmapUsage, 0x0058);
		}

		// class UMaterialExpressionLandscapeGrassOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeGrassOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeGrassOutput, GrassTypes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeGrassOutput, 0x0050);
		}

		// class UMaterialExpressionLandscapeLayerBlend : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, Layers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, ExpressionGUID, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerBlend, 0x0060);
		}

		// class UMaterialExpressionLandscapeLayerCoords : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerCoords)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, CustomUVType, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_307E, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingRotation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanU, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_92B6, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerCoords, 0x0058);
		}

		// class UMaterialExpressionLandscapeLayerSample : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, PreviewWeight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ExpressionGUID, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, UnknownData_T93O, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSample, 0x0060);
		}

		// class UMaterialExpressionLandscapeLayerSwitch : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerUsed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_8C59, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerNotUsed, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_M0R7, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ParameterName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_DS0P, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ExpressionGUID, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_83TW, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSwitch, 0x0088);
		}

		// class UMaterialExpressionLandscapeLayerWeight : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_9P03, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Layer, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_4PVM, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ParameterName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, PreviewWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ConstBase, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ExpressionGUID, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerWeight, 0x0090);
		}

		// class UMaterialExpressionLandscapeVisibilityMask : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeVisibilityMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeVisibilityMask, ExpressionGUID, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeVisibilityMask, 0x0050);
		}

		// class ACameraRig_Crane : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Crane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitch, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYaw, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneArmLength, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountPitch, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountYaw, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, UnknownData_P84Q, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, TransformComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYawControl, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitchControl, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneCameraMount, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Crane, 0x0258);
		}

		// class ACameraRig_Rail : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Rail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, CurrentPositionOnRail, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, bLockOrientationToRail, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, UnknownData_V0L2, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, TransformComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailSplineComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailCameraMount, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Rail, 0x0248);
		}

		// class ACineCameraActor : public ACameraActor
		TEST_METHOD(Class__CinematicCamera__CineCameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, LookatTrackingSettings, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, UnknownData_2N7V, 0x07F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACineCameraActor, 0x0800);
		}

		// class UCineCameraComponent : public UCameraComponent
		TEST_METHOD(Class__CinematicCamera__CineCameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackSettings, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, Filmback, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensSettings, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FocusSettings, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocalLength, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentAperture, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocusDistance, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_01YX, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackPresets, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensPresets, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPresetName, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPreset, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensPresetName, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFocalLength, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFStop, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_A23G, 0x08A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCineCameraComponent, 0x08B0);
		}

		// class UDebugMissionUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DebugMissionUI__DebugMissionUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugMissionUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugMissionUI_C, BurntrapBossButton, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugMissionUI_C, ChicaBossButton, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugMissionUI_C, DbgHour3SkipPathSelect, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugMissionUI_C, DbgHour6SkipPathSelect, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugMissionUI_C, MontyBossButton, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugMissionUI_C, RoxyBossButton, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugMissionUI_C, SkipCurrentGameButton, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugMissionUI_C, SkipExtraInfo, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugMissionUI_C, StartHour6Button, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugMissionUI_C, TreeView_125, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugMissionUI_C, VannyBossButton, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugMissionUI_C, DbgInfoTable, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugMissionUI_C, MontyBossTeleportLocator, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugMissionUI_C, ChicaBossTeleportLocator, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugMissionUI_C, CompletingTasks, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugMissionUI_C, UnknownData_PIM9, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugMissionUI_C, TasksUpdated, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugMissionUI_C, SelectedSkipPaths, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugMissionUI_C, SkipPathState, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugMissionUI_C, RoxyBossTeleportLocator, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugMissionUI_C, VannyBossTeleportLocator, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugMissionUI_C, BurntrapBossTeleportLocator, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugMissionUI_C, 0x0380);
		}

		// class AChica_C : public AAISeeker_C
		TEST_METHOD(BlueprintGeneratedClass__Chica__Chica_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AChica_C, UnknownData_BUTD, 0x07F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChica_C, UberGraphFrame, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChica_C, GarbageDetectedBB, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChica_C, GarbageLocationBB, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChica_C, WalkFastSpeed, 0x0810);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChica_C, 0x0814);
		}

		// class ABP_PlanarReflectionsShowOnlyFreddy_Gregory_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_PlanarReflectionsShowOnlyFreddy_Gregory__BP_PlanarReflectionsShowOnlyFreddy_Gregory_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlanarReflectionsShowOnlyFreddy_Gregory_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlanarReflectionsShowOnlyFreddy_Gregory_C, PlanarReflection, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlanarReflectionsShowOnlyFreddy_Gregory_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlanarReflectionsShowOnlyFreddy_Gregory_C, AllowedReflectiveMeshes, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlanarReflectionsShowOnlyFreddy_Gregory_C, Reference_to_Gregory, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlanarReflectionsShowOnlyFreddy_Gregory_C, Reference_to_Freddy, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlanarReflectionsShowOnlyFreddy_Gregory_C, ReferenceToDesk, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlanarReflectionsShowOnlyFreddy_Gregory_C, RefToDeskItem, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlanarReflectionsShowOnlyFreddy_Gregory_C, RefToFreddyMirror, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PlanarReflectionsShowOnlyFreddy_Gregory_C, 0x0278);
		}

		// class ABasePatrolCharacter_C : public ADebuggableAICharacter_C
		TEST_METHOD(BlueprintGeneratedClass__BasePatrolCharacter__BasePatrolCharacter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePatrolCharacter_C, UberGraphFrame, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePatrolCharacter_C, PatrolPoints, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePatrolCharacter_C, StartingPoint, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABasePatrolCharacter_C, 0x04EC);
		}

		// class AA_FazerBlast_NavHelper_Spline_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__A_FazerBlast_NavHelper_Spline__A_FazerBlast_NavHelper_Spline_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_NavHelper_Spline_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_NavHelper_Spline_C, Scene_Ends, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_NavHelper_Spline_C, Scene_Starts, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_NavHelper_Spline_C, Box_Start, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_NavHelper_Spline_C, Box_End, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_NavHelper_Spline_C, Spline, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_NavHelper_Spline_C, DefaultSceneRoot, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_NavHelper_Spline_C, Debug, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_NavHelper_Spline_C, UnknownData_G61A, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_NavHelper_Spline_C, DebugDuration, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_NavHelper_Spline_C, SnapOverlapsToSpline, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_NavHelper_Spline_C, UnknownData_DF6R, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_NavHelper_Spline_C, ScaleSpline, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_FazerBlast_NavHelper_Spline_C, SplineSampleStepDistance, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AA_FazerBlast_NavHelper_Spline_C, 0x0278);
		}

		// class AEnterMazercizeTrigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__EnterMazercizeTrigger__EnterMazercizeTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEnterMazercizeTrigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEnterMazercizeTrigger_C, LineSkipper, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEnterMazercizeTrigger_C, 0x02A8);
		}

		// class AElChipsEntryTime_Trigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__ElChipsEntryTime_Trigger__ElChipsEntryTime_Trigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AElChipsEntryTime_Trigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AElChipsEntryTime_Trigger_C, TimeCheckComponent, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AElChipsEntryTime_Trigger_C, MissionStateCondition, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AElChipsEntryTime_Trigger_C, Triggered, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AElChipsEntryTime_Trigger_C, 0x0291);
		}

		// class UAnimNotify_MontyServoMovement_C : public UAnimNotify_ServoMovement_C
		TEST_METHOD(BlueprintGeneratedClass__AnimNotify_MontyServoMovement__AnimNotify_MontyServoMovement_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_MontyServoMovement_C, 0x0058);
		}

		// class AArchVisCharacter : public ACharacter
		TEST_METHOD(Class__ArchVisCharacter__ArchVisCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, LookUpAxisName, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, LookUpAtRateAxisName, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, TurnAxisName, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, TurnAtRateAxisName, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MoveForwardAxisName, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MoveRightAxisName, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MouseSensitivityScale_Pitch, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MouseSensitivityScale_Yaw, 0x051C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AArchVisCharacter, 0x0520);
		}

		// class UArchVisCharMovementComponent : public UCharacterMovementComponent
		TEST_METHOD(Class__ArchVisCharacter__ArchVisCharMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, RotationalAcceleration, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, RotationalDeceleration, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MaxRotationalVelocity, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MinPitch, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MaxPitch, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingFriction, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingSpeed, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingAcceleration, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, UnknownData_7BIY, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArchVisCharMovementComponent, 0x0660);
		}

		// class USendAlert_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__SendAlert__SendAlert_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USendAlert_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USendAlert_C, Alert, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USendAlert_C, 0x00B8);
		}

		// class UFindRandLocation_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FindRandLocation__FindRandLocation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindRandLocation_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindRandLocation_C, Vector, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindRandLocation_C, Radius, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindRandLocation_C, 0x00DC);
		}

		// class UPowerStationEventHandler_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__PowerStationEventHandler__PowerStationEventHandler_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPowerStationEventHandler_C, 0x0028);
		}

		// class UDbgMissionObject_C : public UObject
		TEST_METHOD(BlueprintGeneratedClass__DbgMissionObject__DbgMissionObject_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDbgMissionObject_C, MissionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDbgMissionObject_C, DebugMissionUI, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDbgMissionObject_C, 0x0038);
		}

		// class ALobbyFirstHourManager_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__LobbyFirstHourManager__LobbyFirstHourManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyFirstHourManager_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyFirstHourManager_C, DaycareMission, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALobbyFirstHourManager_C, DefaultSceneRoot, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALobbyFirstHourManager_C, 0x0240);
		}

		// class UForceDoorOpen_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__ForceDoorOpen__ForceDoorOpen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceDoorOpen_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceDoorOpen_C, BBDoor, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceDoorOpen_C, 0x00D8);
		}

		// class UCable08_PAS02_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable08_PAS02_ABP__Cable08_PAS02_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable08_PAS02_ABP_C, 0x05E0);
		}

		// class UCable07_PAS04_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable07_PAS04_ABP__Cable07_PAS04_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable07_PAS04_ABP_C, 0x05E0);
		}

		// class UCable02_PAS02_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable02_PAS02_ABP__Cable02_PAS02_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable02_PAS02_ABP_C, 0x05E0);
		}

		// class AAnimBP_Base_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__AnimBP_Base__AnimBP_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimBP_Base_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimBP_Base_C, DefaultSceneRoot, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAnimBP_Base_C, 0x0238);
		}

		// class ASurvivalSkipButton_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SurvivalSkipButton__SurvivalSkipButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalSkipButton_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalSkipButton_C, TMP_Skip, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalSkipButton_C, AlwaysFaceCameraComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalSkipButton_C, Sphere, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalSkipButton_C, ButtonMesh, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalSkipButton_C, DefaultSceneRoot, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalSkipButton_C, SurvivalStartup, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalSkipButton_C, Slanted, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurvivalSkipButton_C, 0x0281);
		}

		// class UWaitWhileStringsAreEqual_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__WaitWhileStringsAreEqual__WaitWhileStringsAreEqual_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaitWhileStringsAreEqual_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaitWhileStringsAreEqual_C, ValueBB, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaitWhileStringsAreEqual_C, Value, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWaitWhileStringsAreEqual_C, 0x00E8);
		}

		// class UTitleButton_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TitleButton__TitleButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleButton_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleButton_C, ButtonText, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleButton_C, TopButton, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleButton_C, DisplayText, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleButton_C, OnClicked, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleButton_C, OnHovered, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleButton_C, first_hover, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleButton_C, UnknownData_75QD, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleButton_C, WidgetStyle_Optional, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleButton_C, TextBlockStyle_Optional, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleButton_C, UseWidgetStyle, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleButton_C, UseTextBlockStyle, 0x0769);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleButton_C, UnknownData_RMQG, 0x076A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleButton_C, ClickedEvent, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitleButton_C, HoveredEvent, 0x0778);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTitleButton_C, 0x0780);
		}

		// class UNetAnalyticsAggregatorConfig : public UObject
		TEST_METHOD(Class__NetCore__NetAnalyticsAggregatorConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetAnalyticsAggregatorConfig, NetAnalyticsData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetAnalyticsAggregatorConfig, 0x0038);
		}

		// class ALMMSplineFollower_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__LMMSplineFollower__LMMSplineFollower_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplineFollower_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplineFollower_C, Jumpscare, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplineFollower_C, Capsule, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplineFollower_C, SplinePathwayMotionComponent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplineFollower_C, SkeletalMesh, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplineFollower_C, DefaultSceneRoot, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplineFollower_C, SplinePathway, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplineFollower_C, DestroyActorAfterFinished_, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplineFollower_C, UnknownData_RIE7, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplineFollower_C, OnSplineEndReached, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplineFollower_C, isFollowingASpline_, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplineFollower_C, UnknownData_3PQ6, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplineFollower_C, MinSpeed, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALMMSplineFollower_C, MaxSpeed, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALMMSplineFollower_C, 0x0284);
		}

		// class USequenceDirector_C : public ULevelSequenceDirector
		TEST_METHOD(BlueprintGeneratedClass__Monty_Intro_Shot_201__SequenceDirector_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceDirector_C, UberGraphFrame, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceDirector_C, 0x0038);
		}

		// class UWI_InstructionCard_SurviveUntil6_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_SurviveUntil6__WI_InstructionCard_SurviveUntil6_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_SurviveUntil6_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_SurviveUntil6_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_SurviveUntil6_C, VerticalBox_250, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_SurviveUntil6_C, WI_ImageScaled, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_SurviveUntil6_C, 0x0250);
		}

		// class UBreakCannon_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BreakCannon__BreakCannon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakCannon_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakCannon_C, BBCannon, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBreakCannon_C, 0x00D8);
		}

		// class AInteractibleGolfBall_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__InteractibleGolfBall__InteractibleGolfBall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractibleGolfBall_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractibleGolfBall_C, PlayerTrigger, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractibleGolfBall_C, Sphere, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractibleGolfBall_C, GolfBall, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractibleGolfBall_C, KickStrength, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInteractibleGolfBall_C, 0x024C);
		}

		// class UKitchen_EmergencyUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Kitchen_EmergencyUI__Kitchen_EmergencyUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKitchen_EmergencyUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKitchen_EmergencyUI_C, EmergencyAnim, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKitchen_EmergencyUI_C, Emergency_Image, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKitchen_EmergencyUI_C, EmergencyText, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKitchen_EmergencyUI_C, KitchenOfficeManager, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKitchen_EmergencyUI_C, 0x0258);
		}

		// class UHackFreddy_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__HackFreddy__HackFreddy_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHackFreddy_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHackFreddy_C, Burntrap_Freddy, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHackFreddy_C, FirstHack, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHackFreddy_C, UnknownData_YEB0, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHackFreddy_C, BurntrapPawn, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHackFreddy_C, 0x00C8);
		}

		// class UChooseHackPoint_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__ChooseHackPoint__ChooseHackPoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseHackPoint_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseHackPoint_C, BBLocation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseHackPoint_C, curr_dist, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseHackPoint_C, UnknownData_IVSJ, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseHackPoint_C, curr_actor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseHackPoint_C, remaining_actors, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseHackPoint_C, BBObject, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseHackPoint_C, GoToLocationA, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseHackPoint_C, GoToLocationB, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseHackPoint_C, GoToLocationC, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChooseHackPoint_C, 0x0123);
		}

		// class AAIShatteredMontyController_C : public AAISeekerController_C
		TEST_METHOD(BlueprintGeneratedClass__AIShatteredMontyController__AIShatteredMontyController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIShatteredMontyController_C, UberGraphFrame, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIShatteredMontyController_C, 0x03E0);
		}

		// class ABP_escalator_3_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_escalator_3__BP_escalator_3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_escalator_3_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_escalator_3_C, sm_elevator_frame_3, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_escalator_3_C, sk_elevator_steps_3, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_escalator_3_C, DefaultSceneRoot, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_escalator_3_C, stepSpeed, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_escalator_3_C, UnknownData_Z8P9, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_escalator_3_C, handrailMaterial, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_escalator_3_C, Inverse, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_escalator_3_C, handRailSpeed, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_escalator_3_C, 0x0260);
		}

		// class UAssetTagsSubsystem : public UEngineSubsystem
		TEST_METHOD(Class__AssetTags__AssetTagsSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetTagsSubsystem, 0x0030);
		}

		// class ABallCannon_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__BallCannon__BallCannon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannon_C, UberGraphFrame, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannon_C, LevelStreamViewpoint, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannon_C, BallShotTransform, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannon_C, Camera, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannon_C, Cube, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannon_C, PlayerTrigger, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannon_C, DefaultSceneRoot, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannon_C, OriginalPawn, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannon_C, HUD, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannon_C, ControllingPawn, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannon_C, OnShotFired, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannon_C, NumberTargetsHit, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannon_C, UnknownData_TLJY, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannon_C, Ball_Actor_Class, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannon_C, Ball_Cannon_Pawn_Class, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannon_C, FogVolume, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABallCannon_C, 0x0328);
		}

		// class USaveGameSettings_C : public USaveGame
		TEST_METHOD(BlueprintGeneratedClass__SaveGameSettings__SaveGameSettings_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, MouseSensitivity, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, GamePadTurnRate, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, GamePadLookUpRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, ColorBlindnessSeverity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, ColorBlindnessType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, ForceFeedbackIntensityMultiplier, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, ScreenResolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, WindowMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, RedDotReticle, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, UnknownData_NJ5H, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, Brightness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, Gamma, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, Contrast, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, MasterVolume, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, VoiceVolume, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, MusicVolume, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, JumpScareVolume, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, SFXVolume, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, AntiAlias, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, VisualQuality, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, SubtitlesOn, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, SubtitlesLarge, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, ShowInstructions, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, UnknownData_8I11, 0x0077);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, ShadowQuality, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, ViewDistanceQuality, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, VisualEffectQuality, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, ShadingQuality, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, ProgressHourVideos, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, LastGameHour, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, AgreedToEula, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, UnknownData_05RJ, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, Default_MasterVolume, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, Default_VoiceVolume, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, Default_MusicVolume, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, Default_JumpScareVolume, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, Default_SFXVolume, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, Default_SubtitlesOn, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, Default_SubtitlesLarge, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, UnknownData_79TY, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, Default_ColorBlindnessSeverity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, Default_Brightness, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, Default_Gamma, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, Default_Contrast, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, Default_MouseSensitivity, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, Default_GamePadTurnRate, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, Default_GamePadLookUpRate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, Default_ForceFeedbackIntensityMultiplier, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, VisualQualityLevel, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, RaytraceQualiyLevel, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, SprintToggle, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, InvertedController, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, UnknownData_NG7P, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, DefaultKeyBindings, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSettings_C, CurrentKeyBindings, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveGameSettings_C, 0x0180);
		}

		// class UGamepadButtonDecorator_C : public URichTextControlButtonDecorator
		TEST_METHOD(BlueprintGeneratedClass__GamepadButtonDecorator__GamepadButtonDecorator_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGamepadButtonDecorator_C, 0x0030);
		}

		// class UMagicLeapPlanesComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeapPlanes__MagicLeapPlanesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, QueryFlags, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, SearchVolume, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, MaxResults, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, MinHolePerimeter, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, MinPlaneArea, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, QueryType, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, UnknownData_3MBI, 0x0215);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, SimilarityThreshold, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, UnknownData_BSX1, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, OnPlanesQueryResult, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, OnPersistentPlanesQueryResult, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, UnknownData_K3QX, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapPlanesComponent, 0x0260);
		}

		// class UMagicLeapPlanesFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapPlanes__MagicLeapPlanesFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapPlanesFunctionLibrary, 0x0028);
		}

		// class USwitchAISeekerBT_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__SwitchAISeekerBT__SwitchAISeekerBT_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USwitchAISeekerBT_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USwitchAISeekerBT_C, UseBlackboard, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USwitchAISeekerBT_C, UnknownData_HAI2, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USwitchAISeekerBT_C, BTAsset, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USwitchAISeekerBT_C, BehaviorTreeAssetKey, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USwitchAISeekerBT_C, 0x0108);
		}

		// class UCable06_PAS04_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable06_PAS04_ABP__Cable06_PAS04_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable06_PAS04_ABP_C, 0x05E0);
		}

		// class UCable06_PAS03_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable06_PAS03_ABP__Cable06_PAS03_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable06_PAS03_ABP_C, 0x05E0);
		}

		// class UClothConfigBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothConfigBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigBase, 0x0028);
		}

		// class UClothingSimulationFactory : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactory, 0x0028);
		}

		// class UClothingSimulationInteractor : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationInteractor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractor, UnknownData_C7X4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractor, 0x0030);
		}

		// class UClothSharedSimConfigBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothSharedSimConfigBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothSharedSimConfigBase, 0x0028);
		}

		// class UClothingAssetBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, ImportedFilePath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, AssetGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetBase, 0x0048);
		}

		// class UClothPhysicalMeshDataBase_Legacy : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothPhysicalMeshDataBase_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Vertices, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Normals, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Indices, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, InverseMasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, BoneData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, NumFixedVerts, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, MaxBoneWeights, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, SelfCollisionIndices, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, UnknownData_A3CV, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothPhysicalMeshDataBase_Legacy, 0x00E0);
		}

		// class UTemplateSequence : public UMovieSceneSequence
		TEST_METHOD(Class__TemplateSequence__TemplateSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, MovieScene, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundActorClass, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundPreviewActor, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundActorComponents, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequence, 0x03F0);
		}

		// class UCameraAnimationSequence : public UTemplateSequence
		TEST_METHOD(Class__TemplateSequence__CameraAnimationSequence)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimationSequence, 0x03F0);
		}

		// class ATemplateSequenceActor : public AActor
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_9SSW, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, PlaybackSettings, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_D9YP, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, SequencePlayer, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, TemplateSequence, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, BindingOverride, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_YVHC, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATemplateSequenceActor, 0x0278);
		}

		// class UTemplateSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__TemplateSequence__TemplateSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequencePlayer, UnknownData_V0QY, 0x0888);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequencePlayer, 0x0890);
		}

		// class UTemplateSequenceSection : public UMovieSceneSubSection
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceSection, 0x0158);
		}

		// class UTemplateSequenceTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceTrack, 0x0068);
		}

		// class UAutomationUtilsBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AutomationUtils__AutomationUtilsBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationUtilsBlueprintLibrary, 0x0028);
		}

		// class AAISeekerController_C : public ADetourCrowdAIController
		TEST_METHOD(BlueprintGeneratedClass__AISeekerController__AISeekerController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeekerController_C, UberGraphFrame, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeekerController_C, AIPerception, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeekerController_C, BBPlayer, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeekerController_C, BBLastSeenLocation, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeekerController_C, BBInvestigatePlayer, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeekerController_C, BBRoom, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeekerController_C, BBInvestigateSound, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeekerController_C, BBAlert, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeekerController_C, PlayerWasSpotted, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeekerController_C, UnknownData_6B9O, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeekerController_C, BBLastKnownDirection, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeekerController_C, UnknownData_IPE4, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeekerController_C, StartingBlackboard, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeekerController_C, StartingBehaviorTree, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeekerController_C, BBRunBehaviour, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeekerController_C, BBMinSearchTime, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeekerController_C, BBMaxSearchTime, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeekerController_C, BBMinRoomIterations, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeekerController_C, BBMaxRoomIterations, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeekerController_C, BBLastSoundLocation, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeekerController_C, BBNoiseMakerHeard, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeekerController_C, BBNoiseMakerLocation, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeekerController_C, BBActorForQuery, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAISeekerController_C, 0x03D8);
		}

		// class USplinePathwayMotionComponent_C : public USplineFollowMovementComponent
		TEST_METHOD(BlueprintGeneratedClass__SplinePathwayMotionComponent__SplinePathwayMotionComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplinePathwayMotionComponent_C, UberGraphFrame, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplinePathwayMotionComponent_C, SplinePathway, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplinePathwayMotionComponent_C, 0x0110);
		}

		// class UPlay_Sound_C : public UPlayVO_C
		TEST_METHOD(BlueprintGeneratedClass__Play_Sound__Play_Sound_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlay_Sound_C, UnknownData_9VIZ, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlay_Sound_C, UberGraphFrame, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlay_Sound_C, Sound, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlay_Sound_C, 0x0130);
		}

		// class UCameraRenderTargetObject_C : public UObject
		TEST_METHOD(BlueprintGeneratedClass__CameraRenderTargetObject__CameraRenderTargetObject_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraRenderTargetObject_C, RenderTarget, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraRenderTargetObject_C, CameraReference, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraRenderTargetObject_C, Lock, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraRenderTargetObject_C, 0x0039);
		}

		// class UExitToTitlePopUp_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ExitToTitlePopUp__ExitToTitlePopUp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExitToTitlePopUp_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExitToTitlePopUp_C, BackButton, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExitToTitlePopUp_C, ExitButton, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExitToTitlePopUp_C, Image_184, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExitToTitlePopUp_C, Menu_Popup_Image, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExitToTitlePopUp_C, PauseUI, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExitToTitlePopUp_C, BackButton_Exit, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExitToTitlePopUp_C, 0x0270);
		}

		// class AMAP_WorldAmbience_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__MAP_WorldAmbience__MAP_WorldAmbience_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMAP_WorldAmbience_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMAP_WorldAmbience_C, 0x0238);
		}

		// class AFreddy_RoxyRacewayTrigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__Freddy_RoxyRacewayTrigger__Freddy_RoxyRacewayTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_RoxyRacewayTrigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_RoxyRacewayTrigger_C, TimeCheckComponent, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_RoxyRacewayTrigger_C, CharacterHourlyMaterialComponent, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_RoxyRacewayTrigger_C, MissionStateCondition, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_RoxyRacewayTrigger_C, RoxySpawnIn, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_RoxyRacewayTrigger_C, SickFreddy, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_RoxyRacewayTrigger_C, VO_finished, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_RoxyRacewayTrigger_C, UnknownData_SSLI, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_RoxyRacewayTrigger_C, LineSkipper, 0x02A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFreddy_RoxyRacewayTrigger_C, 0x02D8);
		}

		// class APRE_Elevator_NarrowBase_C : public APRE_Elevator_General_C
		TEST_METHOD(BlueprintGeneratedClass__PRE_Elevator_NarrowBase__PRE_Elevator_NarrowBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, UberGraphFrame, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, MOD_DinerCounterSetA_TopOnly1, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, MOD_DinerCounterSetA_TopOnly, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SpotLight1, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SpotLight, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, PointLight, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, RectLight, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, MOD_Elevator_Trim_Metal1, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, MOD_Elevator_Trim_Metal, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, MOD_ElevatorFrameDoor_R7, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, MOD_ElevatorFrameDoor_R6, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, MOD_Elevator_Trim_Cut1, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, MOD_Elevator_Trim_Cut, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, MOD_Elevator_FLoor_Cut, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_WallB_3M20, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, MOD_Elevator_Pillar_5, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, MOD_Elevator_Pillar_4, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, MOD_Elevator_Pillar_3, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, MOD_Elevator_Pillar, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_WallB_3M35, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, MOD_ElevatorFrameDoor_R5, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, MOD_ElevatorFrameDoor_R4, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_DinerA_IntTrimA_VarA22, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_DinerA_IntTrimA_VarA20, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_DinerA_IntTrimA_VarA18, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_DinerA_IntTrimA_VarA17, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_DinerA_IntTrimA_VarA16, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_DinerA_IntTrimA_VarA14, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_DinerA_IntTrimA_VarA9, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_DinerA_IntTrimA_VarA8, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, Decal3, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_DinerA_IntTrimA_VarA7, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_DinerA_IntTrimA_VarA6, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_DinerA_IntTrimA_VarA5, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_DinerA_IntTrimA_VarA4, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_WallB_3M23, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_WallB_3M57, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_WallB_3M55, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_WallB_3M54, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_WallB_3M48, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, MOD_Daycare_Elevator_Cover1, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, e1, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, ElevatorDoor1, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, MOD_Daycare_Elevator_Cover, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, E, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, ElevatorDoor, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_Ceiling_Light4, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_Ceiling_Light, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_CeilingLight_3, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, Decal6, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_WallB_3M18, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_DinerA_IntTrimA_VarA2, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_DinerA_IntTrimA_VarA1, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_DinerA_IntTrimA_VarA10, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_DinerA_IntTrimA_VarA13, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_WallB_3M42, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_WallB_3M34, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_WallB_3M38, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, Decal2, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_FloorDecal_StripeRed_2m4, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_FloorDecal_StripeRed_2m1, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, SM_WallB_3M22, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Elevator_NarrowBase_C, ElevatorMeshes, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_Elevator_NarrowBase_C, 0x06A0);
		}

		// class UWI_Message_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_Message__WI_Message_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Message_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Message_C, AudioBox, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Message_C, ExpandableArea_205, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Message_C, Image_626, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Message_C, Image_1252, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Message_C, MessageDetails, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Message_C, Overlay_920, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Message_C, PlayButton, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Message_C, ProgressBar_333, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Message_C, RichTextBlock_236, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Message_C, WI_GenericHeader, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Message_C, Read, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Message_C, UnknownData_PPAD, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Message_C, Data, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Message_C, Name, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Message_C, Sound, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Message_C, Playing, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Message_C, UnknownData_DU8R, 0x0309);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Message_C, PercentComplete, 0x030C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_Message_C, 0x0310);
		}

		// class UChasePlayer_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__ChasePlayer__ChasePlayer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChasePlayer_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChasePlayer_C, Vector, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChasePlayer_C, 0x00D8);
		}

		// class UFunctions_Debug_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__Functions_Debug__Functions_Debug_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunctions_Debug_C, 0x0028);
		}

		// class UWorker_SetOldState_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__Worker_SetOldState__Worker_SetOldState_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_SetOldState_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_SetOldState_C, State, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_SetOldState_C, OldState, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorker_SetOldState_C, 0x0100);
		}

		// class AGatorRideSpline_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__GatorRideSpline__GatorRideSpline_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorRideSpline_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorRideSpline_C, MontySpline, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorRideSpline_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorRideSpline_C, Mesh, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorRideSpline_C, Meshes, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorRideSpline_C, Beam_Spacing, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorRideSpline_C, Light_Relative_Roation, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorRideSpline_C, BeamScale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorRideSpline_C, UnknownData_P0SK, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorRideSpline_C, RefTOCart, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorRideSpline_C, ArrayOfCarts, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorRideSpline_C, NumberOfCarts, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorRideSpline_C, StartPoint, 0x028C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGatorRideSpline_C, 0x0290);
		}

		// class AButton_DumpBallsMonty_C : public APlaySequenceTrigger_C
		TEST_METHOD(BlueprintGeneratedClass__Button_DumpBallsMonty__Button_DumpBallsMonty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_DumpBallsMonty_C, UnknownData_S50A, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_DumpBallsMonty_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_DumpBallsMonty_C, Montys_Claws, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_DumpBallsMonty_C, Button, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_DumpBallsMonty_C, Cone, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_DumpBallsMonty_C, RefToManger, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_DumpBallsMonty_C, UseButton, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_DumpBallsMonty_C, CanPlayerInteract, 0x03E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AButton_DumpBallsMonty_C, 0x03E2);
		}

		// class UAnimatronic_ABP_MASTER_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Animatronic_ABP_MASTER__Animatronic_ABP_MASTER_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_MDRQ, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_86, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_85, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_84, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_83, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_82, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_81, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_80, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_79, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_78, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_77, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_76, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_75, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_68, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_57, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_74, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_67, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_56, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_66, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_55, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateMachine_12, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_54, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_73, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_65, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_53, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_64, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_52, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateMachine_11, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_51, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_63, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendListByBool_15, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_62, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_50, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_61, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendListByBool_14, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_60, 0x0CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_49, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_59, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_48, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_58, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendListByBool_13, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_57, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_47, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_36, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_46, 0x0FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_56, 0x1020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_45, 0x1098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateMachine_10, 0x10C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_PT91, 0x1178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TwoBoneIK_2, 0x1180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TwoBoneIK, 0x1360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SaveCachedPose_16, 0x1540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_35, 0x15F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_72, 0x1620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_71, 0x1648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_70, 0x1670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_69, 0x1698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_68, 0x16C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_67, 0x16E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_55, 0x1710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_44, 0x1788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_54, 0x17B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_43, 0x1830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_66, 0x1860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendSpacePlayer_8, 0x1888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_42, 0x1968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_53, 0x1998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_41, 0x1A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateMachine_9, 0x1A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SaveCachedPose_15, 0x1AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_34, 0x1BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_52, 0x1BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendListByEnum_2, 0x1C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SaveCachedPose_14, 0x1CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_33, 0x1DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_32, 0x1DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_Constraint_2, 0x1E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_Constraint, 0x1F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendSpacePlayer_7, 0x2010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LayeredBoneBlend_7, 0x20F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_ModifyBone, 0x21B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_ComponentToLocalSpace_2, 0x22B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_EaringDynamicAlpha_A350582A4109134061835A96AB5CBFD1, 0x22D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_EarDynamicAlpha_A350582A4109134061835A96AB5CBFD1, 0x22DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_AnimDynamics_Ears_A350582A4109134061835A96AB5CBFD1, 0x22E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_YORU, 0x22E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LinkedAnimGraph_21, 0x22E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_Shoulderpad_DynamicAlpha_80F9264F45878299AAE3AEBA5FB92ED9, 0x2388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_JiggleAlphaScale_80F9264F45878299AAE3AEBA5FB92ED9, 0x238C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_JiggleDynamicAlpha_80F9264F45878299AAE3AEBA5FB92ED9, 0x2390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_0SD5, 0x2394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LinkedAnimGraph_20, 0x2398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SaveCachedPose_13, 0x2438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_31, 0x24F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_EaringDynamicAlpha_8D56E8DE458598EEF596B0829547ECC6, 0x2518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_EarDynamicAlpha_8D56E8DE458598EEF596B0829547ECC6, 0x251C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_AnimDynamics_Ears_8D56E8DE458598EEF596B0829547ECC6, 0x2520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_3GE3, 0x2521);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LinkedAnimGraph_19, 0x2528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_Shoulderpad_DynamicAlpha_33FCBB2E4848ADCF1144D3B148CF28DC, 0x25C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_JiggleAlphaScale_33FCBB2E4848ADCF1144D3B148CF28DC, 0x25CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_JiggleDynamicAlpha_33FCBB2E4848ADCF1144D3B148CF28DC, 0x25D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_HLLN, 0x25D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LinkedAnimGraph_18, 0x25D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SaveCachedPose_12, 0x2678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_30, 0x2730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_29, 0x2758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_EaringDynamicAlpha_C420AC5B4D5E2B1A56CB07BE6F13FDFA, 0x2780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_EarDynamicAlpha_C420AC5B4D5E2B1A56CB07BE6F13FDFA, 0x2784);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_AnimDynamics_Ears_C420AC5B4D5E2B1A56CB07BE6F13FDFA, 0x2788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_JX0R, 0x2789);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LinkedAnimGraph_17, 0x2790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_canJumpscare_4A98D0BF4A4FE0BE4AE282A8BE4A4087, 0x2830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_X7Z9, 0x2831);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_Shoulderpad_DynamicAlpha_4A98D0BF4A4FE0BE4AE282A8BE4A4087, 0x2834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_JiggleAlphaScale_4A98D0BF4A4FE0BE4AE282A8BE4A4087, 0x2838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_JiggleDynamicAlpha_4A98D0BF4A4FE0BE4AE282A8BE4A4087, 0x283C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LinkedAnimGraph_16, 0x2840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_28, 0x28E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_HairDynamicAlpha_46E51DA64037F36A41E472B0BD85AD8C, 0x2908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_TailDynamicAlpha_46E51DA64037F36A41E472B0BD85AD8C, 0x290C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_AnimDynamics_Roxy_46E51DA64037F36A41E472B0BD85AD8C, 0x2910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_2W5Z, 0x2911);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LinkedAnimGraph_15, 0x2918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SaveCachedPose_11, 0x29B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_27, 0x2A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_EaringDynamicAlpha_E4EB72D1428FECD634E2D79C867AE48E, 0x2A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_EarDynamicAlpha_E4EB72D1428FECD634E2D79C867AE48E, 0x2A9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_AnimDynamics_Ears_E4EB72D1428FECD634E2D79C867AE48E, 0x2AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_70NM, 0x2AA1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LinkedAnimGraph_14, 0x2AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_canJumpscare_A7B4335C4CEF28D881FD46973C5B180B, 0x2B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_HG0U, 0x2B49);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_Shoulderpad_DynamicAlpha_A7B4335C4CEF28D881FD46973C5B180B, 0x2B4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_JiggleAlphaScale_A7B4335C4CEF28D881FD46973C5B180B, 0x2B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_JiggleDynamicAlpha_A7B4335C4CEF28D881FD46973C5B180B, 0x2B54);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LinkedAnimGraph_13, 0x2B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_26, 0x2BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_HairDynamicAlpha_68504CFF461F61B61AB865A8F594D2BB, 0x2C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_TailDynamicAlpha_68504CFF461F61B61AB865A8F594D2BB, 0x2C24);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_AnimDynamics_Roxy_68504CFF461F61B61AB865A8F594D2BB, 0x2C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_HOJ2, 0x2C29);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LinkedAnimGraph_12, 0x2C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SaveCachedPose_10, 0x2CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_25, 0x2D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_EaringDynamicAlpha_F47A5DA04B36F7DDCA79FBB868A2A8AF, 0x2DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_EarDynamicAlpha_F47A5DA04B36F7DDCA79FBB868A2A8AF, 0x2DB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_AnimDynamics_Ears_F47A5DA04B36F7DDCA79FBB868A2A8AF, 0x2DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_1LYI, 0x2DB9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LinkedAnimGraph_11, 0x2DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_canJumpscare_36C8EED645279F9E89604C9B2DE3C578, 0x2E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_ZTY8, 0x2E61);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_Shoulderpad_DynamicAlpha_36C8EED645279F9E89604C9B2DE3C578, 0x2E64);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_JiggleAlphaScale_36C8EED645279F9E89604C9B2DE3C578, 0x2E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_JiggleDynamicAlpha_36C8EED645279F9E89604C9B2DE3C578, 0x2E6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LinkedAnimGraph_10, 0x2E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_24, 0x2F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_HairDynamicAlpha_E8A73B37462F412E5830418423953C42, 0x2F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_Shattered_E8A73B37462F412E5830418423953C42, 0x2F3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_AnimDynamics_Chica_E8A73B37462F412E5830418423953C42, 0x2F3D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_AOUD, 0x2F3E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_EaringDynamicAlpha_E8A73B37462F412E5830418423953C42, 0x2F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_HM62, 0x2F44);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LinkedAnimGraph_9, 0x2F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SaveCachedPose_9, 0x2FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_EaringDynamicAlpha_FFB784B9485073B91FE3ECBEA26DF051, 0x30A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_EarDynamicAlpha_FFB784B9485073B91FE3ECBEA26DF051, 0x30A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_AnimDynamics_Ears_FFB784B9485073B91FE3ECBEA26DF051, 0x30A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_9O9J, 0x30A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LinkedAnimGraph_8, 0x30B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_canJumpscare_F15EA70C496B6393A39F2F97DAC31403, 0x3150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_KJLV, 0x3151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_Shoulderpad_DynamicAlpha_F15EA70C496B6393A39F2F97DAC31403, 0x3154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_JiggleAlphaScale_F15EA70C496B6393A39F2F97DAC31403, 0x3158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_JiggleDynamicAlpha_F15EA70C496B6393A39F2F97DAC31403, 0x315C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LinkedAnimGraph_7, 0x3160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_23, 0x3200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_HairDynamicAlpha_2F8BFB3B4426004054F6CAAC69DF4D5D, 0x3228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_Shattered_2F8BFB3B4426004054F6CAAC69DF4D5D, 0x322C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_AnimDynamics_Chica_2F8BFB3B4426004054F6CAAC69DF4D5D, 0x322D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_MXFV, 0x322E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_EaringDynamicAlpha_2F8BFB3B4426004054F6CAAC69DF4D5D, 0x3230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_L4IQ, 0x3234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LinkedAnimGraph_6, 0x3238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SaveCachedPose_8, 0x32D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_22, 0x3390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_21, 0x33B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_20, 0x33E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_canJumpscare_3EDAFDCC4A84BB1E732F7B9A7CD159B9, 0x3408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_Z54J, 0x3409);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_Shoulderpad_DynamicAlpha_3EDAFDCC4A84BB1E732F7B9A7CD159B9, 0x340C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_JiggleAlphaScale_3EDAFDCC4A84BB1E732F7B9A7CD159B9, 0x3410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_JiggleDynamicAlpha_3EDAFDCC4A84BB1E732F7B9A7CD159B9, 0x3414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LinkedAnimGraph_5, 0x3418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_Shattered_746CD4E74A231D30C2C38B87E151D165, 0x34B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_E0KU, 0x34B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_TailDynamicAlpha_746CD4E74A231D30C2C38B87E151D165, 0x34BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_AnimDynamics_Monty_746CD4E74A231D30C2C38B87E151D165, 0x34C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_UK62, 0x34C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LinkedAnimGraph_4, 0x34C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SaveCachedPose_7, 0x3568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_19, 0x3620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_18, 0x3648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_Shoulderpad_DynamicAlpha_6E9BE69E40CAFCE64B2D93BD2DEF5066, 0x3670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_JiggleAlphaScale_6E9BE69E40CAFCE64B2D93BD2DEF5066, 0x3674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_JiggleDynamicAlpha_6E9BE69E40CAFCE64B2D93BD2DEF5066, 0x3678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_IMXS, 0x367C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LinkedAnimGraph_3, 0x3680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_Shattered_0B37308D42AD096770ABB5AECB361FAF, 0x3720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_PBR1, 0x3721);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_TailDynamicAlpha_0B37308D42AD096770ABB5AECB361FAF, 0x3724);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_AnimDynamics_Monty_0B37308D42AD096770ABB5AECB361FAF, 0x3728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_OHYU, 0x3729);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LinkedAnimGraph_2, 0x3730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SaveCachedPose_6, 0x37D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_17, 0x3888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LocalToComponentSpace_2, 0x38B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_OverrideHeadAim_998EF9964CF95A594EEC6797BB479F4E, 0x38D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_isOpen_998EF9964CF95A594EEC6797BB479F4E, 0x38D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_AnimatronicMode_998EF9964CF95A594EEC6797BB479F4E, 0x38D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_K2LT, 0x38D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_isTurningAlpha_998EF9964CF95A594EEC6797BB479F4E, 0x38D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_isTurning_998EF9964CF95A594EEC6797BB479F4E, 0x38D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_AOUT, 0x38D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_SpineTurnRot_998EF9964CF95A594EEC6797BB479F4E, 0x38DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_isHeadAiming_998EF9964CF95A594EEC6797BB479F4E, 0x38E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_44UU, 0x38E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_HeadAimRot_998EF9964CF95A594EEC6797BB479F4E, 0x38EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_HeadAimAlpha_998EF9964CF95A594EEC6797BB479F4E, 0x38F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, __CustomProperty_HeadAimTarget_998EF9964CF95A594EEC6797BB479F4E, 0x38FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LinkedAnimGraph, 0x3908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_65, 0x39A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_64, 0x39D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_63, 0x39F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_62, 0x3A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_61, 0x3A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_60, 0x3A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_59, 0x3A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_58, 0x3AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_51, 0x3AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_40, 0x3B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_50, 0x3B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_39, 0x3C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_49, 0x3C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_38, 0x3CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_48, 0x3CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_37, 0x3D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_16, 0x3D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_36, 0x3DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_47, 0x3DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_35, 0x3E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateMachine_8, 0x3E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendListByBool_12, 0x3F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_15, 0x3FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_Slot_11, 0x4000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendListByBool_11, 0x4048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_57, 0x40E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_56, 0x4110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_55, 0x4138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_54, 0x4160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_46, 0x4188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_34, 0x4200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendSpacePlayer_6, 0x4230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_33, 0x4310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_45, 0x4340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_44, 0x43B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendListByBool_10, 0x4430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_32, 0x44D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateMachine_7, 0x4500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_53, 0x45B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_52, 0x45D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_51, 0x4600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_50, 0x4628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_49, 0x4650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_48, 0x4678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_47, 0x46A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_46, 0x46C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_45, 0x46F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_44, 0x4718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_43, 0x4740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_42, 0x4768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_43, 0x4790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_31, 0x4808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_42, 0x4838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_30, 0x48B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_41, 0x48E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_41, 0x4908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_29, 0x4980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_40, 0x49B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_28, 0x4A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_40, 0x4A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendSpacePlayer_5, 0x4A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_27, 0x4B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_39, 0x4B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_38, 0x4C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendListByBool_9, 0x4C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_37, 0x4D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TwoWayBlend_3, 0x4D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TwoWayBlend_2, 0x4E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendListByBool_8, 0x4F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendListByBool_7, 0x4FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_36, 0x5068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_35, 0x50E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_34, 0x5158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_26, 0x51D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_39, 0x5200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_38, 0x5228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_37, 0x5250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_36, 0x5278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_35, 0x52A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_34, 0x52C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_33, 0x52F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_32, 0x5318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_31, 0x5340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_30, 0x5368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_29, 0x5390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_28, 0x53B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_33, 0x53E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_25, 0x5458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_32, 0x5488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_24, 0x5500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_31, 0x5530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_23, 0x55A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_30, 0x55D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_22, 0x5650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_29, 0x5680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_21, 0x56F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_27, 0x5728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_28, 0x5750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_27, 0x57C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_26, 0x5840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_25, 0x58B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_24, 0x5930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_23, 0x59A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_22, 0x5A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_21, 0x5A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_20, 0x5B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendListByEnum, 0x5B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_20, 0x5C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_19, 0x5C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_ApplyAdditive_2, 0x5CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_18, 0x5DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TwoWayBlend, 0x5E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_17, 0x5EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendListByBool_6, 0x5F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_16, 0x6000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendListByBool_5, 0x6078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_15, 0x6118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_19, 0x6190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_14, 0x61C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_18, 0x6238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateMachine_6, 0x6268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_17, 0x6318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateMachine_5, 0x6348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SaveCachedPose_5, 0x63F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_26, 0x64B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_25, 0x64D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_24, 0x6500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_23, 0x6528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_22, 0x6550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_21, 0x6578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_20, 0x65A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_19, 0x65C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_18, 0x65F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_17, 0x6618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_16, 0x6640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_15, 0x6668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_13, 0x6690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_16, 0x6708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_12, 0x6738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_15, 0x67B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_14, 0x67E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_11, 0x6808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_14, 0x6880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_10, 0x68B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_13, 0x6928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_13, 0x6958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendSpacePlayer_4, 0x6980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_12, 0x6A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendSpacePlayer_3, 0x6A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_11, 0x6B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_12, 0x6BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_11, 0x6BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_10, 0x6BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_9, 0x6C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LayeredBoneBlend_6, 0x6C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequenceEvaluator_4, 0x6D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_9, 0x6D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendListByBool_4, 0x6DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_8, 0x6E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_10, 0x6ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_7, 0x6F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_9, 0x6F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_6, 0x6FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendListByBool_3, 0x7028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_5, 0x70C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendListByBool_2, 0x7140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_4, 0x71E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_8, 0x7258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateMachine_4, 0x7288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_7, 0x7338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateMachine_3, 0x7368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SaveCachedPose_4, 0x7418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LayeredBoneBlend_5, 0x74D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_Slot_10, 0x7590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_Slot_9, 0x75D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SaveCachedPose_3, 0x7620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_14, 0x76D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_13, 0x7700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_12, 0x7728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_11, 0x7750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SaveCachedPose_2, 0x7778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_Slot_8, 0x7830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LayeredBoneBlend_4, 0x7878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_Slot_7, 0x7938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_Slot_6, 0x7980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_10, 0x79C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_9, 0x79F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_8, 0x7A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_7, 0x7A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LayeredBoneBlend_3, 0x7A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_Slot_5, 0x7B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SaveCachedPose, 0x7B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_6, 0x7C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_5, 0x7C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_8, 0x7C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_7, 0x7CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_6, 0x7CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_5, 0x7CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_4, 0x7D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_3, 0x7D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequenceEvaluator_3, 0x7D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_ComponentToLocalSpace, 0x7DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LocalToComponentSpace, 0x7DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LayeredBoneBlend_2, 0x7DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendSpacePlayer_2, 0x7EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_6, 0x7F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_3, 0x7FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_5, 0x8038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer_2, 0x8068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_4, 0x80E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequenceEvaluator_2, 0x8110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_3, 0x8158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateMachine_2, 0x8188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_Slot_4, 0x8238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult_2, 0x8280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_TransitionResult, 0x82A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequencePlayer, 0x82D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult_2, 0x8348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_SequenceEvaluator, 0x8378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateResult, 0x83C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_StateMachine, 0x83F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_4, 0x84A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendListByBool, 0x84C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_BlendSpacePlayer, 0x8568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_ApplyAdditive, 0x8648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_3, 0x8710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose_2, 0x8738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_Slot_3, 0x8760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_RotationOffsetBlendSpace, 0x87A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_UseCachedPose, 0x8930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_Slot_2, 0x8958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_LayeredBoneBlend, 0x89A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimGraphNode_Slot, 0x8A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, DeltaTimeX, 0x8AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_LDSQ, 0x8AAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, Pawn, 0x8AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, isMoving, 0x8AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_64RU, 0x8AB9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, MoveSpeedInput, 0x8ABC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, HeadAimAlpha, 0x8AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, HeadAimRot, 0x8AC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, IKEffector_R, 0x8AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, IKEffector_L, 0x8ADC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, PVTarget_L, 0x8AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, PVTarget_R, 0x8AF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, HeadAimTarget, 0x8B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, canJumpscare, 0x8B0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, IsHeadAiming, 0x8B0D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_2TLR, 0x8B0E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, TurnDegrees, 0x8B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, CanTurn, 0x8B14);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, HideType, 0x8B15);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, IsSearching, 0x8B16);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, IsJumping, 0x8B17);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, isRummaging, 0x8B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, IsOpen, 0x8B19);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, CanScan, 0x8B1A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_FS5V, 0x8B1B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, ScanVariation, 0x8B1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, IsSpotted, 0x8B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, Stop_L, 0x8B21);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_NHXU, 0x8B22);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, SpottedDelayTime, 0x8B24);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, SpottedTimer, 0x8B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, IK_Interp_Speed, 0x8B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AlertLevel, 0x8B34);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, HidingSpaceType, 0x8B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_R355, 0x8B3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, CharacterMesh, 0x8B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, PhysicalAnimationComponent, 0x8B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, SimulationBones, 0x8B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, L_Ear_jnt, 0x8B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, R_Ear_jnt, 0x8B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, Tail1_jnt, 0x8B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, TailBase_jnt, 0x8B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, HairB_jnt, 0x8B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, FrontHairA_jnt, 0x8B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, Hair1_jnt, 0x8B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, Hair2_jnt, 0x8B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, Hair3_jnt, 0x8BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, Freddy_Default, 0x8BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, Roxy_Default, 0x8BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, Monty_Default, 0x8BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, Chica_Default, 0x8BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, CharacterPhysicsAsset, 0x8BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, EnablePhysicalAnimation, 0x8BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimDynamics_Ears, 0x8BD1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimDynamics_Roxy, 0x8BD2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimDynamics_Monty, 0x8BD3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimDynamics_Chica, 0x8BD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, CanRun, 0x8BD5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_OWRJ, 0x8BD6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, RunSpeed, 0x8BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, WalkSpeed, 0x8BDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, ChestAimAlpha, 0x8BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, IsPreview, 0x8BE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, CanScanL, 0x8BE5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, CanScanR, 0x8BE6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_T8R4, 0x8BE7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, Scan_Direction_Float, 0x8BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, ScanTime, 0x8BEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, Scan_Curve, 0x8BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, Is_Stunned, 0x8BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_P9LC, 0x8BF9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, MovementOrient, 0x8BFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, PitchAim, 0x8C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, YawAim, 0x8C04);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, isTurning, 0x8C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, CanBlink, 0x8C09);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_6N99, 0x8C0A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, L_ear_Rot, 0x8C0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, R_ear_Rot, 0x8C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, JiggleDynamicAlpha, 0x8C24);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, CanBreakThrough, 0x8C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, ApplyFeetIK, 0x8C29);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_FW9S, 0x8C2A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, CutSceneAnim, 0x8C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, LoopCutScene, 0x8C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimatronicModeEnum, 0x8C39);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_T16V, 0x8C3A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, JiggleScaleTarget, 0x8C3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, EarDynamicAlpha, 0x8C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, HairDynamicAlpha, 0x8C44);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, TailDynamicAlpha, 0x8C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, JiggleAlphaScale, 0x8C4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, Shoulderpad_DynamicAlpha, 0x8C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, EaringDynamicAlpha, 0x8C54);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, DynamicBlendInterpSpeed, 0x8C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, JiggleAlpha, 0x8C5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, EarAlpha, 0x8C64);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, TailAlpha, 0x8C6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, EaringAlpha, 0x8C74);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UseCurves, 0x8C7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, HairAlpha, 0x8C84);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, Shattered, 0x8C8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_TME1, 0x8C8D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, IK_Foot_Offset, 0x8C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, ShoulderPadAlpha, 0x8C94);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, CurrentControlRotation, 0x8C9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, WorldTurnAlpha, 0x8CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, FreddyTurnAlpha, 0x8CAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, OldControlRotation, 0x8CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, TurnSpineRotation, 0x8CBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, CurrentWorldJointRotation, 0x8CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, TargetControlRotation, 0x8CD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, RotationDelta, 0x8CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_HB5T, 0x8CE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AISeeker, 0x8CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, TrackingPlayer, 0x8CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_WP9Q, 0x8CF1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, ScanTimeRandom, 0x8CF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, ScanMotionAlpha, 0x8CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, ScanTimerSet, 0x8CFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_3GOT, 0x8CFD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, FreddyChestOpenTime, 0x8D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, HeadAimInterpSpeed, 0x8D04);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, TieAlpha, 0x8D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, SnapOrient, 0x8D0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, isLanding, 0x8D0D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_KX8K, 0x8D0E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, CurvesDict, 0x8D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, CamshakeFallOff_Locomotion, 0x8D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, HeadAimClamp, 0x8D64);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, ScanUp, 0x8D65);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, PoundDoor, 0x8D66);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, CanWave, 0x8D67);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AITurnDelta, 0x8D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, isOnScreen, 0x8D6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, IsSick, 0x8D6D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, LieDown, 0x8D6E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, CanLeap, 0x8D6F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, CanScanBoth, 0x8D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_EECZ, 0x8D71);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AI_TurnPlayrate, 0x8D74);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, OverrideJumpscareJoint, 0x8D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_QTRO, 0x8D79);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, MaximumAimCone, 0x8D7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, MinimumAimCone, 0x8D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, TurnOverride, 0x8D84);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_N6TD, 0x8D85);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, WalkAlpha, 0x8D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, isCrying, 0x8D8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_71CT, 0x8D8D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, TargetWalkSpeed, 0x8D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, GregInteracting, 0x8D94);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_JH14, 0x8D95);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AnimVODT, 0x8D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, JawAnim, 0x8DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, CanTalk, 0x8DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_OI3Z, 0x8DA9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, EyeTwitch, 0x8DAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, CanEyeTwitch, 0x8DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, LeapRecovery, 0x8DB1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, ChestFullOpen, 0x8DB2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, CanLeapLoop, 0x8DB3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, FirstPersonAImSpace, 0x8DB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, EndingIdle, 0x8DB5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, DisableHeadAim, 0x8DB6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_XSYI, 0x8DB7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, SpineLayerAlpha, 0x8DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, SpineLayerAlphaLoop, 0x8DBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_WBE5, 0x8DBD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, AdditiveAnimAimAlpha, 0x8DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_3VQO, 0x8DC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, CurrentTalkTimer, 0x8DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, FreddyTurnInPlace, 0x8DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_JPKY, 0x8DD1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, FreddyTurnInPlaceDirection, 0x8DD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, FreddyTurnInPlaceL, 0x8DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, UnknownData_TRG0, 0x8DD9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_MASTER_C, FreddyWave, 0x8DE0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimatronic_ABP_MASTER_C, 0x8DE8);
		}

		// class UConsoleSettings : public UObject
		TEST_METHOD(Class__EngineSettings__ConsoleSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, MaxScrollbackSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_RUPA, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, ManualAutoCompleteList, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteMapPaths, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, BackgroundOpacityPercentage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bOrderTopToBottom, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bDisplayHelpInAutoComplete, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_KSNB, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, InputColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, HistoryColor, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCommandColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCVarColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteFadedColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_T8LK, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsoleSettings, 0x0070);
		}

		// class UGameMapsSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameMapsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, LocalMapOptions, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TransitionMap, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bUseSplitscreen, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TwoPlayerSplitscreenLayout, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ThreePlayerSplitscreenLayout, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, FourPlayerSplitscreenLayout, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bOffsetPlayerGamepadIds, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, UnknownData_KZ6I, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameInstanceClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameDefaultMap, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ServerDefaultMap, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultGameMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultServerGameMode, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeMapPrefixes, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeClassAliases, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameMapsSettings, 0x00F0);
		}

		// class UGameNetworkManagerSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameNetworkManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MinDynamicBandwidth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MaxDynamicBandwidth, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, TotalNetBandwidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, BadPingThreshold, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_5OJW, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyRxCheatTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyTxCheatTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForRxStandby, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForTxStandby, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentForBadPing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, JoinInProgressStandbyWaitTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_LFWZ, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameNetworkManagerSettings, 0x0058);
		}

		// class UGameSessionSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameSessionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxSpectators, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxPlayers, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, UnknownData_Q06Z, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSessionSettings, 0x0038);
		}

		// class UGeneralEngineSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralEngineSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralEngineSettings, 0x0028);
		}

		// class UGeneralProjectSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyDistinguishedName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CopyrightNotice, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Homepage, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, LicensingTerms, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, PrivacyPolicy, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectID, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectVersion, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, SupportContact, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDisplayedTitle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDebugTitleInfo, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bShouldWindowPreserveAspectRatio, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bUseBorderlessWindow, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInVR, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInAR, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bSupportAR, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowWindowResize, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowClose, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMaximize, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMinimize, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, UnknownData_8H0M, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralProjectSettings, 0x0118);
		}

		// class UHudSettings : public UObject
		TEST_METHOD(Class__EngineSettings__HudSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, UnknownData_QGGP, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, DebugDisplay, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHudSettings, 0x0040);
		}

		// class ULiveLinkSourceFactory : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkSourceFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkSourceFactory, 0x0028);
		}

		// class ULiveLinkRole : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkRole, 0x0028);
		}

		// class ULiveLinkBasicRole : public ULiveLinkRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkBasicRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkBasicRole, 0x0028);
		}

		// class ULiveLinkAnimationRole : public ULiveLinkBasicRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkAnimationRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkAnimationRole, 0x0028);
		}

		// class ULiveLinkTransformRole : public ULiveLinkBasicRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkTransformRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkTransformRole, 0x0028);
		}

		// class ULiveLinkCameraRole : public ULiveLinkTransformRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkCameraRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkCameraRole, 0x0028);
		}

		// class ULiveLinkController : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkController, 0x0028);
		}

		// class ULiveLinkSourceSettings : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, Mode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, UnknownData_9080, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, BufferSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, ConnectionString, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, Factory, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkSourceSettings, 0x0098);
		}

		// class ULiveLinkCurveRemapSettings : public ULiveLinkSourceSettings
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkCurveRemapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkCurveRemapSettings, CurveConversionSettings, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkCurveRemapSettings, 0x00E8);
		}

		// class ULiveLinkFrameInterpolationProcessor : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkFrameInterpolationProcessor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkFrameInterpolationProcessor, 0x0028);
		}

		// class ULiveLinkFramePreProcessor : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkFramePreProcessor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkFramePreProcessor, 0x0028);
		}

		// class ULiveLinkFrameTranslator : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkFrameTranslator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkFrameTranslator, 0x0028);
		}

		// class ULiveLinkLightRole : public ULiveLinkTransformRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkLightRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkLightRole, 0x0028);
		}

		// class ULiveLinkSubjectSettings : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkSubjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, PreProcessors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, InterpolationProcessor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, Translators, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, Role, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkSubjectSettings, 0x0058);
		}

		// class ULiveLinkVirtualSubject : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkVirtualSubject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, UnknownData_1DP6, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, Role, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, Subjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, FrameTranslators, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, UnknownData_EUV9, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkVirtualSubject, 0x00D8);
		}

		// class UNonLethalJumpscare_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__NonLethalJumpscare__NonLethalJumpscare_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNonLethalJumpscare_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNonLethalJumpscare_C, 0x00B0);
		}

		// class UFixedFrameRateCustomTimeStep : public UEngineCustomTimeStep
		TEST_METHOD(Class__TimeManagement__FixedFrameRateCustomTimeStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedFrameRateCustomTimeStep, FixedFrameRate, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFixedFrameRateCustomTimeStep, 0x0030);
		}

		// class UTimeManagementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__TimeManagement__TimeManagementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeManagementBlueprintLibrary, 0x0028);
		}

		// class UTimeSynchronizationSource : public UObject
		TEST_METHOD(Class__TimeManagement__TimeSynchronizationSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, bUseForSynchronization, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, UnknownData_8S7D, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, FrameOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizationSource, 0x0030);
		}

		// class UMissionTextFormatterFactory_C : public UObject
		TEST_METHOD(BlueprintGeneratedClass__MissionTextFormatterFactory__MissionTextFormatterFactory_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionTextFormatterFactory_C, MissionFormatterClasses, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionTextFormatterFactory_C, MissionFormatterInstances, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionTextFormatterFactory_C, 0x00C8);
		}

		// class ASodaBottle_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SodaBottle__SodaBottle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASodaBottle_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASodaBottle_C, StaticMesh, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASodaBottle_C, 0x0238);
		}

		// class AGatorHeadScare_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__GatorHeadScare__GatorHeadScare_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorHeadScare_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorHeadScare_C, PawnTrigger, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorHeadScare_C, SkeletalMeshComponent0, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorHeadScare_C, Scene, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorHeadScare_C, AllowPawnTrigger, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorHeadScare_C, State, 0x0249);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGatorHeadScare_C, 0x024A);
		}

		// class UWI_Messages_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_Messages__WI_Messages_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Messages_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Messages_C, HeaderBox, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Messages_C, ScrollBox_400, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Messages_C, Read, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Messages_C, New, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Messages_C, HasUnread, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Messages_C, UnknownData_EA24, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Messages_C, Current_input, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Messages_C, axisInput, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Messages_C, CurentIndex, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Messages_C, UnknownData_7BOH, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Messages_C, SelectList, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Messages_C, CurrentIndex, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Messages_C, UnknownData_JZFX, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Messages_C, CurrentSelection, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_Messages_C, 0x0328);
		}

		// class AVannyController_C : public AAISeekerController_C
		TEST_METHOD(BlueprintGeneratedClass__VannyController__VannyController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVannyController_C, UberGraphFrame, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVannyController_C, 0x03E0);
		}

		// class AShatteredRoxyController_C : public AAISeekerController_C
		TEST_METHOD(BlueprintGeneratedClass__ShatteredRoxyController__ShatteredRoxyController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredRoxyController_C, UberGraphFrame, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredRoxyController_C, LastHeardTime, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredRoxyController_C, HearingLossTime, 0x03E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShatteredRoxyController_C, 0x03E8);
		}

		// class ADJMusicMan_C : public AAISeeker_C
		TEST_METHOD(BlueprintGeneratedClass__DJMusicMan__DJMusicMan_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_C, UnknownData_M357, 0x07F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_C, UberGraphFrame, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_C, footstepL3, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_C, footstepL2, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_C, footstepL1, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_C, footstepR3, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_C, footstepR1, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_C, footstepR2, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_C, SpotLight1, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_C, PlayerCaptureTrigger4, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_C, Arrow4, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_C, Arrow3, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_C, Arrow2, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_C, PlayerCaptureTrigger3, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_C, PlayerCaptureTrigger2, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_C, PlayerCaptureTrigger1, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_C, OnTheLeft, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_C, UnknownData_T85G, 0x0871);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_C, Whole_Rig, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_C, Hand_Rig, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicMan_C, Play_Anim_On_Jumpscare, 0x0888);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADJMusicMan_C, 0x0889);
		}

		// class ASeekerPatrolPath_C : public APatrolPath_C
		TEST_METHOD(BlueprintGeneratedClass__SeekerPatrolPath__SeekerPatrolPath_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeekerPatrolPath_C, UberGraphFrame, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeekerPatrolPath_C, PathType, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeekerPatrolPath_C, UnknownData_YT0Z, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASeekerPatrolPath_C, PathName, 0x0264);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASeekerPatrolPath_C, 0x026C);
		}

		// class UInteractibleInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__InteractibleInterface__InteractibleInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractibleInterface_C, 0x0028);
		}

		// class UFreddyLookAtGregory_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FreddyLookAtGregory__FreddyLookAtGregory_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyLookAtGregory_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddyLookAtGregory_C, DoInterp, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFreddyLookAtGregory_C, 0x00B1);
		}

		// class APRE_PartsandService_Door_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PRE_PartsandService_Door__PRE_PartsandService_Door_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartsandService_Door_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartsandService_Door_C, Ak, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartsandService_Door_C, CylinderDoorLock, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartsandService_Door_C, Box, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartsandService_Door_C, StaticMesh, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartsandService_Door_C, Door, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartsandService_Door_C, DoorOpeningTimeline_DoorOpenNormalizedValue_33D1055F4EE92B03E7D7BDA5EB032E3F, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartsandService_Door_C, DoorOpeningTimeline__Direction_33D1055F4EE92B03E7D7BDA5EB032E3F, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartsandService_Door_C, UnknownData_5RO0, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartsandService_Door_C, DoorOpeningTimeline, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartsandService_Door_C, Characters_in_Door, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartsandService_Door_C, IsLocked, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartsandService_Door_C, CanTriggerLockedState, 0x0279);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_PartsandService_Door_C, 0x027A);
		}

		// class UMeshReconstructorBase : public UObject
		TEST_METHOD(Class__MRMesh__MeshReconstructorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshReconstructorBase, 0x0028);
		}

		// class UMockDataMeshTrackerComponent : public USceneComponent
		TEST_METHOD(Class__MRMesh__MockDataMeshTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, OnMeshTrackerUpdated, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, ScanWorld, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, RequestNormals, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, RequestVertexConfidence, 0x0202);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorMode, 0x0203);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_SUIQ, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, BlockVertexColors, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorFromConfidenceZero, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorFromConfidenceOne, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UpdateInterval, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_1W1R, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, MRMesh, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_YYAT, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMockDataMeshTrackerComponent, 0x0260);
		}

		// class UMRMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__MRMesh__MRMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_UO5M, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, Material, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bCreateMeshProxySections, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bUpdateNavMeshOnMeshUpdate, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bNeverCreateCollisionMesh, 0x0402);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_GY9R, 0x0403);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, CachedBodySetup, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, BodySetups, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, WireframeMaterial, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_DBO2, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMRMeshComponent, 0x0470);
		}

		// class UImpactShake_Land_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__ImpactShake_Land__ImpactShake_Land_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImpactShake_Land_C, 0x0160);
		}

		// class UImpactShake_Jump_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__ImpactShake_Jump__ImpactShake_Jump_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImpactShake_Jump_C, 0x0160);
		}

		// class UFindPlayersHidingLocation_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FindPlayersHidingLocation__FindPlayersHidingLocation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindPlayersHidingLocation_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindPlayersHidingLocation_C, PlayersHideActorKey, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindPlayersHidingLocation_C, SearchLocationKey, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindPlayersHidingLocation_C, 0x0100);
		}

		// class UStaffbot_Fazertag_LINK_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Staffbot_Fazertag_LINK__Staffbot_Fazertag_LINK_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Fazertag_LINK_C, UnknownData_KS0X, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Fazertag_LINK_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Fazertag_LINK_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Fazertag_LINK_C, AnimGraphNode_TransitionResult_5, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Fazertag_LINK_C, AnimGraphNode_TransitionResult_4, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Fazertag_LINK_C, AnimGraphNode_TransitionResult_3, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Fazertag_LINK_C, AnimGraphNode_TransitionResult_2, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Fazertag_LINK_C, AnimGraphNode_TransitionResult, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Fazertag_LINK_C, AnimGraphNode_SequencePlayer_4, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Fazertag_LINK_C, AnimGraphNode_StateResult_4, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Fazertag_LINK_C, AnimGraphNode_SequencePlayer_3, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Fazertag_LINK_C, AnimGraphNode_StateResult_3, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Fazertag_LINK_C, AnimGraphNode_SequencePlayer_2, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Fazertag_LINK_C, AnimGraphNode_StateResult_2, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Fazertag_LINK_C, AnimGraphNode_SequencePlayer, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Fazertag_LINK_C, AnimGraphNode_StateResult, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Fazertag_LINK_C, AnimGraphNode_StateMachine, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Fazertag_LINK_C, CanSeePlayer, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Fazertag_LINK_C, CanFireLaser, 0x06C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Fazertag_LINK_C, Stunned, 0x06C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Fazertag_LINK_C, canDie, 0x06C3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaffbot_Fazertag_LINK_C, 0x06C4);
		}

		// class ULiveLinkMagicLeapHandTrackingSourceFactory : public ULiveLinkSourceFactory
		TEST_METHOD(Class__MagicLeapHandTracking__LiveLinkMagicLeapHandTrackingSourceFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkMagicLeapHandTrackingSourceFactory, 0x0028);
		}

		// class UMagicLeapHandTrackingFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapHandTracking__MagicLeapHandTrackingFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHandTrackingFunctionLibrary, 0x0028);
		}

		// class AFirstAid_HidePoint_C : public AHideInActor_C
		TEST_METHOD(BlueprintGeneratedClass__FirstAid_HidePoint__FirstAid_HidePoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstAid_HidePoint_C, UnknownData_HOU5, 0x0325);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstAid_HidePoint_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstAid_HidePoint_C, Arrow1, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstAid_HidePoint_C, SpotLight, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstAid_HidePoint_C, Collision, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstAid_HidePoint_C, SkeletalMesh, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFirstAid_HidePoint_C, PlayerDetector, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFirstAid_HidePoint_C, 0x0358);
		}

		// class UClothConfigNv : public UClothConfigCommon
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothConfigNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ClothingWindMethod, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_6JCK, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, VerticalConstraint, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, HorizontalConstraint, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, BendConstraint, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ShearConstraint, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionRadius, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionStiffness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionCullScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, Damping, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, Friction, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindDragCoefficient, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindLiftCoefficient, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, LinearDrag, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AngularDrag, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, LinearInertiaScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AngularInertiaScale, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, CentrifugalInertiaScale, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SolverFrequency, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, StiffnessFrequency, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, GravityScale, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, GravityOverride, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, bUseGravityOverride, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_LC04, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, TetherStiffness, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, TetherLimit, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, CollisionThickness, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AnimDriveSpringStiffness, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AnimDriveDamperStiffness, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindMethod, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_Y2L2, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, VerticalConstraintConfig, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, HorizontalConstraintConfig, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, BendConstraintConfig, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ShearConstraintConfig, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigNv, 0x0140);
		}

		// class UClothingSimulationFactoryNv : public UClothingSimulationFactory
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothingSimulationFactoryNv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactoryNv, 0x0028);
		}

		// class UClothingSimulationInteractorNv : public UClothingSimulationInteractor
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothingSimulationInteractorNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractorNv, UnknownData_5WFG, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractorNv, 0x0040);
		}

		// class UClothPhysicalMeshDataNv_Legacy : public UClothPhysicalMeshDataBase_Legacy
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothPhysicalMeshDataNv_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, MaxDistances, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, BackstopDistances, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, BackstopRadiuses, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, AnimDriveMultipliers, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothPhysicalMeshDataNv_Legacy, 0x0120);
		}

		// class UWI_Gregory_Stamina_C : public UWI_Empty_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_Gregory_Stamina__WI_Gregory_Stamina_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Stamina_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Stamina_C, FlashEmpty, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Stamina_C, FadeOut, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Stamina_C, FadeIn, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Stamina_C, StaminaMeterDynamic, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Stamina_C, StaminaMeterFrame, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Stamina_C, PowerLevelDispatch, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Stamina_C, Interact_Dynamic_Mat, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Stamina_C, OutOfStaminaBorder, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Stamina_C, FullStaminaBorder, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Stamina_C, Stamina, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Stamina_C, FlashingEmpty, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_Gregory_Stamina_C, 0x0299);
		}

		// class UAnimNotify_AkLoopingAudio_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__AnimNotify_AkLoopingAudio__AnimNotify_AkLoopingAudio_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkLoopingAudio_C, PlayEvent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkLoopingAudio_C, StopEvent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkLoopingAudio_C, Attach_Name, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkLoopingAudio_C, Follow, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkLoopingAudio_C, StopWhenAttachedToDestroyed, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkLoopingAudio_C, PlayRegardlessOfAudibleRange, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_AkLoopingAudio_C, 0x0053);
		}

		// class AGregoryEjectPawn_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__GregoryEjectPawn__GregoryEjectPawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregoryEjectPawn_C, UberGraphFrame, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregoryEjectPawn_C, LevelStreamViewpoint, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregoryEjectPawn_C, Camera, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregoryEjectPawn_C, SplineFollowMovement, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregoryEjectPawn_C, DefaultSceneRoot, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregoryEjectPawn_C, SplineComponent, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregoryEjectPawn_C, OriginalPawn, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregoryEjectPawn_C, isSplineFollowDone, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGregoryEjectPawn_C, 0x02C1);
		}

		// class USequenceDirector_C : public ULevelSequenceDirector
		TEST_METHOD(BlueprintGeneratedClass__MontyOutro_Shot100__SequenceDirector_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceDirector_C, UberGraphFrame, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceDirector_C, 0x0038);
		}

		// class UChangesNotAppliedPopUp_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ChangesNotAppliedPopUp__ChangesNotAppliedPopUp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChangesNotAppliedPopUp_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChangesNotAppliedPopUp_C, BackButton, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChangesNotAppliedPopUp_C, ExitWithoutSavingButton, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChangesNotAppliedPopUp_C, Menu_Popup_Image, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChangesNotAppliedPopUp_C, CloseThisPrompt, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChangesNotAppliedPopUp_C, ExitWithoutSaving, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChangesNotAppliedPopUp_C, BackHadFocus, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChangesNotAppliedPopUp_C, 0x0271);
		}

		// class APathBlockedByDoor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PathBlockedByDoor__PathBlockedByDoor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APathBlockedByDoor_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APathBlockedByDoor_C, AIDetectorSpecial, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APathBlockedByDoor_C, Arrow, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APathBlockedByDoor_C, AIDetector, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APathBlockedByDoor_C, DefaultSceneRoot, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APathBlockedByDoor_C, Door, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APathBlockedByDoor_C, BBPathBlocked, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APathBlockedByDoor_C, ActorWaiting, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APathBlockedByDoor_C, BBDoor, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APathBlockedByDoor_C, AlertDispatcher, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APathBlockedByDoor_C, EndAlertDispatcher, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APathBlockedByDoor_C, FreddyVOLines, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APathBlockedByDoor_C, SoundSource, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APathBlockedByDoor_C, fired, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APathBlockedByDoor_C, LastState, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APathBlockedByDoor_C, UnknownData_2NLL, 0x02EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::APathBlockedByDoor_C, BBSawPathBecomeBlocked, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APathBlockedByDoor_C, SawPathBecomeBlocked, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APathBlockedByDoor_C, UnknownData_IUWC, 0x02F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APathBlockedByDoor_C, BBChase, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APathBlockedByDoor_C, ShouldChaseOnOpenDoor, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APathBlockedByDoor_C, UnknownData_M5RT, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::APathBlockedByDoor_C, PathBlockedBB, 0x0304);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APathBlockedByDoor_C, 0x030C);
		}

		// class AFreddyAIController_C : public AAIController
		TEST_METHOD(BlueprintGeneratedClass__FreddyAIController__FreddyAIController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, UberGraphFrame, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, ClosestPowerStation_Actor, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, ClosestPowerStation_Distance, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, FreddyShouldFollow, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, UnknownData_NW8T, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, FreddyRotationCounter, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, FreddyRotationAngle, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, NumOfFreddyRotations, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, isFreddyNearStation, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, UnknownData_0WE5, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, GregoryKey, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, FreddyPowerTimer, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, StateKey, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, BehaviourTree, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, DeleteSelfOnReachedPowerStation, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, InsideStation, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, UnknownData_I1YI, 0x037A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, deltaTime, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, TurnInPlaceLerpAlpha, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, UnknownData_0DUK, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, Freddy, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, NewVar_1, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, UnknownData_TQZJ, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, AttemptDestroyTimer, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyAIController_C, MoveToLocationKey, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFreddyAIController_C, 0x03B0);
		}

		// class ASyrupVatsEntryTime_Trigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__SyrupVatsEntryTime_Trigger__SyrupVatsEntryTime_Trigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASyrupVatsEntryTime_Trigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASyrupVatsEntryTime_Trigger_C, TimeCheckComponent, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASyrupVatsEntryTime_Trigger_C, 0x0288);
		}

		// class APRE_ElevatorDoor_Master_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PRE_ElevatorDoor_Master__PRE_ElevatorDoor_Master_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, Ak, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, Door, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, IndustrialDoor_IndustrialE_01, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, IndustrialDoor_IndustrialE_02, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, DefaultSceneRoot, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, TempAnim, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, UnknownData_DPXG, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, P_DoorSweep, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, P_Open, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, UnknownData_PS6B, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, P_CurrentOpenPercent, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, P_DeltaSeconds, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, OpenDelay, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, CloseDelay, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, LocationClosed, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, LocationOpen, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, Sweep, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, UnknownData_NYE9, 0x0295);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, DoorSweep, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, P_Box, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, Overlap, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, UnknownData_6OMP, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, OnOverlapBegin, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, OnOverlapEnd, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, OpenEvent, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_ElevatorDoor_Master_C, CloseEvent, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_ElevatorDoor_Master_C, 0x0300);
		}

		// class UVanny_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Vanny_ABP__Vanny_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, UnknownData_T95I, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_TransitionResult_11, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_TransitionResult_10, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_TransitionResult_9, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_TransitionResult_8, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_TransitionResult_7, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_TransitionResult_6, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_TransitionResult_5, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_TransitionResult_4, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_SequencePlayer_15, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_StateResult_7, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_StateResult_6, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_SequencePlayer_14, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_BlendListByBool, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_SequencePlayer_13, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_StateResult_5, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_TransitionResult_3, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_TransitionResult_2, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_TransitionResult, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_SequencePlayer_12, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_SequencePlayer_11, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_SequencePlayer_10, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_SequencePlayer_9, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_SequencePlayer_8, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_SequencePlayer_7, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_SequencePlayer_6, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_SequencePlayer_5, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_BlendListByEnum_2, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_StateResult_4, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_SequencePlayer_4, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_StateResult_3, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_StateMachine_2, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_StateResult_2, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_SequencePlayer_3, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_StateResult, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_StateMachine, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, UnknownData_9QLY, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_TwoBoneIK_2, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_TwoBoneIK, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_LocalToComponentSpace, 0x1210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_SaveCachedPose, 0x1230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_UseCachedPose, 0x12E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_ModifyBone_7, 0x1310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_ModifyBone_6, 0x1418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_BlendListByEnum, 0x1520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_SequencePlayer_2, 0x15D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_SpringBone_4, 0x1648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_SpringBone_3, 0x1770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_ModifyBone_5, 0x1898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_ModifyBone_4, 0x19A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, UnknownData_N2FI, 0x1AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_LookAt_4, 0x1AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_LookAt_3, 0x1C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_LayeredBoneBlend, 0x1E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_SequencePlayer, 0x1ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_Root, 0x1F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_SpringBone_2, 0x1F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_SpringBone, 0x20A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_ModifyBone_3, 0x21C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_ModifyBone_2, 0x22D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, UnknownData_17GK, 0x23D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_LookAt_2, 0x23E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_LookAt, 0x2590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_ComponentToLocalSpace, 0x2740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_AnimDynamics_2, 0x2760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_AnimDynamics, 0x2BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_Slot, 0x2FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimGraphNode_ModifyBone, 0x3028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, DeltaTimeX, 0x3130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, isMoving, 0x3134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, UnknownData_YVL0, 0x3135);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, MoveSpeedInput, 0x3138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, IsHeadAiming, 0x313C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, UnknownData_0808, 0x313D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, HeadAimAlpha, 0x3140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, HeadAimRot, 0x3144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, PVTarget_L, 0x3150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, IKEffector_L, 0x315C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, IKEffector_R, 0x3168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, PVTarget_R, 0x3174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, Pawn, 0x3180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, HeadAimTarget, 0x3188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, IK_Interp_Speed, 0x3194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, IsSpotted, 0x3198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, UnknownData_I6FX, 0x3199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, SpottedDelayTime, 0x319C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, SpottedTimer, 0x31A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AlertLevel, 0x31A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, ScanVariation, 0x31AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, TurnDegrees, 0x31B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, HideType, 0x31B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, CanTurn, 0x31B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, CanScan, 0x31B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, IsSearching, 0x31B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, canJumpscare, 0x31B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, UnknownData_7TRS, 0x31B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, RandomRunSelector, 0x31BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, RandomWalkSelector, 0x31C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, UnknownData_DJEC, 0x31C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, NewVar_1, 0x31D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, EarsAlphaBlend, 0x3200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, ChestAimAlpha, 0x3204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, Stop_L, 0x3208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, CanRun, 0x3209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, IsPreview, 0x320A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, UnknownData_1YF2, 0x320B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, RunRate, 0x320C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, WalkRate, 0x3210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, AnimationModeEnum, 0x3214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, UnknownData_TN7U, 0x3215);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, CutSceneAnim, 0x3218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, LoopCutScene, 0x3220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, IK_legs, 0x3221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, UnknownData_FBXN, 0x3222);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVanny_ABP_C, NewVar_2, 0x3224);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVanny_ABP_C, 0x3230);
		}

		// class AEscapePlan_MissionTrigger_Blueprint_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__EscapePlan_MissionTrigger_Blueprint__EscapePlan_MissionTrigger_Blueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEscapePlan_MissionTrigger_Blueprint_C, Trigger1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEscapePlan_MissionTrigger_Blueprint_C, Trigger0, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEscapePlan_MissionTrigger_Blueprint_C, Scene, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEscapePlan_MissionTrigger_Blueprint_C, PlanC, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEscapePlan_MissionTrigger_Blueprint_C, PlanB, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEscapePlan_MissionTrigger_Blueprint_C, 0x0250);
		}

		// class UAlerterInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__AlerterInterface__AlerterInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlerterInterface_C, 0x0028);
		}

		// class UMoveToFreddyInteractible_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__MoveToFreddyInteractible__MoveToFreddyInteractible_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveToFreddyInteractible_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveToFreddyInteractible_C, FreddyInteractibleKey, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoveToFreddyInteractible_C, 0x00D8);
		}

		// class UFollowSpline_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FollowSpline__FollowSpline_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFollowSpline_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFollowSpline_C, BBSplineManager, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFollowSpline_C, BBMovementSpeed, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFollowSpline_C, SplineFollowContext, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFollowSpline_C, Location, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFollowSpline_C, 0x0124);
		}

		// class AShootingBall_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ShootingBall__ShootingBall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AShootingBall_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShootingBall_C, PointLight, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShootingBall_C, ProjectileMovement, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShootingBall_C, BallMesh, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShootingBall_C, Sphere, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShootingBall_C, Shooter, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShootingBall_C, 0x0258);
		}

		// class UWI_InstructionCard_Crouch_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_Crouch__WI_InstructionCard_Crouch_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_Crouch_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_Crouch_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_Crouch_C, UI_TextAndIcons, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_Crouch_C, VerticalBox_250, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_Crouch_C, WI_ImageScaled, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_Crouch_C, 0x0258);
		}

		// class UWI_InstructionCard_PAS_FinishProcedure_Claws_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_PAS_FinishProcedure_Claws__WI_InstructionCard_PAS_FinishProcedure_Claws_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_Claws_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_Claws_C, Console_TextAndIcons, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_Claws_C, Image_18_Template, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_Claws_C, PC_TextAndIcons, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_Claws_C, TextBlock_48_Title, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_Claws_C, VerticalBox_250, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_Claws_C, WI_ImageScaled, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_PAS_FinishProcedure_Claws_C, 0x0268);
		}

		// class AEQ_Flashbeacon_C : public AEquippable_C
		TEST_METHOD(BlueprintGeneratedClass__EQ_Flashbeacon__EQ_Flashbeacon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashbeacon_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashbeacon_C, SpotLight, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashbeacon_C, MOD_Freddy_Camera_02, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashbeacon_C, TextRender, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashbeacon_C, TimerHandle, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashbeacon_C, CanUse_, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashbeacon_C, UnknownData_BZSR, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashbeacon_C, CoolDownTime, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQ_Flashbeacon_C, GregoryOverlay, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEQ_Flashbeacon_C, 0x0278);
		}

		// class APre_Speaker_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Pre_Speaker__Pre_Speaker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APre_Speaker_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APre_Speaker_C, Cube, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APre_Speaker_C, Scene, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APre_Speaker_C, music, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APre_Speaker_C, 0x0248);
		}

		// class UPlayerDistanceService_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__PlayerDistanceService__PlayerDistanceService_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerDistanceService_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerDistanceService_C, BBDistance, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerDistanceService_C, 0x00C8);
		}

		// class UPlayFreddyInteractibleVO_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__PlayFreddyInteractibleVO__PlayFreddyInteractibleVO_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFreddyInteractibleVO_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFreddyInteractibleVO_C, FreddyInteractibleKey, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFreddyInteractibleVO_C, VOType, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFreddyInteractibleVO_C, 0x00D9);
		}

		// class UWI_MessageHeader_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_MessageHeader__WI_MessageHeader_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_MessageHeader_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_MessageHeader_C, ExpandableArea_787, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_MessageHeader_C, Header, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_MessageHeader_C, MessageBox, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_MessageHeader_C, MessageDetails, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_MessageHeader_C, Children, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_MessageHeader_C, 0x0268);
		}

		// class AFlashlightRechargeStation_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__FlashlightRechargeStation__FlashlightRechargeStation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, MOD_FlashlightRechargeStation_Hat, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, MissionStateCondition, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, SpotLight, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, Lamp_02, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, SM_ControlPanel04, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, ProgressUI, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, Flashlight, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, PlayerInteractHoldComponent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, PlayerTrigger, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, FlashLightStationMesh, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, MOD_FlashlightRechargeStation_02, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, MOD_FlashlightRechargeStation_01, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, InventoryConditional, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, recharge_display_timeline_NewTrack_0_268DCBDE46097A0C357CB3B3DEE270C7, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, recharge_display_timeline__Direction_268DCBDE46097A0C357CB3B3DEE270C7, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, UnknownData_9X5W, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, recharge_display_timeline, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, StationMovement_Close_9F4B594B4AD9D36739974E84FF208836, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, StationMovement_Open_9F4B594B4AD9D36739974E84FF208836, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, StationMovement__Direction_9F4B594B4AD9D36739974E84FF208836, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, UnknownData_6VST, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, StationMovement, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, Opening_, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, UnknownData_SO0K, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, RechargeTime, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, RechargeTimeElapsed, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, ClosedCompletely, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, State, 0x02CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, UnknownData_GDHN, 0x02CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightRechargeStation_C, RechargeStation_Material, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFlashlightRechargeStation_C, 0x02D8);
		}

		// class AMoonmanSequenceActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__MoonmanSequenceActor__MoonmanSequenceActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSequenceActor_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSequenceActor_C, SpotLight, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSequenceActor_C, Mesh, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSequenceActor_C, DefaultSceneRoot, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSequenceActor_C, bFollowPlayer, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSequenceActor_C, UnknownData_WRGD, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSequenceActor_C, GregoryPawn, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSequenceActor_C, ProximityCounter, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSequenceActor_C, UnknownData_1XAB, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSequenceActor_C, MoonmanSpawnPoint, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSequenceActor_C, IsDeathSeqOn, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSequenceActor_C, HasRenderedOnce, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSequenceActor_C, UnknownData_3CSH, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSequenceActor_C, MoonmanBlinkDistance, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSequenceActor_C, EyeBlinkUI, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSequenceActor_C, ActorZAxis, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSequenceActor_C, UnknownData_QFR9, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSequenceActor_C, DBG_MaterialMapping, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanSequenceActor_C, RandomVO, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMoonmanSequenceActor_C, 0x02A0);
		}

		// class ABallCannonOffice_C : public ABallCannon_C
		TEST_METHOD(BlueprintGeneratedClass__BallCannonOffice__BallCannonOffice_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonOffice_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonOffice_C, OfficeGame, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallCannonOffice_C, PowerDrainPerShot, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABallCannonOffice_C, 0x033C);
		}

		// class AAIHideCueTester_C : public AAIHideWorldCue_C
		TEST_METHOD(BlueprintGeneratedClass__AIHideCueTester__AIHideCueTester_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIHideCueTester_C, 0x0238);
		}

		// class UARSessionConfig : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARSessionConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateMeshDataFromTrackedGeometry, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateCollisionForMeshData, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateNavMeshForMeshData, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseMeshDataForOcclusion, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bRenderMeshDataInWireframe, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bTrackSceneObjects, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUsePersonSegmentationForOcclusion, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, WorldAlignment, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SessionType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PlaneDetectionMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bHorizontalPlaneDetection, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bVerticalPlaneDetection, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutoFocus, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, LightEstimationMode, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FrameSyncMode, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutomaticCameraOverlay, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutomaticCameraTracking, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bResetCameraTracking, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bResetTrackedObjects, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_9723, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, CandidateImages, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, MaxNumSimultaneousImagesTracked, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnvironmentCaptureProbeType, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_Q56Y, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, WorldMapData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, CandidateObjects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, DesiredVideoFormat, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceTrackingDirection, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceTrackingUpdate, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_BVOS, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SerializedARCandidateImageDatabase, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnabledSessionTrackingFeature, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_6H76, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSessionConfig, 0x00A8);
		}

		// class UARLightEstimate : public UObject
		TEST_METHOD(Class__AugmentedReality__ARLightEstimate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARLightEstimate, 0x0028);
		}

		// class UARBasicLightEstimate : public UARLightEstimate
		TEST_METHOD(Class__AugmentedReality__ARBasicLightEstimate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientIntensityLumens, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientColorTemperatureKelvin, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientColor, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBasicLightEstimate, 0x0040);
		}

		// class UARCandidateImage : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARCandidateImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, CandidateTexture, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, FriendlyName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Width, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Height, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Orientation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, UnknownData_GFD9, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARCandidateImage, 0x0058);
		}

		// class UARBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AugmentedReality__ARBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBlueprintLibrary, 0x0028);
		}

		// class UARTraceResultLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AugmentedReality__ARTraceResultLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTraceResultLibrary, 0x0028);
		}

		// class UARBaseAsyncTaskBlueprintProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__AugmentedReality__ARBaseAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBaseAsyncTaskBlueprintProxy, UnknownData_VOEO, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBaseAsyncTaskBlueprintProxy, 0x0050);
		}

		// class UARSaveWorldAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__ARSaveWorldAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, UnknownData_LSOC, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSaveWorldAsyncTaskBlueprintProxy, 0x0080);
		}

		// class UARGetCandidateObjectAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__ARGetCandidateObjectAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, UnknownData_WHRU, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, 0x0098);
		}

		// class AAROriginActor : public AActor
		TEST_METHOD(Class__AugmentedReality__AROriginActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAROriginActor, 0x0228);
		}

		// class UARPin : public UObject
		TEST_METHOD(Class__AugmentedReality__ARPin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, TrackedGeometry, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, PinnedComponent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_TXY9, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, LocalToTrackingTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, LocalToAlignedTrackingTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, TrackingState, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_JSY6, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, OnARTrackingStateChanged, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, OnARTransformUpdated, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_AJ99, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPin, 0x00F0);
		}

		// class AARSharedWorldGameMode : public AGameMode
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameMode, BufferSizePerChunk, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameMode, UnknownData_W4M8, 0x0314);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldGameMode, 0x0378);
		}

		// class AARSharedWorldGameState : public AGameState
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageData, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldData, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageBytesTotal, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldBytesTotal, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageBytesDelivered, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldBytesDelivered, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, UnknownData_XJME, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldGameState, 0x02D0);
		}

		// class AARSharedWorldPlayerController : public APlayerController
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldPlayerController, UnknownData_2C8D, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldPlayerController, 0x0580);
		}

		// class AARSkyLight : public ASkyLight
		TEST_METHOD(Class__AugmentedReality__ARSkyLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSkyLight, CaptureProbe, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSkyLight, UnknownData_F0ZQ, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSkyLight, 0x0248);
		}

		// class UARTexture : public UTexture
		TEST_METHOD(Class__AugmentedReality__ARTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, TextureType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, UnknownData_STVD, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, Timestamp, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, ExternalTextureGuid, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, Size, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTexture, 0x00D8);
		}

		// class UARTextureCameraImage : public UARTexture
		TEST_METHOD(Class__AugmentedReality__ARTextureCameraImage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTextureCameraImage, 0x00D8);
		}

		// class UARTextureCameraDepth : public UARTexture
		TEST_METHOD(Class__AugmentedReality__ARTextureCameraDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, DepthQuality, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, DepthAccuracy, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, bIsTemporallySmoothed, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, UnknownData_20R6, 0x00DB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTextureCameraDepth, 0x00E0);
		}

		// class UAREnvironmentCaptureProbeTexture : public UTextureCube
		TEST_METHOD(Class__AugmentedReality__AREnvironmentCaptureProbeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, TextureType, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, UnknownData_MWWV, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, Timestamp, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, ExternalTextureGuid, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, Size, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentCaptureProbeTexture, 0x0130);
		}

		// class UARTraceResultDummy : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTraceResultDummy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTraceResultDummy, 0x0028);
		}

		// class UARTrackedGeometry : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTrackedGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UniqueId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_HN1M, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LocalToTrackingTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LocalToAlignedTrackingTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, TrackingState, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_2P3W, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnderlyingMesh, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, ObjectClassification, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_V3FP, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LastUpdateFrameNumber, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_RCXU, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, DebugName, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedGeometry, 0x00E8);
		}

		// class UARPlaneGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARPlaneGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, UnknownData_V9JT, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, Center, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, Extent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, UnknownData_X4FY, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, SubsumedBy, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPlaneGeometry, 0x0120);
		}

		// class UARTrackedPoint : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPoint, UnknownData_C1A1, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedPoint, 0x00F0);
		}

		// class UARTrackedImage : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, DetectedImage, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, EstimatedSize, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedImage, 0x00F8);
		}

		// class UARTrackedQRCode : public UARTrackedImage
		TEST_METHOD(Class__AugmentedReality__ARTrackedQRCode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, QRCode, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, Version, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, UnknownData_57W4, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedQRCode, 0x0110);
		}

		// class UARFaceGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARFaceGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, LookAtTarget, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, bIsTracked, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, UnknownData_Y5RF, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, BlendShapes, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, UnknownData_TAUY, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARFaceGeometry, 0x01E0);
		}

		// class UAREnvironmentCaptureProbe : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__AREnvironmentCaptureProbe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, UnknownData_GN40, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, UnknownData_JMPP, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, EnvironmentCaptureTexture, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentCaptureProbe, 0x0100);
		}

		// class UARTrackedObject : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedObject, DetectedObject, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedObject, 0x00F0);
		}

		// class UARTrackedPose : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPose, UnknownData_13ZO, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPose, UnknownData_8RQ7, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedPose, 0x0140);
		}

		// class UARTrackableNotifyComponent : public UActorComponent
		TEST_METHOD(Class__AugmentedReality__ARTrackableNotifyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedGeometry, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedGeometry, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedGeometry, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedPlane, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedPlane, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedPlane, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedPoint, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedPoint, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedPoint, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedImage, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedImage, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedImage, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedFace, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedFace, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedFace, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedEnvProbe, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedEnvProbe, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedEnvProbe, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedObject, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedObject, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedObject, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackableNotifyComponent, 0x0200);
		}

		// class UARTypesDummyClass : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTypesDummyClass)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTypesDummyClass, 0x0028);
		}

		// class UARCandidateObject : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARCandidateObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, CandidateObjectData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, FriendlyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, BoundingBox, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, UnknownData_GNNH, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARCandidateObject, 0x0070);
		}

		// class URIG_PhotoBooth_Skeleton_AnimBlueprint_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__RIG_PhotoBooth_Skeleton_AnimBlueprint__RIG_PhotoBooth_Skeleton_AnimBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_PhotoBooth_Skeleton_AnimBlueprint_C, UnknownData_M0B2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_PhotoBooth_Skeleton_AnimBlueprint_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_PhotoBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_PhotoBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_TransitionResult_3, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_PhotoBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_TransitionResult_2, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_PhotoBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_TransitionResult, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_PhotoBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_SequencePlayer_2, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_PhotoBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_StateResult_2, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_PhotoBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_SequencePlayer, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_PhotoBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_StateResult, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_PhotoBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_StateMachine, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_PhotoBooth_Skeleton_AnimBlueprint_C, AnimGraphNode_Slot, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_PhotoBooth_Skeleton_AnimBlueprint_C, IsBeingSearched, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::URIG_PhotoBooth_Skeleton_AnimBlueprint_C, IsPeeking, 0x0569);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URIG_PhotoBooth_Skeleton_AnimBlueprint_C, 0x056A);
		}

		// class AEndo_C : public AAISeeker_C
		TEST_METHOD(BlueprintGeneratedClass__Endo__Endo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEndo_C, UnknownData_JS5H, 0x07F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEndo_C, UberGraphFrame, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEndo_C, RightFootVisual, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEndo_C, LeftFootVisual, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEndo_C, WaistVisual, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEndo_C, RightVisual, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEndo_C, LeftVisual, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEndo_C, BBIsBeingWatched, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEndo_C, SightLocations, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEndo_C, BBState, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEndo_C, AIPatrolPath, 0x0848);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEndo_C, 0x0870);
		}

		// class ACautionBotController_C : public AAIController
		TEST_METHOD(BlueprintGeneratedClass__CautionBotController__CautionBotController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACautionBotController_C, UberGraphFrame, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACautionBotController_C, BBInitialYaw, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACautionBotController_C, BBSpillLocation, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACautionBotController_C, 0x0348);
		}

		// class ULevelVariantSets : public UObject
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSets)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, DirectorClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, VariantSets, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, UnknownData_WTQ9, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelVariantSets, 0x0090);
		}

		// class ALevelVariantSetsActor : public AActor
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSetsActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelVariantSetsActor, LevelVariantSets, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelVariantSetsActor, 0x0240);
		}

		// class ULevelVariantSetsFunctionDirector : public UObject
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSetsFunctionDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSetsFunctionDirector, UnknownData_A1NL, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelVariantSetsFunctionDirector, 0x0040);
		}

		// class UPropertyValue : public UObject
		TEST_METHOD(Class__VariantManagerContent__PropertyValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_WE58, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, Properties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertyIndices, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, CapturedPropSegments, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, FullDisplayString, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertySetterName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertySetterParameterDefaults, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, bHasRecordedData, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_HRDP, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, LeafPropertyClass, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_LSAZ, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, ValueBytes, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropCategory, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_UU38, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValue, 0x01B8);
		}

		// class UPropertyValueTransform : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueTransform)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueTransform, 0x01B8);
		}

		// class UPropertyValueVisibility : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueVisibility)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueVisibility, 0x01B8);
		}

		// class UPropertyValueColor : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueColor, 0x01B8);
		}

		// class UPropertyValueMaterial : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueMaterial)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueMaterial, 0x01B8);
		}

		// class UPropertyValueOption : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueOption)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueOption, 0x01B8);
		}

		// class UPropertyValueSoftObject : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueSoftObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueSoftObject, 0x01B8);
		}

		// class ASwitchActor : public AActor
		TEST_METHOD(Class__VariantManagerContent__SwitchActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, UnknownData_9QVT, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, SceneComponent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, LastSelectedOption, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, UnknownData_7JBE, 0x024C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASwitchActor, 0x0250);
		}

		// class UVariant : public UObject
		TEST_METHOD(Class__VariantManagerContent__Variant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, DisplayText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, UnknownData_FMOY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, ObjectBindings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, Thumbnail, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariant, 0x0070);
		}

		// class UVariantObjectBinding : public UObject
		TEST_METHOD(Class__VariantManagerContent__VariantObjectBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, CachedActorLabel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, ObjectPtr, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, LazyObjectPtr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, UnknownData_U77H, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, CapturedProperties, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, FunctionCallers, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantObjectBinding, 0x0090);
		}

		// class UVariantSet : public UObject
		TEST_METHOD(Class__VariantManagerContent__VariantSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, DisplayText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, UnknownData_KY49, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, bExpanded, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, UnknownData_SVCJ, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, Variants, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantSet, 0x0070);
		}

		// class UButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonWidgetStyle, ButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonWidgetStyle, 0x02A8);
		}

		// class UCheckBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__CheckBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxWidgetStyle, CheckBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxWidgetStyle, 0x05B0);
		}

		// class UComboBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxWidgetStyle, ComboBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxWidgetStyle, 0x0420);
		}

		// class UComboButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboButtonWidgetStyle, ComboButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboButtonWidgetStyle, 0x03E8);
		}

		// class UEditableTextBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBoxWidgetStyle, EditableTextBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBoxWidgetStyle, 0x0820);
		}

		// class UEditableTextWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextWidgetStyle, EditableTextStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextWidgetStyle, 0x0248);
		}

		// class UProgressWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ProgressWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressWidgetStyle, ProgressBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressWidgetStyle, 0x01D0);
		}

		// class UScrollBarWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBarWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBarWidgetStyle, ScrollBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBarWidgetStyle, 0x0500);
		}

		// class UScrollBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxWidgetStyle, ScrollBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxWidgetStyle, 0x0258);
		}

		// class USlateSettings : public UObject
		TEST_METHOD(Class__Slate__SlateSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, bExplicitCanvasChildZOrder, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, UnknownData_6R1O, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateSettings, 0x0030);
		}

		// class USpinBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__SpinBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBoxWidgetStyle, SpinBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBoxWidgetStyle, 0x0318);
		}

		// class UTextBlockWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__TextBlockWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlockWidgetStyle, TextBlockStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlockWidgetStyle, 0x0298);
		}

		// class UToolMenuBase : public UObject
		TEST_METHOD(Class__Slate__ToolMenuBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolMenuBase, 0x0028);
		}

		// class USeedSelectionUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SeedSelectionUI__SeedSelectionUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USeedSelectionUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeedSelectionUI_C, Down_Button, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeedSelectionUI_C, SeedKey, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeedSelectionUI_C, Up_Button, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeedSelectionUI_C, SeedOptionsArray, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeedSelectionUI_C, SeedIndex, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeedSelectionUI_C, FirstHover_Up, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeedSelectionUI_C, FirstHover_Down, 0x0265);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USeedSelectionUI_C, 0x0266);
		}

		// class AFlashlightCollectible_C : public ACollectible_C
		TEST_METHOD(BlueprintGeneratedClass__FlashlightCollectible__FlashlightCollectible_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightCollectible_C, UnknownData_AHB0, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightCollectible_C, UberGraphFrame, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightCollectible_C, Flashlight, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlashlightCollectible_C, FlashlightAvailable, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFlashlightCollectible_C, 0x0299);
		}

		// class UWI_MIssions_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_MIssions__WI_MIssions_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_MIssions_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_MIssions_C, MissionBox, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_MIssions_C, ScrollBox, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_MIssions_C, Missions, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_MIssions_C, CurrentIndex, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_MIssions_C, Has_New, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_MIssions_C, UnknownData_M8I9, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_MIssions_C, axisInput, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_MIssions_C, Current_input, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_MIssions_C, Recent_Mission_Index, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_MIssions_C, 0x0274);
		}

		// class AStaffbotTaskPlacement_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__StaffbotTaskPlacement__StaffbotTaskPlacement_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotTaskPlacement_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotTaskPlacement_C, Platform, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotTaskPlacement_C, OverlapBox, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotTaskPlacement_C, SM_Prop, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotTaskPlacement_C, Billboard, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotTaskPlacement_C, HasProp, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotTaskPlacement_C, CanResetProp, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotTaskPlacement_C, DestroyProp, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotTaskPlacement_C, UnknownData_W7K1, 0x0253);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaffbotTaskPlacement_C, Staffbots, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaffbotTaskPlacement_C, 0x0268);
		}

		// class AMontyDropTellAnchor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__MontyDropTellAnchor__MontyDropTellAnchor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyDropTellAnchor_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyDropTellAnchor_C, Sphere, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyDropTellAnchor_C, DefaultSceneRoot, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMontyDropTellAnchor_C, 0x0240);
		}

		// class UPOIDetection_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__POIDetection__POIDetection_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPOIDetection_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPOIDetection_C, POIDetectionRadius, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPOIDetection_C, POIHeatThreshold, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPOIDetection_C, PointOfInterestIndexKey, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPOIDetection_C, PointOfInterestRoomKey, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPOIDetection_C, PointOfInterestLocationKey, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPOIDetection_C, POIs, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPOIDetection_C, 0x0130);
		}

		// class USightDetectionService_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__SightDetectionService__SightDetectionService_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USightDetectionService_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USightDetectionService_C, WasSetup, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USightDetectionService_C, 0x00A1);
		}

		// class AShatteredMonty_C : public AAISeeker_C
		TEST_METHOD(BlueprintGeneratedClass__ShatteredMonty__ShatteredMonty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredMonty_C, UnknownData_3V0U, 0x07F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredMonty_C, UberGraphFrame, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredMonty_C, HidingLocationKey, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredMonty_C, PlayerKey, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredMonty_C, IsHidingKey, 0x0810);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShatteredMonty_C, 0x0818);
		}

		// class UMissionStateHandler_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__MissionStateHandler__MissionStateHandler_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionStateHandler_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionStateHandler_C, MissionName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionStateHandler_C, TaskState, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionStateHandler_C, Complete, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionStateHandler_C, UnknownData_DD3M, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionStateHandler_C, OnMissionStateHit, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionStateHandler_C, OnMissionStateAleadyHit, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionStateHandler_C, TaskStateEqual, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionStateHandler_C, 0x00E9);
		}

		// class UWI_InstructionCard_CallFreddy_Problem_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_CallFreddy_Problem__WI_InstructionCard_CallFreddy_Problem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CallFreddy_Problem_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CallFreddy_Problem_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CallFreddy_Problem_C, VerticalBox_250, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CallFreddy_Problem_C, WI_ImageScaled, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_CallFreddy_Problem_C, WI_ImageScaled_2, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_CallFreddy_Problem_C, 0x0258);
		}

		// class UWI_InstructionCard_PAS_FinishProcedure_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_PAS_FinishProcedure__WI_InstructionCard_PAS_FinishProcedure_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_C, Console_TextAndIcons, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_C, Image_18_Template, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_C, PC_TextAndIcons, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_C, TextBlock_48_Title, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_C, VerticalBox_250, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_FinishProcedure_C, WI_ImageScaled, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_PAS_FinishProcedure_C, 0x0268);
		}

		// class ABP_MasterHologram_01_Audio_01A_C : public ABP_MasterHologram_01_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MasterHologram_01_Audio_01A__BP_MasterHologram_01_Audio_01A_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_Audio_01A_C, UnknownData_07KL, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_Audio_01A_C, UberGraphFrame, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_Audio_01A_C, Audio_Component_3, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_Audio_01A_C, Audio_Component_2, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_Audio_01A_C, Use_Audio_, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_Audio_01A_C, Set_Audio_Component_at_BP_Origin_, 0x0309);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_Audio_01A_C, UnknownData_SSB3, 0x030A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_Audio_01A_C, Audio_File, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_Audio_01A_C, Use_2nd_Audio_Clip_, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_Audio_01A_C, UnknownData_3DMP, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_Audio_01A_C, Audio_File_2, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_Audio_01A_C, Volume_Intensity, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_Audio_01A_C, Attenuation_Min_Distance, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_Audio_01A_C, Attenuation_Max_Falloff_Distance, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MasterHologram_01_Audio_01A_C, Loop_Delay, 0x0334);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MasterHologram_01_Audio_01A_C, 0x0338);
		}

		// class USC_HoverComponent_C : public USceneComponent
		TEST_METHOD(BlueprintGeneratedClass__SC_HoverComponent__SC_HoverComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USC_HoverComponent_C, UberGraphFrame, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USC_HoverComponent_C, Parent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USC_HoverComponent_C, HoverDistance, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USC_HoverComponent_C, SpringCoeffient, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::USC_HoverComponent_C, DampiningCoeffient, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USC_HoverComponent_C, HoverDelta, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USC_HoverComponent_C, PreviousHoverDelta, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USC_HoverComponent_C, Grounded, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::USC_HoverComponent_C, UnknownData_GFNP, 0x0215);
			CHEAT_GEAR_CHECK_OFFSET(CG::USC_HoverComponent_C, LastGrounded, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USC_HoverComponent_C, CompressionRatio, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USC_HoverComponent_C, SurfaceImpactNormal, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USC_HoverComponent_C, UnknownData_HIZM, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USC_HoverComponent_C, Target, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USC_HoverComponent_C, 0x0238);
		}

		// class URandomWeightedBool_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__RandomWeightedBool__RandomWeightedBool_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomWeightedBool_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomWeightedBool_C, BooleanKey, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomWeightedBool_C, Weight, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URandomWeightedBool_C, 0x00DC);
		}

		// class UW_RacerOverlay_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_RacerOverlay__W_RacerOverlay_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_RacerOverlay_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_RacerOverlay_C, BestLapTime_Text, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_RacerOverlay_C, HudBackground_Image, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_RacerOverlay_C, LastLapTime_Text, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_RacerOverlay_C, PlayerRacePosition_Text, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_RacerOverlay_C, TextBlock_51, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_RacerOverlay_C, TextBlock_173, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_RacerOverlay_C, W_CountDown, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_RacerOverlay_C, W_Speedometer, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_RacerOverlay_C, Pawn, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_RacerOverlay_C, Gamemanger, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_RacerOverlay_C, PlayerData, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_RacerOverlay_C, VehicleRef, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_RacerOverlay_C, 0x02B8);
		}

		// class UEQGSpawnPoints_C : public UEnvQueryGenerator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__EQGSpawnPoints__EQGSpawnPoints_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQGSpawnPoints_C, SpawnType, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQGSpawnPoints_C, 0x0081);
		}

		// class ACutSceneActor_Staffbot_C : public ACutSceneActor_Base_C
		TEST_METHOD(BlueprintGeneratedClass__CutSceneActor_Staffbot__CutSceneActor_Staffbot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneActor_Staffbot_C, UnknownData_OOQZ, 0x026E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneActor_Staffbot_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneActor_Staffbot_C, StaffbotABP, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACutSceneActor_Staffbot_C, 0x0280);
		}

		// class AP_VukKartRacer_C : public AVCartVehicleAddedOnAfter_C
		TEST_METHOD(BlueprintGeneratedClass__P_VukKartRacer__P_VukKartRacer_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AP_VukKartRacer_C, 0x0380);
		}

		// class AFoldingGate_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__FoldingGate__FoldingGate_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoldingGate_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoldingGate_C, PlayerBlocker, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoldingGate_C, AIInteraction, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoldingGate_C, SkeletalMesh, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoldingGate_C, WorldState, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoldingGate_C, Scene, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoldingGate_C, Open, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoldingGate_C, UnknownData_8YZR, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFoldingGate_C, DoorManager, 0x0259);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFoldingGate_C, 0x0288);
		}

		// class AGatorGolfHoleManager_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__GatorGolfHoleManager__GatorGolfHoleManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorGolfHoleManager_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorGolfHoleManager_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorGolfHoleManager_C, HoleOrder, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorGolfHoleManager_C, CurrentIndex, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorGolfHoleManager_C, UnknownData_7KGI, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGatorGolfHoleManager_C, HolesActivated, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGatorGolfHoleManager_C, 0x0260);
		}

		// class USetHearingEnable_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__SetHearingEnable__SetHearingEnable_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetHearingEnable_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetHearingEnable_C, enable, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetHearingEnable_C, 0x00B1);
		}

		// class AA_Elevator_DoorSweep_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__A_Elevator_DoorSweep__A_Elevator_DoorSweep_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_DoorSweep_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_DoorSweep_C, Box_Top, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_DoorSweep_C, Box_Right, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_DoorSweep_C, Box_Left, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_DoorSweep_C, Box_Wall, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_DoorSweep_C, DefaultSceneRoot, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_DoorSweep_C, P_Boxes, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_DoorSweep_C, P_WallMinDistance, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_DoorSweep_C, P_WallMaxDistance, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_DoorSweep_C, P_DeltaSeconds, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_DoorSweep_C, P_Open, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_DoorSweep_C, UnknownData_X1NW, 0x0275);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_DoorSweep_C, P_CurrentOpenPercent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_DoorSweep_C, AutoSetup, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_DoorSweep_C, UnknownData_2FPL, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_DoorSweep_C, TransformReference, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_DoorSweep_C, UnknownData_IJ12, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_DoorSweep_C, TransformFallback, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AA_Elevator_DoorSweep_C, Settings, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AA_Elevator_DoorSweep_C, 0x0308);
		}

		// class AElevatorButton_C : public AButtonBase_C
		TEST_METHOD(BlueprintGeneratedClass__ElevatorButton__ElevatorButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AElevatorButton_C, UberGraphFrame, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AElevatorButton_C, Button_Mesh, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AElevatorButton_C, Color, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AElevatorButton_C, Slanted, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AElevatorButton_C, Can_Interact, 0x02ED);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AElevatorButton_C, 0x02EE);
		}

		// class UWI_EnemyFeedback_C : public UWI_Empty_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_EnemyFeedback__WI_EnemyFeedback_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_EnemyFeedback_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_EnemyFeedback_C, MoveUpAndFadeOut, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_EnemyFeedback_C, EnemyHitText, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_EnemyFeedback_C, 0x0258);
		}

		// class UBPI_Player_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_Player__BPI_Player_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_Player_C, 0x0028);
		}

		// class AMoonmanDeathCharacter_C : public ACharacter
		TEST_METHOD(BlueprintGeneratedClass__MoonmanDeathCharacter__MoonmanDeathCharacter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanDeathCharacter_C, UnknownData_3LFG, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanDeathCharacter_C, UberGraphFrame, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanDeathCharacter_C, Time, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanDeathCharacter_C, UnknownData_LTXV, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMoonmanDeathCharacter_C, DBG_MaterialMapping, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMoonmanDeathCharacter_C, 0x04E0);
		}

		// class AShootingBallMontyBoss_C : public AShootingBall_C
		TEST_METHOD(BlueprintGeneratedClass__ShootingBallMontyBoss__ShootingBallMontyBoss_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AShootingBallMontyBoss_C, UberGraphFrame, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShootingBallMontyBoss_C, 0x0260);
		}

		// class UMagicLeapAudioFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAudio__MagicLeapAudioFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapAudioFunctionLibrary, 0x0028);
		}

		// class UWI_Subtitles_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_Subtitles__WI_Subtitles_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, RichText, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, Spacer_30, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, Standalone, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, UnknownData_5I5Y, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, P_Time, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, P_EndTimer, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, P_LineStarts, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, P_LineStrings, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, P_Source, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, P_Radius, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, UnknownData_O68Z, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, P_Actor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, P_Lines, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, DisplaySource, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, TextLarge, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, UnknownData_IUX3, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, LinesToDisplay, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, P_ToRegisterSubtitleDialogueInfoTable, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, P_DeltaSeconds, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, MaxRadiusPercent, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, Debug, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, P_AllowTick, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, SubtitleIndex, 0x02D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, UnknownData_PIH4, 0x02D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, P_LastRadiusTime, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, L_FNAFGameInstance, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Subtitles_C, P_HighPriority, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_Subtitles_C, 0x02E1);
		}

		// class UWI_InstructionCard_FazerBlaster_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_FazerBlaster__WI_InstructionCard_FazerBlaster_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FazerBlaster_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FazerBlaster_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FazerBlaster_C, UI_TextAndIcons, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FazerBlaster_C, UI_TextAndIcons_2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FazerBlaster_C, VerticalBox_250, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_FazerBlaster_C, WI_ImageScaled, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_FazerBlaster_C, 0x0260);
		}

		// class UWI_InstructionCard_PAS_ReplaceFace_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_PAS_ReplaceFace__WI_InstructionCard_PAS_ReplaceFace_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ReplaceFace_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ReplaceFace_C, Console_TextAndIcons, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ReplaceFace_C, Image_18_Template, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ReplaceFace_C, PC_TextAndIcons, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ReplaceFace_C, TextBlock_48_Title, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ReplaceFace_C, VerticalBox_250, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ReplaceFace_C, WI_ImageScaled, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_PAS_ReplaceFace_C, 0x0268);
		}

		// class UWI_InstructionCard_PAS_OpenArm_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_PAS_OpenArm__WI_InstructionCard_PAS_OpenArm_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_OpenArm_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_OpenArm_C, Console_TextAndIcons, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_OpenArm_C, Image_18_Template, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_OpenArm_C, PC_TextAndIcons, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_OpenArm_C, TextBlock_48_Title, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_OpenArm_C, VerticalBox_250, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_OpenArm_C, WI_ImageScaled, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_PAS_OpenArm_C, 0x0268);
		}

		// class UInAppPurchaseComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeap__InAppPurchaseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, InAppPurchaseLogMessage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetItemsDetailsSuccess, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetItemsDetailsFailure, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, PurchaseConfirmationSuccess, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, PurchaseConfirmationFailure, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetPurchaseHistorySuccess, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetPurchaseHistoryFailure, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, UnknownData_2RF2, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseComponent, 0x0128);
		}

		// class ULuminApplicationLifecycleComponent : public UApplicationLifecycleComponent
		TEST_METHOD(Class__MagicLeap__LuminApplicationLifecycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, DeviceHasReactivatedDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, DeviceWillEnterRealityModeDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, DeviceWillGoInStandbyDelegate, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, FocusLostDelegate, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, FocusGainedDelegate, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminApplicationLifecycleComponent, 0x0190);
		}

		// class UMagicLeapHeadTrackingNotificationsComponent : public UVRNotificationsComponent
		TEST_METHOD(Class__MagicLeap__MagicLeapHeadTrackingNotificationsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingLost, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingRecovered, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingRecoveryFailed, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingNewSessionStarted, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, UnknownData_2E57, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHeadTrackingNotificationsComponent, 0x01D0);
		}

		// class UMagicLeapHMDFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeap__MagicLeapHMDFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHMDFunctionLibrary, 0x0028);
		}

		// class UMagicLeapMeshTrackerComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeap__MagicLeapMeshTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_HF1V, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, OnMeshTrackerUpdated, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, ScanWorld, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, MeshType, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_HBUL, 0x020A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, BoundingVolume, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, LevelOfDetail, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_HRWZ, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, PerimeterOfGapsToFill, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, Planarize, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_91ZW, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, DisconnectedSectionArea, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, RequestNormals, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, RequestVertexConfidence, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, VertexColorMode, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_LHP1, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, BlockVertexColors, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, VertexColorFromConfidenceZero, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, VertexColorFromConfidenceOne, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, RemoveOverlappingTriangles, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_7CFG, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, MRMesh, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, BricksPerFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_CJMA, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapMeshTrackerComponent, 0x0280);
		}

		// class UMagicLeapSettings : public UObject
		TEST_METHOD(Class__MagicLeap__MagicLeapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, bEnableZI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, bUseVulkanForZI, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, bUseMLAudioForZI, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, UnknownData_FNHT, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapSettings, 0x0030);
		}

		// class UMagicLeapMeshBlockSelectorInterface : public UInterface
		TEST_METHOD(Class__MagicLeap__MagicLeapMeshBlockSelectorInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapMeshBlockSelectorInterface, 0x0028);
		}

		// class UMagicLeapRaycastComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeap__MagicLeapRaycastComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapRaycastComponent, UnknownData_A4QF, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapRaycastComponent, 0x0118);
		}

		// class UMagicLeapRaycastFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeap__MagicLeapRaycastFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapRaycastFunctionLibrary, 0x0028);
		}

		// class UUI_TextAndIcons_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_TextAndIcons__UI_TextAndIcons_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextAndIcons_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextAndIcons_C, First_KeyIcon, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextAndIcons_C, Icon1_ScaleBox, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextAndIcons_C, Icon2_ScaleBox, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextAndIcons_C, LeftSide_RichText, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextAndIcons_C, Middle_RichText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextAndIcons_C, RightSide_RichText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextAndIcons_C, Second_KeyIcon, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextAndIcons_C, LeftSide, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextAndIcons_C, KeyMapping1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextAndIcons_C, Middle, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextAndIcons_C, KeyMapping2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextAndIcons_C, RightSide, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextAndIcons_C, Font, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_TextAndIcons_C, 0x0318);
		}

		// class AMagicLeapSharedWorldGameMode : public AGameMode
		TEST_METHOD(Class__MagicLeapSharedWorld__MagicLeapSharedWorldGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, SharedWorldData, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, OnNewLocalDataFromClients, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, PinSelectionConfidenceThreshold, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, UnknownData_HPZJ, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, ChosenOne, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapSharedWorldGameMode, 0x03E0);
		}

		// class AMagicLeapSharedWorldGameState : public AGameState
		TEST_METHOD(Class__MagicLeapSharedWorld__MagicLeapSharedWorldGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameState, SharedWorldData, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameState, AlignmentTransforms, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameState, OnSharedWorldDataUpdated, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameState, OnAlignmentTransformsUpdated, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapSharedWorldGameState, 0x02D8);
		}

		// class AMagicLeapSharedWorldPlayerController : public APlayerController
		TEST_METHOD(Class__MagicLeapSharedWorld__MagicLeapSharedWorldPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldPlayerController, UnknownData_ZZEJ, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapSharedWorldPlayerController, 0x0590);
		}

		// class APatrolPath_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PatrolPath__PatrolPath_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APatrolPath_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APatrolPath_C, AIPath, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APatrolPath_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APatrolPath_C, IsLooping, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APatrolPath_C, UnknownData_Y78B, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::APatrolPath_C, WaitTime, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::APatrolPath_C, Points, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APatrolPath_C, 0x0258);
		}

		// class USaveStationText_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SaveStationText__SaveStationText_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveStationText_C, 0x0230);
		}

		// class UImpactShake_FazerBlaster_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__ImpactShake_FazerBlaster__ImpactShake_FazerBlaster_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImpactShake_FazerBlaster_C, 0x0160);
		}

		// class UWI_InstructionCard_PAS_MontyClaws_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_PAS_MontyClaws__WI_InstructionCard_PAS_MontyClaws_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_MontyClaws_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_MontyClaws_C, Console_TextAndIcons, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_MontyClaws_C, Image_18_Template, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_MontyClaws_C, PC_TextAndIcons, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_MontyClaws_C, TextBlock_48_Title, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_MontyClaws_C, VerticalBox_250, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_MontyClaws_C, WI_ImageScaled, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_PAS_MontyClaws_C, 0x0268);
		}

		// class UGregory_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Gregory_ABP__Gregory_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, UnknownData_RIXM, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_BlendSpacePlayer_4, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_ApplyAdditive, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_SaveCachedPose_2, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_UseCachedPose_2, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_TransitionResult_21, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_TransitionResult_20, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_SequencePlayer_11, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_BlendListByBool_3, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_SequencePlayer_10, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_StateResult_14, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_SequencePlayer_9, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_BlendListByBool_2, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_SequencePlayer_8, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_StateResult_13, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_StateMachine_4, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_LayeredBoneBlend, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_SaveCachedPose, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_UseCachedPose, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_TransitionResult_19, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_TransitionResult_18, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_TransitionResult_17, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_TransitionResult_16, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_SequencePlayer_7, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_StateResult_12, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_SequencePlayer_6, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_StateResult_11, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_SequencePlayer_5, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_StateResult_10, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_TransitionResult_15, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_TransitionResult_14, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_TransitionResult_13, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_TransitionResult_12, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_TransitionResult_11, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_TransitionResult_10, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_TransitionResult_9, 0x0ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_TransitionResult_8, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_TransitionResult_7, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_TransitionResult_6, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_TransitionResult_5, 0x0F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_TransitionResult_4, 0x0FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_TransitionResult_3, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_SequenceEvaluator_2, 0x0FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_BlendListByBool, 0x1038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_SequenceEvaluator, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_StateResult_9, 0x1120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_SequencePlayer_4, 0x1150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_StateResult_8, 0x11C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_BlendSpacePlayer_3, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_StateResult_7, 0x12D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_TransitionResult_2, 0x1308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_TransitionResult, 0x1330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_BlendSpacePlayer_2, 0x1358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_StateResult_6, 0x1438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_SequencePlayer_3, 0x1468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_StateResult_5, 0x14E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_StateMachine_3, 0x1510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_StateResult_4, 0x15C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_BlendSpacePlayer, 0x15F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_StateResult_3, 0x16D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_SequencePlayer_2, 0x1700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_StateResult_2, 0x1778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_StateMachine_2, 0x17A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_StateResult, 0x1858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_StateMachine, 0x1888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_BlendListByEnum, 0x1938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimGraphNode_SequencePlayer, 0x19E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, DeltaTimeX, 0x1A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, isMoving, 0x1A64);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, UnknownData_FB40, 0x1A65);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, MoveSpeedInput, 0x1A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, IsPreview, 0x1A6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, UnknownData_R8GT, 0x1A6D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, Gregory, 0x1A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, HasFlashlight, 0x1A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, FlashlightOn, 0x1A79);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, UnknownData_VO58, 0x1A7A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, LookYaw, 0x1A7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AimRotation, 0x1A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, IsCrouched, 0x1A8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, UnknownData_1IVK, 0x1A8D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, L_ArmBlend, 0x1A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, SmoothedAimingRotationInterpSpeed, 0x1A94);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AimingAngle, 0x1A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, SmoothedAimingAngle, 0x1AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, HasMovementInput, 0x1AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, UnknownData_ABST, 0x1AA9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, MovementInput, 0x1AAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, IsRunning, 0x1AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, UnknownData_P1DR, 0x1AB9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, RunSpeed, 0x1ABC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, BoolBlendTime, 0x1AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, UsingFazwatch, 0x1AC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, UnknownData_6DWS, 0x1AC5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, LastAimRotation, 0x1AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, PawnVelocity, 0x1AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, ZeroVector, 0x1AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, MovementDirection, 0x1AEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, isTurningL, 0x1AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, UnknownData_QAHC, 0x1AF1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, LookPitch, 0x1AF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, CanTurn, 0x1AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, UnknownData_FPGN, 0x1AF9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, TurnThreshold, 0x1AFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, TurnRate, 0x1B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, ArmAim, 0x1B04);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, IsFalling, 0x1B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, IsJumping, 0x1B11);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimationEnum, 0x1B12);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, UnknownData_HRIK, 0x1B13);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, CutSceneAnim, 0x1B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, LoopCutScene, 0x1B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, UnknownData_8B2S, 0x1B21);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregory_ABP_C, AnimVODT, 0x1B28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGregory_ABP_C, 0x1B30);
		}

		// class ACautionBot_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__CautionBot__CautionBot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACautionBot_C, UberGraphFrame, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACautionBot_C, PointLight, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACautionBot_C, FloatingPawnMovement, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACautionBot_C, StaticMesh, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACautionBot_C, DefaultSceneRoot, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACautionBot_C, StunKey, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACautionBot_C, InitialYawKey, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACautionBot_C, MovementAudioLoop, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACautionBot_C, MovementAudioStop, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACautionBot_C, OcclusionTrace, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACautionBot_C, 0x02F8);
		}

		// class ATwoPlansTrigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__TwoPlansTrigger__TwoPlansTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwoPlansTrigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwoPlansTrigger_C, TimeCheckComponent, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwoPlansTrigger_C, MissionStateCondition, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwoPlansTrigger_C, PlanB, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwoPlansTrigger_C, PlanC, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwoPlansTrigger_C, MissionDataTable, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwoPlansTrigger_C, MapMission, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATwoPlansTrigger_C, 0x02B0);
		}

		// class USpillComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__SpillComponent__SpillComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpillComponent_C, UberGraphFrame, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpillComponent_C, 0x00B8);
		}

		// class USequenceDirector_C : public ULevelSequenceDirector
		TEST_METHOD(BlueprintGeneratedClass__MontyOutro_Shot300__SequenceDirector_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceDirector_C, UberGraphFrame, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceDirector_C, 0x0038);
		}

		// class UStaffbotBPInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__StaffbotBPInterface__StaffbotBPInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaffbotBPInterface_C, 0x0028);
		}

		// class AItemModelTumbler_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ItemModelTumbler__ItemModelTumbler_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemModelTumbler_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemModelTumbler_C, ViewedMesh, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemModelTumbler_C, PointLight, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemModelTumbler_C, PointLight1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemModelTumbler_C, PointLight2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemModelTumbler_C, CaptureComponent, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemModelTumbler_C, DefaultSceneRoot, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemModelTumbler_C, DesiredBoundsRadius, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemModelTumbler_C, MaxScale, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemModelTumbler_C, RotationSpeed, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemModelTumbler_C, FOVStart, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemModelTumbler_C, FOVMin, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemModelTumbler_C, Player_Dragging, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItemModelTumbler_C, 0x0275);
		}

		// class AShatteredRoxy_C : public AAISeeker_C
		TEST_METHOD(BlueprintGeneratedClass__ShatteredRoxy__ShatteredRoxy_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredRoxy_C, UnknownData_NX28, 0x07F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredRoxy_C, UberGraphFrame, 0x07F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShatteredRoxy_C, 0x0800);
		}

		// class URotationThresholdGeneral_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__RotationThresholdGeneral__RotationThresholdGeneral_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URotationThresholdGeneral_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotationThresholdGeneral_C, PreviousRotation, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotationThresholdGeneral_C, TotalRotationDelta, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotationThresholdGeneral_C, RotationThreshold, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotationThresholdGeneral_C, UnknownData_F12X, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotationThresholdGeneral_C, OnThresholdReached, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotationThresholdGeneral_C, RotationDirection, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URotationThresholdGeneral_C, 0x00E1);
		}

		// class AFreddyInteractibleActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__FreddyInteractibleActor__FreddyInteractibleActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyInteractibleActor_C, Arrow, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyInteractibleActor_C, Billboard, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyInteractibleActor_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyInteractibleActor_C, FreddyVO, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFreddyInteractibleActor_C, 0x0290);
		}

		// class USequenceDirector_C : public ULevelSequenceDirector
		TEST_METHOD(BlueprintGeneratedClass__Monty_Intro_Shot_501__SequenceDirector_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceDirector_C, UberGraphFrame, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceDirector_C, 0x0038);
		}

		// class UPickSplineClosestToExit_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__PickSplineClosestToExit__PickSplineClosestToExit_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickSplineClosestToExit_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickSplineClosestToExit_C, SplineManagerBB, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickSplineClosestToExit_C, StartDistance, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickSplineClosestToExit_C, DistanceAlongSplineDestination, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickSplineClosestToExit_C, DistanceAlongSplineAI, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickSplineClosestToExit_C, UnknownData_DYPH, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickSplineClosestToExit_C, ForkedBB, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickSplineClosestToExit_C, CurSpline, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickSplineClosestToExit_C, Pawn, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickSplineClosestToExit_C, FinalLocation, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPickSplineClosestToExit_C, 0x012C);
		}

		// class UFollowSplineWithCollision_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FollowSplineWithCollision__FollowSplineWithCollision_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFollowSplineWithCollision_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFollowSplineWithCollision_C, BBSplineManager, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFollowSplineWithCollision_C, BBMovementSpeed, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFollowSplineWithCollision_C, SplineFollowContext, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFollowSplineWithCollision_C, Location, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFollowSplineWithCollision_C, 0x0124);
		}

		// class UWI_Health_Fazerblast_C : public UWI_Empty_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_Health_Fazerblast__WI_Health_Fazerblast_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Health_Fazerblast_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Health_Fazerblast_C, NegativeScore, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Health_Fazerblast_C, PositiveScore, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Health_Fazerblast_C, MoveOutOfFrame, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Health_Fazerblast_C, Damage, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Health_Fazerblast_C, MoveIntoFrame, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Health_Fazerblast_C, Health_Image, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Health_Fazerblast_C, Health_ProgressBar, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Health_Fazerblast_C, Health, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Health_Fazerblast_C, Score, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Health_Fazerblast_C, HitStreak, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Health_Fazerblast_C, BestHitStreak, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Health_Fazerblast_C, TotalHits, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Health_Fazerblast_C, DamageDone, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Health_Fazerblast_C, FeedBackReference, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Health_Fazerblast_C, OutOfHealth, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Health_Fazerblast_C, MaxHealth, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_Health_Fazerblast_C, 0x02B4);
		}

		// class USequenceDirector_C : public ULevelSequenceDirector
		TEST_METHOD(BlueprintGeneratedClass__MontyOutro_Shot600__SequenceDirector_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceDirector_C, UberGraphFrame, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceDirector_C, 0x0038);
		}

		// class UFazWatch_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__FazWatch_ABP__FazWatch_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazWatch_ABP_C, UnknownData_EL6A, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazWatch_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazWatch_ABP_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazWatch_ABP_C, AnimGraphNode_TransitionResult_5, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazWatch_ABP_C, AnimGraphNode_TransitionResult_4, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazWatch_ABP_C, AnimGraphNode_TransitionResult_3, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazWatch_ABP_C, AnimGraphNode_TransitionResult_2, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazWatch_ABP_C, AnimGraphNode_TransitionResult, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazWatch_ABP_C, AnimGraphNode_SequencePlayer_4, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazWatch_ABP_C, AnimGraphNode_StateResult_4, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazWatch_ABP_C, AnimGraphNode_SequencePlayer_3, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazWatch_ABP_C, AnimGraphNode_StateResult_3, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazWatch_ABP_C, AnimGraphNode_SequencePlayer_2, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazWatch_ABP_C, AnimGraphNode_StateResult_2, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazWatch_ABP_C, AnimGraphNode_SequencePlayer, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazWatch_ABP_C, AnimGraphNode_StateResult, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazWatch_ABP_C, AnimGraphNode_StateMachine, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazWatch_ABP_C, WatchUp, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFazWatch_ABP_C, 0x06C1);
		}

		// class ABP_CinematicAudioEmitter_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_CinematicAudioEmitter__BP_CinematicAudioEmitter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CinematicAudioEmitter_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CinematicAudioEmitter_C, Ak, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CinematicAudioEmitter_C, DefaultSceneRoot, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_CinematicAudioEmitter_C, 0x0240);
		}

		// class AAISeeker_C : public ADebuggableAICharacter_C
		TEST_METHOD(BlueprintGeneratedClass__AISeeker__AISeeker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, UberGraphFrame, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, CharacterHourlyMaterialComponent, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, HeadShotDetector, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, PlayerCaptureTrigger, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, JumpscareLocation, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, SpringArm, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, PhysicalAnimation, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, SeekerVisualSource, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, Sight, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, DBG_Widget, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, CurrentRoom, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, RunningSearchAnim, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, UnknownData_9AK0, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, RecentlySearchedHideActors, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, PointsInvestigated, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, FinishedPOI, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, SearchingPOI, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, UnknownData_DE4J, 0x0569);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, VisitedRooms, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, SearchActor, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, AlertStatus, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, HeadTracksPlayer, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, ScanRoomOnEntry, 0x058D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, InChaseMode, 0x058E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, UnknownData_YMT6, 0x058F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, StartLocation, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, TrackingToPlayer, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, UnknownData_IU2R, 0x059D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, AITypeName, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, AIData, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, AlertTypeToSend, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, AIDataSetup, 0x05D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, UnknownData_TE1J, 0x05D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, ActorsInTheWay, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, BBAIBlocked, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, AIBlockedTimer, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, ManagedAIType, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, UnknownData_0T5W, 0x05F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, SplineFollowingContext, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, HeadAimTarget, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, HeadAimLocation, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, BBWanderToPoint, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, BBInvestigationLocation, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, UnknownData_V7GR, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, CurrentJumpscareTarget, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, WalkingAcceleration, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, ChasingAcceleration, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, VOAudio, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, audio_playing, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, UnknownData_EHQC, 0x0659);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, JumpscareAudio, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, Stunned, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, UnknownData_2C3S, 0x0669);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, deltaTime, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, jumpscareMontage, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, PatrolPath, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, BBPathIndex, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, VisitTimeFalloff, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, BBAlerted, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, BBAlertActor, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, UnknownData_WL8K, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, ambient_sound, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, BBPlayer, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, TrackingPlayer, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, UnknownData_LII4, 0x06D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, JumpscareCamShake, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, TensionControl, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, CurrentSeekerPathName, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, BBPatrolPath, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, ForceJumpscare, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, UnknownData_7BVL, 0x0711);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, BBAlertLocation, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, JumpscareLocationTrace, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, JumpscareCapsuleTrace, 0x071D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, UnknownData_W9H2, 0x071E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, OcclusionTrace, 0x071E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, ForceChaseKey, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, IsShatteredType, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, CanReceiveAlerts, 0x0751);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, HearingEnabled, 0x0752);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, seeking, 0x0753);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, UnknownData_KDG4, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, VOAudio_SpottedPlayer, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, VOAudio_InPursuit, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, VOAudio_SearchingNormal, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, VOAudio_LostPlayer, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, VOAudio_HeardSomething, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, VOAudio_BlockedByAI, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, StunVO, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, BBChicaVoiceHeard, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, JumpscareRetryTimer, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, MinStunTime, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, MaxStunTime, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, BBActorToCheck, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, StunLoopEvent, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAISeeker_C, CanBeStunnedVar, 0x07F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAISeeker_C, 0x07F1);
		}

		// class AMontyAIController_C : public AAISeekerController_C
		TEST_METHOD(BlueprintGeneratedClass__MontyAIController__MontyAIController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMontyAIController_C, UberGraphFrame, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMontyAIController_C, 0x03E0);
		}

		// class UITDSpatializationSourceSettings : public USpatializationPluginSourceSettingsBase
		TEST_METHOD(Class__Spatialization__ITDSpatializationSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UITDSpatializationSourceSettings, bEnableILD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UITDSpatializationSourceSettings, UnknownData_6QUM, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UITDSpatializationSourceSettings, PanningIntensityOverDistance, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UITDSpatializationSourceSettings, 0x00B8);
		}

		// class UAnimNotify_DJMMServoMovement_C : public UAnimNotify_ServoMovement_C
		TEST_METHOD(BlueprintGeneratedClass__AnimNotify_DJMMServoMovement__AnimNotify_DJMMServoMovement_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_DJMMServoMovement_C, 0x0058);
		}

		// class UCalcRoxyLeap_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__CalcRoxyLeap__CalcRoxyLeap_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCalcRoxyLeap_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCalcRoxyLeap_C, LeapStart, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCalcRoxyLeap_C, LeapDestination, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCalcRoxyLeap_C, IsBlocked, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCalcRoxyLeap_C, UnknownData_664Y, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCalcRoxyLeap_C, LeapDestinationKey, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCalcRoxyLeap_C, 0x00F8);
		}

		// class APlaySequenceTrigger_EndChoice_C : public APlaySequenceTrigger_C
		TEST_METHOD(BlueprintGeneratedClass__PlaySequenceTrigger_EndChoice__PlaySequenceTrigger_EndChoice_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_EndChoice_C, UnknownData_40FA, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_EndChoice_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_EndChoice_C, Freddy_Spawn, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_EndChoice_C, MissionStateCondition, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_EndChoice_C, EndingActor, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_EndChoice_C, FinalChoice, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_EndChoice_C, VannyBossTeleportLocator, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_EndChoice_C, UseLoadingDockCondition, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_EndChoice_C, UnknownData_AQ9C, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_EndChoice_C, EndVO, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_EndChoice_C, UseFireEscapeCondition, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_EndChoice_C, UnknownData_CV0Q, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_EndChoice_C, VannyCinematicPlayerUI, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_EndChoice_C, Vanny_Battle_Manager, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_EndChoice_C, LineSkipper, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaySequenceTrigger_EndChoice_C, SequenceRunning, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaySequenceTrigger_EndChoice_C, 0x0479);
		}

		// class UAudioListenerOverrideInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__AudioListenerOverrideInterface__AudioListenerOverrideInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioListenerOverrideInterface_C, 0x0028);
		}

		// class AWinner_lounge_Door_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Winner_lounge_Door__Winner_lounge_Door_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWinner_lounge_Door_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWinner_lounge_Door_C, Door, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWinner_lounge_Door_C, Scene, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWinner_lounge_Door_C, 0x0240);
		}

		// class URoxySniff_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__RoxySniff__RoxySniff_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxySniff_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxySniff_C, TypeToPlay, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxySniff_C, UnknownData_SDY1, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxySniff_C, LastPlayedTimestamp, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxySniff_C, UseTimestamp, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxySniff_C, UnknownData_913H, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxySniff_C, WaitTime, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxySniff_C, UseCanPlay, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxySniff_C, UnknownData_P0NR, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxySniff_C, CanPlayKey, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxySniff_C, lastplayedtime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxySniff_C, UnknownData_HZM4, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxySniff_C, RoxyLines, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URoxySniff_C, 0x0130);
		}

		// class UAISeekerInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__AISeekerInterface__AISeekerInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISeekerInterface_C, 0x0028);
		}

		// class UCable03_PAS02_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable03_PAS02_ABP__Cable03_PAS02_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable03_PAS02_ABP_C, 0x05E0);
		}

		// class UCable03_PAS01_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable03_PAS01_ABP__Cable03_PAS01_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable03_PAS01_ABP_C, 0x05E0);
		}

		// class ACinematic_Actor_ShatteredMonty_C : public ACinematic_Actor_Base_C
		TEST_METHOD(BlueprintGeneratedClass__Cinematic_Actor_ShatteredMonty__Cinematic_Actor_ShatteredMonty_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACinematic_Actor_ShatteredMonty_C, 0x024C);
		}

		// class USpatializationPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SpatializationPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpatializationPluginSourceSettingsBase, 0x0028);
		}

		// class USoundfieldEncodingSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEncodingSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEncodingSettingsBase, 0x0028);
		}

		// class UAudioEndpointSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__AudioEndpointSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioEndpointSettingsBase, 0x0028);
		}

		// class UOcclusionPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__OcclusionPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOcclusionPluginSourceSettingsBase, 0x0028);
		}

		// class USoundModulationPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundModulationPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundModulationPluginSourceSettingsBase, 0x0028);
		}

		// class UReverbPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__ReverbPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbPluginSourceSettingsBase, 0x0028);
		}

		// class USoundfieldEndpointSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEndpointSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEndpointSettingsBase, 0x0028);
		}

		// class USoundfieldEffectSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEffectSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEffectSettingsBase, 0x0028);
		}

		// class USoundfieldEffectBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEffectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEffectBase, Settings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEffectBase, 0x0030);
		}

		// class UWI_InstructionCard_PAS_TakeOffChestPlate_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_PAS_TakeOffChestPlate__WI_InstructionCard_PAS_TakeOffChestPlate_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOffChestPlate_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOffChestPlate_C, Console_TextAndIcons, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOffChestPlate_C, Image_18_Template, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOffChestPlate_C, PC_TextAndIcons, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOffChestPlate_C, TextBlock_48_Title, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOffChestPlate_C, VerticalBox_250, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_TakeOffChestPlate_C, WI_ImageScaled, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_PAS_TakeOffChestPlate_C, 0x0268);
		}

		// class AServiceCart_HidePoint_C : public APlayerAndAIHideInActor_C
		TEST_METHOD(BlueprintGeneratedClass__ServiceCart_HidePoint__ServiceCart_HidePoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AServiceCart_HidePoint_C, UnknownData_JR10, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServiceCart_HidePoint_C, UberGraphFrame, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServiceCart_HidePoint_C, Arrow1, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServiceCart_HidePoint_C, Box, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServiceCart_HidePoint_C, SkeletalMesh, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AServiceCart_HidePoint_C, 0x0370);
		}

		// class UWI_InstructionCard_PAS_ReplaceChestPlate_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_PAS_ReplaceChestPlate__WI_InstructionCard_PAS_ReplaceChestPlate_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ReplaceChestPlate_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ReplaceChestPlate_C, Console_TextAndIcons, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ReplaceChestPlate_C, Image_18_Template, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ReplaceChestPlate_C, PC_TextAndIcons, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ReplaceChestPlate_C, TextBlock_48_Title, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ReplaceChestPlate_C, VerticalBox_250, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_PAS_ReplaceChestPlate_C, WI_ImageScaled, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_PAS_ReplaceChestPlate_C, 0x0268);
		}

		// class UDebugUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DebugUI__DebugUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, AIDebugVis, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, AISpawnEnable, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, AntiAliasing, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, CameraFOV, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, ChicaShattered, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, ClearAIButton, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, ClearTapesData, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, CloakingEnabled, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, ClockRunning_2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, ClockTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, CloseDebugButton, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, DbgGregoryStatesUI, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, DebugInstructionCardUI, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, DebugMissionUI, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, DLSSQualityHighButton, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, DLSSQualityLowButton, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, DLSSQualityMediumButton, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, DLSSQualityOffButton, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, DLSSQualityUltraButton, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, EnableAllInput, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, FlyingCollisionType, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, FlyingMode, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, FlyingSpeed, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, FrameRateDisplay, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, FreddyGregoryStates, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, HardwareBenchmark, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, HasUsedHidingSpot, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, HorizontalBox_30_FazerBlast, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, InstructionCardButton, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, InventoryButton, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, InventoryItemsPanel, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, InventorySearchText, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, KitchenCameras, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, LightingScenarioDisplay, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, LightmapDensity, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, LockEverythingButton, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, MainButton, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, MissionButton, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, MontyShattered, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, MoreDebug, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, NamedSlot, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, NamedSlot_2, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, NamedSlot_3, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, NamedSlot_4, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, NamedSlot_5, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, NamedSlot_6, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, NamedSlot_7, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, NamedSlot_8, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, NamedSlot_9, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, NamedSlot_10, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, NamedSlot_11, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, NamedSlot_422, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, NamedSlot_720, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, NamedSlot_892, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, PointLights, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, PostProcessing, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, PrecomputedVisibility, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, PS4QualityButton, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, PS5Performance, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, PS5VisualQualityButton, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, RayTraceQualityHighButton, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, RayTraceQualityLevelTextBox_2, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, RayTraceQualityLowButton, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, RayTraceQualityMediumButton, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, RayTraceQualityOffButton, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, RoxyShattered, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, SecurityLevel, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, SetFazwatchPower, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, SetFreddyPower, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, ShowCollision, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, ShowCoordinates, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, ShowLevelStreamers, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, ShowLoadedLevels, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, ShowTranslucency, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, SpotLights, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, SurvivalLocations, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, Switcher, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, TeleportButton, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, TeleportX, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, TeleportY, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, TeleportZ, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, TextBox_FazerBlastTime, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, TrailerMode, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, UnlimitedFazwatchPower, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, UnlimitedStamina, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, UnlitMode, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, UnlockEverythingButton, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, VannyDecButton, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, VannyIncButton, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, VannyMeterVis, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, VisualQualityHighButton, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, VisualQualityLevelTextBox, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, VisualQualityLowButton, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, VisualQualityMediumButton, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, VisualQualityMinSpecButton, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, VisualQualityUltraButton, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, WI_Option_Language, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, WI_Option_Language_DebugShortcut, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, DbgInfoTable, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, FrameRateActor, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, InventoryItems, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugUI_C, MinSpecSelectedLast, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugUI_C, 0x05A9);
		}

		// class UCameraIcon_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CameraIcon__CameraIcon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraIcon_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraIcon_C, Cam_Name, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraIcon_C, CameraButton, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraIcon_C, HackButton, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraIcon_C, CameraClicked, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraIcon_C, CurrentCam, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraIcon_C, defaultButtonStyle, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraIcon_C, alertButtonStyle, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraIcon_C, selectedButtonStyle, 0x0758);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraIcon_C, 0x09D0);
		}

		// class ACinematic_Actor_Ending_C : public ACinematic_Actor_Base_C
		TEST_METHOD(BlueprintGeneratedClass__Cinematic_Actor_Ending__Cinematic_Actor_Ending_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACinematic_Actor_Ending_C, UnknownData_ZIG1, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACinematic_Actor_Ending_C, CharacterHourlyMaterialComponent, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACinematic_Actor_Ending_C, CineCamera, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACinematic_Actor_Ending_C, 0x0260);
		}

		// class ASecurityOffice_WestArcade_C : public AMGM_OfficeGameManger_C
		TEST_METHOD(BlueprintGeneratedClass__SecurityOffice_WestArcade__SecurityOffice_WestArcade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, UnknownData_41DV, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, UberGraphFrame, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, Monty_Post_Game_Spawn, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, MissionStateCondition, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, Monty_Spawn, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, Chica_Spawn, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, West_Arcade_Office, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, DJButton_2, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, DJButton_3, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, DJButton_4, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, DJButton_5, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, BeatManager, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, DoorManager, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, DJButton_6, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, NumButtonsActivated, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, MissionName, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, UnknownData_WDPH, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, Animation_Land_Mines, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, Spawned_DJ_Music_Man, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, Hallway_Chase_Spawn, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, Bathroom_Spawn, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, Current_MM_Owner, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, LightingMaterialManager, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, LightingMaterialEvents, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, Light_Interactions, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, Badge_Holder, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, Chica, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, Monty_Patrol_Path, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, Monty, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, CanRepair, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, UnknownData_YIJ6, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, DJMM_Booth, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, Chica_Patrol_Path, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, MusicState, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, UnknownData_VZDJ, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOffice_WestArcade_C, MusicHandler, 0x048C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASecurityOffice_WestArcade_C, 0x04B8);
		}

		// class AOGM_Kitchen_C : public AMGM_OfficeGameManger_C
		TEST_METHOD(BlueprintGeneratedClass__OGM_Kitchen__OGM_Kitchen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, UnknownData_AKJL, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, UberGraphFrame, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, TimeCheckComponent, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, WorldStateHandler_KitchenChicaStart, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, WorldStateHandler_KitchenChicaDone, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, GameTypeCheckDestroy, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, LevelStreamViewpoint, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, KitchenStaffBotSpawn, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, Debug_JumpToLastStep, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, P_CompletedPizza, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, UnknownData_5JKS, 0x02F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, PizzaMakerManager, 0x02F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, Debug_FastStations, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, UnknownData_OT31, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, HUD, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, P_StaffBot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, ChicaManager, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, P_DoorPower, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, UnknownData_SB9O, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, OfficeDoor, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, InitialDoorPower, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, P_DeltaSeconds, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, GregoryPawn, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, PlayerControlledStaffBot_Kitchen, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, Button_StaffBotControl, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, BadgeHolder, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, End_Level_Sequence, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, skip_audio, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, playRandomVO, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, VO_finished, 0x0442);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, UnknownData_XYSQ, 0x0443);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, EmergencyUI, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, Bot_Sequence_Trigger, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, LineSkipper, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, enableCountdownRTPC, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, VOPlaying, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, UnknownData_2EXA, 0x04A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, ChicaVOLines, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, gameover, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, UnknownData_GVFZ, 0x04B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, PCTowerEmitterEvent, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, Monitor, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, Tower, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, DoorPowerMeter1, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, DoorPowerMeter2, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, LoadInChicaPizza, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, CanVOPlay, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOGM_Kitchen_C, SauceAdded, 0x0562);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOGM_Kitchen_C, 0x0563);
		}

		// class AAnimationMusicManTeleportSpawnTrigger_C : public ATeleportSpawnTrigger_C
		TEST_METHOD(BlueprintGeneratedClass__AnimationMusicManTeleportSpawnTrigger__AnimationMusicManTeleportSpawnTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimationMusicManTeleportSpawnTrigger_C, UberGraphFrame, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimationMusicManTeleportSpawnTrigger_C, Office_Game_Owner, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimationMusicManTeleportSpawnTrigger_C, Should_Check_Office_Game_Manager, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimationMusicManTeleportSpawnTrigger_C, Anim_Enum, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimationMusicManTeleportSpawnTrigger_C, UnknownData_RNF3, 0x031A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimationMusicManTeleportSpawnTrigger_C, World_Space_Anim, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimationMusicManTeleportSpawnTrigger_C, Is_Playing_Animation, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimationMusicManTeleportSpawnTrigger_C, Auto_Start_Kill_Timer, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimationMusicManTeleportSpawnTrigger_C, RequireOverlap, 0x032A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAnimationMusicManTeleportSpawnTrigger_C, 0x032B);
		}

		// class UCable04_PAS01_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable04_PAS01_ABP__Cable04_PAS01_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable04_PAS01_ABP_C, 0x05E0);
		}

		// class UMovieSceneCaptureProtocolBase : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureProtocolBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_2R8Q, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, State, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_5XLV, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureProtocolBase, 0x0058);
		}

		// class UMovieSceneAudioCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneAudioCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioCaptureProtocolBase, 0x0058);
		}

		// class UNullAudioCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__NullAudioCaptureProtocol)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullAudioCaptureProtocol, 0x0058);
		}

		// class UMasterAudioSubmixCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MasterAudioSubmixCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, Filename, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, UnknownData_0W3I, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMasterAudioSubmixCaptureProtocol, 0x0090);
		}

		// class UMovieSceneImageCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneImageCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneImageCaptureProtocolBase, 0x0058);
		}

		// class UCompositionGraphCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__CompositionGraphCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, IncludeRenderPasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bCaptureFramesInHDR, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_U8AD, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, HDRCompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, CaptureGamut, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_2H38, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterial, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bDisableScreenPercentage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_MSWP, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterialPtr, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_O9KT, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositionGraphCaptureProtocol, 0x00C0);
		}

		// class UFrameGrabberProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__FrameGrabberProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrameGrabberProtocol, UnknownData_QVBH, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameGrabberProtocol, 0x0068);
		}

		// class UImageSequenceProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol, UnknownData_242I, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol, 0x00D8);
		}

		// class UCompressedImageSequenceProtocol : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__CompressedImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, CompressionQuality, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, UnknownData_FKN9, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompressedImageSequenceProtocol, 0x00E0);
		}

		// class UImageSequenceProtocol_BMP : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_BMP)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_BMP, 0x00D8);
		}

		// class UImageSequenceProtocol_PNG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_PNG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_PNG, 0x00E0);
		}

		// class UImageSequenceProtocol_JPG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_JPG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_JPG, 0x00E0);
		}

		// class UImageSequenceProtocol_EXR : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_EXR)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, bCompressed, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, CaptureGamut, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, UnknownData_IXBL, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_EXR, 0x00E8);
		}

		// class UMovieSceneCaptureInterface : public UInterface
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureInterface, 0x0028);
		}

		// class UMovieSceneCapture : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_DLPN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocolType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocolType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocol, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, Settings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bUseSeparateProcess, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bCloseEditorWhenCaptureStarts, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_1GFI, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AdditionalCommandLineArguments, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, InheritedCommandLineArguments, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_ZSHN, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCapture, 0x0220);
		}

		// class ULevelCapture : public UMovieSceneCapture
		TEST_METHOD(Class__MovieSceneCapture__LevelCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, bAutoStartCapture, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_JB1G, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, PrerequisiteActorId, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_OXZC, 0x023C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelCapture, 0x0240);
		}

		// class UMovieSceneCaptureEnvironment : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureEnvironment)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureEnvironment, 0x0028);
		}

		// class UUserDefinedCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, World, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, UnknownData_361Q, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedCaptureProtocol, 0x00D8);
		}

		// class UUserDefinedImageCaptureProtocol : public UUserDefinedCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedImageCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, Format, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, bEnableCompression, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, UnknownData_AXSC, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, CompressionQuality, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedImageCaptureProtocol, 0x00E0);
		}

		// class UVideoCaptureProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__VideoCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, bUseCompression, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_8HBW, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, CompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_J26I, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideoCaptureProtocol, 0x0080);
		}

		// class UNiagaraDataInterfaceChaosDestruction : public UNiagaraDataInterface
		TEST_METHOD(Class__ChaosNiagara__NiagaraDataInterfaceChaosDestruction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ChaosSolverActorSet, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataSourceType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_H7NL, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataProcessFrequency, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxNumberOfDataEntriesToSpawn, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DoSpawn, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_K4LN, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpawnMultiplierMinMax, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpawnChance, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ImpulseToSpawnMinMax, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpeedToSpawnMinMax, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MassToSpawnMinMax, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ExtentMinToSpawnMinMax, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ExtentMaxToSpawnMinMax, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VolumeToSpawnMinMax, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SolverTimeToSpawnMinMax, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SurfaceTypeToSpawn, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationFilteringMode, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationXToSpawn, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_28P0, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationXToSpawnMinMax, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationYToSpawn, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_O0NI, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationYToSpawnMinMax, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationZToSpawn, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_I6JD, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationZToSpawnMinMax, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataSortingType, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalCollisionData, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DoSpatialHash, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_ZRSC, 0x00FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeMin, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeMax, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeCellSize, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxDataPerCell, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bApplyMaterialsFilter, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_TG3R, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ChaosBreakingMaterialSet, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalBreakingData, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalTrailingData, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_WQ6H, 0x0182);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomPositionMagnitudeMinMax, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, InheritedVelocityMultiplier, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomVelocityGenerationType, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_GHT1, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomVelocityMagnitudeMinMax, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpreadAngleMax, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VelocityOffsetMin, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VelocityOffsetMax, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, FinalVelocityMagnitudeMinMax, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxLatency, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DebugType, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_SBO7, 0x01C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LastSpawnedPointID, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LastSpawnTime, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_TK8I, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SolverTime, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, TimeStampOfLastProcessedData, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_2DCP, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceChaosDestruction, 0x0230);
		}

		// class UTitle_SaveSlotButton_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Title_SaveSlotButton__Title_SaveSlotButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_SaveSlotButton_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_SaveSlotButton_C, Date_Local_Text, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_SaveSlotButton_C, FileName_Text, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_SaveSlotButton_C, GameHour_Text, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_SaveSlotButton_C, Time_Local_Text, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_SaveSlotButton_C, Top_Button, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_SaveSlotButton_C, TotalTimePlayed_Text, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_SaveSlotButton_C, OnClicked, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_SaveSlotButton_C, OnHovered, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_SaveSlotButton_C, SaveSlotName, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_SaveSlotButton_C, SaveSlotData, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_SaveSlotButton_C, isSaving, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_SaveSlotButton_C, first_hover, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_SaveSlotButton_C, UnknownData_N94H, 0x02A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_SaveSlotButton_C, SaveSlot_ButtonStyle, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_SaveSlotButton_C, SaveGameUI_Ref, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_SaveSlotButton_C, TitleUI_Ref, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTitle_SaveSlotButton_C, IsAutoSave, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTitle_SaveSlotButton_C, 0x0531);
		}

		// class UWI_Gregory_Crouching_C : public UWI_Empty_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_Gregory_Crouching__WI_Gregory_Crouching_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Crouching_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Crouching_C, WithoutFlashLight_FadeIn, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Crouching_C, WithFlashlight_FadeIn, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Crouching_C, WithFlashlight, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Crouching_C, WithoutFlashlight, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Crouching_C, IsStanding, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Crouching_C, UnknownData_Q2NB, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Crouching_C, HasFlashlight, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Crouching_C, LastState, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Crouching_C, CanEscape, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Crouching_C, Escaping, 0x02FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Crouching_C, UnknownData_CCGL, 0x02FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Crouching_C, EscapeCountdown, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Crouching_C, TimeToEscape, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Crouching_C, Spotted, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Crouching_C, UnknownData_1QBN, 0x0309);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Crouching_C, SpottedCountdown, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Crouching_C, MinTimeSpotted, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_Gregory_Crouching_C, 0x0314);
		}

		// class UWI_Gregory_Clock_C : public UWI_Empty_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_Gregory_Clock__WI_Gregory_Clock_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Clock_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Clock_C, Blink, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Clock_C, ClockBackground, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Clock_C, ClockText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Clock_C, PM, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Clock_C, UnknownData_QRH5, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Clock_C, MinuteTracker, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Gregory_Clock_C, ForcedClock, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_Gregory_Clock_C, 0x0269);
		}

		// class AVanessaController_C : public AAISeekerController_C
		TEST_METHOD(BlueprintGeneratedClass__VanessaController__VanessaController_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVanessaController_C, 0x03D8);
		}

		// class UStaffbot_Server_LINK_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Staffbot_Server_LINK__Staffbot_Server_LINK_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Server_LINK_C, UnknownData_EQHR, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Server_LINK_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Server_LINK_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Server_LINK_C, UnknownData_HNYU, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Server_LINK_C, AnimGraphNode_TwoBoneIK, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Server_LINK_C, AnimGraphNode_ModifyBone, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Server_LINK_C, AnimGraphNode_LocalToComponentSpace, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Server_LINK_C, AnimGraphNode_ComponentToLocalSpace, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Server_LINK_C, AnimGraphNode_LinkedInputPose, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Server_LINK_C, RWristLocation, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Server_LINK_C, R_Wrist2Rotation, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Server_LINK_C, LockR_Shoulder_Alpha, 0x0668);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaffbot_Server_LINK_C, 0x066C);
		}

		// class AFreddy_C : public AFirstPersonCharacter_C
		TEST_METHOD(BlueprintGeneratedClass__Freddy__Freddy_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, UnknownData_N95D, 0x0712);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, UberGraphFrame, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, HeadShotDetector, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, JumpscareLocation, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, SpringArm1, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, CharacterHourlyMaterialComponent, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, SightCone, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, RIG_Glamrock_Freddy_FirstPerson, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, CannotEnterFreddyInstruction, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, EnterExitArrow, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, DebugVisComponent, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, VisualSource, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, EyesLight, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, LevelStreamViewpoint, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, NavigationInvoker, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, EnterTrigger, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, Timeline_0_0_Pitch_4982063C48B0BDB7171874A857DF95EB, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, Timeline_0_0_Roll_4982063C48B0BDB7171874A857DF95EB, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, Timeline_0_0_TranslateY_4982063C48B0BDB7171874A857DF95EB, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, Timeline_0_0_Headbob_ZTranslate_4982063C48B0BDB7171874A857DF95EB, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, Timeline_0_0__Direction_4982063C48B0BDB7171874A857DF95EB, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, UnknownData_P1UI, 0x07A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, Timeline_0_1, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, GregoryPawn, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, FreddyAIController, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, FreddyOverlayWidget, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, HeadBobScale, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, TotalTime, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, FootsetVolumeFalloffCurve, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, AimAtGregMaxRange, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, CameraCurrentOffsetZ, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, footstep_sound, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, ExitedSuit, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, EnteredSuit, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, MenuOpen, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, UnknownData_GHYU, 0x0809);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, AIRotationRate, 0x080C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, PlayerRotationRate, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, KeepVisualsOnUnposses, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, GregoryEntering, 0x0825);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, CanEjectMedScan, 0x0826);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, UnknownData_CPBB, 0x0827);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, MedScanSequenceVar, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, ForceLookAtEnabled, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, GregoryExiting, 0x0831);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, UnknownData_SAYB, 0x0832);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, FazwatchUI, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, GregFirstPersonABP, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, VOPlaying, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, UnknownData_2RX7, 0x0849);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, OcclusionTrace, 0x0849);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, EnteringSound, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, UnknownData_U68R, 0x0879);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, SmashAnimAsset, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, IsPossessed, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, NoPlaceForFreddy, 0x0889);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, UnknownData_ZYL9, 0x088A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, GregoryEjectLocation, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, FreddyEjectRotation, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, UnknownData_7DPT, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, ChicaVoiceListener, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, RoxyEyesRadius, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, UnknownData_DWIG, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, PostProcessVolumeRef, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, ChicaVoiceCooldownOn_, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, UnknownData_MKJB, 0x08E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, ChicaVoiceCooldownTime, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, BypassEjectAnim, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, Can_Eject, 0x08F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, UnknownData_O2CK, 0x08F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, JumpscareAudio, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, JumpscareCamShake, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, UnknownData_N1YA, 0x0904);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddy_C, StunVO, 0x0908);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFreddy_C, 0x0918);
		}

		// class AMessageCollectible_C : public ACollectible_C
		TEST_METHOD(BlueprintGeneratedClass__MessageCollectible__MessageCollectible_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMessageCollectible_C, UnknownData_OXRV, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMessageCollectible_C, UberGraphFrame, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMessageCollectible_C, SpotLight, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMessageCollectible_C, MOD_MazerGymBagC, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMessageCollectible_C, MOD_MazerGymBagB, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMessageCollectible_C, MOD_MazerGymBagA, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMessageCollectible_C, Variant, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMessageCollectible_C, AllCollected, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMessageCollectible_C, 0x02B5);
		}

		// class UDefaultLevelSequenceInstanceData : public UObject
		TEST_METHOD(Class__LevelSequence__DefaultLevelSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_5K2Q, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOriginActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_OBVO, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOrigin, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultLevelSequenceInstanceData, 0x0070);
		}

		// class ULevelSequenceMetaData : public UInterface
		TEST_METHOD(Class__LevelSequence__LevelSequenceMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceMetaData, 0x0028);
		}

		// class ULevelSequence : public UMovieSceneSequence
		TEST_METHOD(Class__LevelSequence__LevelSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, MovieScene, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, ObjectReferences, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, BindingReferences, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, PossessedObjects, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, DirectorClass, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequence, 0x0498);
		}

		// class ULevelSequenceBurnInInitSettings : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInInitSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInInitSettings, 0x0028);
		}

		// class ULevelSequenceBurnInOptions : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, bUseBurnIn, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, UnknownData_PUZA, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, BurnInClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, Settings, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInOptions, 0x0050);
		}

		// class ALevelSequenceActor : public AActor
		TEST_METHOD(Class__LevelSequence__LevelSequenceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_KDLJ, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, PlaybackSettings, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_FMLB, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, SequencePlayer, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, LevelSequence, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, AdditionalEventReceivers, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, CameraSettings, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_4SZZ, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInOptions, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BindingOverrides, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_YTUF, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, DefaultInstanceData, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInInstance, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, bShowBurnin, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_7YS2, 0x02B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceActor, 0x02B8);
		}

		// class ULevelSequenceBurnIn : public UUserWidget
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnIn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, FrameInformation, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, LevelSequenceActor, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnIn, 0x02F0);
		}

		// class ULevelSequenceDirector : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceDirector, Player, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceDirector, 0x0030);
		}

		// class ULegacyLevelSequenceDirectorBlueprint : public UBlueprint
		TEST_METHOD(Class__LevelSequence__LegacyLevelSequenceDirectorBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegacyLevelSequenceDirectorBlueprint, 0x00A0);
		}

		// class ULevelSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__LevelSequence__LevelSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, OnCameraCut, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, UnknownData_0KDR, 0x0898);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequencePlayer, 0x09A0);
		}

		// class ALevelSequenceMediaController : public AActor
		TEST_METHOD(Class__LevelSequence__LevelSequenceMediaController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, UnknownData_524P, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, Sequence, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, MediaComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, ServerStartTimeSeconds, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, UnknownData_K7EZ, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceMediaController, 0x0250);
		}

		// class UFindClosestSeekerPath_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FindClosestSeekerPath__FindClosestSeekerPath_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindClosestSeekerPath_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindClosestSeekerPath_C, PatrolPathKey, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindClosestSeekerPath_C, PatrolPointIndexKey, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindClosestSeekerPath_C, PatrolLocation, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindClosestSeekerPath_C, 0x0128);
		}

		// class UAnimatronic_ABP_ShatteredChica_C : public UAnimatronic_ABP_MASTER_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Animatronic_ABP_ShatteredChica__Animatronic_ABP_ShatteredChica_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_ShatteredChica_C, UberGraphFrame, 0x8DE8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimatronic_ABP_ShatteredChica_C, 0x8DF0);
		}

		// class URotationThreshold_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__RotationThreshold__RotationThreshold_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URotationThreshold_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotationThreshold_C, PreviousRotation, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotationThreshold_C, TotalRotationDelta, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotationThreshold_C, RotationThreshold, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotationThreshold_C, UnknownData_LSSQ, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotationThreshold_C, OnRotationThresholdReached, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotationThreshold_C, RotationDelta, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URotationThreshold_C, 0x00EC);
		}

		// class AAlertSystem_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__AlertSystem__AlertSystem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAlertSystem_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAlertSystem_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAlertSystem_C, OnAlert, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAlertSystem_C, 0x0248);
		}

		// class UDbgMissionEntryUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DbgMissionEntryUI__DbgMissionEntryUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDbgMissionEntryUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDbgMissionEntryUI_C, MissionName, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDbgMissionEntryUI_C, TaskList, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDbgMissionEntryUI_C, Item, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDbgMissionEntryUI_C, TaskUIElements, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDbgMissionEntryUI_C, 0x0260);
		}

		// class UPickSplineClosestToPlayer_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__PickSplineClosestToPlayer__PickSplineClosestToPlayer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickSplineClosestToPlayer_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickSplineClosestToPlayer_C, SplineManagerBB, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickSplineClosestToPlayer_C, StartDistance, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickSplineClosestToPlayer_C, DistanceAlongSplinePlayer, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickSplineClosestToPlayer_C, DistanceAlongSplineAI, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickSplineClosestToPlayer_C, UnknownData_HREA, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickSplineClosestToPlayer_C, ForkedBB, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickSplineClosestToPlayer_C, CurSpline, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickSplineClosestToPlayer_C, Pawn, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPickSplineClosestToPlayer_C, FinalLocation, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPickSplineClosestToPlayer_C, 0x012C);
		}

		// class APrizeCounterEscapeTrigger_C : public APlayerTrigger
		TEST_METHOD(BlueprintGeneratedClass__PrizeCounterEscapeTrigger__PrizeCounterEscapeTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrizeCounterEscapeTrigger_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrizeCounterEscapeTrigger_C, MissionStateCondition, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrizeCounterEscapeTrigger_C, TimeCheckComponent, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrizeCounterEscapeTrigger_C, UsePrizeCounterElevatorUpdateMission, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrizeCounterEscapeTrigger_C, TetherTransform, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrizeCounterEscapeTrigger_C, SpawnTransform, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrizeCounterEscapeTrigger_C, FindFreddyUpdateMission, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrizeCounterEscapeTrigger_C, PatrolPath, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrizeCounterEscapeTrigger_C, LineSkipper, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrizeCounterEscapeTrigger_C, Sequence, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrizeCounterEscapeTrigger_C, End_Sequence, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrizeCounterEscapeTrigger_C, 0x0348);
		}

		// class APS_Upgrade_And_Test_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PS_Upgrade_And_Test_BP__PS_Upgrade_And_Test_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, RightEyeRemoveCollider, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, LeftEyeRemoveCollider, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, SquareButton_InsideChest, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, SquareButton_Hand, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, SquareButton_ForeArm, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, SquareButton_Chest, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, SquareButton_Bowtie, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Arm_OpenClose, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Chest_OpenClose, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, RectLight, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, XButtonTest, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, CircleButtonTest, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, TriangleButtonTest, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, SquareButtonTest, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, XButtonArm1, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, SquareButtonArm1, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, CircleButtonArm1, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, TriangleButtonArm1, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, XButtonArm2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, SquareButtonArm2, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, CircleButtonArm2, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, TriangleButtonArm2, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, XButtonFace1, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, TriangleButtonFace1, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, SquareButtonFace2, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, CircleButtonFace2, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, XButtonFace2, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, TriangleButtonFace2, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, CircleButtonFace1, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, SquareButtonFace1, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, CircleButtonChest1, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, SquareButtonChest1, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, XButtonChest1, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, TriangleButtonChest, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, CircleButtonChest2, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, SquareButtonChest2, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, XButtonChest2, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, SquareButtonHead, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, XButtonHead, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, CircleButtonHead, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, TriangleButtonHead, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_33, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_32, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_31, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_30, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_29, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_28, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_27, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_26, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_25, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_24, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_23, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_22, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_21, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_20, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_19, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_18, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_17, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_16, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_15, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_14, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_13, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_12, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_11, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_10, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_9, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_8, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_7, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_6, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MOD_Parts_and_Service_Button_Base_5, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, JumpscareTransform, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, VoiceboxCollider, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, EyesReplaceCollider, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, FaceCollider, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ChestCollider, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, BowtieCollider, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ArmCloseCollider, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ArmRemoveClaws, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ArmOpenCollider, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Green_2_Eye_WireConnector, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Yellow_2_Eye_WireConnector, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Blue_2_Eye_WireConnector, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Red_2_Eye_WireConnector, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Green_1_Eye_WireConnector, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Yellow_1_Eye_WireConnector, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Red_1_Eye_WireConnector, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Blue_1_Eye_WireConnector, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Yellow_2_Arm_WireConnector, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Red_2_Arm_WireConnector, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Blue_2_Arm_WireConnector, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Green_2_Arm_WireConnector, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Yellow_1_Arm_WireConnector, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Red_1_Arm_WireConnector, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Blue_1_Arm_WireConnector, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Green_1_Arm_WireConnector, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Red_2_Chest_WireConnector, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Blue_2_Chest_WireConnector, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Green_2_Chest_WireConnector, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Yellow_1_Chest_WireConnector, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Red_1_Chest_WireConnector, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Blue_1_Chest_WireConnector, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Green_1_Chest_WireConnector, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Blue_1_Head_WireConnector, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Green_1_Head_WireConnector, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Red_1_Head_WireConnector, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Yellow_1_Head_WireConnector, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Red_1_TestButtton, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Green_1_TestButtton, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Yellow_1_TestButtton, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Blue_1_TestButtton, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, GreenWire_2_eye, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, RedWire_2_Eye, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, YellowWire_2_eye, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, BlueWire_2_eye, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, YellowWire_1_Eye, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, BlueWire_1_Eye, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, GreenWire_1_Eye, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Redwire_1_Eye, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, GreenWire_2_Chest, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, RedWire_2_Chest, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, BlueWire_2_Chest, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, YellowWire_1_Chest, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, GreenWire_1_Chest, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, RedWire_1_Chest, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, BlueWire_1_Chest, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, YellowWire_2_Arm, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, YellowWire_1_Arm, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, RedWire_2_Arm, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, RedWire_1_Arm, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, GreenWire_2_Arm, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, GreenWire_1_Arm, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, BlueWire_2_Arm, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, BlueWire_1_Arm, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, RedWire_1_head, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, YellowWire_1_Head, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, GreenWire_1_Head, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, BlueWire_1_Head, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, EyeUpgradeScene, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, VoiceBoxUpgradeScene, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ArmUpgradeScene, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, PowerUpgradeGameScene, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, RIG_PartsAndServiceArms, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Sphere, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, PlayerInteractComponent, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, RIG_Glamrock_Freddy_PartsServ, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, DebugEasyMode, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, IsHidden, 0x06B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, IsUsingMachine, 0x06BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, HasBeenCompleted, 0x06BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, UnknownData_JP36, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ArmCamera, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, EyesCamera, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ChestCamera, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ChestCameraZoomed, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, HeadCamera, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, TestingCamera, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, UpgradeType, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, UnknownData_DA40, 0x06F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, AvailableColorsArray, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ColorSequenceColorArray, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, RoundIndex, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ColorSequenceIndex, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ColorSequenceDelay, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, UnknownData_0NG6, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, SequencePromptData, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ColorDisplayDuration, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, UnknownData_7438, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, DefaultMaterial, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, WireConnectorColorMap, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, WireColorConnectorMap, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, GameState, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, UnknownData_HUG6, 0x0829);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, TestingButtonConnectorColorMap, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, TestingButtonColorConnectorMap, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, RoundEndDelay, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MaxTestingRounds, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, RealChairActor, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, PowerUpgradeWireMap, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, PowerUpgradeConnectorMap, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ArmUpgradeWireMap, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ArmUpgradeConnectorMap, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, EyeUpgradeWireMap, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, EyeUpgradeConnectorMap, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, VoiceboxUpgradeWireMap, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, VoiceboxUpgradeConnectorMap, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, BowTieHasBeenRemoved, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, UnknownData_UIKY, 0x0B81);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, EyesRemoved, 0x0B84);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ChestHasBeenClosed, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, UnknownData_3ULH, 0x0B89);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MontyOpenArm, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Monty_Close_Arm, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MontyRemoveOldClaws, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ChicaRemoveBowtie, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ChicaRemoveChest, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ChicaReplaceBowtie, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ChicaReplaceChest, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ChicaRemoveVoicebox, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, RoxyOpenFace, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, RoxyCloseFace, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, RoxyRemoveEyes, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, RoxyReplaceEyes, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ValidHitCollider, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ArmMaterial, 0x0CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, HandMaterial, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, FaceMaterial, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, VoiceBoxMaterial, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, EyeMaterial, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ChestAndBowtieMaterial, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, CurrentMaterial, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, IsPulsing, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, UnknownData_XY2C, 0x0CF1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, MaxHighlightValue, 0x0CF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, Highlight_Pulse_Speed_Multiplier, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, UnknownData_Y8JZ, 0x0CFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ButtonDarkMaterial, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ButtonLightMaterial, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ValidButtonChild, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, TestButtonUIArray, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, HeadButtonUIArray, 0x0D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, FaceButtonUIArray, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ChestButtonUIArray, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ArmButtonUIArray, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, VOFinished, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, UnknownData_ZZ4D, 0x0D69);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, EndoMaterial, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, DidNotClickConnector, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, UnknownData_WD71, 0x0D79);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, PartsAndServiceCenter, 0x0D79);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ButtonBrightnessMultiplier, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, InstructionCardHasBeenViewed, 0x0DAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, CurrentInstructionCard, 0x0DAD);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, UnknownData_IPJU, 0x0DAE);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, ClickedEyeCollider, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, PerformingEyeRemoval, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, UnknownData_CJXL, 0x0DB9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, DynamicMaterials, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, TempBrightnessToReturnTo, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, BrightnessSimonButtonFlash, 0x0E14);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, BrightnessConnectedButton, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APS_Upgrade_And_Test_BP_C, BrightnessDisconnectedButton, 0x0E1C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APS_Upgrade_And_Test_BP_C, 0x0E20);
		}

		// class UImpactShake_Animatronics_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__ImpactShake_Animatronics__ImpactShake_Animatronics_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImpactShake_Animatronics_C, 0x0160);
		}

		// class UPlayerIsVisible_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__PlayerIsVisible__PlayerIsVisible_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerIsVisible_C, 0x00A0);
		}

		// class ACheckPointMgr_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__CheckPointMgr__CheckPointMgr_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPointMgr_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPointMgr_C, _2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPointMgr_C, _1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPointMgr_C, AI_Starts, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPointMgr_C, StartSpot, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPointMgr_C, DefaultSceneRoot, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPointMgr_C, RecalcCheckpoints, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPointMgr_C, UnknownData_G341, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPointMgr_C, Checkpoints, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPointMgr_C, Players, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPointMgr_C, StartingSpotChecker, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPointMgr_C, Starting, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPointMgr_C, UnknownData_U8LA, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPointMgr_C, Type, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPointMgr_C, Number_of_laps, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPointMgr_C, UnknownData_5SAR, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPointMgr_C, RaceTimeTickTimer, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPointMgr_C, ShouldUpdatePlayerPositions, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPointMgr_C, UnknownData_UZAQ, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPointMgr_C, EndSpawnPawn, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPointMgr_C, PlayPositions, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACheckPointMgr_C, 0x0308);
		}

		// class APRE_LazerElevator_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PRE_LazerElevator__PRE_LazerElevator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, Button, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, Play_sfx_elevator_run_lp, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, RectLight5, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, DoubleCheck, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, LaserTag_Door_Entrance, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, Sounds, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, StartGame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, Doors, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, floor_grate, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, LaserTag_Door_LasertagArea, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, wall1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, wall, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, SM_Small_Door_Frame2, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, ceiling_thin, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, SM_Small_Door_Frame1, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, RectLight4, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, SM_CeilingCenter02_1_Backlight, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, SM_CeilingCenter01_1_Ceiling, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, wall_corner6, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, floor_corner, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, SM_Lamp2, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, SM_Lamp1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, wall_corner4, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, wall_corner5, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, wall_corner3, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, floor_corner1, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, e1, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, E, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, Scene, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, ceiling_thin1, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, SM_Lamp3, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, SM_Lamp, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, Intensity_Intensity_00FA0D184075C6BAE69F28BEF8EAD732, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, Intensity_Light_Intensity_00FA0D184075C6BAE69F28BEF8EAD732, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, Intensity__Direction_00FA0D184075C6BAE69F28BEF8EAD732, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, UnknownData_CTK8, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, Intensity, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, LaserTag_Elevator_Position_LaserTag_Elevator_Position_1F590479486F8FCCCDC523B612F8315F, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, LaserTag_Elevator_Position__Direction_1F590479486F8FCCCDC523B612F8315F, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, UnknownData_XAP1, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, LaserTag_Elevator_Position, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, Event_game_Mode, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, GameModeSelectedTimer, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, ElevatorMoving, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, UnknownData_KZ38, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, LaserTagDoorsArray, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, CurrentRecLightIntensity, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, UnknownData_BY3Y, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, LightArray, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, Material_SM_Lamp_Instance, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, M_Floor_Corner_Instance, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, CurrentMaterialEmissiveIntensity, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, UnknownData_I0A1, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, LightStartColor, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, OriginalIntensitySMLampInstance, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, OriginalIntensityFloorCornerInstance, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, OriginalEmissiveSMLampInstance, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, OriginalEmissiveMFloorCornerInstance, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, StartOpen, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, UnknownData_7H94, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, OtherElevator, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, IsAtBottom, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, UnknownData_9NDX, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, BottomDoor, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_LazerElevator_C, Can_Take_Player_Down, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_LazerElevator_C, 0x0459);
		}

		// class UEarDynamicsABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__EarDynamicsABP__EarDynamicsABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEarDynamicsABP_C, UnknownData_5P3H, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEarDynamicsABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEarDynamicsABP_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEarDynamicsABP_C, UnknownData_XCJT, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEarDynamicsABP_C, AnimGraphNode_AnimDynamics_4, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEarDynamicsABP_C, AnimGraphNode_LookAt_2, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEarDynamicsABP_C, AnimGraphNode_AnimDynamics_3, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEarDynamicsABP_C, AnimGraphNode_LookAt, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEarDynamicsABP_C, AnimGraphNode_AnimDynamics_2, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEarDynamicsABP_C, AnimGraphNode_AnimDynamics, 0x12D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEarDynamicsABP_C, AnimGraphNode_ComponentToLocalSpace, 0x1710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEarDynamicsABP_C, AnimGraphNode_LinkedInputPose, 0x1730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEarDynamicsABP_C, AnimGraphNode_LocalToComponentSpace, 0x17A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEarDynamicsABP_C, AnimDynamics_Ears, 0x17C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEarDynamicsABP_C, UnknownData_RWFL, 0x17C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEarDynamicsABP_C, EarDynamicAlpha, 0x17CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEarDynamicsABP_C, EaringDynamicAlpha, 0x17D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEarDynamicsABP_C, 0x17D4);
		}

		// class UAnimatrronic_Aim_ABP_LINK_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Animatrronic_Aim_ABP_LINK__Animatrronic_Aim_ABP_LINK_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, UnknownData_U9DF, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, AnimGraphNode_LocalToComponentSpace_2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, AnimGraphNode_ComponentToLocalSpace_2, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, AnimGraphNode_LinkedInputPose, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, AnimGraphNode_SaveCachedPose, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, AnimGraphNode_UseCachedPose_4, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, AnimGraphNode_UseCachedPose_3, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, AnimGraphNode_LayeredBoneBlend, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, UnknownData_1I3E, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, AnimGraphNode_LookAt_2, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, AnimGraphNode_LookAt, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, AnimGraphNode_RotationOffsetBlendSpace_3, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, AnimGraphNode_RotationOffsetBlendSpace_2, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, AnimGraphNode_UseCachedPose_2, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, AnimGraphNode_BlendListByBool, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, AnimGraphNode_RotationOffsetBlendSpace, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, AnimGraphNode_UseCachedPose, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, AnimGraphNode_TwoWayBlend, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, AnimGraphNode_ApplyLimits, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, AnimGraphNode_LocalToComponentSpace, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, AnimGraphNode_ComponentToLocalSpace, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, AnimGraphNode_ApplyAdditive, 0x1008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, AnimGraphNode_SequencePlayer, 0x10D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, HeadAimTarget, 0x1148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, HeadAimAlpha, 0x1154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, HeadAimRot, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, IsHeadAiming, 0x1164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, UnknownData_VI76, 0x1165);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, SpineTurnRot, 0x1168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, isTurning, 0x1174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, UnknownData_B5S5, 0x1175);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, isTurningAlpha, 0x1178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, AnimatronicMode, 0x117C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, UnknownData_DTH2, 0x117D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, SpeedInput, 0x1180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, isChica, 0x1184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, IsOpen, 0x1185);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, UnknownData_YQE7, 0x1186);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, OpenAlpha, 0x1188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, SpineOverrideAlpha, 0x118C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, OverrideHeadAim, 0x1190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatrronic_Aim_ABP_LINK_C, CanUpdate, 0x1191);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimatrronic_Aim_ABP_LINK_C, 0x1192);
		}

		// class AVentExit_Trigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__VentExit_Trigger__VentExit_Trigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentExit_Trigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentExit_Trigger_C, MissionStateCondition, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentExit_Trigger_C, LineSkipper, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentExit_Trigger_C, chicaPawn, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVentExit_Trigger_C, 0x02D8);
		}

		// class AGregory_C : public AFirstPersonCharacter_C
		TEST_METHOD(BlueprintGeneratedClass__Gregory__Gregory_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, UnknownData_Z3YY, 0x0712);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, UberGraphFrame, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, FlashlightActor, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, LostAndFound, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, GregoryLight, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, FlashlightRotator, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, LookAt, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, Plane, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, FlashLightMesh, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, LaserGun, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, FlashBeacon, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, RIG_FazWatchHand, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, SprintStamina, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, MOD_GregFlashlight_00, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, LevelStreamViewpoint, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, EjectCameraSpline, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, Sight, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, BallpitCollider, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, VisualSource, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, ThrowableInHand, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, ThrowableSpawn, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, HasThrowable, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, UnknownData_LCXA, 0x07B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, HideLocation, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, CanHide, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, UnknownData_57JD, 0x07C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, ClosestHideLocation, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, IsHiding, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, UnknownData_ILFQ, 0x07D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, LocationBeforeHide, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, CameraOriginalRelativeLocation, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, IsLeaning, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, UnknownData_6XZL, 0x07F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, DeltaSeconds, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, ItemActive, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, EquippedItem, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, IsPeeking, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, UnknownData_2BB6, 0x0809);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, LaserTagHUD, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, CanToggleFlashlight, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, UnknownData_GYNT, 0x0819);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, LightFunctionMaterial, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, IsGettingJumpScare, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, UnknownData_K5PG, 0x0829);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, FlashStunRadius, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, LeftArmRotateTarget, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, LeftArmRotateInterpSpeed, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, HasFlashlight, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, UnknownData_67RN, 0x0839);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, WalkBobRef, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, HeadBobVelocity, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, UnknownData_YHEM, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, IdleHeadBobCurve, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, WalkHeadBobCurve, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, RunHeadBobCurve, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, TotalTime, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, HeadBobTarget, 0x086C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, CurrentHeadBob, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, HeadBobBlendTime, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, HeadBobRunMult, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, HeadBobVelocityScale, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, IsJumping, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, isEjectPawnActive, 0x0891);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, UnknownData_ZQ4R, 0x0892);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, OnNonLethalScareComplete, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, CanSwitchItem, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, UnknownData_P52H, 0x08A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, PreHideEquipment, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, RunningFOV, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, HidingFOV, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, StoredPriority_1, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, UnknownData_ATRK, 0x08C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, CrouchHeadBobCurve, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, GregoryOverlayWidget, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, OnKill, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, InstructionRow, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, TakeOverPosses, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, UnknownData_4A1B, 0x0949);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, OnLethalJumpScare, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, DefaultCrouchSpeed, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, UnknownData_9AM1, 0x0964);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, WatchUI, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, FirstPersonABP, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, PickedUpFlashlight, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, ExitingFreddy, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, UnknownData_3GDG, 0x0989);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, FlashlightInventoryName, 0x098C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, FootStepTriggerThreshold, 0x0994);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, NewVar_0_1, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, FootStepTriggerThreshold_Target, 0x099C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, isMoving, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, Respawning, 0x09A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, Unpossess_, 0x09A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, UnknownData_XHVL, 0x09A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, FlashlightBrightness, 0x09A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, RefTOFlashlightActor, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, line_playing, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, UnknownData_XY4K, 0x09B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, CurrentTapeActor, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, IsLookingAtHiddenDoor_, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, IsLookingAtTape_, 0x09C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, UnknownData_F1NA, 0x09C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, HiddenDoorActor, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, RandomVannyVO, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, FazerBlasterRechargeTime, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, FazCamCooldownTime, 0x09E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, UnknownData_A59C, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGregory_C, RelativeFlashlightTransform, 0x09F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGregory_C, 0x0A20);
		}

		// class UBI_UserInputUI_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BI_UserInputUI__BI_UserInputUI_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBI_UserInputUI_C, 0x0028);
		}

		// class ASequencerAmbienceState_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SequencerAmbienceState__SequencerAmbienceState_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASequencerAmbienceState_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASequencerAmbienceState_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASequencerAmbienceState_C, Global_ambiance, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASequencerAmbienceState_C, 0x0260);
		}

		// class APRE_GtrGlf_BarrelToxic_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PRE_GtrGlf_BarrelToxic__PRE_GtrGlf_BarrelToxic_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_BarrelToxic_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_BarrelToxic_C, MOD_GtrGlf_Boat, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_BarrelToxic_C, Subtle_bob_NewTrack_0_2966235B49198575202FF8A614982B85, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_BarrelToxic_C, Subtle_bob__Direction_2966235B49198575202FF8A614982B85, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_BarrelToxic_C, UnknownData_0LYT, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_BarrelToxic_C, Subtle_bob, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_BarrelToxic_C, Updated_Z_Rotation, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_BarrelToxic_C, Updated_X_Rotation, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_BarrelToxic_C, Total_height_Adjust, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_BarrelToxic_C, Intensity_Height, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_BarrelToxic_C, Intensity_ZRotate, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_GtrGlf_BarrelToxic_C, Intensity_XRotate, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_GtrGlf_BarrelToxic_C, 0x0260);
		}

		// class AVentExitTrigger_C : public APlayerTrigger
		TEST_METHOD(BlueprintGeneratedClass__VentExitTrigger__VentExitTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentExitTrigger_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVentExitTrigger_C, LineSkipper, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVentExitTrigger_C, 0x02A0);
		}

		// class UDbgHourSkipPathSelect_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DbgHourSkipPathSelect__DbgHourSkipPathSelect_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDbgHourSkipPathSelect_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDbgHourSkipPathSelect_C, Button_2, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDbgHourSkipPathSelect_C, Button_3, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDbgHourSkipPathSelect_C, OnPathSelected, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDbgHourSkipPathSelect_C, SkipInfo, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDbgHourSkipPathSelect_C, 0x0268);
		}

		// class UDBG_SeekerWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DBG_SeekerWidget__DBG_SeekerWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBG_SeekerWidget_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBG_SeekerWidget_C, CurrentRoomText, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBG_SeekerWidget_C, AISeeker, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBG_SeekerWidget_C, 0x0248);
		}

		// class UDebugInstructionCardButton_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DebugInstructionCardButton__DebugInstructionCardButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugInstructionCardButton_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugInstructionCardButton_C, ButtonText, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugInstructionCardButton_C, TheButton, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugInstructionCardButton_C, InstructionCardWidget, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugInstructionCardButton_C, InstructionCardUI, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugInstructionCardButton_C, 0x0258);
		}

		// class UTeleportTo_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__TeleportTo__TeleportTo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTeleportTo_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTeleportTo_C, TeleportActor, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTeleportTo_C, 0x00D8);
		}

		// class UMissionInfoElementHUD_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MissionInfoElementHUD__MissionInfoElementHUD_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionInfoElementHUD_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionInfoElementHUD_C, MissionDescription, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionInfoElementHUD_C, MissionDescription_RichText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionInfoElementHUD_C, MissionName_RichText, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionInfoElementHUD_C, MissionName_TextBlock, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionInfoElementHUD_C, MissionTitleBorder_Normal, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionInfoElementHUD_C, MissionTitleBorder_Special, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionInfoElementHUD_C, UI_TextAndIcons, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionInfoElementHUD_C, 0x0270);
		}

		// class UWI_Freddy_FazNotification_C : public UWI_Empty_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_Freddy_FazNotification__WI_Freddy_FazNotification_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Freddy_FazNotification_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Freddy_FazNotification_C, RoxyFazWarning, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Freddy_FazNotification_C, RoxyyFazNotification, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Freddy_FazNotification_C, FazMessage, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Freddy_FazNotification_C, FreddyFazNotification, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Freddy_FazNotification_C, FreddyFazWarning, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Freddy_FazNotification_C, DefaultFazwatch, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Freddy_FazNotification_C, NewMessage, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Freddy_FazNotification_C, OpenFazwatch, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Freddy_FazNotification_C, Press_TextAndIcon, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_Freddy_FazNotification_C, WarningTriangle, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_Freddy_FazNotification_C, 0x0298);
		}

		// class UPauseUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PauseUI__PauseUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, AcceptBackBox, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, AcceptRichText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, BackButton, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, BackButtonRichText, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, BackButtonRichText_2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, BackButtonRichText_3, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, Background_BlackImage, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, Background_PuepleBacking, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, ExitGameButton, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, ExitGamePopUp, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, ExitToTitlePopUp, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, InventoryButton, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, ItemCollectionUI, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, MainMenuButton, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, MessagesButton, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, OptionsButton, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, OptionsUI, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, Pause_WidgetSwitcher, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, PauseTitle_Overlay, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, ResumeButton, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, UpKey, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, DownKey, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, GamepadUp, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, GamepadDown, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, PreviousIndex, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, UnknownData_AMHL, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, ClickedEvent, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, HoveredEvent, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPauseUI_C, PopUpWasClosed, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPauseUI_C, 0x0351);
		}

		// class UWI_PowerLevel_C : public UWI_Empty_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_PowerLevel__WI_PowerLevel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_PowerLevel_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_PowerLevel_C, BatteryPowerBar, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_PowerLevel_C, BatteryPowerBar_2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_PowerLevel_C, BatteryPowerBar_3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_PowerLevel_C, BatteryPowerBar_4, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_PowerLevel_C, BatteryPowerBar_5, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_PowerLevel_C, BatteryPowerBar_6, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_PowerLevel_C, BatteryPowerBar_7, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_PowerLevel_C, BatteryPowerBar_8, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_PowerLevel_C, BatteryPowerBar_9, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_PowerLevel_C, FlashBar, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_PowerLevel_C, IndividualBatteries_Box, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_PowerLevel_C, PowerMeterBase, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_PowerLevel_C, CanUseFlash, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_PowerLevel_C, LowPower, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_PowerLevel_C, FreddyColors, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_PowerLevel_C, UnknownData_03Q4, 0x02AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_PowerLevel_C, MaxPower, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_PowerLevel_C, NumberBatteryBars, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_PowerLevel_C, UnknownData_U0IL, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_PowerLevel_C, LowPowerAlert, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_PowerLevel_C, 0x02C8);
		}

		// class UAIRoomTask_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__AIRoomTask__AIRoomTask_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIRoomTask_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIRoomTask_C, UsePawnRoom, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIRoomTask_C, UnknownData_DUZ2, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIRoomTask_C, BBRoom, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIRoomTask_C, ControlledPawn, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIRoomTask_C, RoomToSearch, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIRoomTask_C, OwnerController, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIRoomTask_C, 0x00F8);
		}

		// class AImpromptuHandrailBP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ImpromptuHandrailBP__ImpromptuHandrailBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, DefaultSceneRoot, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, HandrailEndPoint, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, SlopeAngle, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, MakeRails, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, MakeSecondRail, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, UnknownData_WC63, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, SecondRailHeightOffset, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, Handrail_Scaling_Method, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, UnknownData_4SHL, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, HandrailSectionLength, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, RailYScale, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, RailZScale, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, RailZOffset, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, HandrailHeight, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, OverrideMeshMaterials, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, UnknownData_EET1, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, RailMesh, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, RailMeshLength, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, UnknownData_EOMA, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, RailMaterial, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, SecondRailMesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, SecondRailMaterial, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, DistanceToCover, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, NumWholeSections, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, RemainderFraction, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, UnknownData_CI2X, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, RailInstanceComponent, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, MakeStruts, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, StrutRandomYaw, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, UnknownData_MTKP, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, StrutXScale, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, StrutYScale, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, SkipFirstStrut, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, SkipEndStrut, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, UniqueFirstStrut, 0x02B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, FirstStrutRandomYaw, 0x02B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, UniqueEndStrut, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, EndStrutRandomYaw, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, MakeBalasturs, 0x02BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, BalusterRandomYaw, 0x02BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, UnknownData_PLOT, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, StrutInstanceComponent, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, StrutMesh, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, StrutMeshHeight, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, UnknownData_KGA4, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, StrutMaterial, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, BalusterInstanceComponent, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, UniqueFirstStrutMesh, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, UniqueFirstStrutMaterial, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, UniqueEndStrutMesh, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, UniqueEndStrutMaterial, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, BalusterMesh, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, BalusterMeshHeight, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, UnknownData_6XWC, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, BalusterMaterial, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, BalustersPerSection, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, BalusterXScale, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, BalusterYScale, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, BalusterZOffset, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AImpromptuHandrailBP_C, LowerRailInstanceComponent, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AImpromptuHandrailBP_C, 0x0338);
		}

		// class AVannyDistortionActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__VannyDistortionActor__VannyDistortionActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVannyDistortionActor_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVannyDistortionActor_C, PostProcess, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVannyDistortionActor_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVannyDistortionActor_C, Timeline_0_Gain_A1496DB149BC8BBC56B98E96F25145CC, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVannyDistortionActor_C, Timeline_0_Grain_A1496DB149BC8BBC56B98E96F25145CC, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVannyDistortionActor_C, Timeline_0_VI_A1496DB149BC8BBC56B98E96F25145CC, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVannyDistortionActor_C, Timeline_0_Color_A1496DB149BC8BBC56B98E96F25145CC, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVannyDistortionActor_C, Timeline_0_LUT_Intensity_A1496DB149BC8BBC56B98E96F25145CC, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVannyDistortionActor_C, Timeline_0_FlickeringIntensity_A1496DB149BC8BBC56B98E96F25145CC, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVannyDistortionActor_C, Timeline_0_ScreenRadius_A1496DB149BC8BBC56B98E96F25145CC, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVannyDistortionActor_C, Timeline_0_GlobalIntensity_A1496DB149BC8BBC56B98E96F25145CC, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVannyDistortionActor_C, Timeline_0__Direction_A1496DB149BC8BBC56B98E96F25145CC, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVannyDistortionActor_C, UnknownData_6VTY, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVannyDistortionActor_C, Timeline_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVannyDistortionActor_C, DistortMaterial, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVannyDistortionActor_C, LUT_Intensity, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVannyDistortionActor_C, UnknownData_OADA, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVannyDistortionActor_C, BiasCurve, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVannyDistortionActor_C, 0x0288);
		}

		// class AKitchenBotPizzaStation_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__KitchenBotPizzaStation__KitchenBotPizzaStation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, InteractPoint, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, Niagara, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, Ak, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, pizza, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, AlwaysFaceCameraComponent_Kitchen, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, AlwaysFaceCameraComponent, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, Scene, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, Maker, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, Oven, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, Text_StationName, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, PlayerInteractHoldComponent, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, StaffBotDetector, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, DefaultSceneRoot, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, PizzaMakerManager, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, PizzaStep, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, UnknownData_VG7M, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, P_StationName, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, TextVisible, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, Used, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, UnknownData_VEMT, 0x02E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, StaffBot, 0x02E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, PizzaTaken, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKitchenBotPizzaStation_C, NewVar_1, 0x0311);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKitchenBotPizzaStation_C, 0x0312);
		}

		// class APRE_PartyDoor_Long_InteractOpen_C : public APRE_PartyDoor_Long_C
		TEST_METHOD(BlueprintGeneratedClass__PRE_PartyDoor_Long_InteractOpen__PRE_PartyDoor_Long_InteractOpen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_InteractOpen_C, UnknownData_DISQ, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_InteractOpen_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_Long_InteractOpen_C, LightAreaDoorComponent, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_PartyDoor_Long_InteractOpen_C, 0x0358);
		}

		// class UAnimNotify_AkEvent_C : public UAnimNotify
		TEST_METHOD(BlueprintGeneratedClass__AnimNotify_AkEvent__AnimNotify_AkEvent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkEvent_C, Attach_Name, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkEvent_C, Event, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkEvent_C, Follow, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkEvent_C, UnknownData_T8O4, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkEvent_C, EventName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkEvent_C, PlayRegardlessOfAudibleRange, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_AkEvent_C, 0x0069);
		}

		// class UW_CountDown_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_CountDown__W_CountDown_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CountDown_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CountDown_C, GoAnimation, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CountDown_C, CountAnimation, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CountDown_C, TextBlock_54, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CountDown_C, CountDownAmount, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CountDown_C, CountDownNumber, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_CountDown_C, 0x0258);
		}

		// class UMovieSceneMediaPlayerPropertySection : public UMovieSceneSection
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaPlayerPropertySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, MediaSource, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, bLoop, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, UnknownData_N1N8, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaPlayerPropertySection, 0x00F0);
		}

		// class UMovieSceneMediaPlayerPropertyTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaPlayerPropertyTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaPlayerPropertyTrack, 0x0088);
		}

		// class UMovieSceneMediaSection : public UMovieSceneSection
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaSource, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, bLooping, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, UnknownData_YEXK, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, StartFrameOffset, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaTexture, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaSoundComponent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, bUseExternalMediaPlayer, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, UnknownData_KRQ2, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, ExternalMediaPlayer, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaSection, 0x0110);
		}

		// class UMovieSceneMediaTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaTrack, MediaSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaTrack, 0x0068);
		}

		// class UFollowMainPath_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FollowMainPath__FollowMainPath_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFollowMainPath_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFollowMainPath_C, DestinationNodeKey, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFollowMainPath_C, AcceptanceRadius, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFollowMainPath_C, UnknownData_SF8J, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFollowMainPath_C, FindNextPoint, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFollowMainPath_C, PathIndexKey, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFollowMainPath_C, Destination, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFollowMainPath_C, 0x011C);
		}

		// class UStaticMeshDescription : public UMeshDescriptionBase
		TEST_METHOD(Class__StaticMeshDescription__StaticMeshDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshDescription, 0x0390);
		}

		// class UFP_JumpscareShake_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__FP_JumpscareShake__FP_JumpscareShake_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFP_JumpscareShake_C, 0x0160);
		}

		// class UBFL_Localization_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__BFL_Localization__BFL_Localization_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBFL_Localization_C, 0x0028);
		}

		// class UWorker_ReverseDirection_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__Worker_ReverseDirection__Worker_ReverseDirection_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_ReverseDirection_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_ReverseDirection_C, TP_Has_Prop, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_ReverseDirection_C, UnknownData_DTUO, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_ReverseDirection_C, Forward_Along_Spline, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_ReverseDirection_C, Direction_Along_Spline, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_ReverseDirection_C, At_Start_Of_Spline, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_ReverseDirection_C, At_End_Of_Spline, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_ReverseDirection_C, InitialBool, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_ReverseDirection_C, UnknownData_GEF1, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_ReverseDirection_C, InitialFoat, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_ReverseDirection_C, PauseTask, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorker_ReverseDirection_C, 0x0188);
		}

		// class UMoonman_Daycare_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Moonman_Daycare_ABP__Moonman_Daycare_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, UnknownData_F0Y7, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_TransitionResult_18, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_TransitionResult_17, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_TransitionResult_16, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_TransitionResult_15, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_TransitionResult_14, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_TransitionResult_13, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_TransitionResult_12, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_SequencePlayer_14, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_StateResult_14, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_SequencePlayer_13, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_StateResult_13, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_SequencePlayer_12, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_StateResult_12, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_SequencePlayer_11, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_StateResult_11, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_UseCachedPose, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_StateResult_10, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_StateMachine_2, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_SaveCachedPose, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_Slot, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_TransitionResult_11, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_TransitionResult_10, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_TransitionResult_9, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_TransitionResult_8, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_TransitionResult_7, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_TransitionResult_6, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_TransitionResult_5, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_TransitionResult_4, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_TransitionResult_3, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_TransitionResult_2, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_TransitionResult, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_SequencePlayer_10, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_StateResult_9, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_SequencePlayer_9, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_StateResult_8, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_SequencePlayer_8, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_StateResult_7, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_SequencePlayer_7, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_StateResult_6, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_SequencePlayer_6, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_StateResult_5, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_TwoWayBlend, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_SequencePlayer_5, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_SequencePlayer_4, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_StateResult_4, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_BlendSpacePlayer, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_StateResult_3, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_SequencePlayer_3, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_StateResult_2, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_SequencePlayer_2, 0x1108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_StateResult, 0x1180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_StateMachine, 0x11B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_BlendListByBool, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_ModifyBone, 0x1300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_LocalToComponentSpace, 0x1408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_ComponentToLocalSpace, 0x1428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, AnimGraphNode_SequencePlayer, 0x1448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, DeltaTimeX, 0x14C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, TargetSpinePitch, 0x14C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, GroundColliderPitch, 0x14C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, Head_Aim_Loc, 0x14CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, RootTrace, 0x14D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, RootRotation, 0x14E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, Spine1_jnt, 0x14F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, Valid, 0x14F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, isPhase2, 0x14F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, canJumpscare, 0x14FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, isPanic, 0x14FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, IsCrouched, 0x14FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, IsInTubes, 0x14FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, isBlockingPlayer, 0x14FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, NearPlayer, 0x14FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, ForceWalk, 0x1500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, isCarryingPlayer, 0x1501);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, JointOveride, 0x1502);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, isMoving, 0x1503);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, Phase, 0x1504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, NewVar_1, 0x150C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, Timer, 0x1510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonman_Daycare_ABP_C, SpeedInput, 0x1514);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoonman_Daycare_ABP_C, 0x1518);
		}

		// class UGregoryDistanceY_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__GregoryDistanceY__GregoryDistanceY_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryDistanceY_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryDistanceY_C, PlayerDistanceKey, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGregoryDistanceY_C, 0x00C8);
		}

		// class UAnimatronic_ABP_Roxy_C : public UAnimatronic_ABP_MASTER_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Animatronic_ABP_Roxy__Animatronic_ABP_Roxy_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Roxy_C, UberGraphFrame, 0x8DE8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimatronic_ABP_Roxy_C, 0x8DF0);
		}

		// class UMissionHUD_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MissionHUD__MissionHUD_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionHUD_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionHUD_C, FadeOut, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionHUD_C, CanvasPanel_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionHUD_C, MissionInfoElementHUD, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionHUD_C, MissionInfoTest, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionHUD_C, RunningUpdates, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionHUD_C, UnknownData_VB1A, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionHUD_C, MissionTextFormatter, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionHUD_C, DelayCounter, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionHUD_C, UnknownData_MUX9, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionHUD_C, MoveFromCenterToTopLeft, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionHUD_C, 0x0280);
		}

		// class ASunman_C : public AAISeeker_C
		TEST_METHOD(BlueprintGeneratedClass__Sunman__Sunman_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASunman_C, UnknownData_JX6C, 0x07F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASunman_C, UberGraphFrame, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASunman_C, Camera, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASunman_C, CameraOverrideComponent, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASunman_C, PlayerCarry, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASunman_C, PlayerCarryTrigger, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASunman_C, PhaseBB, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASunman_C, Daycare_Office, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASunman_C, PlayerBB, 0x0850);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASunman_C, 0x0858);
		}

		// class UImpactShake_DJMM_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__ImpactShake_DJMM__ImpactShake_DJMM_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImpactShake_DJMM_C, 0x0160);
		}

		// class UStaffbot_Security_LINK_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Staffbot_Security_LINK__Staffbot_Security_LINK_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, UnknownData_IDT2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_TransitionResult_9, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_TransitionResult_8, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_TransitionResult_7, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_TransitionResult_6, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_SequencePlayer_7, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_StateResult_7, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_SequencePlayer_6, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_LayeredBoneBlend, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_SequencePlayer_5, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_StateResult_6, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_TransitionResult_5, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_TransitionResult_4, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_TransitionResult_3, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_TransitionResult_2, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_TransitionResult, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_SequencePlayer_4, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_StateResult_5, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_SequencePlayer_3, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_StateResult_4, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_SequencePlayer_2, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_StateResult_3, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_SequencePlayer, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_BlendListByBool, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_RandomPlayer, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_StateResult_2, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_StateMachine_2, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_StateResult, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AnimGraphNode_StateMachine, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, IsHeadAiming, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, UnknownData_CMRL, 0x0BE1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, R_WristAim, 0x0BE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, isMoving, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, IsWarning, 0x0BF1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, UnknownData_0J9B, 0x0BF2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, AimTarget, 0x0BF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, canJumpscare, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, isTurning, 0x0C01);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, UnknownData_4EUN, 0x0C02);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, Pawn, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Security_LINK_C, Time, 0x0C10);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaffbot_Security_LINK_C, 0x0C14);
		}

		// class APRE_FazXpress_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PRE_FazXpress__PRE_FazXpress_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, pizza, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, MOD_FazXpress_03, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, MOD_FazXpress_02, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, MOD_FazXpress_01, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, DefaultSceneRoot, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, Timeline_0_In_687ED2B54AEF0CFE9925BCABFB4A686F, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, Timeline_0_Out_687ED2B54AEF0CFE9925BCABFB4A686F, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, Timeline_0__Direction_687ED2B54AEF0CFE9925BCABFB4A686F, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, UnknownData_OBAM, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, Timeline_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, DoorMovement_Close_630B307D4679F08D9BE90DB7B85D8BD0, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, DoorMovement_Open_630B307D4679F08D9BE90DB7B85D8BD0, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, DoorMovement__Direction_630B307D4679F08D9BE90DB7B85D8BD0, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, UnknownData_XCB7, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, DoorMovement, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, Open_, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, Out_, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, UnknownData_L140, 0x028A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, On_Door_Open, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, On_Door_Closed, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, On_Tray_In, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, On_Tray_Out, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, Delay_Time, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, UnknownData_I4WE, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, On_Take_Pizza, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, Player_Pizza, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_FazXpress_C, Can_Take_Pizza, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_FazXpress_C, 0x02F1);
		}

		// class ABP_PowerMeter_Door_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_PowerMeter_Door__BP_PowerMeter_Door_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PowerMeter_Door_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PowerMeter_Door_C, MOD_Powermeter, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PowerMeter_Door_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PowerMeter_Door_C, PowerLevel, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PowerMeter_Door_C, IncreasePower, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PowerMeter_Door_C, DrainPower, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PowerMeter_Door_C, UnknownData_S9M7, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PowerMeter_Door_C, DrainRate, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PowerMeter_Door_C, NewPowerLevel, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PowerMeter_Door_C, NextPipLevel, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PowerMeter_Door_C, MeterActive, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PowerMeter_Door_C, 0x0255);
		}

		// class AFreddyGuideSick_C : public AFreddy_C
		TEST_METHOD(BlueprintGeneratedClass__FreddyGuideSick__FreddyGuideSick_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyGuideSick_C, UberGraphFrame, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyGuideSick_C, PathActor, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyGuideSick_C, PathActorKey, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyGuideSick_C, PatrolPointIndexKey, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyGuideSick_C, Freddy_Audio_Playing_, 0x0938);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFreddyGuideSick_C, 0x0939);
		}

		// class URoxyDynamicsABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__RoxyDynamicsAbp__RoxyDynamicsABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, UnknownData_S8G1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, UnknownData_MLGP, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, AnimGraphNode_AnimDynamics_5, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, AnimGraphNode_AnimDynamics_4, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, AnimGraphNode_SequencePlayer_3, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, AnimGraphNode_LayeredBoneBlend_2, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, AnimGraphNode_ComponentToLocalSpace_2, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, AnimGraphNode_LocalToComponentSpace_2, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, AnimGraphNode_ApplyAdditive, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, AnimGraphNode_ComponentToLocalSpace, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, AnimGraphNode_SequencePlayer_2, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, UnknownData_VCHZ, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, AnimGraphNode_AnimDynamics_3, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, AnimGraphNode_LinkedInputPose, 0x1220);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, AnimGraphNode_LocalToComponentSpace, 0x1298);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, AnimGraphNode_LayeredBoneBlend, 0x12B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, AnimGraphNode_SequencePlayer, 0x1378);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, AnimGraphNode_AnimDynamics_2, 0x13F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, AnimGraphNode_Constraint, 0x1830);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, UnknownData_7GMZ, 0x1938);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, AnimGraphNode_AnimDynamics, 0x1940);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, AnimGraphNode_Root, 0x1D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, AnimDynamics_Roxy, 0x1DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, UnknownData_QS7P, 0x1DB1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, TailDynamicAlpha, 0x1DB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URoxyDynamicsABP_C, HairDynamicAlpha, 0x1DB8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URoxyDynamicsABP_C, 0x1DBC);
		}

		// class UChicaDynamicsABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__ChicaDynamicsAbp__ChicaDynamicsABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChicaDynamicsABP_C, UnknownData_PD21, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChicaDynamicsABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChicaDynamicsABP_C, UnknownData_FB3T, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChicaDynamicsABP_C, AnimGraphNode_AnimDynamics_2, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChicaDynamicsABP_C, AnimGraphNode_ComponentToLocalSpace, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChicaDynamicsABP_C, AnimGraphNode_LinkedInputPose, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChicaDynamicsABP_C, AnimGraphNode_LocalToComponentSpace, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChicaDynamicsABP_C, UnknownData_PJB8, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChicaDynamicsABP_C, AnimGraphNode_AnimDynamics, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChicaDynamicsABP_C, AnimGraphNode_Root, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChicaDynamicsABP_C, AnimGraphNode_RigidBody, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChicaDynamicsABP_C, EaringDynamicAlpha, 0x1180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChicaDynamicsABP_C, AnimDynamics_Chica, 0x1184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChicaDynamicsABP_C, Shattered, 0x1185);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChicaDynamicsABP_C, UnknownData_AHA4, 0x1186);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChicaDynamicsABP_C, HairDynamicAlpha, 0x1188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChicaDynamicsABP_C, 0x118C);
		}

		// class USetBool_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__SetBool__SetBool_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetBool_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetBool_C, BBBool, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetBool_C, Value, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetBool_C, 0x00D9);
		}

		// class AWrongPass_Trigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__WrongPass_Trigger__WrongPass_Trigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWrongPass_Trigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWrongPass_Trigger_C, InventoryConditional, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWrongPass_Trigger_C, MissionStateCondition, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWrongPass_Trigger_C, LineSkipper, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWrongPass_Trigger_C, 0x02B8);
		}

		// class ABarricade_Trigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__Barricade_Trigger__Barricade_Trigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABarricade_Trigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABarricade_Trigger_C, MissionStateCondition, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABarricade_Trigger_C, LineSkipper, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABarricade_Trigger_C, 0x02B0);
		}

		// class ULightAreaChanger_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__LightAreaChanger__LightAreaChanger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightAreaChanger_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightAreaChanger_C, FrontArea, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightAreaChanger_C, BackArea, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightAreaChanger_C, OnAreaChangeFinished, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightAreaChanger_C, OnFadeInFinished, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightAreaChanger_C, 0x00E0);
		}

		// class ATentacleController_C : public AActivatableBase_C
		TEST_METHOD(BlueprintGeneratedClass__TentacleController__TentacleController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATentacleController_C, UnknownData_0WZB, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATentacleController_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATentacleController_C, Ak, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATentacleController_C, Intro_Delay, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATentacleController_C, UnknownData_UT7Z, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATentacleController_C, Vents, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATentacleController_C, OGM, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATentacleController_C, End_Delay, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATentacleController_C, 0x02A4);
		}

		// class UMagicLeapLightingTrackingComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeapLightEstimation__MagicLeapLightingTrackingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapLightingTrackingComponent, UseGlobalAmbience, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapLightingTrackingComponent, UseColorTemp, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapLightingTrackingComponent, UnknownData_9LYI, 0x00B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapLightingTrackingComponent, 0x00C0);
		}

		// class UMagicLeapLightEstimationFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapLightEstimation__MagicLeapLightEstimationFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapLightEstimationFunctionLibrary, 0x0028);
		}

		// class UInterpMoveComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__InterpMoveComponent__InterpMoveComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpMoveComponent_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpMoveComponent_C, InterpParam, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpMoveComponent_C, InterpSpeed, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpMoveComponent_C, Start_Position, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpMoveComponent_C, End_Position, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpMoveComponent_C, OnInterpFinished, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpMoveComponent_C, 0x00E8);
		}

		// class UMoveToPlayersHidingSpot_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__MoveToPlayersHidingSpot__MoveToPlayersHidingSpot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveToPlayersHidingSpot_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveToPlayersHidingSpot_C, ControlledPawn, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveToPlayersHidingSpot_C, OnwerController, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveToPlayersHidingSpot_C, HideLocation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveToPlayersHidingSpot_C, WasInChase, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoveToPlayersHidingSpot_C, 0x00C9);
		}

		// class ASlide_AtriumtoKitchen_Vent_C : public ASlideSystem_C
		TEST_METHOD(BlueprintGeneratedClass__Slide_AtriumtoKitchen_Vent__Slide_AtriumtoKitchen_Vent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlide_AtriumtoKitchen_Vent_C, UnknownData_D5DK, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlide_AtriumtoKitchen_Vent_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlide_AtriumtoKitchen_Vent_C, FlashlightMissionComplete, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASlide_AtriumtoKitchen_Vent_C, SplineFollower, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASlide_AtriumtoKitchen_Vent_C, 0x02A8);
		}

		// class UImgMediaSettings : public UObject
		TEST_METHOD(Class__ImgMediaFactory__ImgMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultFrameRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheBehindPercentage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheSizeGB, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheThreads, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheThreadStackSizeKB, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, GlobalCacheSizeGB, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UseGlobalCache, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_38K1, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, ExrDecoderThreads, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_WS5R, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultProxy, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UseDefaultProxy, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_RZZP, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSettings, 0x0068);
		}

		// class ARoxyLoadingDockTrigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__RoxyLoadingDockTrigger__RoxyLoadingDockTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARoxyLoadingDockTrigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARoxyLoadingDockTrigger_C, VOSource, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARoxyLoadingDockTrigger_C, 0x0288);
		}

		// class UFindMontyJumpDestinationAsync_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FindMontyJumpDestinationAsync__FindMontyJumpDestinationAsync_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMontyJumpDestinationAsync_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMontyJumpDestinationAsync_C, BBTargetPosition, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMontyJumpDestinationAsync_C, MaxJumpDistance, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMontyJumpDestinationAsync_C, DiffPlayerToMonty, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMontyJumpDestinationAsync_C, MinDistanceFromPlayer, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMontyJumpDestinationAsync_C, MaxDistanceFromPlayer, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMontyJumpDestinationAsync_C, MontyLocation, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMontyJumpDestinationAsync_C, NavQueryExtent, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMontyJumpDestinationAsync_C, MontySpawnOffset, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMontyJumpDestinationAsync_C, UnknownData_WA2D, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMontyJumpDestinationAsync_C, BBJumpMarker, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMontyJumpDestinationAsync_C, BBAllowJump, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindMontyJumpDestinationAsync_C, PlayerForward, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindMontyJumpDestinationAsync_C, 0x0174);
		}

		// class APlayerPlacementLocator_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PlayerPlacementLocator__PlayerPlacementLocator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPlacementLocator_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPlacementLocator_C, Arrow1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPlacementLocator_C, Sphere, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPlacementLocator_C, Arrow, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPlacementLocator_C, Scene, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerPlacementLocator_C, 0x0250);
		}

		// class AWestArcadeElevatorTrigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__WestArcadeElevatorTrigger__WestArcadeElevatorTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWestArcadeElevatorTrigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWestArcadeElevatorTrigger_C, LineSkipper, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWestArcadeElevatorTrigger_C, 0x02A8);
		}

		// class UVannyIntroCinematicPlayerUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__VannyIntroCinematicPlayerUI__VannyIntroCinematicPlayerUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, Image_89, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, ObjectiveList, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, TextSurroundingKeyIcon, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, Sound, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, Media_Player, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, CanFade, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, UnknownData_WCOS, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, Time, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, Fade_Duration, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, CanStop, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, UnknownData_H94I, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, Controller_sound, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, PlayingIntroVideo, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, UnknownData_MTVT, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, HoldTimeToSkip, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, IsHoldingSkipButton, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, CanFadeOut, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, UnknownData_ZOF5, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, Volume, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, VannyIntro, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, OnStopFinished, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, SequencerVO, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, VannyVOTimer, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVannyIntroCinematicPlayerUI_C, FreddyVOTimer, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVannyIntroCinematicPlayerUI_C, 0x02F0);
		}

		// class ALaserTagCountDown_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__LaserTagCountDown__LaserTagCountDown_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTagCountDown_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTagCountDown_C, LazerTag_Elevator_Counter_GO, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTagCountDown_C, LazerTag_Elevator_Counter_322, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTagCountDown_C, Countdown, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTagCountDown_C, Scene, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaserTagCountDown_C, LaserTagHUDTimer, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALaserTagCountDown_C, 0x0258);
		}

		// class UCharacterHourlyMaterialComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__CharacterHourlyMaterialComponent__CharacterHourlyMaterialComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterHourlyMaterialComponent_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterHourlyMaterialComponent_C, EndingTimes, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterHourlyMaterialComponent_C, MaterialLoadingIndex, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterHourlyMaterialComponent_C, UnknownData_J7EY, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterHourlyMaterialComponent_C, SkeletalMesh, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterHourlyMaterialComponent_C, Character, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterHourlyMaterialComponent_C, UnknownData_X5T6, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterHourlyMaterialComponent_C, CurrentTimeIndex, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterHourlyMaterialComponent_C, MaterialsTable, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterHourlyMaterialComponent_C, CurrentMaterials, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterHourlyMaterialComponent_C, EnableSwap, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterHourlyMaterialComponent_C, 0x00F9);
		}

		// class AAreaManager_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__AreaManager__AreaManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaManager_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaManager_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaManager_C, AreaRooms, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaManager_C, RoomsToArea, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaManager_C, PlayerCurrentArea, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaManager_C, UnknownData_Y5BL, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaManager_C, OnPlayerEnteredArea, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaManager_C, PlayerNewArea, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAreaManager_C, 0x02F1);
		}

		// class UCable01_PAS02_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable01_PAS02_ABP__Cable01_PAS02_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable01_PAS02_ABP_C, 0x05E0);
		}

		// class UTurnTowards_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__TurnTowards__TurnTowards_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTurnTowards_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTurnTowards_C, LookAtTarget, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTurnTowards_C, InterpSpeed, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTurnTowards_C, first_finish, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTurnTowards_C, first_start, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnTowards_C, 0x00DE);
		}

		// class UMaterialExpressionSpriteTextureSampler : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Paper2D__MaterialExpressionSpriteTextureSampler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, bSampleAdditionalTextures, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, UnknownData_JX8W, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, AdditionalSlotIndex, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, SlotDisplayName, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpriteTextureSampler, 0x0110);
		}

		// class APaperCharacter : public ACharacter
		TEST_METHOD(Class__Paper2D__PaperCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperCharacter, Sprite, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperCharacter, 0x04C0);
		}

		// class UPaperFlipbook : public UObject
		TEST_METHOD(Class__Paper2D__PaperFlipbook)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, FramesPerSecond, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, UnknownData_3R63, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, KeyFrames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, DefaultMaterial, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, CollisionSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, UnknownData_ACY8, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperFlipbook, 0x0050);
		}

		// class APaperFlipbookActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperFlipbookActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperFlipbookActor, RenderComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperFlipbookActor, 0x0230);
		}

		// class UPaperFlipbookComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperFlipbookComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, SourceFlipbook, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, Material, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, PlayRate, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, UnknownData_1BKU, 0x042D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, AccumulatedTime, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, CachedFrameIndex, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, SpriteColor, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, CachedBodySetup, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, OnFinishedPlaying, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperFlipbookComponent, 0x0460);
		}

		// class APaperGroupedSpriteActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperGroupedSpriteActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperGroupedSpriteActor, RenderComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperGroupedSpriteActor, 0x0230);
		}

		// class UPaperGroupedSpriteComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperGroupedSpriteComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, InstanceMaterials, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, PerInstanceSpriteData, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, UnknownData_H6I1, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperGroupedSpriteComponent, 0x0450);
		}

		// class UPaperRuntimeSettings : public UObject
		TEST_METHOD(Class__Paper2D__PaperRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bEnableSpriteAtlasGroups, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bEnableTerrainSplineEditing, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bResizeSpriteDataToMatchTextures, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, UnknownData_FS02, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperRuntimeSettings, 0x0030);
		}

		// class UPaperSprite : public UObject
		TEST_METHOD(Class__Paper2D__PaperSprite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_P877, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AdditionalSourceTextures, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceUV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceDimension, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceTexture, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, DefaultMaterial, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AlternateMaterial, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, Sockets, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, SpriteCollisionDomain, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_RSJ5, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, PixelsPerUnrealUnit, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BodySetup, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AlternateMaterialSplitIndex, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_78DM, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedRenderData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSprite, 0x00A8);
		}

		// class APaperSpriteActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperSpriteActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperSpriteActor, RenderComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperSpriteActor, 0x0230);
		}

		// class UPaperSpriteAtlas : public UObject
		TEST_METHOD(Class__Paper2D__PaperSpriteAtlas)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteAtlas, 0x0028);
		}

		// class UPaperSpriteBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Paper2D__PaperSpriteBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteBlueprintLibrary, 0x0028);
		}

		// class UPaperSpriteComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperSpriteComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, SourceSprite, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, MaterialOverride, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, SpriteColor, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, UnknownData_LKT1, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteComponent, 0x0440);
		}

		// class APaperTerrainActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperTerrainActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, DummyRoot, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, SplineComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, RenderComponent, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperTerrainActor, 0x0240);
		}

		// class UPaperTerrainComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Paper2D__PaperTerrainComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, TerrainMaterial, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, bClosedSpline, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, bFilledSpline, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_T6CU, 0x03FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, AssociatedSpline, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, RandomSeed, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, SegmentOverlapAmount, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, TerrainColor, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, ReparamStepsPerSegment, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, SpriteCollisionDomain, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_FLD5, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, CollisionThickness, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_7TN1, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, CachedBodySetup, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_OKA4, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainComponent, 0x0450);
		}

		// class UPaperTerrainMaterial : public UDataAsset
		TEST_METHOD(Class__Paper2D__PaperTerrainMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainMaterial, Rules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainMaterial, InteriorFill, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainMaterial, 0x0048);
		}

		// class UPaperTerrainSplineComponent : public USplineComponent
		TEST_METHOD(Class__Paper2D__PaperTerrainSplineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainSplineComponent, UnknownData_RCPA, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainSplineComponent, 0x04F0);
		}

		// class UPaperTileLayer : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerWidth, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerHeight, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, UnknownData_MPKT, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, CollisionThicknessOverride, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, CollisionOffsetOverride, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerColor, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedWidth, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedHeight, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, UnknownData_9QG2, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedCells, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, TileSet, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedGrid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileLayer, 0x0098);
		}

		// class UPaperTileMap : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, MapWidth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, MapHeight, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileWidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileHeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, PixelsPerUnrealUnit, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerTileX, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerTileY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerLayer, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SelectedTileSet, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, Material, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileLayers, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, CollisionThickness, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SpriteCollisionDomain, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, ProjectionMode, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_G19H, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, HexSideLength, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_FT3C, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, BodySetup, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, LayerNameIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_ZC1G, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileMap, 0x00A8);
		}

		// class APaperTileMapActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperTileMapActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTileMapActor, RenderComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperTileMapActor, 0x0230);
		}

		// class UPaperTileMapComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperTileMapComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_DAM0, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, MapHeight, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileWidth, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileHeight, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, DefaultLayerTileSet, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, Material, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileLayers, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileMapColor, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UseSingleLayerIndex, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, bUseSingleLayer, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_YXPO, 0x045D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileMap, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_DPAU, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileMapComponent, 0x0470);
		}

		// class UPaperTileSet : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileSheet, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AdditionalSourceTextures, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, BorderMargin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, PerTileSpacing, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, DrawingOffset, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, WidthInTiles, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, HeightInTiles, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AllocatedWidth, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AllocatedHeight, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, PerTileData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Terrains, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileWidth, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileHeight, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Margin, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Spacing, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileSet, 0x00A8);
		}

		// class UTileMapBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Paper2D__TileMapBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileMapBlueprintLibrary, 0x0028);
		}

		// class AFieldSystemActor : public AActor
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFieldSystemActor, FieldSystemComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFieldSystemActor, 0x0230);
		}

		// class UFieldSystem : public UObject
		TEST_METHOD(Class__FieldSystemEngine__FieldSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystem, UnknownData_J2ON, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystem, 0x0038);
		}

		// class UFieldSystemComponent : public UPrimitiveComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, FieldSystem, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, UnknownData_4N2C, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, SupportedSolvers, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, UnknownData_T6BJ, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemComponent, 0x0430);
		}

		// class UFieldSystemMetaData : public UActorComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaData, 0x00B0);
		}

		// class UFieldSystemMetaDataIteration : public UFieldSystemMetaData
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaDataIteration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataIteration, Iterations, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataIteration, UnknownData_10QG, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaDataIteration, 0x00B8);
		}

		// class UFieldSystemMetaDataProcessingResolution : public UFieldSystemMetaData
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaDataProcessingResolution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataProcessingResolution, ResolutionType, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataProcessingResolution, UnknownData_1XD5, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaDataProcessingResolution, 0x00B8);
		}

		// class UFieldNodeBase : public UActorComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeBase, 0x00B0);
		}

		// class UFieldNodeInt : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeInt)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeInt, 0x00B0);
		}

		// class UFieldNodeFloat : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeFloat)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeFloat, 0x00B0);
		}

		// class UFieldNodeVector : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeVector, 0x00B0);
		}

		// class UUniformInteger : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__UniformInteger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformInteger, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformInteger, UnknownData_7C87, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformInteger, 0x00B8);
		}

		// class URadialIntMask : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__RadialIntMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, Radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, Position, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, InteriorValue, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, ExteriorValue, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, SetMaskCondition, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, UnknownData_2FCY, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialIntMask, 0x00D0);
		}

		// class UUniformScalar : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__UniformScalar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformScalar, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformScalar, UnknownData_MY0I, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformScalar, 0x00B8);
		}

		// class URadialFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__RadialFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Radius, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Position, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Falloff, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, UnknownData_RN9I, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialFalloff, 0x00D8);
		}

		// class UPlaneFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__PlaneFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Distance, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Position, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Normal, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Falloff, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, UnknownData_1005, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneFalloff, 0x00E0);
		}

		// class UBoxFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__BoxFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Transform, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Falloff, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, UnknownData_YIKF, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxFalloff, 0x0100);
		}

		// class UNoiseField : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__NoiseField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, MinRange, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, MaxRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, UnknownData_HSC3, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, Transform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNoiseField, 0x00F0);
		}

		// class UUniformVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__UniformVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformVector, Direction, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformVector, 0x00C0);
		}

		// class URadialVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__RadialVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialVector, Position, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialVector, 0x00C0);
		}

		// class URandomVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__RandomVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomVector, UnknownData_AEDC, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URandomVector, 0x00B8);
		}

		// class UOperatorField : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__OperatorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, UnknownData_VSNB, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, RightField, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, LeftField, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, Operation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, UnknownData_3T7P, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOperatorField, 0x00D0);
		}

		// class UToIntegerField : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__ToIntegerField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToIntegerField, FloatField, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToIntegerField, 0x00B8);
		}

		// class UToFloatField : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__ToFloatField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToFloatField, IntField, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToFloatField, 0x00B8);
		}

		// class UCullingField : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__CullingField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Culling, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Field, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Operation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, UnknownData_58RW, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCullingField, 0x00C8);
		}

		// class UReturnResultsTerminal : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__ReturnResultsTerminal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReturnResultsTerminal, 0x00B0);
		}

		// class UMagicLeapPrivilegesFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapPrivileges__MagicLeapPrivilegesFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapPrivilegesFunctionLibrary, 0x0028);
		}

		// class UPowerDrainerInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__PowerDrainerInterface__PowerDrainerInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPowerDrainerInterface_C, 0x0028);
		}

		// class AButton_FreddyGreenRoomBackDoor_C : public ABasicButton_C
		TEST_METHOD(BlueprintGeneratedClass__Button_FreddyGreenRoomBackDoor__Button_FreddyGreenRoomBackDoor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_FreddyGreenRoomBackDoor_C, UnknownData_RBPZ, 0x02EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_FreddyGreenRoomBackDoor_C, UberGraphFrame, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_FreddyGreenRoomBackDoor_C, MissionStateCondition, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_FreddyGreenRoomBackDoor_C, TriggerMissionOnPress, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_FreddyGreenRoomBackDoor_C, StartupMission, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AButton_FreddyGreenRoomBackDoor_C, 0x0330);
		}

		// class UAnimNotify_ChicaShatteredServoMovement_C : public UAnimNotify_ChicaServoMovement_C
		TEST_METHOD(BlueprintGeneratedClass__AnimNotify_ChicaShatteredServoMovement__AnimNotify_ChicaShatteredServoMovement_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ChicaShatteredServoMovement_C, 0x0058);
		}

		// class AActivatableBase_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ActivatableBase__ActivatableBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatableBase_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatableBase_C, Scene, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatableBase_C, ActivatableStorageName, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatableBase_C, CurrentActivatableState, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatableBase_C, AllowDeactivate, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatableBase_C, UnknownData_IPOJ, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatableBase_C, OnActivatableActivated, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatableBase_C, OnActivatableDeactivated, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActivatableBase_C, ActivatingLocally, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActivatableBase_C, 0x0269);
		}

		// class ACheckPoint_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__CheckPoint__CheckPoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPoint_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPoint_C, Arrow, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPoint_C, Box, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPoint_C, CheckPointManger, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPoint_C, CheckPointNumber, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheckPoint_C, AddOne, 0x024C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACheckPoint_C, 0x024D);
		}

		// class UWI_ButtonRemapping_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_ButtonRemapping__WI_ButtonRemapping_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, Border_BackgroundAndRichText_Key1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, Border_BackgroundAndRichText_Key2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, InputKeySelector_Key1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, InputKeySelector_Key2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, Keyboard_Key1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, Keyboard_Key1_Image, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, Keyboard_Key2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, Keyboard_Key2_Image, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, RichText_Action, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, RichText_Gamepad_Key1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, RichText_Gamepad_Key2, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, DisplayText, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, OnClicked, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, OnHovered, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, KeyName, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, AddNewMapping, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, IsSelectingKey1, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, UnknownData_ZMR3, 0x02D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, Default_PC_Key1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, Default_PC_Key2, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, Default_Gamepad_Key1, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, Default_Gamepad_Key2, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, IsSelectingKey2, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, UnknownData_F25M, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, OptionsControlsUI, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, DisplayArray_3, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, TempKey1, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, TempKey2, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ButtonRemapping_C, KeyChanged, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_ButtonRemapping_C, 0x03C9);
		}

		// class UGregoryOverlay_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GregoryOverlay__GregoryOverlay_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, BottomLeftUIBox, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, BottomMidUIBox, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, BottomRightUIBox, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, DynamicImage, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, FazblasterChargeUI, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, FazcamChargeUI, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, MiddleUIBox, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, MidLeftUIBox, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, MidRightUIBox, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, ReticleImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, StaticImage, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, TopLeftUIBox, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, TopMidUIBox, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, TopRightUIBox, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, WI_ClockPlayer, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, WI_Gregory_Crouching, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, WI_Gregory_FazNotification, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, WI_Gregory_Flashlight, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, WI_Gregory_Interact, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, WI_Gregory_Stamina, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, WidgetSwitcher_346, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, GregoryRef, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGregoryOverlay_C, ReticleOn, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGregoryOverlay_C, 0x02E9);
		}

		// class AHourlyMoonManSequence_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__HourlyMoonManSequence__HourlyMoonManSequence_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, AllMMSpawnPoints, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, GameMode, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, bIsMMActorInScene, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, RechargeSequenceStarted, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, UnknownData_W718, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, CurrentMMSpawnPoint, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, CurrentMMSeq_Actor, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, MMGlobalSpawnChance, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, MMInc_DecSpawnChance_Min, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, MMInc_DecSpawnChance_Max, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, MMDeltaSpawnChance, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, MMOriginalSpawnChance, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, UnknownData_YFKN, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, GregoryPawn, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, VisualSourcesTimeCounter, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, PlayerKill_InSeconds, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, MMNoSpawnProximity, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, MMDetectedCounter, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, GazeTooLong_Number, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, UnknownData_MP2O, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, PowerStations, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, isGregoryInsideStation, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, UnknownData_YVOD, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, TempMMspawnPoint, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, OriginalGregorySight, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, MM_NOT_Detected_Counter, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, DestroyMM_NotDetected, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, IsOKToSpawn_MM, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, UnknownData_DZMP, 0x02CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, DetectedMMSpawnPoints, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, DestroyedMMSpawnPoints, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, CurrentGregorySight, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, TempSpawnPointDistance, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, DefaultClosestVisualPoint, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, CurrentSpawnPointDistance, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, ClosestMoonmanSpawnPoint, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, ClosestMMDistance, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, processingVisualOffsets, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, UnknownData_LT6G, 0x030D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, MMSeqActorSpawn, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, tempFollowPlayer, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, UnknownData_1Y67, 0x031D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, MMSeqActorSpawnRotation, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, UnknownData_9ZEZ, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, DetectedVisualSources, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, EyeBlinkUI, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, GameClock_Seconds, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, UnknownData_WRSX, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, CurrentMoonmanDeathPawn, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, isKillingPlayer, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, CurrentState, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, UnknownData_YUI9, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, MoonmanSpawnVO, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMoonManSequence_C, MoonmanChaseVO, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHourlyMoonManSequence_C, 0x03C0);
		}

		// class AHourlyMissionUpdate_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__HourlyMissionUpdate__HourlyMissionUpdate_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMissionUpdate_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMissionUpdate_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMissionUpdate_C, MissionHintMap, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHourlyMissionUpdate_C, MissionToActivate, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHourlyMissionUpdate_C, 0x0290);
		}

		// class UWaitBasedOnDistance_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__WaitBasedOnDistance__WaitBasedOnDistance_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaitBasedOnDistance_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaitBasedOnDistance_C, TimeWaited, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaitBasedOnDistance_C, MinTime, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaitBasedOnDistance_C, MaxTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaitBasedOnDistance_C, MinDistance, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaitBasedOnDistance_C, MaxDistance, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWaitBasedOnDistance_C, 0x00C4);
		}

		// class ABP_AudioEmitterSpline_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_AudioEmitterSpline__BP_AudioEmitterSpline_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AudioEmitterSpline_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AudioEmitterSpline_C, Ak, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AudioEmitterSpline_C, Spline, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AudioEmitterSpline_C, DefaultSceneRoot, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AudioEmitterSpline_C, PlayerLastPosition, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AudioEmitterSpline_C, FalloffDistance, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AudioEmitterSpline_C, TickInterval, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AudioEmitterSpline_C, bSoundIsActive, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AudioEmitterSpline_C, UnknownData_LXQS, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AudioEmitterSpline_C, OcclusionTrace, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AudioEmitterSpline_C, EmitterPlaying, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AudioEmitterSpline_C, 0x0289);
		}

		// class UCable02_PAS01_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable02_PAS01_ABP__Cable02_PAS01_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable02_PAS01_ABP_C, 0x05E0);
		}

		// class UBPFL_Kitchen_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__BPFL_Kitchen__BPFL_Kitchen_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPFL_Kitchen_C, 0x0028);
		}

		// class AMGM_OfficeGameManger_C : public ABP_MiniGameManger_C
		TEST_METHOD(BlueprintGeneratedClass__MGM_OfficeGameManger__MGM_OfficeGameManger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_OfficeGameManger_C, UnknownData_CMDY, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_OfficeGameManger_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_OfficeGameManger_C, GameBounds, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_OfficeGameManger_C, Screens, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_OfficeGameManger_C, DoorsToLock, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMGM_OfficeGameManger_C, UseBounds, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMGM_OfficeGameManger_C, 0x02B1);
		}

		// class UWorker_CheckTask_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__Worker_CheckTask__Worker_CheckTask_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_CheckTask_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_CheckTask_C, Delta_Time, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_CheckTask_C, UnknownData_EHI4, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_CheckTask_C, PauseTask, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_CheckTask_C, TP_Has_Prop, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_CheckTask_C, UnknownData_DEHP, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_CheckTask_C, SB_Has_Prop, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_CheckTask_C, State, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorker_CheckTask_C, State_Enum, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorker_CheckTask_C, 0x0139);
		}

		// class UCinematicMediaPlayerUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CinematicMediaPlayerUI__CinematicMediaPlayerUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, EyeBlinkUI, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, Image_89, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, ObjectiveList, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, CinematicCutscene, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, Sound, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, Media_Player, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, CanFade, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, CanFadeOut, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, UnknownData_G4YL, 0x02A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, Time, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, Fade_Duration, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, UnknownData_VOET, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, OnStop, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, CanStop, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, ShouldStop, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, UnknownData_7X7G, 0x02C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, Controller_sound, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, PlayingIntroVideo, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, UnknownData_IVGF, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, HoldTimeToSkip, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, IsHoldingSkipButton, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, UnknownData_RTOF, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicMediaPlayerUI_C, CinematicMaterial, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCinematicMediaPlayerUI_C, 0x02E8);
		}

		// class AButton_Office_Kitchen_C : public APossessStaffbotButton_C
		TEST_METHOD(BlueprintGeneratedClass__Button_Office_Kitchen__Button_Office_Kitchen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Office_Kitchen_C, UberGraphFrame, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Office_Kitchen_C, GameTypeCheckDestroy, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Office_Kitchen_C, OGM_Kitchen, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AButton_Office_Kitchen_C, 0x0338);
		}

		// class UMoonmanSequence_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__MoonmanSequence_ABP__MoonmanSequence_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, UnknownData_N2L5, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_UseCachedPose_4, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_UseCachedPose_3, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_SaveCachedPose_2, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_BlendListByEnum, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_SequencePlayer_19, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_Root, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_SequencePlayer_18, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_SequencePlayer_17, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_SequencePlayer_16, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_SequencePlayer_15, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_BlendListByInt, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_StateResult_13, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_StateMachine_5, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_TransitionResult_8, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_TransitionResult_7, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_SequencePlayer_14, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_StateResult_12, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_SequencePlayer_13, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_StateResult_11, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_SequencePlayer_12, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_StateResult_10, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_StateMachine_4, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_TransitionResult_6, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_TransitionResult_5, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_SequencePlayer_11, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_StateResult_9, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_SequencePlayer_10, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_StateResult_8, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_SequencePlayer_9, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_StateResult_7, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_StateMachine_3, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_TransitionResult_4, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_TransitionResult_3, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_SequencePlayer_8, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_StateResult_6, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_SequencePlayer_7, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_StateResult_5, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_SequencePlayer_6, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_StateResult_4, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_StateMachine_2, 0x1070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_TransitionResult_2, 0x1120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_TransitionResult, 0x1148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_SequencePlayer_5, 0x1170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_StateResult_3, 0x11E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_SequencePlayer_4, 0x1218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_StateResult_2, 0x1290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_SequencePlayer_3, 0x12C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_StateResult, 0x1338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_StateMachine, 0x1368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_ModifyBone_4, 0x1418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_ComponentToLocalSpace_2, 0x1520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_LayeredBoneBlend_2, 0x1540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_SequencePlayer_2, 0x1600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_LocalToComponentSpace_2, 0x1678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, UnknownData_SXO5, 0x1698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_AnimDynamics, 0x16A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_ComponentToLocalSpace, 0x1AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_RotationOffsetBlendSpace, 0x1B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_LocalToComponentSpace, 0x1C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_ModifyBone_3, 0x1CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_ModifyBone_2, 0x1DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_ModifyBone, 0x1EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_SaveCachedPose, 0x1FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_UseCachedPose_2, 0x2078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_UseCachedPose, 0x20A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_LayeredBoneBlend, 0x20C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_SequencePlayer, 0x2188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimGraphNode_Slot, 0x2200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, Animation_Category, 0x2248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, UnknownData_IEAU, 0x2249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, Poses, 0x2250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, AnimSeq, 0x2260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, RandomPoseSelector, 0x2268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, UnknownData_74YU, 0x226C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, MMSeqActor, 0x2270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, isAnimLooped, 0x2278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, isHeadAimAtPlayer, 0x2279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, UnknownData_LC6D, 0x227A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, PlayerLocation, 0x227C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, HeadRotation, 0x2288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, Enable_Hat_Simulation, 0x2294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, UnknownData_MWQG, 0x2295);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, HatSimulationAlpha, 0x2298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, HeadAnimBlend, 0x229C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, L_Eye_Rotation, 0x22A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, R_Eye_Rotation, 0x22AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, ActorRotation, 0x22B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, SnapOrientation, 0x22C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, UnknownData_7P4W, 0x22C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, Gregory, 0x22C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, PlayerHeadLocation, 0x22D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, HeadLayerBlend, 0x22DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoonmanSequence_ABP_C, DeltaTimeX, 0x22E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoonmanSequence_ABP_C, 0x22E4);
		}

		// class AGtrStr_2_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__GtrStr_3__GtrStr_2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGtrStr_2_C, Box1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGtrStr_2_C, Box, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGtrStr_2_C, StaticMesh, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGtrStr_2_C, 0x0240);
		}

		// class UFreddy_Cinematic_Medscan_Abp_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Freddy_Cinematic_Medscan_Abp__Freddy_Cinematic_Medscan_Abp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Cinematic_Medscan_Abp_C, UnknownData_59U4, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Cinematic_Medscan_Abp_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Cinematic_Medscan_Abp_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Cinematic_Medscan_Abp_C, AnimGraphNode_Slot_3, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Cinematic_Medscan_Abp_C, AnimGraphNode_LinkedInputPose, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Cinematic_Medscan_Abp_C, AnimGraphNode_SaveCachedPose, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Cinematic_Medscan_Abp_C, AnimGraphNode_UseCachedPose_2, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Cinematic_Medscan_Abp_C, AnimGraphNode_LinkedAnimGraph, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Cinematic_Medscan_Abp_C, AnimGraphNode_SequencePlayer_2, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Cinematic_Medscan_Abp_C, AnimGraphNode_SequencePlayer, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Cinematic_Medscan_Abp_C, AnimGraphNode_Slot_2, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Cinematic_Medscan_Abp_C, AnimGraphNode_LayeredBoneBlend_2, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Cinematic_Medscan_Abp_C, AnimGraphNode_UseCachedPose, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Cinematic_Medscan_Abp_C, AnimGraphNode_LayeredBoneBlend, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Cinematic_Medscan_Abp_C, AnimGraphNode_Slot, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFreddy_Cinematic_Medscan_Abp_C, FreddyChestOpenPlayRate, 0x0810);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFreddy_Cinematic_Medscan_Abp_C, 0x0814);
		}

		// class UAnimatronicIdleScan_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__AnimatronicIdleScan__AnimatronicIdleScan_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicIdleScan_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronicIdleScan_C, ScanTime, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimatronicIdleScan_C, 0x00B4);
		}

		// class APRE_PartyDoor_FreddyBlock_C : public APRE_PartyDoor_Long_C
		TEST_METHOD(BlueprintGeneratedClass__PRE_PartyDoor_FreddyBlock__PRE_PartyDoor_FreddyBlock_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_FreddyBlock_C, UnknownData_EMMS, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_FreddyBlock_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_FreddyBlock_C, Partway_Door_Mover_DoorHeight_D0B842A04832977174A0E6A725A2879F, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_FreddyBlock_C, Partway_Door_Mover__Direction_D0B842A04832977174A0E6A725A2879F, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_FreddyBlock_C, UnknownData_4LC4, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_FreddyBlock_C, Partway_Door_Mover, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_PartyDoor_FreddyBlock_C, StuckSound, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_PartyDoor_FreddyBlock_C, 0x0368);
		}

		// class APlayerCameraOverride_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__PlayerCameraOverride__PlayerCameraOverride_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraOverride_C, UberGraphFrame, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraOverride_C, ChildActor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraOverride_C, LevelStreamViewpoint, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraOverride_C, Camera, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraOverride_C, DefaultSceneRoot, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraOverride_C, AimTarget, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraOverride_C, UnknownData_LMSV, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraOverride_C, LookAtActor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraOverride_C, StartRotation, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraOverride_C, LerpAlpha, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraOverride_C, LerpSpeed, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraOverride_C, FieldOfView, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraOverride_C, FOVFinal, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraOverride_C, UseTetheredView, 0x02E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerCameraOverride_C, 0x02E5);
		}

		// class UMontyJump_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__MontyJump__MontyJump_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyJump_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyJump_C, JumpWaitTime, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyJump_C, fJumpWaitTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyJump_C, UnknownData_DPES, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyJump_C, BBAllowJump, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyJump_C, BBTeleport_Location, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyJump_C, BBJumpMarker, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyJump_C, Use_Jump_Marker, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyJump_C, UnknownData_5VQL, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyJump_C, Monty_Spawn_Offset, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyJump_C, Max_Z, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontyJump_C, MinDistanceFromPlayer, 0x016C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMontyJump_C, 0x0170);
		}

		// class ADoorController_C : public AActivatableBase_C
		TEST_METHOD(BlueprintGeneratedClass__DoorController__DoorController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorController_C, UnknownData_J02Y, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorController_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorController_C, Box, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorController_C, Door, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorController_C, DoorOpened, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorController_C, Playing, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorController_C, UnknownData_YJTL, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorController_C, PathBlockedByDoorTrigger, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorController_C, DoorActor, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoorController_C, Should_Be_Open_On_End, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADoorController_C, 0x0301);
		}

		// class UHeadAimingInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__HeadAimingInterface__HeadAimingInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeadAimingInterface_C, 0x0028);
		}

		// class AJungleGymExitTrigger_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__JungleGymExitTrigger__JungleGymExitTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AJungleGymExitTrigger_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJungleGymExitTrigger_C, Arrow, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJungleGymExitTrigger_C, Box, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AJungleGymExitTrigger_C, Security_Office, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AJungleGymExitTrigger_C, 0x0268);
		}

		// class AStaffBotTalent_C : public AStaffBotBase_C
		TEST_METHOD(BlueprintGeneratedClass__StaffBotTalent__StaffBotTalent_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaffBotTalent_C, 0x0652);
		}

		// class UCheckHideLocation_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__CheckHideLocation__CheckHideLocation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckHideLocation_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckHideLocation_C, BBHideLocation, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckHideLocation_C, 0x00D8);
		}

		// class UW_Speedometer_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_Speedometer__W_Speedometer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Speedometer_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Speedometer_C, SpeedometerBackground, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Speedometer_C, SpeedometerMeter, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_Speedometer_C, 0x0248);
		}

		// class AStageLiftTrigger_C : public APlayerTriggerWithConditionComps
		TEST_METHOD(BlueprintGeneratedClass__StageLiftTrigger__StageLiftTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLiftTrigger_C, UberGraphFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLiftTrigger_C, MissionStateCondition, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStageLiftTrigger_C, LineSkipper, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStageLiftTrigger_C, 0x02B0);
		}

		// class APRE_Present_00_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PRE_Present_00__PRE_Present_00_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Present_00_C, AllPresents, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Present_00_C, Present_color, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Present_00_C, Randomize, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Present_00_C, UnknownData_OGEY, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Present_00_C, PresentMaterial, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Present_00_C, Present_types, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Present_00_C, UnknownData_O90U, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Present_00_C, Color1, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Present_00_C, Color2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_Present_00_C, MaskedHueshift_, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_Present_00_C, 0x025D);
		}

		// class ATitlePC_C : public AFNAFBasePlayerController
		TEST_METHOD(BlueprintGeneratedClass__TitlePC__TitlePC_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATitlePC_C, UberGraphFrame, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATitlePC_C, TitleUI_var, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATitlePC_C, HoldProgressTime, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATitlePC_C, Percentage, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATitlePC_C, TimeNeededToSkip, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATitlePC_C, IsIntroVideoPlaying, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATitlePC_C, IsSkipButtonHeld, 0x05DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATitlePC_C, UnknownData_20Z1, 0x05DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATitlePC_C, SplashScreen, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATitlePC_C, EnableDebugFullMenu, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATitlePC_C, 0x05E9);
		}

		// class UActivatableInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__ActivatableInterface__ActivatableInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActivatableInterface_C, 0x0028);
		}

		// class UAlwaysFaceCameraComponent_Kitchen_C : public USceneComponent
		TEST_METHOD(BlueprintGeneratedClass__AlwaysFaceCameraComponent_Kitchen__AlwaysFaceCameraComponent_Kitchen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlwaysFaceCameraComponent_Kitchen_C, UberGraphFrame, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlwaysFaceCameraComponent_Kitchen_C, StaffBot, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlwaysFaceCameraComponent_Kitchen_C, 0x0220);
		}

		// class UReverseSplineDirection_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__ReverseSplineDirection__ReverseSplineDirection_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverseSplineDirection_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverseSplineDirection_C, 0x00B0);
		}

		// class UAvfMediaSettings : public UObject
		TEST_METHOD(Class__AvfMediaFactory__AvfMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvfMediaSettings, NativeAudioOut, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvfMediaSettings, UnknownData_PRY6, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvfMediaSettings, 0x0030);
		}

		// class USetBoolOnExitService_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__SetBoolOnExitService__SetBoolOnExitService_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetBoolOnExitService_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetBoolOnExitService_C, Value, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetBoolOnExitService_C, UnknownData_H8OY, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetBoolOnExitService_C, BooleanToSetKey, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetBoolOnExitService_C, 0x00D0);
		}

		// class UCable01_PAS01_ABP_C : public UCable_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Cable01_PAS01_ABP__Cable01_PAS01_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCable01_PAS01_ABP_C, 0x05E0);
		}

		// class UVisual : public UObject
		TEST_METHOD(Class__UMG__Visual)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisual, 0x0028);
		}

		// class UWidget : public UVisual
		TEST_METHOD(Class__UMG__Widget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Slot, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bIsEnabledDelegate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipTextDelegate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidgetDelegate, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, VisibilityDelegate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransformPivot, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_ZXU2, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, AccessibleWidgetData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Cursor, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Clipping, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Visibility, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderOpacity, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Navigation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, FlowDirectionPreference, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_ZSOC, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, NativeBindings, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget, 0x0108);
		}

		// class UPanelWidget : public UWidget
		TEST_METHOD(Class__UMG__PanelWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, Slots, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, UnknownData_27TN, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelWidget, 0x0120);
		}

		// class UContentWidget : public UPanelWidget
		TEST_METHOD(Class__UMG__ContentWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContentWidget, 0x0120);
		}

		// class URichTextBlockDecorator : public UObject
		TEST_METHOD(Class__UMG__RichTextBlockDecorator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockDecorator, 0x0028);
		}

		// class UAsyncTaskDownloadImage : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UMG__AsyncTaskDownloadImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnFail, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTaskDownloadImage, 0x0050);
		}

		// class UBackgroundBlur : public UContentWidget
		TEST_METHOD(Class__UMG__BackgroundBlur)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, Padding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, HorizontalAlignment, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, VerticalAlignment, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bApplyAlphaToBlur, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_0TR8, 0x0133);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurStrength, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bOverrideAutoRadiusCalculation, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_PWM8, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurRadius, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, LowQualityFallbackBrush, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_OCMP, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlur, 0x01D8);
		}

		// class UPanelSlot : public UVisual
		TEST_METHOD(Class__UMG__PanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Parent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Content, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelSlot, 0x0038);
		}

		// class UBackgroundBlurSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BackgroundBlurSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, UnknownData_VQYL, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlurSlot, 0x0060);
		}

		// class UPropertyBinding : public UObject
		TEST_METHOD(Class__UMG__PropertyBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourceObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourcePath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, DestinationProperty, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyBinding, 0x0060);
		}

		// class UBoolBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BoolBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolBinding, 0x0060);
		}

		// class UBorder : public UContentWidget
		TEST_METHOD(Class__UMG__Border)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, HorizontalAlignment, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, VerticalAlignment, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_U5EP, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacity, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacityDelegate, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Padding, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_YQL9, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Background, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BackgroundDelegate, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColor, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColorDelegate, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, DesiredSizeScale, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, bFlipForRightToLeftFlowDirection, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_ZE62, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonDownEvent, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonUpEvent, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseMoveEvent, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseDoubleClickEvent, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_H29E, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorder, 0x0270);
		}

		// class UBorderSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BorderSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, UnknownData_SU5Y, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorderSlot, 0x0060);
		}

		// class UBrushBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BrushBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBinding, UnknownData_BFZ4, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBinding, 0x0068);
		}

		// class UButton : public UContentWidget
		TEST_METHOD(Class__UMG__Button)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, Style, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ColorAndOpacity, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, BackgroundColor, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ClickMethod, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, TouchMethod, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, PressMethod, 0x03C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, IsFocusable, 0x03C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_UGW7, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnClicked, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnPressed, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnReleased, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnHovered, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnUnhovered, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_02QP, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButton, 0x0428);
		}

		// class UButtonSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ButtonSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, UnknownData_VH51, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonSlot, 0x0060);
		}

		// class UCanvasPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__CanvasPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanel, UnknownData_3KKP, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanel, 0x0130);
		}

		// class UCanvasPanelSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__CanvasPanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, LayoutData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, bAutoSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_J7WC, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, ZOrder, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_G62W, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanelSlot, 0x0070);
		}

		// class UCheckBox : public UContentWidget
		TEST_METHOD(Class__UMG__CheckBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedState, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_OP2P, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedStateDelegate, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_5D0V, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, WidgetStyle, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Style, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedImage, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedHoveredImage, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedPressedImage, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedImage, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedHoveredImage, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedPressedImage, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedImage, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedHoveredImage, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedPressedImage, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, HorizontalAlignment, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_EJ0E, 0x0709);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Padding, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_59FM, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, BorderBackgroundColor, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, IsFocusable, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_21RU, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, OnCheckStateChanged, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_Y497, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBox, 0x0770);
		}

		// class UCheckedStateBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__CheckedStateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckedStateBinding, UnknownData_IDJP, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckedStateBinding, 0x0068);
		}

		// class UCircularThrobber : public UWidget
		TEST_METHOD(Class__UMG__CircularThrobber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, NumberOfPieces, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Period, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Radius, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_PF6L, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, PieceImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Image, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, bEnableRadius, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_8BQZ, 0x01A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularThrobber, 0x01C0);
		}

		// class UColorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__ColorBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UColorBinding, UnknownData_V81R, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UColorBinding, 0x0068);
		}

		// class UComboBox : public UWidget
		TEST_METHOD(Class__UMG__ComboBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, Items, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, OnGenerateWidgetEvent, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, bIsFocusable, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, UnknownData_TRS5, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBox, 0x0140);
		}

		// class UComboBoxString : public UWidget
		TEST_METHOD(Class__UMG__ComboBoxString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, DefaultOptions, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, SelectedOption, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ItemStyle, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ContentPadding, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, MaxListHeight, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, HasDownArrow, 0x0CF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, EnableGamepadNavigationMode, 0x0CF5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_E4GZ, 0x0CF6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, Font, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ForegroundColor, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, bIsFocusable, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_87SK, 0x0D71);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnGenerateWidgetEvent, 0x0D74);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_P962, 0x0D84);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnSelectionChanged, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnOpening, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_NBK0, 0x0DA8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxString, 0x0DF8);
		}

		// class UDragDropOperation : public UObject
		TEST_METHOD(Class__UMG__DragDropOperation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Tag, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Payload, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, DefaultDragVisual, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Pivot, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_J5Y9, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Offset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_49M3, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDrop, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragCancelled, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragged, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDragDropOperation, 0x0088);
		}

		// class UDynamicEntryBoxBase : public UWidget
		TEST_METHOD(Class__UMG__DynamicEntryBoxBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryBoxType, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_UT5B, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntrySpacing, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_KAVR, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, SpacingPattern, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntrySizeRule, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryHorizontalAlignment, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryVerticalAlignment, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_43M7, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, MaxElementSize, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_5WSI, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryWidgetPool, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBoxBase, 0x01C8);
		}

		// class UDynamicEntryBox : public UDynamicEntryBoxBase
		TEST_METHOD(Class__UMG__DynamicEntryBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryWidgetClass, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBox, 0x01D0);
		}

		// class UEditableText : public UWidget
		TEST_METHOD(Class__UMG__EditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Text, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, TextDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintText, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintTextDelegate, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, WidgetStyle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Style, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageSelected, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageComposing, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, CaretImage, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Font, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ColorAndOpacity, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsReadOnly, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsPassword, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_PMPI, 0x040A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, MinimumDesiredWidth, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsCaretMovedWhenGainFocus, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextWhenFocused, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, RevertTextOnEscape, 0x0412);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ClearKeyboardFocusOnCommit, 0x0413);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextOnCommit, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, AllowContextMenu, 0x0415);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, KeyboardType, 0x0416);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardOptions, 0x0417);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardTrigger, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardDismissAction, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Justification, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ShapedTextOptions, 0x041B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_AQUI, 0x041E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextChanged, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextCommitted, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_UCQB, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableText, 0x0450);
		}

		// class UEditableTextBox : public UWidget
		TEST_METHOD(Class__UMG__EditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Text, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, TextDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Style, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintText, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintTextDelegate, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Font, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ForegroundColor, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, BackgroundColor, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ReadOnlyForegroundColor, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsReadOnly, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsPassword, 0x09D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_X6NA, 0x09D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, MinimumDesiredWidth, 0x09D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Padding, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsCaretMovedWhenGainFocus, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextWhenFocused, 0x09E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, RevertTextOnEscape, 0x09EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ClearKeyboardFocusOnCommit, 0x09EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextOnCommit, 0x09EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, AllowContextMenu, 0x09ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, KeyboardType, 0x09EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardOptions, 0x09EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardTrigger, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardDismissAction, 0x09F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Justification, 0x09F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ShapedTextOptions, 0x09F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_G909, 0x09F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextChanged, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextCommitted, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_4X0J, 0x0A18);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBox, 0x0A28);
		}

		// class UExpandableArea : public UWidget
		TEST_METHOD(Class__UMG__ExpandableArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_EHRT, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, Style, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderBrush, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, bIsExpanded, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_MZBT, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, MaxHeight, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderPadding, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, AreaPadding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, OnExpansionChanged, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderContent, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BodyContent, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_NMYI, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExpandableArea, 0x0338);
		}

		// class UFloatBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__FloatBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatBinding, 0x0060);
		}

		// class UGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__GridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, ColumnFill, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, RowFill, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, UnknownData_SAOV, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPanel, 0x0150);
		}

		// class UGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__GridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_770U, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Row, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, RowSpan, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Column, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, ColumnSpan, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Layer, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Nudge, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_1UFO, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridSlot, 0x0070);
		}

		// class UHorizontalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__HorizontalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBox, UnknownData_UY3Z, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBox, 0x0130);
		}

		// class UHorizontalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__HorizontalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_49IP, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Size, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_6P68, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBoxSlot, 0x0060);
		}

		// class UImage : public UWidget
		TEST_METHOD(Class__UMG__Image)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, Brush, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, BrushDelegate, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacity, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacityDelegate, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, bFlipForRightToLeftFlowDirection, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_IDT8, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, OnMouseButtonDownEvent, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_UX2B, 0x01D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImage, 0x0210);
		}

		// class UInputKeySelector : public UWidget
		TEST_METHOD(Class__UMG__InputKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, TextStyle, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, SelectedKey, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Font, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Margin, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, ColorAndOpacity, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, KeySelectionText, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, NoKeySpecifiedText, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowModifierKeys, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowGamepadKeys, 0x06A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_JR7U, 0x06AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, EscapeKeys, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnKeySelected, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnIsSelectingKeyChanged, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_DQ3A, 0x06E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeySelector, 0x06F0);
		}

		// class UInt32Binding : public UPropertyBinding
		TEST_METHOD(Class__UMG__Int32Binding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt32Binding, 0x0060);
		}

		// class UInvalidationBox : public UContentWidget
		TEST_METHOD(Class__UMG__InvalidationBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, bCanCache, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, CacheRelativeTransforms, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, UnknownData_JEPU, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInvalidationBox, 0x0138);
		}

		// class UUserListEntry : public UInterface
		TEST_METHOD(Class__UMG__UserListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntry, 0x0028);
		}

		// class UUserListEntryLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__UserListEntryLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntryLibrary, 0x0028);
		}

		// class UUserObjectListEntry : public UUserListEntry
		TEST_METHOD(Class__UMG__UserObjectListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntry, 0x0028);
		}

		// class UUserObjectListEntryLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__UserObjectListEntryLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntryLibrary, 0x0028);
		}

		// class UListViewBase : public UWidget
		TEST_METHOD(Class__UMG__ListViewBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetClass, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, WheelScrollMultiplier, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, bEnableScrollAnimation, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, bEnableFixedLineOffset, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_Q0YE, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, FixedLineScrollOffset, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_FZ60, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryGenerated, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryReleased, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetPool, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_23OF, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewBase, 0x0218);
		}

		// class UListView : public UListViewBase
		TEST_METHOD(Class__UMG__ListView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_B96S, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, Orientation, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, SelectionMode, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ConsumeMouseWheel, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bClearSelectionOnClick, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bIsFocusable, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_6IZB, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, EntrySpacing, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bReturnFocusToSelection, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_KS7M, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ListItems, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_MYMK, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnEntryInitialized, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemClicked, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemDoubleClicked, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemIsHoveredChanged, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemSelectionChanged, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemScrolledIntoView, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListView, 0x0368);
		}

		// class UListViewDesignerPreviewItem : public UObject
		TEST_METHOD(Class__UMG__ListViewDesignerPreviewItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewDesignerPreviewItem, 0x0028);
		}

		// class UMenuAnchor : public UContentWidget
		TEST_METHOD(Class__UMG__MenuAnchor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, MenuClass, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnGetMenuContentEvent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, Placement, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, bFitInWindow, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, ShouldDeferPaintingAfterWindowContent, 0x013A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UseApplicationMenuStack, 0x013B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_BG4K, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnMenuOpenChanged, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_S4ZJ, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenuAnchor, 0x0160);
		}

		// class UMouseCursorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__MouseCursorBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseCursorBinding, 0x0060);
		}

		// class UMovieScene2DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieScene2DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, TransformMask, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_QGI8, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Translation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Rotation, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Scale, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Shear, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_IAH2, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformSection, 0x0550);
		}

		// class UMovieScene2DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieScene2DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformTrack, 0x0088);
		}

		// class UMovieSceneMarginSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieSceneMarginSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, TopCurve, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, LeftCurve, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, RightCurve, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, BottomCurve, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginSection, 0x0360);
		}

		// class UMovieSceneMarginTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieSceneMarginTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginTrack, 0x0088);
		}

		// class UMovieSceneWidgetMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__UMG__MovieSceneWidgetMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, BrushPropertyNamePath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, TrackName, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneWidgetMaterialTrack, 0x0080);
		}

		// class UTextLayoutWidget : public UWidget
		TEST_METHOD(Class__UMG__TextLayoutWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, ShapedTextOptions, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Justification, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrappingPolicy, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, UnknownData_WAI3, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrapTextAt, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Margin, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, LineHeightPercentage, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextLayoutWidget, 0x0128);
		}

		// class UMultiLineEditableText : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintText, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintTextDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, WidgetStyle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, bIsReadOnly, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_6XPT, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Font, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, SelectAllTextWhenFocused, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearTextSelectionOnFocusLoss, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, RevertTextOnEscape, 0x042A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearKeyboardFocusOnCommit, 0x042B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, AllowContextMenu, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardOptions, 0x042D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardDismissAction, 0x042E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_88QF, 0x042F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextChanged, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextCommitted, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_3U74, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableText, 0x0460);
		}

		// class UMultiLineEditableTextBox : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintText, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintTextDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, WidgetStyle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, TextStyle, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, bIsReadOnly, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, AllowContextMenu, 0x0BC1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardOptions, 0x0BC2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardDismissAction, 0x0BC3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_ZXSB, 0x0BC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Style, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Font, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ForegroundColor, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, BackgroundColor, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ReadOnlyForegroundColor, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextChanged, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextCommitted, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_T23W, 0x0C70);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableTextBox, 0x0C80);
		}

		// class UNamedSlot : public UContentWidget
		TEST_METHOD(Class__UMG__NamedSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedSlot, UnknownData_87OV, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlot, 0x0130);
		}

		// class UNamedSlotInterface : public UInterface
		TEST_METHOD(Class__UMG__NamedSlotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlotInterface, 0x0028);
		}

		// class UNativeWidgetHost : public UWidget
		TEST_METHOD(Class__UMG__NativeWidgetHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNativeWidgetHost, UnknownData_AELQ, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNativeWidgetHost, 0x0118);
		}

		// class UOverlay : public UPanelWidget
		TEST_METHOD(Class__UMG__Overlay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlay, UnknownData_HZY6, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlay, 0x0130);
		}

		// class UOverlaySlot : public UPanelSlot
		TEST_METHOD(Class__UMG__OverlaySlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_KQPV, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_CX4Y, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlaySlot, 0x0058);
		}

		// class UProgressBar : public UWidget
		TEST_METHOD(Class__UMG__ProgressBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Style, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BackgroundImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, MarqueeImage, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Percent, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BarFillType, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, bIsMarquee, 0x02CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_VT7H, 0x02CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BorderPadding, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, PercentDelegate, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacity, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacityDelegate, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_VB65, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressBar, 0x0318);
		}

		// class URetainerBox : public UContentWidget
		TEST_METHOD(Class__UMG__RetainerBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnInvalidation, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnPhase, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_85R8, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, Phase, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, PhaseCount, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_W709, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, EffectMaterial, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, TextureParameter, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_J9DZ, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URetainerBox, 0x0150);
		}

		// class URichTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__RichTextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, TextStyleSet, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DecoratorClasses, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, bOverrideDefaultStyle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_2EBC, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DefaultTextStyleOverride, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, MinDesiredWidth, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_ZML7, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, InstanceDecorators, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_4D38, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlock, 0x0668);
		}

		// class URichTextBlockImageDecorator : public URichTextBlockDecorator
		TEST_METHOD(Class__UMG__RichTextBlockImageDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlockImageDecorator, ImageSet, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockImageDecorator, 0x0030);
		}

		// class USafeZone : public UContentWidget
		TEST_METHOD(Class__UMG__SafeZone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadLeft, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadRight, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadTop, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadBottom, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, UnknownData_5FUL, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZone, 0x0138);
		}

		// class USafeZoneSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SafeZoneSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, bIsTitleSafe, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_00EU, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, SafeAreaScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, HAlign, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, VAlign, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_6LJK, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, Padding, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZoneSlot, 0x0060);
		}

		// class UScaleBox : public UContentWidget
		TEST_METHOD(Class__UMG__ScaleBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, Stretch, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, StretchDirection, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_W6MQ, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UserSpecifiedScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, IgnoreInheritedScale, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_TMWA, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBox, 0x0140);
		}

		// class UScaleBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScaleBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, UnknownData_H9P9, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBoxSlot, 0x0060);
		}

		// class UScrollBar : public UWidget
		TEST_METHOD(Class__UMG__ScrollBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Style, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbar, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbarTrack, 0x05E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Orientation, 0x05E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_K3UK, 0x05E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Thickness, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Padding, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_LA9C, 0x05FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBar, 0x0610);
		}

		// class UScrollBox : public UPanelWidget
		TEST_METHOD(Class__UMG__ScrollBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetBarStyle, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Style, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, BarStyle, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Orientation, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollBarVisibility, 0x0829);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ConsumeMouseWheel, 0x082A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_84DP, 0x082B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarThickness, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarPadding, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbar, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbarTrack, 0x0845);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AllowOverscroll, 0x0846);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAnimateWheelScrolling, 0x0847);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationDestination, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_6T6Q, 0x0849);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationScrollPadding, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollWhenFocusChanges, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAllowRightClickDragScrolling, 0x0851);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_32N9, 0x0852);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WheelScrollMultiplier, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, OnUserScrolled, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_LTU6, 0x0868);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBox, 0x0880);
		}

		// class UScrollBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScrollBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, UnknownData_PQ64, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxSlot, 0x0058);
		}

		// class USizeBox : public UContentWidget
		TEST_METHOD(Class__UMG__SizeBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_ESGI, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, WidthOverride, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, HeightOverride, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredWidth, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredHeight, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredWidth, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredHeight, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinAspectRatio, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxAspectRatio, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_DWUP, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBox, 0x0158);
		}

		// class USizeBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SizeBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_HFJ8, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_2H7C, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBoxSlot, 0x0060);
		}

		// class USlateBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__SlateBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBlueprintLibrary, 0x0028);
		}

		// class USlateVectorArtData : public UObject
		TEST_METHOD(Class__UMG__SlateVectorArtData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, VertexData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, IndexData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, Material, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMax, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateVectorArtData, 0x0060);
		}

		// class USlateAccessibleWidgetData : public UObject
		TEST_METHOD(Class__UMG__SlateAccessibleWidgetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, bCanChildrenBeAccessible, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleBehavior, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryBehavior, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, UnknownData_KDTK, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleTextDelegate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryText, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryTextDelegate, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateAccessibleWidgetData, 0x0080);
		}

		// class USlider : public UWidget
		TEST_METHOD(Class__UMG__Slider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, ValueDelegate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MinValue, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MaxValue, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_HJBU, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Orientation, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_AOI0, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderBarColor, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderHandleColor, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IndentHandle, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Locked, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MouseUsesStep, 0x048E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, RequiresControllerLock, 0x048F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, StepSize, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IsFocusable, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_MLVC, 0x0495);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureBegin, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureEnd, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureBegin, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureEnd, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnValueChanged, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_3IKA, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlider, 0x04F8);
		}

		// class USpacer : public UWidget
		TEST_METHOD(Class__UMG__Spacer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, Size, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, UnknownData_K79F, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpacer, 0x0120);
		}

		// class USpinBox : public UWidget
		TEST_METHOD(Class__UMG__SpinBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ValueDelegate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_K4H7, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Style, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinFractionalDigits, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxFractionalDigits, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, bAlwaysUsesDeltaSnap, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_27L1, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Delta, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SliderExponent, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_NW5D, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Font, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Justification, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_X6LK, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinDesiredWidth, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ClearKeyboardFocusOnCommit, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SelectAllTextOnCommit, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_SELJ, 0x0482);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ForegroundColor, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueChanged, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueCommitted, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnBeginSliderMovement, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnEndSliderMovement, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_PK4E, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinValue, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxValue, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinSliderValue, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxSliderValue, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_79ZB, 0x0504);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBox, 0x0518);
		}

		// class UTextBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__TextBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBinding, UnknownData_SIK5, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBinding, 0x0068);
		}

		// class UTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__TextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, TextDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacity, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacityDelegate, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Font, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, StrikeBrush, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowOffset, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacity, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacityDelegate, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, MinDesiredWidth, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bWrapWithInvalidationPanel, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bAutoWrapText, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bSimpleTextMode, 0x028E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, UnknownData_ZAYF, 0x028F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlock, 0x02A0);
		}

		// class UThrobber : public UWidget
		TEST_METHOD(Class__UMG__Throbber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, NumberOfPieces, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateHorizontally, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateVertically, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateOpacity, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_0K8Z, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, PieceImage, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, Image, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_DDLE, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrobber, 0x01B0);
		}

		// class UTileView : public UListView
		TEST_METHOD(Class__UMG__TileView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryHeight, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryWidth, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, TileAlignment, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, bWrapHorizontalNavigation, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, UnknownData_FEVI, 0x0372);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileView, 0x0388);
		}

		// class UTreeView : public UListView
		TEST_METHOD(Class__UMG__TreeView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_EKJ4, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnGetItemChildren, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnItemExpansionChanged, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_0Y5V, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTreeView, 0x03C0);
		}

		// class UUMGSequencePlayer : public UObject
		TEST_METHOD(Class__UMG__UMGSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_ALAC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, Animation, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_DKK0, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSequencePlayer, 0x07A8);
		}

		// class UUniformGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__UniformGridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, SlotPadding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotWidth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotHeight, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, UnknownData_M353, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridPanel, 0x0148);
		}

		// class UUniformGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__UniformGridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, HorizontalAlignment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, VerticalAlignment, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_00UF, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Row, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Column, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_AFFO, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridSlot, 0x0050);
		}

		// class UUserWidget : public UWidget
		TEST_METHOD(Class__UMG__UserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_Y7UF, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacity, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacityDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColor, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColorDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Padding, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ActiveSequencePlayers, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, StoppedSequencePlayers, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, NamedSlotBindings, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, WidgetTree, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Priority, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_6TT9, 0x01B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, TickFrequency, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_MNXL, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, InputComponent, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, AnimationCallbacks, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_5Y6S, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserWidget, 0x0230);
		}

		// class UVerticalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__VerticalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBox, UnknownData_BDCN, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBox, 0x0130);
		}

		// class UVerticalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__VerticalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_1495, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_1CM9, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBoxSlot, 0x0060);
		}

		// class UViewport : public UContentWidget
		TEST_METHOD(Class__UMG__Viewport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, BackgroundColor, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, UnknownData_AVZ0, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewport, 0x0148);
		}

		// class UVisibilityBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__VisibilityBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisibilityBinding, 0x0060);
		}

		// class UWidgetAnimation : public UMovieSceneSequence
		TEST_METHOD(Class__UMG__WidgetAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, MovieScene, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, AnimationBindings, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, bLegacyFinishOnStop, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, UnknownData_7QKM, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, DisplayLabel, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimation, 0x0378);
		}

		// class UWidgetAnimationDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__UMG__WidgetAnimationDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationDelegateBinding, WidgetAnimationDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimationDelegateBinding, 0x0038);
		}

		// class UWidgetAnimationPlayCallbackProxy : public UObject
		TEST_METHOD(Class__UMG__WidgetAnimationPlayCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationPlayCallbackProxy, Finished, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationPlayCallbackProxy, UnknownData_ZJ5P, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimationPlayCallbackProxy, 0x0048);
		}

		// class UWidgetBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__WidgetBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBinding, 0x0060);
		}

		// class UWidgetBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__UMG__WidgetBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, WidgetTree, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, UnknownData_BYL5, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Bindings, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Animations, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, NamedSlots, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, TemplateAsset, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Template, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintGeneratedClass, 0x0398);
		}

		// class UWidgetBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintLibrary, 0x0028);
		}

		// class UWidgetComponent : public UMeshComponent
		TEST_METHOD(Class__UMG__WidgetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_FQ1L, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WidgetClass, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, DrawSize, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bManuallyRedraw, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bRedrawRequested, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_3WAN, 0x0432);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RedrawTime, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_D1WO, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CurrentDrawSize, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bDrawAtDesiredSize, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_HQVU, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Pivot, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bReceiveHardwareInput, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bWindowFocusable, 0x0455);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WindowVisibility, 0x0456);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bApplyGammaCorrection, 0x0457);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OwnerPlayer, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BackgroundColor, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TintColorAndOpacity, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpacityFromTexture, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BlendMode, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bIsTwoSided, 0x0485);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TickWhenOffscreen, 0x0486);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_A37W, 0x0487);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Widget, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_H8S1, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BodySetup, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial_OneSided, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial_OneSided, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial_OneSided, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RenderTarget, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaterialInstance, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bAddedToScreen, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bEditTimeUsable, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_KZHE, 0x04FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, SharedLayerName, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, LayerZOrder, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, GeometryMode, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_Q0HU, 0x0509);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CylinderArcAngle, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_VBZN, 0x0510);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetComponent, 0x0540);
		}

		// class UWidgetInteractionComponent : public USceneComponent
		TEST_METHOD(Class__UMG__WidgetInteractionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, OnHoveredWidgetChanged, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_6A7L, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, VirtualUserIndex, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, PointerIndex, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, TraceChannel, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_QXEL, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionDistance, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionSource, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bEnableHitTesting, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bShowDebug, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_BJAX, 0x0223);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugColor, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_FML8, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, CustomHitResult, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LocalHitLocation, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastLocalHitLocation, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, HoveredWidgetComponent, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastHitResult, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetInteractable, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetFocusable, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetHitTestVisible, 0x03DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_HJVH, 0x03DB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetInteractionComponent, 0x03E0);
		}

		// class UWidgetLayoutLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetLayoutLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetLayoutLibrary, 0x0028);
		}

		// class UWidgetNavigation : public UObject
		TEST_METHOD(Class__UMG__WidgetNavigation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Up, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Down, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Left, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Right, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Next, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Previous, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetNavigation, 0x0100);
		}

		// class UWidgetSwitcher : public UPanelWidget
		TEST_METHOD(Class__UMG__WidgetSwitcher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, ActiveWidgetIndex, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, UnknownData_RF4I, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcher, 0x0138);
		}

		// class UWidgetSwitcherSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WidgetSwitcherSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_GBE0, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_YD7Z, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcherSlot, 0x0058);
		}

		// class UWidgetTree : public UObject
		TEST_METHOD(Class__UMG__WidgetTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetTree, RootWidget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetTree, 0x0030);
		}

		// class UWindowTitleBarArea : public UContentWidget
		TEST_METHOD(Class__UMG__WindowTitleBarArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bWindowButtonsEnabled, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bDoubleClickTogglesFullscreen, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, UnknownData_2PZF, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarArea, 0x0140);
		}

		// class UWindowTitleBarAreaSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WindowTitleBarAreaSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, UnknownData_WFKO, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarAreaSlot, 0x0060);
		}

		// class UWrapBox : public UPanelWidget
		TEST_METHOD(Class__UMG__WrapBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, InnerSlotPadding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, WrapWidth, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, bExplicitWrapWidth, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, UnknownData_5VD5, 0x012D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBox, 0x0140);
		}

		// class UWrapBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WrapBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, bFillEmptySpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_PI7E, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, FillSpanWhenLessThan, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_JXBO, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBoxSlot, 0x0060);
		}

		// class APRE_MOD_Sink_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PRE_MOD_Sink__PRE_MOD_Sink_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_MOD_Sink_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_MOD_Sink_C, AmbientAudio, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_MOD_Sink_C, StaticMesh, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_MOD_Sink_C, DefaultSceneRoot, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_MOD_Sink_C, OcclusionTrace, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APRE_MOD_Sink_C, EmitterPlaying, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRE_MOD_Sink_C, 0x0271);
		}

		// class UAnimatronic_ABP_Chica_C : public UAnimatronic_ABP_MASTER_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Animatronic_ABP_Chica__Animatronic_ABP_Chica_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Chica_C, UberGraphFrame, 0x8DE8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimatronic_ABP_Chica_C, 0x8DF0);
		}

		// class AEndoController_C : public AAISeekerController_C
		TEST_METHOD(BlueprintGeneratedClass__EndoController__EndoController_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEndoController_C, 0x03D8);
		}

		// class UTriggerMissionOnActivated_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__TriggerMissionOnActivated__TriggerMissionOnActivated_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriggerMissionOnActivated_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriggerMissionOnActivated_C, MissionToUpdate, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriggerMissionOnActivated_C, StateToUpdate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriggerMissionOnActivated_C, CompleteMission, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTriggerMissionOnActivated_C, 0x00C5);
		}

		// class APowerStationManager_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PowerStationManager__PowerStationManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationManager_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationManager_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationManager_C, PowerStations, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationManager_C, OnPowerStationEntered, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationManager_C, FreddyWaveTriggerEnable, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationManager_C, UnknownData_6FJ1, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationManager_C, PlayersPowerStation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationManager_C, NextPowerStationEvent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APowerStationManager_C, AllowTimeAdvance, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APowerStationManager_C, 0x0271);
		}

		// class ADJMusicHandler_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__DJMusicHandler__DJMusicHandler_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicHandler_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicHandler_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicHandler_C, Beats, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADJMusicHandler_C, MusicPlaying, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADJMusicHandler_C, 0x0249);
		}

		// class ASurvivalVanessaSpawnInTrigger_C : public APlayerTrigger
		TEST_METHOD(BlueprintGeneratedClass__SurvivalVanessaSpawnInTrigger__SurvivalVanessaSpawnInTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvivalVanessaSpawnInTrigger_C, UberGraphFrame, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurvivalVanessaSpawnInTrigger_C, 0x0278);
		}

		// class UStaffBotSpawnerComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__StaffBotSpawnerComponent__StaffBotSpawnerComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffBotSpawnerComponent_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffBotSpawnerComponent_C, SplineManagers, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffBotSpawnerComponent_C, SpawnedStaffBots, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffBotSpawnerComponent_C, DestroyStaffbotsWhenDestroyed, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffBotSpawnerComponent_C, UseRandomPositions, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffBotSpawnerComponent_C, UnknownData_AZ5F, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffBotSpawnerComponent_C, TypesToAlert, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffBotSpawnerComponent_C, NumberToAlert, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffBotSpawnerComponent_C, OverrideMaterials, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffBotSpawnerComponent_C, BotMaterialOverride, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffBotSpawnerComponent_C, StaffBotType, 0x00F6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaffBotSpawnerComponent_C, 0x00F7);
		}

		// class UMobileInstalledContent : public UObject
		TEST_METHOD(Class__MobilePatchingUtils__MobileInstalledContent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileInstalledContent, UnknownData_EIK2, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobileInstalledContent, 0x0048);
		}

		// class UMobilePendingContent : public UMobileInstalledContent
		TEST_METHOD(Class__MobilePatchingUtils__MobilePendingContent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobilePendingContent, UnknownData_UO6D, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobilePendingContent, 0x0088);
		}

		// class UMobilePatchingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MobilePatchingUtils__MobilePatchingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobilePatchingLibrary, 0x0028);
		}

		// class UStaffbot_Cleaner_LINK_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Staffbot_Cleaner_LINK__Staffbot_Cleaner_LINK_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, UnknownData_YTCU, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_TransitionResult_5, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_TransitionResult_4, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_TransitionResult_3, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_TransitionResult_2, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_TransitionResult, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_SequencePlayer_11, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_StateResult_3, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_SequencePlayer_10, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_SequencePlayer_9, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_SequencePlayer_8, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_SequencePlayer_7, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_BlendListByInt_2, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_StateResult_2, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_UseCachedPose, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_StateResult, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_StateMachine, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_SequencePlayer_6, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_SaveCachedPose_2, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_SequencePlayer_5, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_BlendListByBool, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_BlendListByInt, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_SequencePlayer_4, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_SequencePlayer_3, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_SequencePlayer_2, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_SequencePlayer, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_SaveCachedPose, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_LocalToComponentSpace, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_ComponentToLocalSpace, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, AnimGraphNode_Constraint, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, isAiming, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, UnknownData_USWR, 0x0E99);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, WarningLevel, 0x0E9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, IsWarning, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbot_Cleaner_LINK_C, IsAlerting, 0x0EA1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaffbot_Cleaner_LINK_C, 0x0EA2);
		}

		// class AChicaKitchenManager_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ChicaKitchenManager__ChicaKitchenManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AChicaKitchenManager_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChicaKitchenManager_C, Kill_Chica_Trigger2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChicaKitchenManager_C, Kill_Chica_Trigger1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChicaKitchenManager_C, Kill_Chica_Trigger, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChicaKitchenManager_C, InitialSpawn, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChicaKitchenManager_C, ChicaPosition_Kitchen, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChicaKitchenManager_C, ChicaLookDoor, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChicaKitchenManager_C, ChicaDoorPosition, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChicaKitchenManager_C, DefaultSceneRoot, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChicaKitchenManager_C, Chica, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChicaKitchenManager_C, StateKey, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChicaKitchenManager_C, MoveToLocationKey, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChicaKitchenManager_C, LookAtLocationKey, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChicaKitchenManager_C, StaffBotKey, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChicaKitchenManager_C, DoorKey, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChicaKitchenManager_C, GregoryKey, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChicaKitchenManager_C, Chica_BlackBoard, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChicaKitchenManager_C, DoorFocus, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChicaKitchenManager_C, OGM_Kitchen, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChicaKitchenManager_C, 0x0300);
		}

		// class ABP_SoundBoothManager_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_SoundBoothManager__BP_SoundBoothManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, Flash_NewTrack_0_3E6B0B244509C68F95AC899478D47DF9, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, Flash__Direction_3E6B0B244509C68F95AC899478D47DF9, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, UnknownData_TX5I, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, Flash, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, RefTOStrips, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, Ray1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, Ray2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, Ray3, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, Ray4, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, Light1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, Light2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, Light3, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, Light4, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, RefTOStrips_1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, TV_1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, TV_2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, TV_3, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, TV_4, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, StageLight_1, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, StageLight_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, StageLight_3, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, StageLight_4, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SoundBoothManager_C, ArayOfDiscoLights, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SoundBoothManager_C, 0x02E8);
		}

		// class UWI_ImageScaled_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_ImageScaled__WI_ImageScaled_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ImageScaled_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ImageScaled_C, Image_28, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ImageScaled_C, Texture, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_ImageScaled_C, ImageScale, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_ImageScaled_C, 0x024C);
		}

		// class ACollectible_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Collectible__Collectible_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACollectible_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACollectible_C, InventoryConditional, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACollectible_C, GameTypeCheckDestroy, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACollectible_C, CollectionRange, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACollectible_C, PlayerInteractHoldComponent, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACollectible_C, DefaultSceneRoot, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACollectible_C, CanCollect, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACollectible_C, UnknownData_BI3Q, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACollectible_C, ItemName, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACollectible_C, UnknownData_WJ4O, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACollectible_C, OnCollected, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACollectible_C, BeginCollectEvent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACollectible_C, IgnoreLineTrace, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACollectible_C, InteractAnglesToCheck, 0x0281);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACollectible_C, 0x0282);
		}

		// class AGeneratorBase_BP_C : public AActivatorBase_C
		TEST_METHOD(BlueprintGeneratedClass__GeneratorBase_BP__GeneratorBase_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeneratorBase_BP_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeneratorBase_BP_C, PointLight, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeneratorBase_BP_C, Collision, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeneratorBase_BP_C, PlayerTrigger, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeneratorBase_BP_C, SkeletalMesh, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeneratorBase_BP_C, 0x02B8);
		}

		// class UChaosDestructionListener : public USceneComponent
		TEST_METHOD(Class__GeometryCollectionEngine__ChaosDestructionListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_CFX5, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, CollisionEventRequestSettings, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, BreakingEventRequestSettings, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, TrailingEventRequestSettings, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_MP83, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, ChaosSolverActors, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, GeometryCollectionActors, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnCollisionEvents, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnBreakingEvents, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnTrailingEvents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_01SS, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosDestructionListener, 0x0420);
		}

		// class AGeometryCollectionActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionActor, GeometryCollectionComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionActor, GeometryCollectionDebugDrawComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionActor, 0x0238);
		}

		// class UGeometryCollectionCache : public UObject
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, RecordedData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, SupportedCollection, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, CompatibleCollectionState, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionCache, 0x0050);
		}

		// class UGeometryCollectionComponent : public UMeshComponent
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_CA1D, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ChaosSolverActor, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_XW6S, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, RestCollection, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitializationFields, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, Simulating, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_SW4V, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ObjectType, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, EnableClustering, 0x0529);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_6AL6, 0x052A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ClusterGroupIndex, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, MaxClusterLevel, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_09HW, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DamageThreshold, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ClusterConnectionType, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_2KYJ, 0x0549);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CollisionGroup, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CollisionSampleFraction, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, LinearEtherDrag, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, AngularEtherDrag, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_N12Z, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, PhysicalMaterial, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialVelocityType, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_14CU, 0x0569);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialLinearVelocity, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialAngularVelocity, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_39EI, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CacheParameters, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsStateChange, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsLoadingStateChange, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_0WCX, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, OnChaosBreakEvent, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DesiredCacheTime, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CachePlayback, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_UKJX, 0x0625);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, OnChaosPhysicsCollision, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bNotifyBreaks, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bNotifyCollisions, 0x0639);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_G7EH, 0x063A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DummyBodySetup, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_6QD0, 0x0820);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionComponent, 0x0840);
		}

		// class AGeometryCollectionDebugDrawActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionDebugDrawActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, WarningMessage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_M3BQ, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SelectedRigidBody, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawWholeCollection, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawHierarchy, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawClustering, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, HideGeometry, 0x024B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyId, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyCollision, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bCollisionAtOrigin, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyTransform, 0x024F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyInertia, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyVelocity, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyForce, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyInfos, 0x0253);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowTransformIndex, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowTransform, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowParent, 0x0256);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowLevel, 0x0257);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowConnectivityEdges, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowGeometryIndex, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowGeometryTransform, 0x025A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowBoundingBox, 0x025B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaces, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaceIndices, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaceNormals, 0x025E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowSingleFace, 0x025F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SingleFaceIndex, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertices, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertexIndices, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertexNormals, 0x0266);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bUseActiveVisualization, 0x0267);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, PointThickness, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, LineThickness, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bTextShadow, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_C632, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TextScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, NormalScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, AxisScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ArrowScale, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyIdColor, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyTransformScale, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyCollisionColor, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyInertiaColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyVelocityColor, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyForceColor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyInfoColor, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TransformIndexColor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TransformScale, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, LevelColor, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ParentColor, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ConnectivityEdgeThickness, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, GeometryIndexColor, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, GeometryTransformScale, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, BoundingBoxColor, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceColor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceIndexColor, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceNormalColor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SingleFaceColor, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexColor, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexIndexColor, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexNormalColor, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_W062, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SpriteComponent, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_OW72, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionDebugDrawActor, 0x0310);
		}

		// class UGeometryCollectionDebugDrawComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionDebugDrawComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, GeometryCollectionDebugDrawActor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, GeometryCollectionRenderLevelSetActor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, UnknownData_A2CR, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionDebugDrawComponent, 0x00C8);
		}

		// class UGeometryCollection : public UObject
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_RMKD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, Materials, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, ImplicitType, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_TUBW, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinLevelSetResolution, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaxLevelSetResolution, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinClusterLevelSetResolution, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaxClusterLevelSetResolution, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionObjectReductionPercentage, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, bMassAsDensity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_HCYU, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, Mass, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinimumMassClamp, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionParticlesFraction, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaximumCollisionParticles, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_V1Y3, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, SizeSpecificData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, EnableRemovePiecesOnFracture, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_CUV4, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, RemoveOnFractureMaterials, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, PersistentGuid, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, StateGuid, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, BoneSelectedMaterialIndex, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_H3ZI, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollection, 0x00D0);
		}

		// class AGeometryCollectionRenderLevelSetActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionRenderLevelSetActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, TargetVolumeTexture, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, RayMarchMaterial, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, SurfaceTolerance, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, Isovalue, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, Enabled, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, RenderVolumeBoundingBox, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, UnknownData_VG10, 0x0242);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionRenderLevelSetActor, 0x02C0);
		}

		// class USkeletalMeshSimulationComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__SkeletalMeshSimulationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_QK3Q, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, PhysicalMaterial, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ChaosSolverActor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, OverridePhysicsAsset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, bSimulating, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, bNotifyCollisions, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ObjectType, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_KJSY, 0x00D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, Density, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MinMass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MaxMass, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, CollisionType, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_RCT7, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeParticlesPerUnitArea, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeMinNumParticles, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeMaxNumParticles, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MinLevelSetResolution, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MaxLevelSetResolution, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, CollisionGroup, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialVelocityType, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_AO8T, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialLinearVelocity, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialAngularVelocity, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, OnChaosPhysicsCollision, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_5IKR, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSimulationComponent, 0x0138);
		}

		// class UStaticMeshSimulationComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__StaticMeshSimulationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_RWYZ, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Simulating, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, bNotifyCollisions, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ObjectType, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_OBBK, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Mass, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, CollisionType, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ImplicitType, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_QB5Z, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, MinLevelSetResolution, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, MaxLevelSetResolution, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialVelocityType, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_VRZV, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialLinearVelocity, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialAngularVelocity, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, DamageThreshold, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_RWIT, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, PhysicalMaterial, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ChaosSolverActor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, OnChaosPhysicsCollision, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_QNF2, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, SimulatedComponents, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_09Q5, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSimulationComponent, 0x0138);
		}

		// class UStaffbotKitchenHUD_Instruction_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__StaffbotKitchenHUD_Instruction__StaffbotKitchenHUD_Instruction_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbotKitchenHUD_Instruction_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbotKitchenHUD_Instruction_C, CheckBox_25, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaffbotKitchenHUD_Instruction_C, TextBlock_58, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaffbotKitchenHUD_Instruction_C, 0x0248);
		}

		// class ABPCeilingFan_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BPCeilingFan__BPCeilingFan_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABPCeilingFan_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABPCeilingFan_C, Rotor, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABPCeilingFan_C, SM_FanBase, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABPCeilingFan_C, Root, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABPCeilingFan_C, Lights_ON_Material, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABPCeilingFan_C, Lights_OFF_Material, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABPCeilingFan_C, RefToRotator, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABPCeilingFan_C, InitialRate, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABPCeilingFan_C, 0x026C);
		}

		// class UFPSUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FPSUI__FPSUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFPSUI_C, Image_328, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFPSUI_C, TextBlock_81, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFPSUI_C, FPSCounter, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFPSUI_C, 0x0248);
		}

		// class AP_GoKart_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__P_GoKart__P_GoKart_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, UberGraphFrame, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, GameTypeCheckDestroy, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, CarBody, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, CarToCarCollision, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, EngineIgniteCue, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, MotorSound, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, Camera, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, SpringArm, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, RaceCarHitBox, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, GasLocation, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, AC_VehicleMechanics, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, CenterOfMass, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, SK_S_Antenna, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, SK_SteeringWheel, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, Motor, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, Chassie, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, HoverComponentFL, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, HoverComponentRL, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, HoverComponentRR, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, HoverComponentFR, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, Box, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, TermialVelocity, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, UnknownData_ZH7V, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AP_GoKart_C, StrartingSpot, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AP_GoKart_C, 0x0370);
		}

		// class UWI_InstructionCard_KeepMoving_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WI_InstructionCard_KeepMoving__WI_InstructionCard_KeepMoving_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_KeepMoving_C, Image_18_Template, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_KeepMoving_C, TextBlock_48_Title, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_KeepMoving_C, VerticalBox_250, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWI_InstructionCard_KeepMoving_C, WI_ImageScaled, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWI_InstructionCard_KeepMoving_C, 0x0250);
		}

		// class AFreddyPowerProximityActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__FreddyPowerProximityActor__FreddyPowerProximityActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyPowerProximityActor_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyPowerProximityActor_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyPowerProximityActor_C, DestinationActor, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyPowerProximityActor_C, DistanceDelta, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFreddyPowerProximityActor_C, TotalDistance, 0x0264);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFreddyPowerProximityActor_C, 0x0268);
		}

		// class UAnimatronic_ABP_Monty_C : public UAnimatronic_ABP_MASTER_C
		TEST_METHOD(AnimBlueprintGeneratedClass__Animatronic_ABP_Monty__Animatronic_ABP_Monty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimatronic_ABP_Monty_C, UberGraphFrame, 0x8DE8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimatronic_ABP_Monty_C, 0x8DF0);
		}

		// class UWheelBack_C : public UVehicleWheel
		TEST_METHOD(BlueprintGeneratedClass__WheelBack__WheelBack_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheelBack_C, 0x00F0);
		}

		// class AShatteredChicaSpawnActivatibleTrigger_C : public AShatteredChicaSpawnTrigger_C
		TEST_METHOD(BlueprintGeneratedClass__ShatteredChicaSpawnActivatibleTrigger__ShatteredChicaSpawnActivatibleTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredChicaSpawnActivatibleTrigger_C, UnknownData_S5FD, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredChicaSpawnActivatibleTrigger_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShatteredChicaSpawnActivatibleTrigger_C, Activated, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShatteredChicaSpawnActivatibleTrigger_C, 0x0331);
		}

		// class UW_LaserOverLay_C : public UGregoryOverlay_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_LaserOverLay__W_LaserOverLay_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, UnknownData_GWIV, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, UberGraphFrame, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, WinnerAnim, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, BulletHole_Left, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, BulletHole_Right, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, LoadIn, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, DamageOnRight, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, DamageOnLeft, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, Damage, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, BottomLeftUIBox_c, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, BottomMidUIBox_c, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, BottomRightUIBox_c, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, CRT_Overlay, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, DamageOverlay, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, HUD_BulletHole0, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, HUD_BulletHole0_R, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, HUD_BulletHole1, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, HUD_BulletHole1_R, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, HUD_BulletHole2, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, HUD_BulletHole2_R, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, HUD_BulletHole3, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, HUD_BulletHole3_R, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, HUD_BulletHole4, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, HUD_BulletHole4_R, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, HUD_BulletHole5, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, HUD_BulletHole5_R, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, HUD_BulletHole6, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, HUD_BulletHole6_R, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, HUD_BulletHole7, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, HUD_BulletHole7_R, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, LeftBulletsCanvas, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, MiddleUIBox_c, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, MidLeftUIBox_c, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, MidRightUIBox_c, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, TopLeftUIBox_c, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, TopMidUIBox_c, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, TopRightUIBox_c, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, WI_Feedback, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, WI_FlagScore_Fazerblast, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, WI_Gregory_Interact_C, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, WI_Health_Fazerblast, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, WI_Timer, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, YouWin_Overlay, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, ManagerReference, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, HitStreak, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, Score, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, Time, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, UnknownData_UMEN, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, Camera, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, PlayHitLerp, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, UnknownData_ZDIU, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, HitTimer, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, LeftSideBulletHoles, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, RightSideBulletHoles, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, LeftSideVisibleBullets, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, RightSideVisibleBullets, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, LeftSideTimer, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, RightSideTimer, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LaserOverLay_C, EnemyInFrontOfPlayer, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_LaserOverLay_C, 0x04C1);
		}

		// class ABP_StageButton_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_StageButton__BP_StageButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_StageButton_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_StageButton_C, StageShowStateHandler, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_StageButton_C, BasicButton, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_StageButton_C, MOD_StagePodium_PodiumPart1_low, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_StageButton_C, MOD_StagePodium_PodiumBase_low, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_StageButton_C, MOD_StagePodium_PanelRight_low, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_StageButton_C, MOD_StagePodium_PanelLeft_low, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_StageButton_C, DefaultSceneRoot, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_StageButton_C, Down__Up_PanelMovement_8202549145C5D33481ED5BAEF47C902D, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_StageButton_C, Down__Up_PodiumMovement_8202549145C5D33481ED5BAEF47C902D, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_StageButton_C, Down__Up__Direction_8202549145C5D33481ED5BAEF47C902D, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_StageButton_C, UnknownData_HD03, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_StageButton_C, Down__Up, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_StageButton_C, Up__Down_PanelMovement_9DB41A8843B1A0A434605EA13A61845E, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_StageButton_C, Up__Down_PodiumMovement_9DB41A8843B1A0A434605EA13A61845E, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_StageButton_C, Up__Down__Direction_9DB41A8843B1A0A434605EA13A61845E, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_StageButton_C, UnknownData_XOR8, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_StageButton_C, Up__Down, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_StageButton_C, OverridePosition, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_StageButton_C, Up_, 0x0299);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_StageButton_C, 0x029A);
		}

		// class ULaserTagHUD_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LaserTagHUD__LaserTagHUD_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTagHUD_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTagHUD_C, CountdownUntilSessionUI, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTagHUD_C, CrossHairLaserGun, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTagHUD_C, CurrentHighScore, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTagHUD_C, GameOverText, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTagHUD_C, GoText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTagHUD_C, LaserTagCountDown_2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTagHUD_C, LaserTagCountdownTimer, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTagHUD_C, LaserTagGameOverUI, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTagHUD_C, LasertagGameSessionUI, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTagHUD_C, ScoreText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTagHUD_C, ScoreText_2, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTagHUD_C, CrossHairLaserGunVisibility, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTagHUD_C, UnknownData_OFWE, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTagHUD_C, LaserTagCountdownInt, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTagHUD_C, GameOverUIText, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTagHUD_C, SecondsRemianing, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULaserTagHUD_C, MinutesRemaining, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULaserTagHUD_C, 0x02B8);
		}

		// class AVCartVehicleAddedOnAfter_C : public AWheeledVehicle
		TEST_METHOD(BlueprintGeneratedClass__VCartVehicleAddedOnAfter__VCartVehicleAddedOnAfter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, UberGraphFrame, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, Ak, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, GameTypeCheckDestroy, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, EngineIgniteCue, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, Body, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, Motor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, SterringWheel, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, ChaseCamera, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, EngineSound, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, SpringArm, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, bIsLowFriction, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, IsInCar, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, UnknownData_9XYI, 0x02EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, GearDisplayColor, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, GearDisplayReverseColor, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, UnknownData_I8YR, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, Speed_Display_String, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, Gear_Display_String, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, InReverseGear, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, IsInCar_1, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, bHandbrake, 0x0332);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, UnknownData_GK51, 0x0333);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, ThrottleMultiplayer, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, EngineOn, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, Can_Move_, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, UnknownData_FEWG, 0x033A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, StartTransform, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, Reset_Position, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, UnknownData_DIW2, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, RPMToRTPCScalingFactor, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVCartVehicleAddedOnAfter_C, RacerHud, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVCartVehicleAddedOnAfter_C, 0x0380);
		}

		// class ABP_NoiseMakingTowerBaseInteractible_C : public ABP_NoiseMakingTowerBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_NoiseMakingTowerBaseInteractible__BP_NoiseMakingTowerBaseInteractible_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBaseInteractible_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBaseInteractible_C, PlayerOverlap, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBaseInteractible_C, Used, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBaseInteractible_C, UnknownData_8CZ8, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NoiseMakingTowerBaseInteractible_C, TriggerDisbatch, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_NoiseMakingTowerBaseInteractible_C, 0x02A8);
		}

		// class ASecurityOfficeManager_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SecurityOfficeManager__SecurityOfficeManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, EscapeBounds, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, PlayerOverlap, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, DefaultSceneRoot, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, DoorTest, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, AllowedEnemyDistance, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, UnknownData_8DOO, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, Cameras, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, DisplayPanels, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, RenderCameraIndex, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, ItemAward, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, ShouldDestroyAllAI, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, OverlapCanEnd, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, UnknownData_BMEY, 0x02A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, BBReached, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, BBPlayer, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, IsRunning, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, UnknownData_YASQ, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, OfficePower, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, OfficeStartPower, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, UnknownData_6ZUP, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, CurrentPowerDrainers, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, OnPowerDrained, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, DownloadTimeRemaining, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, DownloadTotalTime, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, PowerMeter, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, OnOfficeGameStarted, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, OnOfficeGameEnded, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, AllCamerasReady, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, UnknownData_1JC7, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, PawnAtOffice, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, BadgeAward, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASecurityOfficeManager_C, AllowedGameTypes, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASecurityOfficeManager_C, 0x0360);
		}

		// class UGameplayTask : public UObject
		TEST_METHOD(Class__GameplayTasks__GameplayTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_L83F, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, InstanceName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_O2Z0, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ResourceOverlapPolicy, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_OK6T, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ChildTask, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask, 0x0068);
		}

		// class UGameplayTask_ClaimResource : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_ClaimResource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_ClaimResource, 0x0068);
		}

		// class UGameplayTask_SpawnActor : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_SpawnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, success, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, DidNotSpawn, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, UnknownData_384K, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, ClassToSpawn, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_SpawnActor, 0x00A8);
		}

		// class UGameplayTask_TimeLimitedExecution : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_TimeLimitedExecution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnFinished, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnTimeExpired, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, UnknownData_7LKR, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_TimeLimitedExecution, 0x0098);
		}

		// class UGameplayTask_WaitDelay : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_WaitDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, OnFinish, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, UnknownData_E96T, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_WaitDelay, 0x0080);
		}

		// class UGameplayTaskOwnerInterface : public UInterface
		TEST_METHOD(Class__GameplayTasks__GameplayTaskOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskOwnerInterface, 0x0028);
		}

		// class UGameplayTaskResource : public UObject
		TEST_METHOD(Class__GameplayTasks__GameplayTaskResource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, ManualResourceID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, AutoResourceID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_TG3H, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_NKHP, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskResource, 0x0038);
		}

		// class UGameplayTasksComponent : public UActorComponent
		TEST_METHOD(Class__GameplayTasks__GameplayTasksComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_E5TQ, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_QSC0, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, SimulatedTasks, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TaskPriorityQueue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_6RYU, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TickingTasks, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, KnownTasks, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, OnClaimedResourcesChange, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTasksComponent, 0x0120);
		}

		// class UImpactShake_Breakdown_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__ImpactShake_Breakdown__ImpactShake_Breakdown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImpactShake_Breakdown_C, 0x0160);
		}

		// class UPathPointType_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__PathPointType__PathPointType_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathPointType_C, PatrolPathKey, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathPointType_C, PatrolPointIndexKey, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathPointType_C, PointType, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathPointType_C, 0x00F1);
		}

		// class ULittle_DJ_Music_Man_ABP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Little_DJ_Music_Man_ABP__Little_DJ_Music_Man_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, UnknownData_60DV, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_3, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult_2, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, AnimGraphNode_TransitionResult, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_4, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_3, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_3, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult_2, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer_2, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, AnimGraphNode_StateResult, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, AnimGraphNode_StateMachine, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, AnimGraphNode_Slot, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, AnimGraphNode_LayeredBoneBlend, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, AnimGraphNode_SequencePlayer, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, Velocity, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, bSpawnOut, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, UnknownData_AH0E, 0x0755);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, SpeedInput, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, UnknownData_DP0Q, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, PositionHistory, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, CurrentLocation, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, PreviousLocation, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, CloseToPlayer, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, UnknownData_0HTU, 0x07A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, PlaybackSpeed, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, SkipSpawnIn, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULittle_DJ_Music_Man_ABP_C, chaseStarted, 0x07B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULittle_DJ_Music_Man_ABP_C, 0x07B2);
		}

		// class APlayerAIController_C : public AAIController
		TEST_METHOD(BlueprintGeneratedClass__PlayerAIController__PlayerAIController_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerAIController_C, 0x0330);
		}

		// class USurvivalMissionTextFormatter_C : public UMissionTextFormatter_C
		TEST_METHOD(BlueprintGeneratedClass__SurvivalMissionTextFormatter__SurvivalMissionTextFormatter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivalMissionTextFormatter_C, SurvivalRandomizer, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvivalMissionTextFormatter_C, 0x0058);
		}

		// class UDaycareGeneratorMissionTextFormatter_C : public UMissionTextFormatter_C
		TEST_METHOD(BlueprintGeneratedClass__DaycareGeneratorMissionTextFormatter__DaycareGeneratorMissionTextFormatter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDaycareGeneratorMissionTextFormatter_C, ActivatorTest, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDaycareGeneratorMissionTextFormatter_C, 0x0058);
		}

		// class UFindSpawnPoint_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__FindSpawnPoint__FindSpawnPoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSpawnPoint_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSpawnPoint_C, AtLeastDistance, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSpawnPoint_C, SpawnType, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSpawnPoint_C, UnknownData_0995, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSpawnPoint_C, SpawnPointLocationKey, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindSpawnPoint_C, 0x00E0);
		}

		// class UIsStunned_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__IsStunned__IsStunned_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsStunned_C, 0x00A0);
		}

		// struct FS_Elevator_Airlock
		TEST_METHOD(UserDefinedStruct__S_Elevator_Airlock__S_Elevator_Airlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Airlock, Buttons_12_25682BE14817A9391D593A95505BAAAA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Airlock, ArrowIndicators_18_2DBE76F2482A2DAA9E6E9FBAB4BD9A5F, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Airlock, A_13_C073DD34469CB89235F773A6F1274593, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Airlock, B_14_F48A13D84EE431FD8792DAA5E41A4F34, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Airlock, ElevatorPrefab_21_88D6F6A446347CB4CDD912BAA1529B22, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_Elevator_Airlock, 0x00A8);
		}

		// struct FPIELoginSettingsInternal
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PIELoginSettingsInternal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Token, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Type, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, TokenBytes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPIELoginSettingsInternal, 0x0040);
		}

		// struct FPlayerReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PlayerReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UniqueId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ValidationStr, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, Platform, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, bAllowCrossplay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UnknownData_7ICO, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ElapsedTime, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerReservation, 0x0050);
		}

		// struct FPartyReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PartyReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, TeamNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, UnknownData_KGP8, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyLeader, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyMembers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, RemovedPartyMembers, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyReservation, 0x0050);
		}

		// struct FSpectatorReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__SpectatorReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpectatorReservation, SpectatorId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpectatorReservation, Spectator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpectatorReservation, 0x0078);
		}

		// struct FBlueprintSessionResult
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__BlueprintSessionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintSessionResult, UnknownData_1DFM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintSessionResult, 0x0108);
		}

		// struct FInAppPurchaseReceiptInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseReceiptInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseReceiptInfo2, 0x0030);
		}

		// struct FOnlineProxyStoreOffer
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__OnlineProxyStoreOffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, OfferId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, Title, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, Description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, LongDescription, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, RegularPriceText, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, RegularPrice, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_X5FW, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, PriceText, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, NumericPrice, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_VH4X, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, CurrencyCode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, ReleaseDate, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, ExpirationDate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, DiscountType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_2QEU, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, DynamicFields, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOnlineProxyStoreOffer, 0x0110);
		}

		// struct FInAppPurchaseRestoreInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseRestoreInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo2, 0x0030);
		}

		// struct FInAppPurchaseReceiptInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseReceiptInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseReceiptInfo, 0x0030);
		}

		// struct FInAppPurchaseProductInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseProductInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, UnknownData_L58H, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, ReceiptData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DynamicFields, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo2, 0x00F8);
		}

		// struct FInAppPurchaseProductRequest2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseProductRequest2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, UnknownData_WIH6, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest2, 0x0018);
		}

		// struct FAudioCaptureDeviceInfo
		TEST_METHOD(ScriptStruct__AudioCapture__AudioCaptureDeviceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioCaptureDeviceInfo, DeviceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioCaptureDeviceInfo, NumInputChannels, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioCaptureDeviceInfo, SampleRate, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioCaptureDeviceInfo, 0x0010);
		}

		// struct FLightPropagationVolumeSettings
		TEST_METHOD(ScriptStruct__Renderer__LightPropagationVolumeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, UnknownData_2TCQ, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVIntensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVVplInjectionBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryOcclusionIntensity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryBounceIntensity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVGeometryVolumeBias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVEmissiveInjectionIntensity, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionIntensity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionRadius, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionExponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionExponent, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionIntensity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionIntensity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVFadeRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionFadeRange, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightPropagationVolumeSettings, 0x0040);
		}

		// struct FPropertyPathSegment
		TEST_METHOD(ScriptStruct__PropertyPath__PropertyPathSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_2VLZ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Struct, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_FZHW, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyPathSegment, 0x0028);
		}

		// struct FCachedPropertyPath
		TEST_METHOD(ScriptStruct__PropertyPath__CachedPropertyPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, Segments, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_S78K, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, CachedFunction, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_BWZE, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPropertyPath, 0x0028);
		}

		// struct FFNAFDLSSQualitySettings
		TEST_METHOD(UserDefinedStruct__FNAFDLSSQualitySettings__FNAFDLSSQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFDLSSQualitySettings, QualityCommand_2_7AD4F910458809DFF96F8595CDD201C9, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFDLSSQualitySettings, UnknownData_ND0B, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFDLSSQualitySettings, Low_9_D167671A411CD2AD4E7DC199F5945061, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFDLSSQualitySettings, Medium_10_A15D0B434145ECDD521B40AFC8B98419, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFDLSSQualitySettings, High_11_77E6B0D24FD8CC59BB487CA85F5981AD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFDLSSQualitySettings, Ultra_13_CDD5BC174C304AB7C93BEAB77F57B90A, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFNAFDLSSQualitySettings, 0x0048);
		}

		// struct FTickFunction
		TEST_METHOD(ScriptStruct__Engine__TickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_71GO, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, EndTickGroup, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_AYZA, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickInterval, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_AHXQ, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickFunction, 0x0028);
		}

		// struct FActorTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTickFunction, UnknownData_0BNC, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorTickFunction, 0x0030);
		}

		// struct FVector_NetQuantize100 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize100)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize100, 0x000C);
		}

		// struct FRepAttachment
		TEST_METHOD(ScriptStruct__Engine__RepAttachment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, LocationOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RelativeScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RotationOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachSocket, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, UnknownData_SXWZ, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachComponent, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepAttachment, 0x0040);
		}

		// struct FRepMovement
		TEST_METHOD(ScriptStruct__Engine__RepMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LinearVelocity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, AngularVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Location, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Rotation, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LocationQuantizationLevel, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, VelocityQuantizationLevel, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, RotationQuantizationLevel, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepMovement, 0x0034);
		}

		// struct FActorComponentTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorComponentTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentTickFunction, UnknownData_K919, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentTickFunction, 0x0030);
		}

		// struct FSimpleMemberReference
		TEST_METHOD(ScriptStruct__Engine__SimpleMemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleMemberReference, 0x0020);
		}

		// struct FUniqueNetIdRepl : public FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__Engine__UniqueNetIdRepl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, UnknownData_AM6E, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, ReplicationBytes, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdRepl, 0x0028);
		}

		// struct FChannelDefinition
		TEST_METHOD(ScriptStruct__Engine__ChannelDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ChannelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ChannelClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, StaticChannelIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bTickOnCreate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bServerOpen, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bClientOpen, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bInitialServer, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bInitialClient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, UnknownData_6496, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChannelDefinition, 0x0028);
		}

		// struct FGeomSelection
		TEST_METHOD(ScriptStruct__Engine__GeomSelection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Index, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, SelectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomSelection, 0x000C);
		}

		// struct FLightingChannels
		TEST_METHOD(ScriptStruct__Engine__LightingChannels)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightingChannels, 0x0001);
		}

		// struct FCustomPrimitiveData
		TEST_METHOD(ScriptStruct__Engine__CustomPrimitiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomPrimitiveData, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomPrimitiveData, 0x0010);
		}

		// struct FCollisionResponseContainer
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldStatic, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldDynamic, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Pawn, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Visibility, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Camera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, PhysicsBody, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Vehicle, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Destructible, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel3, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel4, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel6, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel1, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel2, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel3, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel4, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel5, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel6, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel7, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel8, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel9, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel10, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel11, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel12, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel13, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel14, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel15, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel16, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel17, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel18, 0x001F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseContainer, 0x0020);
		}

		// struct FResponseChannel
		TEST_METHOD(ScriptStruct__Engine__ResponseChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Response, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, UnknownData_AZOV, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResponseChannel, 0x000C);
		}

		// struct FWalkableSlopeOverride
		TEST_METHOD(ScriptStruct__Engine__WalkableSlopeOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeBehavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_X87Z, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeAngle, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_4EX7, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWalkableSlopeOverride, 0x0010);
		}

		// struct FCollisionResponse
		TEST_METHOD(ScriptStruct__Engine__CollisionResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseToChannels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponse, 0x0030);
		}

		// struct FBodyInstance
		TEST_METHOD(ScriptStruct__Engine__BodyInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_Y996, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, ObjectType, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_J2KC, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_J2HS, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, SleepFamily, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, DOFMode, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_VH08, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionProfileName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PositionSolverIterationCount, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, VelocitySolverIterationCount, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_U8CF, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionResponses, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxDepenetrationVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassInKgOverride, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_R9ZY, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, LinearDamping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, AngularDamping, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomDOFPlaneNormal, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, COMNudge, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, InertiaTensorScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_C5UM, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, WalkableSlopeOverride, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysMaterialOverride, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxAngularVelocity, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomSleepThresholdMultiplier, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, StabilizationThresholdMultiplier, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysicsBlendWeight, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_C3UD, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyInstance, 0x0110);
		}

		// struct FLevelStreamingWrapper
		TEST_METHOD(ScriptStruct__Engine__LevelStreamingWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingWrapper, StreamingLevel, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelStreamingWrapper, 0x0008);
		}

		// struct FLevelCollection
		TEST_METHOD(ScriptStruct__Engine__LevelCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, UnknownData_DD9I, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, GameState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, NetDriver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, DemoNetDriver, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, PersistentLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, Levels, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelCollection, 0x0078);
		}

		// struct FPSCPoolElem
		TEST_METHOD(ScriptStruct__Engine__PSCPoolElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, PSC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, UnknownData_UP2B, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPoolElem, 0x0010);
		}

		// struct FPSCPool
		TEST_METHOD(ScriptStruct__Engine__PSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, UnknownData_FOFQ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPool, 0x0038);
		}

		// struct FWorldPSCPool
		TEST_METHOD(ScriptStruct__Engine__WorldPSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, WorldParticleSystemPools, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, UnknownData_RUBY, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldPSCPool, 0x0058);
		}

		// struct FStreamingLevelsToConsider
		TEST_METHOD(ScriptStruct__Engine__StreamingLevelsToConsider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingLevelsToConsider, StreamingLevels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingLevelsToConsider, UnknownData_HS3A, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingLevelsToConsider, 0x0028);
		}

		// struct FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__ExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, ExpressionName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionInput, 0x000C);
		}

		// struct FRootMotionSourceSettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceSettings, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceSettings, 0x0001);
		}

		// struct FVector_NetQuantize10 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize10)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize10, 0x000C);
		}

		// struct FRootMotionSourceGroup
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_G0L7, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastAccumulatedSettings, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_6438, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastPreAdditiveVelocity, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceGroup, 0x0038);
		}

		// struct FRepRootMotionMontage
		TEST_METHOD(ScriptStruct__Engine__RepRootMotionMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bIsActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_FA6Q, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AnimMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Position, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Location, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_DBXO, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBase, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBaseBoneName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativePosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativeRotation, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_Z76O, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AuthoritativeRootMotion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Acceleration, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, LinearVelocity, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepRootMotionMontage, 0x0098);
		}

		// struct FSimulatedRootMotionReplicatedMove
		TEST_METHOD(ScriptStruct__Engine__SimulatedRootMotionReplicatedMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, UnknownData_TJ43, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, RootMotion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulatedRootMotionReplicatedMove, 0x00A0);
		}

		// struct FRootMotionMovementParams
		TEST_METHOD(ScriptStruct__Engine__RootMotionMovementParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, bHasRootMotion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_OO70, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, BlendWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_RCGN, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, RootMotionTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionMovementParams, 0x0040);
		}

		// struct FBasedMovementInfo
		TEST_METHOD(ScriptStruct__Engine__BasedMovementInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, MovementBase, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasBaseComponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bRelativeRotation, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasVelocity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, UnknownData_YNFB, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedMovementInfo, 0x0030);
		}

		// struct FSplineCurves
		TEST_METHOD(ScriptStruct__Engine__SplineCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Rotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, ReparamTable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, MetaData, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineCurves, 0x0068);
		}

		// struct FSkelMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, HiddenMaterials, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, UnknownData_D114, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshComponentLODInfo, 0x0028);
		}

		// struct FSingleAnimationPlayData
		TEST_METHOD(ScriptStruct__Engine__SingleAnimationPlayData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, AnimToPlay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_LLL6, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPosition, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPlayRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_SSVR, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSingleAnimationPlayData, 0x0018);
		}

		// struct FAnimNotifyEventReference
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEventReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, UnknownData_WDDU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, NotifySource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEventReference, 0x0010);
		}

		// struct FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimLinkableElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_DULN, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SlotIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, CachedLinkMethod, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_TJU8, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentBeginTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedSequence, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLinkableElement, 0x0030);
		}

		// struct FAnimNotifyEvent : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, DisplayTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerTimeOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndTriggerTimeOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerWeightThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Notify, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyStateClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Duration, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_LUC0, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndLink, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bConvertedFromBranchingPoint, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, MontageTickType, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_SN1M, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyTriggerChance, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_ZVTL, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterLOD, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnDedicatedServer, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnFollower, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_1W5O, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TrackIndex, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_YVWV, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEvent, 0x00B8);
		}

		// struct FAudioComponentParam
		TEST_METHOD(ScriptStruct__Engine__AudioComponentParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, FloatParam, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, BoolParam, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_1V49, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, IntParam, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_N141, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, SoundWaveParam, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioComponentParam, 0x0020);
		}

		// struct FKeyHandleMap
		TEST_METHOD(ScriptStruct__Engine__KeyHandleMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleMap, UnknownData_E4LC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleMap, 0x0060);
		}

		// struct FFOscillator
		TEST_METHOD(ScriptStruct__Engine__FOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, InitialOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Waveform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, UnknownData_0S00, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFOscillator, 0x000C);
		}

		// struct FVOscillator
		TEST_METHOD(ScriptStruct__Engine__VOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Y, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Z, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVOscillator, 0x0024);
		}

		// struct FMaterialProxySettings
		TEST_METHOD(ScriptStruct__Engine__MaterialProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, GutterSpace, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicConstant, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessConstant, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AnisotropyConstant, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularConstant, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityConstant, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskConstant, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionConstant, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSizingType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MaterialMergeType, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, BlendMode, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_55E9, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, DiffuseTextureSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, NormalTextureSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TangentTextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicTextureSize, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessTextureSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AnisotropyTextureSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularTextureSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, EmissiveTextureSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityTextureSize, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskTextureSize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionTextureSize, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialProxySettings, 0x0088);
		}

		// struct FAnimNotifyArray
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyArray, Notifies, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyArray, 0x0010);
		}

		// struct FAnimNotifyQueue
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyQueue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnknownData_KKZD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, AnimNotifies, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnfilteredMontageAnimNotifies, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyQueue, 0x0070);
		}

		// struct FROscillator
		TEST_METHOD(ScriptStruct__Engine__ROscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Yaw, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Roll, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FROscillator, 0x0024);
		}

		// struct FDialogueContext
		TEST_METHOD(ScriptStruct__Engine__DialogueContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Speaker, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Targets, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContext, 0x0018);
		}

		// struct FDialogueContextMapping
		TEST_METHOD(ScriptStruct__Engine__DialogueContextMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Context, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, SoundWave, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, LocalizationKeyFormat, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Proxy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContextMapping, 0x0038);
		}

		// struct FInterpLookupPoint
		TEST_METHOD(ScriptStruct__Engine__InterpLookupPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupPoint, 0x000C);
		}

		// struct FInterpLookupTrack
		TEST_METHOD(ScriptStruct__Engine__InterpLookupTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupTrack, Points, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupTrack, 0x0010);
		}

		// struct FParticleReplayTrackKey
		TEST_METHOD(ScriptStruct__Engine__ParticleReplayTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Duration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, ClipIDNumber, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleReplayTrackKey, 0x000C);
		}

		// struct FTouchInputControl
		TEST_METHOD(ScriptStruct__Engine__TouchInputControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image2, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Center, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, VisualSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, ThumbSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InteractionSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InputScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, MainInputKey, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, AltInputKey, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTouchInputControl, 0x0068);
		}

		// struct FGaussianSumBloomSettings
		TEST_METHOD(ScriptStruct__Engine__GaussianSumBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Intensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Threshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, SizeScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Size, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Size, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Size, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Size, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Size, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Tint, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Tint, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Tint, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Tint, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Tint, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Tint, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGaussianSumBloomSettings, 0x0084);
		}

		// struct FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IndexedCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, UnknownData_DLCJ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, KeyHandlesToIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIndexedCurve, 0x0068);
		}

		// struct FRealCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__RealCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, PreInfinityExtrap, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, PostInfinityExtrap, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, UnknownData_BHXN, 0x006E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRealCurve, 0x0070);
		}

		// struct FRichCurveKey
		TEST_METHOD(ScriptStruct__Engine__RichCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, InterpMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentWeightMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, UnknownData_4MHM, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Time, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangentWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangentWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurveKey, 0x001C);
		}

		// struct FRichCurve : public FRealCurve
		TEST_METHOD(ScriptStruct__Engine__RichCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, Keys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurve, 0x0080);
		}

		// struct FRuntimeFloatCurve
		TEST_METHOD(ScriptStruct__Engine__RuntimeFloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, EditorCurveData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, ExternalCurve, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeFloatCurve, 0x0088);
		}

		// struct FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__BaseAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_70PJ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, DistanceAlgorithm, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShape, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_DV61, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, dBAttenuationAtMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_SKAI, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShapeExtents, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, ConeOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, CustomAttenuationCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseAttenuationSettings, 0x00B0);
		}

		// struct FSoundAttenuationPluginSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationPluginSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, SpatializationPluginSettingsArray, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, OcclusionPluginSettingsArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, ReverbPluginSettingsArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationPluginSettings, 0x0030);
		}

		// struct FAttenuationSubmixSendSettings
		TEST_METHOD(ScriptStruct__Engine__AttenuationSubmixSendSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, Submix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendMethod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, UnknownData_ZBKT, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendLevelMin, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendLevelMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendDistanceMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendDistanceMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, ManualSubmixSendLevel, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, CustomSubmixSendCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttenuationSubmixSendSettings, 0x00A8);
		}

		// struct FSoundAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SpatializationAlgorithm, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_4ABL, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, BinauralRadius, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, AbsorptionMethod, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionTraceChannel, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbSendMethod, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMethod, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OmniRadius, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, StereoSpread, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMin, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMax, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_XF3E, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomLowpassAirAbsorptionCurve, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomHighpassAirAbsorptionCurve, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMin, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMax, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMin, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMax, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAzimuth, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusAzimuth, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusDistanceScale, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusDistanceScale, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusPriorityScale, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusPriorityScale, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusVolumeAttenuation, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusVolumeAttenuation, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAttackInterpSpeed, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusReleaseInterpSpeed, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionLowPassFilterFrequency, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionVolumeAttenuation, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionInterpolationTime, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMin, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMax, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMin, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMax, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualReverbSendLevel, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomReverbSendCurve, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SubmixSendSettings, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMin, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMax, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationDistanceMin, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationDistanceMax, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualPriorityAttenuation, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_7MGH, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomPriorityAttenuationCurve, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PluginSettings, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationSettings, 0x03A0);
		}

		// struct FActiveForceFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, ForceFeedbackEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, UnknownData_M3C9, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveForceFeedbackEffect, 0x0018);
		}

		// struct FSoundConcurrencySettings
		TEST_METHOD(ScriptStruct__Engine__SoundConcurrencySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, MaxCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_M9MI, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, ResolutionRule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_Y7US, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleAttackTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_XXBW, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleReleaseTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VoiceStealReleaseTime, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundConcurrencySettings, 0x0020);
		}

		// struct FDelegateArray
		TEST_METHOD(ScriptStruct__Engine__DelegateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateArray, Delegates, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateArray, 0x0010);
		}

		// struct FRootMotionSourceStatus
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceStatus, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceStatus, 0x0001);
		}

		// struct FRootMotionFinishVelocitySettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionFinishVelocitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, Mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, UnknownData_1BSE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, SetVelocity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, ClampVelocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionFinishVelocitySettings, 0x0014);
		}

		// struct FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_T7KJ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Priority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, LocalID, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, AccumulateMode, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_CF9Z, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, InstanceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, StartTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, CurrentTime, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, PreviousTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Duration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Status, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Settings, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, bInLocalSpace, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_AVP2, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, RootMotionParams, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, FinishVelocityParams, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_4553, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource, 0x0098);
		}

		// struct FRootMotionSource_RadialForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_RadialForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Location, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_K4PJ, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, LocationActor, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Strength, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bIsPush, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bNoZForce, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_RY6A, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthDistanceFalloff, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthOverTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bUseFixedWorldDirection, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_63ES, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, FixedWorldDirection, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_RadialForce, 0x00E0);
		}

		// struct FRootMotionSource_ConstantForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_ConstantForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, Force, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, UnknownData_YT81, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, StrengthOverTime, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_ConstantForce, 0x00B0);
		}

		// struct FCameraExposureSettings
		TEST_METHOD(ScriptStruct__Engine__CameraExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Method, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_17SL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, LowPercent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HighPercent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MinBrightness, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MaxBrightness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedDown, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Bias, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, BiasCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MeterMask, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMax, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, CalibrationConstant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_DR9N, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraExposureSettings, 0x0040);
		}

		// struct FConvolutionBloomSettings
		TEST_METHOD(ScriptStruct__Engine__ConvolutionBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Size, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, CenterUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMult, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, BufferScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, UnknownData_T5NL, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConvolutionBloomSettings, 0x0028);
		}

		// struct FLensBloomSettings
		TEST_METHOD(ScriptStruct__Engine__LensBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, GaussianSum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_FLPG, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Convolution, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Method, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_GFLZ, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensBloomSettings, 0x00B8);
		}

		// struct FGPUSpriteLocalVectorFieldInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteLocalVectorFieldInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Field, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_FT07, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MinInitialRotation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MaxInitialRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, RotationRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Intensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Tightness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_1HY5, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteLocalVectorFieldInfo, 0x0070);
		}

		// struct FGPUSpriteResourceData
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteResourceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedColorSamples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedMiscSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedSimulationAttrSamples, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveBias, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SubImageSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SizeBySpeed, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ConstantAcceleration, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetBase, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyBase, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyRange, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseBase, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldTightness, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldBias, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientBias, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceBias, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusBias, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionTimeBias, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomSpread, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomDistribution, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OneMinusFriction, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, RotationRateScale, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CameraMotionBlurAmount, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ScreenAlignment, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, LockAxisFlag, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_IBYJ, 0x0146);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PivotOffset, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_ZJOW, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MinFacingCameraBlendDistance, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MaxFacingCameraBlendDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_NSVJ, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteResourceData, 0x0160);
		}

		// struct FParticleSystemLOD
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemLOD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemLOD, UnknownData_3G7U, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemLOD, 0x0001);
		}

		// struct FLODSoloTrack
		TEST_METHOD(ScriptStruct__Engine__LODSoloTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODSoloTrack, SoloEnableSetting, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLODSoloTrack, 0x0010);
		}

		// struct FNamedEmitterMaterial
		TEST_METHOD(ScriptStruct__Engine__NamedEmitterMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedEmitterMaterial, 0x0010);
		}

		// struct FAnimParentNodeAssetOverride
		TEST_METHOD(ScriptStruct__Engine__AnimParentNodeAssetOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, NewAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, ParentNodeGuid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimParentNodeAssetOverride, 0x0018);
		}

		// struct FAnimBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintDebugData, UnknownData_AW5F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintDebugData, 0x0001);
		}

		// struct FAnimationFrameSnapshot
		TEST_METHOD(ScriptStruct__Engine__AnimationFrameSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationFrameSnapshot, UnknownData_2RLU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationFrameSnapshot, 0x0001);
		}

		// struct FStateMachineDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineDebugData, UnknownData_SYJI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineDebugData, 0x00B0);
		}

		// struct FStateMachineStateDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineStateDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineStateDebugData, UnknownData_FRH3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineStateDebugData, 0x0010);
		}

		// struct FRootMotionExtractionStep
		TEST_METHOD(ScriptStruct__Engine__RootMotionExtractionStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, StartPosition, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, EndPosition, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionExtractionStep, 0x0010);
		}

		// struct FAnimationErrorStats
		TEST_METHOD(ScriptStruct__Engine__AnimationErrorStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationErrorStats, UnknownData_60NU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationErrorStats, 0x0010);
		}

		// struct FActorComponentDuplicatedObjectData
		TEST_METHOD(ScriptStruct__Engine__ActorComponentDuplicatedObjectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentDuplicatedObjectData, UnknownData_G48A, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentDuplicatedObjectData, 0x0010);
		}

		// struct FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__ActorComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UnknownData_V25K, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentCreationMethod, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UnknownData_EG34, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentTypeSerializedIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SavedProperties, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, DuplicatedObjects, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, ReferencedObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, ReferencedNames, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentInstanceData, 0x0058);
		}

		// struct FSceneComponentInstanceData : public FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SceneComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSceneComponentInstanceData, AttachedInstanceComponents, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSceneComponentInstanceData, 0x00A8);
		}

		// struct FSplineMeshInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SplineMeshInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, StartPos, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, EndPos, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, StartTangent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, EndTangent, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshInstanceData, 0x00D8);
		}

		// struct FMaterialRemapIndex
		TEST_METHOD(ScriptStruct__Engine__MaterialRemapIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, ImportVersionKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, UnknownData_A1ZN, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, MaterialRemap, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialRemapIndex, 0x0018);
		}

		// struct FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__MovementProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovementProperties, 0x0001);
		}

		// struct FVector_NetQuantize : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize, 0x000C);
		}

		// struct FVector_NetQuantizeNormal : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantizeNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantizeNormal, 0x000C);
		}

		// struct FHitResult
		TEST_METHOD(ScriptStruct__Engine__HitResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_MUAN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, FaceIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Distance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactPoint, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Normal, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactNormal, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceStart, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PenetrationDepth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Item, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PhysMaterial, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Actor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Component, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, BoneName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, MyBoneName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitResult, 0x0088);
		}

		// struct FNavAvoidanceMask
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceMask, 0x0004);
		}

		// struct FCharacterMovementComponentPostPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__CharacterMovementComponentPostPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterMovementComponentPostPhysicsTickFunction, UnknownData_94E4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterMovementComponentPostPhysicsTickFunction, 0x0030);
		}

		// struct FBandwidthTestItem
		TEST_METHOD(ScriptStruct__Engine__BandwidthTestItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestItem, Kilobyte, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBandwidthTestItem, 0x0010);
		}

		// struct FRigTransformConstraint
		TEST_METHOD(ScriptStruct__Engine__RigTransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, TranformType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, UnknownData_ZXPV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, ParentSpace, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, Weight, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigTransformConstraint, 0x0010);
		}

		// struct FNode
		TEST_METHOD(ScriptStruct__Engine__Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, ParentName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, DisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, bAdvanced, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, UnknownData_W6H8, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNode, 0x0060);
		}

		// struct FVoiceSettings
		TEST_METHOD(ScriptStruct__Engine__VoiceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, ComponentToAttachTo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, AttenuationSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, SourceEffectChain, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVoiceSettings, 0x0018);
		}

		// struct FMeshProxySettings
		TEST_METHOD(ScriptStruct__Engine__MeshProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, VoxelSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MergeDistance, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnresolvedGeometryColor, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaxRayCastDist, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, HardAngleThreshold, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LightMapResolution, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, NormalCalculationMethod, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LandscapeCullingPrecision, 0x00A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshProxySettings, 0x00A8);
		}

		// struct FMeshMergingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshMergingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, TargetLightMapResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, OutputUVs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, MaterialSettings, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, GutterSize, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, SpecificLOD, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, LODSelectionType, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_8ACB, 0x009F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshMergingSettings, 0x00A0);
		}

		// struct FHierarchicalSimplification
		TEST_METHOD(ScriptStruct__Engine__HierarchicalSimplification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, TransitionScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, OverrideDrawDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, UnknownData_5XN1, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, ProxySetting, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MergeSetting, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredBoundRadius, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredFillingPercentage, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MinNumberOfActorsToBuild, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHierarchicalSimplification, 0x0160);
		}

		// struct FNavAgentProperties : public FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__NavAgentProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_CT5H, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentHeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentStepHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, NavWalkingSearchHeightScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_5EB6, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, PreferredNavData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentProperties, 0x0030);
		}

		// struct FDebugTextInfo
		TEST_METHOD(ScriptStruct__Engine__DebugTextInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorDesiredOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, DebugText, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TimeRemaining, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Duration, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TextColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_EF8U, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, OrigActorLocation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_4HHL, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Font, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, FontScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_SY00, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugTextInfo, 0x0060);
		}

		// struct FParticleEvent_GenerateInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleEvent_GenerateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_TMP3, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_3NQR, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, CustomName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleModuleEventsToSendToGame, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEvent_GenerateInfo, 0x0028);
		}

		// struct FFindFloorResult
		TEST_METHOD(ScriptStruct__Engine__FindFloorResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, UnknownData_6NK9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, FloorDist, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, LineDist, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, HitResult, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFindFloorResult, 0x0094);
		}

		// struct FAtmospherePrecomputeParameters
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DensityHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DecayHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, MaxScatteringOrder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexWidth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexWidth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterAltitudeSampleNum, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuNum, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuSNum, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterNuNum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeParameters, 0x002C);
		}

		// struct FAudioQualitySettings
		TEST_METHOD(ScriptStruct__Engine__AudioQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, MaxChannels, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, UnknownData_TP5Z, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioQualitySettings, 0x0020);
		}

		// struct FReverbSettings
		TEST_METHOD(ScriptStruct__Engine__ReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, bApplyReverb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, UnknownData_GFGC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbEffect, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbPluginEffect, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, Volume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, FadeTime, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReverbSettings, 0x0020);
		}

		// struct FInteriorSettings
		TEST_METHOD(ScriptStruct__Engine__InteriorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, bIsWorldSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, UnknownData_E7UG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorVolume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPFTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPFTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteriorSettings, 0x0024);
		}

		// struct FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KShapeElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_HZGC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, RestOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, Name, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_5KD4, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_802C, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKShapeElem, 0x0030);
		}

		// struct FKSphereElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphereElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Radius, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphereElem, 0x0040);
		}

		// struct FKBoxElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KBoxElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, X, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Y, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Z, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, UnknownData_1YYD, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKBoxElem, 0x0058);
		}

		// struct FKSphylElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphylElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Radius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Length, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphylElem, 0x0050);
		}

		// struct FKTaperedCapsuleElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KTaperedCapsuleElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius0, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Length, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, UnknownData_W3S6, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKTaperedCapsuleElem, 0x0058);
		}

		// struct FSmartName
		TEST_METHOD(ScriptStruct__Engine__SmartName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, UnknownData_JTP7, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartName, 0x000C);
		}

		// struct FPoseData
		TEST_METHOD(ScriptStruct__Engine__PoseData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, LocalSpacePose, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, TrackToBufferIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, CurveData, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseData, 0x0070);
		}

		// struct FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__AnimCurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, LastObservedName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, CurveTypeFlags, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveBase, 0x0018);
		}

		// struct FPoseDataContainer
		TEST_METHOD(ScriptStruct__Engine__PoseDataContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, PoseNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Tracks, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, TrackMap, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Poses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Curves, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDataContainer, 0x0090);
		}

		// struct FEquirectProps
		TEST_METHOD(ScriptStruct__Engine__EquirectProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftUVRect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightUVRect, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightBias, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEquirectProps, 0x0048);
		}

		// struct FStaticMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, UnknownData_L5PN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentLODInfo, 0x0090);
		}

		// struct FStreamingTextureBuildInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingTextureBuildInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, PackedRelativeBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TextureLevelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingTextureBuildInfo, 0x000C);
		}

		// struct FLightmassPrimitiveSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPrimitiveSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, UnknownData_T4QB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightFalloffExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightExplicitInfluenceRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveBoost, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, DiffuseBoost, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, FullyOccludedSamplesFraction, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPrimitiveSettings, 0x0018);
		}

		// struct FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputDelegateBinding, UnknownData_132B, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputDelegateBinding, 0x0004);
		}

		// struct FBlueprintInputTouchDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, InputKeyEvent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, UnknownData_6QVW, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, FunctionNameToBind, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputTouchDelegateBinding, 0x0010);
		}

		// struct FNodeItem
		TEST_METHOD(ScriptStruct__Engine__NodeItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, ParentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, UnknownData_FXS9, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, Transform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeItem, 0x0040);
		}

		// struct FDistributionLookupTable
		TEST_METHOD(ScriptStruct__Engine__DistributionLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeBias, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Values, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Op, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryCount, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryStride, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, SubEntryStride, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, LockFlag, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, UnknownData_GQZ8, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistributionLookupTable, 0x0020);
		}

		// struct FFloatDistribution
		TEST_METHOD(ScriptStruct__Engine__FloatDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatDistribution, 0x0020);
		}

		// struct FSplineMeshParams
		TEST_METHOD(ScriptStruct__Engine__SplineMeshParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartRoll, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndPos, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndTangent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndRoll, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndOffset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshParams, 0x0058);
		}

		// struct FInstancedStaticMeshInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshInstanceData, Transform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshInstanceData, 0x0040);
		}

		// struct FFilePath
		TEST_METHOD(ScriptStruct__Engine__FilePath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilePath, FilePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilePath, 0x0010);
		}

		// struct FParticleEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__ParticleEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEditorPromotionSettings, DefaultParticleAsset, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEditorPromotionSettings, 0x0010);
		}

		// struct FOrbitOptions
		TEST_METHOD(ScriptStruct__Engine__OrbitOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrbitOptions, UnknownData_TA2U, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrbitOptions, 0x0004);
		}

		// struct FGraphReference
		TEST_METHOD(ScriptStruct__Engine__GraphReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, MacroGraph, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphReference, 0x0020);
		}

		// struct FInstancedStaticMeshMappingInfo
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshMappingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshMappingInfo, UnknownData_4I0U, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshMappingInfo, 0x0008);
		}

		// struct FBlueprintEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__BlueprintEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, FirstMeshPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, SecondMeshPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, DefaultParticleAsset, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintEditorPromotionSettings, 0x0030);
		}

		// struct FAlphaBlend
		TEST_METHOD(ScriptStruct__Engine__AlphaBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, CustomCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_0ASR, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendOption, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_JI1V, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAlphaBlend, 0x0030);
		}

		// struct FInputAlphaBoolBlend
		TEST_METHOD(ScriptStruct__Engine__InputAlphaBoolBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOutTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, bInitialized, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, UnknownData_LUI2, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, CustomCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, AlphaBlend, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAlphaBoolBlend, 0x0048);
		}

		// struct FInputScaleBias
		TEST_METHOD(ScriptStruct__Engine__InputScaleBias)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Scale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Bias, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBias, 0x0008);
		}

		// struct FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, LinkID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, UnknownData_JBL5, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLinkBase, 0x0010);
		}

		// struct FComponentSpacePoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePoseLink, 0x0010);
		}

		// struct FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimInstanceProxy, UnknownData_5MQW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimInstanceProxy, 0x06E0);
		}

		// struct FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Base)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Base, UnknownData_Q60L, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Base, 0x0010);
		}

		// struct FAnimNode_AssetPlayerBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_AssetPlayerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupRole, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, bIgnoreForRelevancyTest, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_QV9G, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, BlendWeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, InternalTimeAccumulator, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_WNBV, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AssetPlayerBase, 0x0030);
		}

		// struct FPoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLink, 0x0010);
		}

		// struct FPerBoneBlendWeight
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, BlendWeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeight, 0x0008);
		}

		// struct FPoseSnapshot
		TEST_METHOD(ScriptStruct__Engine__PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, LocalTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, BoneNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SkeletalMeshName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SnapshotName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, bIsValid, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, UnknownData_EYS6, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseSnapshot, 0x0038);
		}

		// struct FAnimNode_Root : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Root)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Result, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Group, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Root, 0x0030);
		}

		// struct FAnimCurveParam
		TEST_METHOD(ScriptStruct__Engine__AnimCurveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, UnknownData_IA36, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveParam, 0x000C);
		}

		// struct FNameMapping
		TEST_METHOD(ScriptStruct__Engine__NameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, NodeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, BoneName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameMapping, 0x0010);
		}

		// struct FRigConfiguration
		TEST_METHOD(ScriptStruct__Engine__RigConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, Rig, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, BoneMappingTable, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigConfiguration, 0x0018);
		}

		// struct FBoneReductionSetting
		TEST_METHOD(ScriptStruct__Engine__BoneReductionSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReductionSetting, BonesToRemove, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReductionSetting, 0x0010);
		}

		// struct FLightmassMaterialInterfaceSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassMaterialInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, EmissiveBoost, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, DiffuseBoost, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, ExportResolutionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, UnknownData_ZGL3, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassMaterialInterfaceSettings, 0x0010);
		}

		// struct FMaterialTextureInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialTextureInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, SamplingScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, UVChannelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, TextureName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialTextureInfo, 0x0010);
		}

		// struct FMaterialParameterInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Association, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, UnknownData_82DJ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Index, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterInfo, 0x0010);
		}

		// struct FMaterialInstanceBasePropertyOverrides
		TEST_METHOD(ScriptStruct__Engine__MaterialInstanceBasePropertyOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, BlendMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, ShadingModel, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, OpacityMaskClipValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInstanceBasePropertyOverrides, 0x0008);
		}

		// struct FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, bOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, UnknownData_ZINX, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, ExpressionGUID, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterBase, 0x0024);
		}

		// struct FStaticComponentMaskParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, R, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, G, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, B, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, A, 0x0027);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticComponentMaskParameter, 0x0028);
		}

		// struct FStaticTerrainLayerWeightParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticTerrainLayerWeightParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, WeightmapIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, bWeightBasedBlend, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, UnknownData_KCEP, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticTerrainLayerWeightParameter, 0x002C);
		}

		// struct FMaterialLayersFunctions
		TEST_METHOD(ScriptStruct__Engine__MaterialLayersFunctions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Layers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Blends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, LayerStates, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, KeyString, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialLayersFunctions, 0x0040);
		}

		// struct FMaterialCachedParameterEntry
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedParameterEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, NameHashes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, ParameterInfos, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, ExpressionGuids, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, Overrides, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedParameterEntry, 0x0040);
		}

		// struct FMaterialCachedParameters
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, Entries, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, ScalarValues, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, VectorValues, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, TextureValues, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, FontValues, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, FontPageValues, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, RuntimeVirtualTextureValues, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedParameters, 0x01A0);
		}

		// struct FBPComponentClassOverride
		TEST_METHOD(ScriptStruct__Engine__BPComponentClassOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPComponentClassOverride, ComponentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPComponentClassOverride, ComponentClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPComponentClassOverride, 0x0010);
		}

		// struct FBlueprintComponentChangedPropertyInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentChangedPropertyInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, UnknownData_OHV0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyScope, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentChangedPropertyInfo, 0x0018);
		}

		// struct FBlueprintCookedComponentInstancingData
		TEST_METHOD(ScriptStruct__Engine__BlueprintCookedComponentInstancingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, ChangedPropertyList, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_SYPV, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, bHasValidCookedData, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_MZC2, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintCookedComponentInstancingData, 0x0048);
		}

		// struct FAnimBlueprintFunction
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, Group, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, OutputPoseNodeIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_YVMX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, InputPoseNames, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, InputPoseNodeIndices, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_FBIJ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, bImplemented, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_7AUE, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintFunction, 0x0068);
		}

		// struct FAnimBlueprintFunctionData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintFunctionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, OutputPoseNodeProperty, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, InputPoseNodeProperties, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, InputProperties, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintFunctionData, 0x0040);
		}

		// struct FBandwidthTestGenerator
		TEST_METHOD(ScriptStruct__Engine__BandwidthTestGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestGenerator, ReplicatedBuffers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestGenerator, UnknownData_HFUE, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBandwidthTestGenerator, 0x0020);
		}

		// struct FBoneNode
		TEST_METHOD(ScriptStruct__Engine__BoneNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, ParentIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, TranslationRetargetingMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, UnknownData_EHFP, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneNode, 0x0010);
		}

		// struct FVirtualBone
		TEST_METHOD(ScriptStruct__Engine__VirtualBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, SourceBoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, TargetBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, VirtualBoneName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualBone, 0x0018);
		}

		// struct FSmartNameContainer
		TEST_METHOD(ScriptStruct__Engine__SmartNameContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameContainer, UnknownData_A4M6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameContainer, 0x0050);
		}

		// struct FAnimSlotGroup
		TEST_METHOD(ScriptStruct__Engine__AnimSlotGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, SlotNames, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotGroup, 0x0018);
		}

		// struct FBoneReference
		TEST_METHOD(ScriptStruct__Engine__BoneReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, UnknownData_MH8G, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReference, 0x0010);
		}

		// struct FBlendProfileBoneEntry
		TEST_METHOD(ScriptStruct__Engine__BlendProfileBoneEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BlendScale, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendProfileBoneEntry, 0x0014);
		}

		// struct FScalarParameterValue
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ExpressionGUID, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterValue, 0x0024);
		}

		// struct FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistribution, 0x0020);
		}

		// struct FRawDistributionFloat : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MinValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MaxValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, Distribution, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionFloat, 0x0030);
		}

		// struct FRigidBodyContactInfo
		TEST_METHOD(ScriptStruct__Engine__RigidBodyContactInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPenetration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, UnknownData_WPD8, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, PhysMaterial, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyContactInfo, 0x0030);
		}

		// struct FCollisionImpactData
		TEST_METHOD(ScriptStruct__Engine__CollisionImpactData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, ContactInfos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalNormalImpulse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalFrictionImpulse, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionImpactData, 0x0028);
		}

		// struct FRigidBodyState
		TEST_METHOD(ScriptStruct__Engine__RigidBodyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_4LCB, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Quaternion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, LinVel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, AngVel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Flags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_RFV8, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyState, 0x0040);
		}

		// struct FForceFeedbackParameters
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bLooping, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bIgnoreTimeDilation, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bPlayWhilePaused, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, UnknownData_L5SB, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackParameters, 0x000C);
		}

		// struct FPredictProjectilePathPointData
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Time, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathPointData, 0x001C);
		}

		// struct FNameCurveKey
		TEST_METHOD(ScriptStruct__Engine__NameCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurveKey, 0x000C);
		}

		// struct FNameCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__NameCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurve, Keys, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurve, 0x0078);
		}

		// struct FNavDataConfig : public FNavAgentProperties
		TEST_METHOD(ScriptStruct__Engine__NavDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Color, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, DefaultQueryExtent, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavigationDataClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavDataClass, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavDataConfig, 0x0078);
		}

		// struct FPacketSimulationSettings
		TEST_METHOD(ScriptStruct__Engine__PacketSimulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLoss, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLossMaxSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLossMinSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktOrder, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktDup, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLag, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagVariance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLagMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLagMax, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLoss, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktJitter, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPacketSimulationSettings, 0x0034);
		}

		// struct FFastArraySerializer
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_M121, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, ArrayReplicationKey, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_AJ8T, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, DeltaFlags, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_66IU, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializer, 0x0108);
		}

		// struct FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializerItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationKey, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, MostRecentArrayReplicationKey, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializerItem, 0x000C);
		}

		// struct FParticleCurvePair
		TEST_METHOD(ScriptStruct__Engine__ParticleCurvePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveObject, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleCurvePair, 0x0018);
		}

		// struct FBeamTargetData
		TEST_METHOD(ScriptStruct__Engine__BeamTargetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetPercentage, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamTargetData, 0x000C);
		}

		// struct FParticleSystemWorldManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemWorldManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemWorldManagerTickFunction, UnknownData_3NC0, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemWorldManagerTickFunction, 0x0030);
		}

		// struct FParticleSystemReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemReplayFrame, UnknownData_X9YV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemReplayFrame, 0x0010);
		}

		// struct FParticleEmitterReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleEmitterReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEmitterReplayFrame, UnknownData_KDE4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEmitterReplayFrame, 0x0010);
		}

		// struct FFreezablePerPlatformInt
		TEST_METHOD(ScriptStruct__Engine__FreezablePerPlatformInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFreezablePerPlatformInt, UnknownData_J3DN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFreezablePerPlatformInt, 0x0004);
		}

		// struct FViewTargetTransitionParams
		TEST_METHOD(ScriptStruct__Engine__ViewTargetTransitionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendFunction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_1LA7, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendExp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_AGEG, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FViewTargetTransitionParams, 0x0010);
		}

		// struct FUpdateLevelVisibilityLevelInfo
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelVisibilityLevelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, Filename, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, UnknownData_CY4F, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelVisibilityLevelInfo, 0x0014);
		}

		// struct FUpdateLevelStreamingLevelStatus
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelStreamingLevelStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, UnknownData_QO6T, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelStreamingLevelStatus, 0x0010);
		}

		// struct FPlayerMuteList
		TEST_METHOD(ScriptStruct__Engine__PlayerMuteList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_VUDS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, bHasVoiceHandshakeCompleted, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_PRO7, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, VoiceChannelIdx, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerMuteList, 0x0038);
		}

		// struct FPreviewAttachedObjectPair
		TEST_METHOD(ScriptStruct__Engine__PreviewAttachedObjectPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedTo, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAttachedObjectPair, 0x0038);
		}

		// struct FVectorParameterValue
		TEST_METHOD(ScriptStruct__Engine__VectorParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ExpressionGUID, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterValue, 0x0030);
		}

		// struct FAnimNode_ConvertLocalToComponentSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertLocalToComponentSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertLocalToComponentSpace, LocalPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertLocalToComponentSpace, 0x0020);
		}

		// struct FRawAnimSequenceTrack
		TEST_METHOD(ScriptStruct__Engine__RawAnimSequenceTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, RotKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, ScaleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawAnimSequenceTrack, 0x0030);
		}

		// struct FAnimSequenceTrackContainer
		TEST_METHOD(ScriptStruct__Engine__AnimSequenceTrackContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, AnimationTracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, TrackNames, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequenceTrackContainer, 0x0020);
		}

		// struct FAnimSingleNodeInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimSingleNodeInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSingleNodeInstanceProxy, UnknownData_3QXG, 0x06E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSingleNodeInstanceProxy, 0x0830);
		}

		// struct FTextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__TextureParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureParameterValue, 0x0028);
		}

		// struct FStaticSwitchParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticSwitchParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, Value, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, UnknownData_H40Y, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticSwitchParameter, 0x0028);
		}

		// struct FInputActionKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, UnknownData_6C91, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionKeyMapping, 0x0028);
		}

		// struct FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, IndirectLightingSaturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, ShadowExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, bUseAreaShadowsForStationaryLight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, UnknownData_40YU, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassLightSettings, 0x000C);
		}

		// struct FLightmassPointLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPointLightSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPointLightSettings, 0x000C);
		}

		// struct FBeamModifierOptions
		TEST_METHOD(ScriptStruct__Engine__BeamModifierOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamModifierOptions, UnknownData_FC96, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamModifierOptions, 0x0004);
		}

		// struct FRuntimeVirtualTextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__RuntimeVirtualTextureParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeVirtualTextureParameterValue, 0x0028);
		}

		// struct FWeightedBlendable
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Weight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, UnknownData_URIH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Object, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendable, 0x0010);
		}

		// struct FDirectoryPath
		TEST_METHOD(ScriptStruct__Engine__DirectoryPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectoryPath, Path, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectoryPath, 0x0010);
		}

		// struct FPrimaryAssetRules
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRules)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, Priority, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, ChunkId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, bApplyRecursively, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, CookRule, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, UnknownData_A361, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRules, 0x000C);
		}

		// struct FPrimaryAssetRulesCustomOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesCustomOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, FilterDirectory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, FilterString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, Rules, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, UnknownData_GQD1, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesCustomOverride, 0x0038);
		}

		// struct FDepthFieldGlowInfo
		TEST_METHOD(ScriptStruct__Engine__DepthFieldGlowInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, UnknownData_OA81, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowOuterRadius, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowInnerRadius, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDepthFieldGlowInfo, 0x0024);
		}

		// struct FFontRenderInfo
		TEST_METHOD(ScriptStruct__Engine__FontRenderInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, UnknownData_QWR5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, GlowInfo, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontRenderInfo, 0x0028);
		}

		// struct FComponentReference
		TEST_METHOD(ScriptStruct__Engine__ComponentReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, OtherActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, ComponentProperty, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, PathToComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, UnknownData_TEEB, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentReference, 0x0028);
		}

		// struct FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__DamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, UnknownData_4IAU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, DamageTypeClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageEvent, 0x0010);
		}

		// struct FRadialDamageParams
		TEST_METHOD(ScriptStruct__Engine__RadialDamageParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, BaseDamage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, MinimumDamage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, InnerRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, OuterRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, DamageFalloff, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageParams, 0x0014);
		}

		// struct FFontParameterValue
		TEST_METHOD(ScriptStruct__Engine__FontParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontPage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ExpressionGUID, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, UnknownData_1IT7, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontParameterValue, 0x0030);
		}

		// struct FImportFactorySettingValues
		TEST_METHOD(ScriptStruct__Engine__ImportFactorySettingValues)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, SettingName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportFactorySettingValues, 0x0020);
		}

		// struct FEditorImportWorkflowDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportWorkflowDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, FactorySettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportWorkflowDefinition, 0x0020);
		}

		// struct FBuildPromotionImportWorkflowSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionImportWorkflowSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Diffuse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, StaticMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, ReimportStaticMesh, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, BlendShapeMesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, MorphMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SkeletalMesh, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Animation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Sound, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SurroundSound, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, OtherAssetsToImport, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionImportWorkflowSettings, 0x0150);
		}

		// struct FBuildPromotionOpenAssetSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionOpenAssetSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, BlueprintAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, MaterialAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, ParticleSystemAsset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, SkeletalMeshAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, StaticMeshAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, TextureAsset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionOpenAssetSettings, 0x0060);
		}

		// struct FBuildPromotionNewProjectSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionNewProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectFolderOverride, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectNameOverride, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionNewProjectSettings, 0x0020);
		}

		// struct FBuildPromotionTestSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, DefaultStaticMeshAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, ImportWorkflow, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, OpenAssets, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, NewProjectSettings, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, SourceControlMaterial, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionTestSettings, 0x01F0);
		}

		// struct FSoundTrackKey
		TEST_METHOD(ScriptStruct__Engine__SoundTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Volume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Pitch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, UnknownData_2CSC, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Sound, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundTrackKey, 0x0018);
		}

		// struct FToggleTrackKey
		TEST_METHOD(ScriptStruct__Engine__ToggleTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, ToggleAction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, UnknownData_4TQB, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FToggleTrackKey, 0x0008);
		}

		// struct FVisibilityTrackKey
		TEST_METHOD(ScriptStruct__Engine__VisibilityTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Action, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, ActiveCondition, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, UnknownData_E0AY, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVisibilityTrackKey, 0x0008);
		}

		// struct FLayerActorStats
		TEST_METHOD(ScriptStruct__Engine__LayerActorStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Total, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, UnknownData_ZQ2B, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerActorStats, 0x0010);
		}

		// struct FQueuedDrawDebugItem
		TEST_METHOD(ScriptStruct__Engine__QueuedDrawDebugItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, ItemType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_ZHSK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, StartLoc, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, EndLoc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Center, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Radius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Segments, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Color, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, bPersistentLines, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_BB6O, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, LifeTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Thickness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Message, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, TextScale, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQueuedDrawDebugItem, 0x0068);
		}

		// struct FAnimMontageInstance
		TEST_METHOD(ScriptStruct__Engine__AnimMontageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Montage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_BB79, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, bPlaying, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_8YNB, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DefaultBlendTimeMultiplier, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_14YC, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, NextSections, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PrevSections, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_C6QI, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, ActiveStateBranchingPoints, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Position, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PlayRate, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Blend, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_LAZE, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DisableRootMotionCount, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_EN5K, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimMontageInstance, 0x01B0);
		}

		// struct FInputRange
		TEST_METHOD(ScriptStruct__Engine__InputRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRange, 0x0008);
		}

		// struct FInputScaleBiasClamp
		TEST_METHOD(ScriptStruct__Engine__InputScaleBiasClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bMapRange, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bClampResult, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bInterpResult, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, UnknownData_JCZM, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InRange, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, OutRange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Scale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Bias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedIncreasing, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedDecreasing, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, UnknownData_ADRV, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBiasClamp, 0x0030);
		}

		// struct FAnimNode_ApplyMeshSpaceAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ApplyMeshSpaceAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaInputType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_F9HE, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Alpha, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_U214, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBias, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBiasClamp, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, LODThreshold, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_3OWT, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyMeshSpaceAdditive, 0x00D0);
		}

		// struct FAnimNode_CustomProperty : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_CustomProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, SourcePropertyNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, DestPropertyNames, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, TargetInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, UnknownData_FB9J, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CustomProperty, 0x0058);
		}

		// struct FStaticMaterialLayersParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticMaterialLayersParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, UnknownData_YRJS, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, Value, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterialLayersParameter, 0x0068);
		}

		// struct FStaticParameterSet
		TEST_METHOD(ScriptStruct__Engine__StaticParameterSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticSwitchParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticComponentMaskParameters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, TerrainLayerWeightParameters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, MaterialLayersParameters, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterSet, 0x0040);
		}

		// struct FExternalToolDefinition
		TEST_METHOD(ScriptStruct__Engine__ExternalToolDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ToolName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ExecutablePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, CommandLineOptions, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, WorkingDirectory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptExtension, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptDirectory, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExternalToolDefinition, 0x0060);
		}

		// struct FHapticFeedbackDetails_Curve
		TEST_METHOD(ScriptStruct__Engine__HapticFeedbackDetails_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Amplitude, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHapticFeedbackDetails_Curve, 0x0110);
		}

		// struct FHLODProxyMesh
		TEST_METHOD(ScriptStruct__Engine__HLODProxyMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, LODActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, UnknownData_BEA0, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, StaticMesh, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, Key, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHLODProxyMesh, 0x0030);
		}

		// struct FCachedKeyToActionInfo
		TEST_METHOD(ScriptStruct__Engine__CachedKeyToActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, PlayerInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, UnknownData_4IH7, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedKeyToActionInfo, 0x0070);
		}

		// struct FWrappedStringElement
		TEST_METHOD(ScriptStruct__Engine__WrappedStringElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, LineExtent, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWrappedStringElement, 0x0018);
		}

		// struct FWeightedBlendables
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendables)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendables, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendables, 0x0010);
		}

		// struct FPostProcessSettings
		TEST_METHOD(ScriptStruct__Engine__PostProcessSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_5DI9, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_JAGV, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_WTD9, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_PQPU, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomMethod, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMethod, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_P1YC, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTemp, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_BIKV, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrast, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGamma, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGain, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationShadows, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastShadows, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaShadows, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainShadows, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetShadows, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationMidtones, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastMidtones, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaMidtones, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainMidtones, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetMidtones, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationHighlights, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastHighlights, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaHighlights, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainHighlights, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetHighlights, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionHighlightsMin, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionShadowsMax, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BlueCorrection, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ExpandGamut, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSlope, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToe, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShoulder, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmBlackClip, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhiteClip, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhitePoint, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTint, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintBlend, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintAmount, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSaturation, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerRed, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerGreen, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerBlue, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmContrast, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToeAmount, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmHealAmount, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmDynamicRange, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneColorTint, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneFringeIntensity, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ChromaticAberrationStartOffset, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomIntensity, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomThreshold, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomSizeScale, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Size, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Size, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Size, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Size, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Size, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Size, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Tint, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Tint, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Tint, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Tint, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Tint, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Tint, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionSize, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionTexture, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionCenterUV, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMin, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMax, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMult, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionBufferScale, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMask, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskIntensity, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskTint, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapTint, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapIntensity, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemap, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraShutterSpeed, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraISO, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFstop, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMinFstop, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldBladeCount, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBias, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBiasBackup, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_EQZ7, 0x0315);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_8N4O, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBiasCurve, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMeterMask, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureLowPercent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureHighPercent, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMinBrightness, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMaxBrightness, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedUp, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedDown, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMin, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMax, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureCalibrationConstant, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareIntensity, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTint, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehSize, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareThreshold, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehShape, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTints, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, VignetteIntensity, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainJitter, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainIntensity, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionIntensity, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionStaticFraction, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionRadius, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_QQMM, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeDistance, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeRadius, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionDistance, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionPower, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionBias, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionQuality, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipBlend, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipScale, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipThreshold, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionTemporalBlendWeight, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_TRFT, 0x043D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingAOSamplesPerPixel, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingColor, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingIntensity, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGIType, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_9E45, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGIMaxBounces, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGISamplesPerPixel, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingIntensity, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingLUT, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSensorWidth, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalDistance, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurAmount, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurRadius, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalRegion, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearTransitionRegion, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarTransitionRegion, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldScale, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearBlurSize, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarBlurSize, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldOcclusion, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSkyFocusDistance, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldVignetteSize, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurAmount, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurMax, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurTargetFPS, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurPerObjectSize, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVIntensity, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVVplInjectionBias, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSize, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryOcclusionIntensity, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryBounceIntensity, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVGeometryVolumeBias, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVEmissiveInjectionIntensity, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionIntensity, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionRadius, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionExponent, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionExponent, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionIntensity, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionIntensity, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ReflectionsType, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_OH98, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionIntensity, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionQuality, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionMaxRoughness, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsMaxRoughness, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsMaxBounces, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsSamplesPerPixel, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsShadows, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, TranslucencyType, 0x0506);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_PK5M, 0x0507);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyMaxRoughness, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyRefractionRays, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencySamplesPerPixel, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyShadows, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_GXDP, 0x0516);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PathTracingMaxBounces, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PathTracingSamplesPerPixel, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVFadeRange, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionFadeRange, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenPercentage, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_OLB5, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WeightedBlendables, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPostProcessSettings, 0x0540);
		}

		// struct FCollisionResponseTemplate
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CollisionEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_T0A1, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, bCanModify, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_19EN, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, ObjectTypeName, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_VBUV, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CustomResponses, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseTemplate, 0x0048);
		}

		// struct FCustomProfile
		TEST_METHOD(ScriptStruct__Engine__CustomProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, CustomResponses, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomProfile, 0x0018);
		}

		// struct FSkeletalMeshSamplingLODBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingLODBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingLODBuiltData, UnknownData_XWWQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingLODBuiltData, 0x0048);
		}

		// struct FSkeletalMeshSamplingRegionBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBuiltData, UnknownData_0U3L, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBuiltData, 0x0078);
		}

		// struct FSkeletalMeshSamplingBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, WholeMeshBuiltData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, RegionBuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingBuiltData, 0x0020);
		}

		// struct FSkeletalMeshSamplingRegionMaterialFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionMaterialFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionMaterialFilter, MaterialName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionMaterialFilter, 0x0008);
		}

		// struct FSkeletalMeshSamplingRegionBoneFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, UnknownData_8RM1, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBoneFilter, 0x000C);
		}

		// struct FSkeletalMeshSamplingRegion
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, UnknownData_Y2J8, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, MaterialFilters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, BoneFilters, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegion, 0x0030);
		}

		// struct FSkeletalMeshSamplingInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, Regions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, BuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingInfo, 0x0030);
		}

		// struct FDialogueWaveParameter
		TEST_METHOD(ScriptStruct__Engine__DialogueWaveParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, DialogueWave, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, Context, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueWaveParameter, 0x0020);
		}

		// struct FDistanceDatum
		TEST_METHOD(ScriptStruct__Engine__DistanceDatum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceEnd, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceEnd, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, Volume, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistanceDatum, 0x0014);
		}

		// struct FBasedPosition
		TEST_METHOD(ScriptStruct__Engine__BasedPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Base, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Position, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseLocation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseRotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedTransPosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedPosition, 0x0038);
		}

		// struct FFractureEffect
		TEST_METHOD(ScriptStruct__Engine__FractureEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, ParticleSystem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, Sound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureEffect, 0x0010);
		}

		// struct FSoundSubmixSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSubmixSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevelControlMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_XBD4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SoundSubmix, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MinSendLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MaxSendLevel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MinSendDistance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MaxSendDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_RK4A, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, CustomSendLevelCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSubmixSendInfo, 0x00B0);
		}

		// struct FPrimaryAssetRulesOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, PrimaryAssetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, Rules, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesOverride, 0x001C);
		}

		// struct FMaterialEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__MaterialEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultMaterialAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultDiffuseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultNormalTexture, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialEditorPromotionSettings, 0x0030);
		}

		// struct FHardwareCursorReference
		TEST_METHOD(ScriptStruct__Engine__HardwareCursorReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, CursorPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, HotSpot, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHardwareCursorReference, 0x0010);
		}

		// struct FSoundSourceBusSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSourceBusSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SourceBusSendLevelControlMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_UZVZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SoundSourceBus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SendLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MinSendLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MaxSendLevel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MinSendDistance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MaxSendDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_1910, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, CustomSendLevelCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSourceBusSendInfo, 0x00B0);
		}

		// struct FSoundWaveSpectralDataEntry
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataEntry, Magnitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataEntry, NormalizedMagnitude, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralDataEntry, 0x0008);
		}

		// struct FSoundWaveSpectralTimeData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralTimeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, Data, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, TimeSec, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, UnknownData_TMXA, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralTimeData, 0x0018);
		}

		// struct FSoundWaveEnvelopeTimeData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveEnvelopeTimeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeTimeData, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeTimeData, TimeSec, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveEnvelopeTimeData, 0x0008);
		}

		// struct FSubtitleCue
		TEST_METHOD(ScriptStruct__Engine__SubtitleCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, UnknownData_IFGU, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubtitleCue, 0x0020);
		}

		// struct FBuilderPoly
		TEST_METHOD(ScriptStruct__Engine__BuilderPoly)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, VertexIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, Direction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, ItemName, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, PolyFlags, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuilderPoly, 0x0020);
		}

		// struct FLightmassDirectionalLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassDirectionalLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDirectionalLightSettings, LightSourceAngle, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDirectionalLightSettings, 0x0010);
		}

		// struct FInterpolationParameter
		TEST_METHOD(ScriptStruct__Engine__InterpolationParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, UnknownData_I73I, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpolationParameter, 0x0008);
		}

		// struct FPerBoneInterpolation
		TEST_METHOD(ScriptStruct__Engine__PerBoneInterpolation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, InterpolationSpeedPerSec, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneInterpolation, 0x0014);
		}

		// struct FBlendSample
		TEST_METHOD(ScriptStruct__Engine__BlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, SampleValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, RateScale, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSample, 0x0018);
		}

		// struct FEditorElement
		TEST_METHOD(ScriptStruct__Engine__EditorElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Indices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Weights, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorElement, 0x0018);
		}

		// struct FBlendParameter
		TEST_METHOD(ScriptStruct__Engine__BlendParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Min, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Max, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, GridNum, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, UnknownData_0ULE, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendParameter, 0x0020);
		}

		// struct FBranchFilter
		TEST_METHOD(ScriptStruct__Engine__BranchFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BlendDepth, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchFilter, 0x000C);
		}

		// struct FAnimGroupInfo
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Color, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInfo, 0x0018);
		}

		// struct FBakedStateExitTransition
		TEST_METHOD(ScriptStruct__Engine__BakedStateExitTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CanTakeDelegateIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CustomResultNodeIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, TransitionIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bDesiredTransitionReturnValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bAutomaticRemainingTimeRule, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, UnknownData_W3RP, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, PoseEvaluatorLinks, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedStateExitTransition, 0x0020);
		}

		// struct FBakedAnimationState
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, FullyBlendedNotify, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bIsAConduit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_XS8D, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EntryRuleNodeIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, PlayerNodeIndices, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, LayerNodeIndices, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bAlwaysResetOnEntry, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_345I, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationState, 0x0058);
		}

		// struct FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateBase, StateName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateBase, 0x0008);
		}

		// struct FAnimationTransitionBetweenStates : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionBetweenStates)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, PreviousState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, NextState, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CrossfadeDuration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, StartNotify, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, EndNotify, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, InterruptNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_3UB3, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendProfile, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, LogicType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_TE11, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionBetweenStates, 0x0040);
		}

		// struct FBakedAnimationStateMachine
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationStateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, MachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, InitialState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, UnknownData_Q9BA, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, States, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, Transitions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationStateMachine, 0x0030);
		}

		// struct FCachedPoseIndices
		TEST_METHOD(ScriptStruct__Engine__CachedPoseIndices)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPoseIndices, OrderedSavedPoseNodeIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPoseIndices, 0x0010);
		}

		// struct FExposedValueCopyRecord
		TEST_METHOD(ScriptStruct__Engine__ExposedValueCopyRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourcePropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourceSubPropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourceArrayIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, bInstanceIsTarget, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, PostCopyOperation, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CopyType, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, UnknownData_GK5J, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, DestProperty, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, DestArrayIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, Size, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CachedSourceProperty, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CachedSourceStructSubProperty, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueCopyRecord, 0x0080);
		}

		// struct FExposedValueHandler
		TEST_METHOD(ScriptStruct__Engine__ExposedValueHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, BoundFunction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, CopyRecords, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, Function, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, ValueHandlerNodeProperty, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, UnknownData_NL4O, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueHandler, 0x0048);
		}

		// struct FGraphAssetPlayerInformation
		TEST_METHOD(ScriptStruct__Engine__GraphAssetPlayerInformation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphAssetPlayerInformation, PlayerNodeIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphAssetPlayerInformation, 0x0010);
		}

		// struct FAnimGraphBlendOptions
		TEST_METHOD(ScriptStruct__Engine__AnimGraphBlendOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGraphBlendOptions, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGraphBlendOptions, BlendOutTime, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGraphBlendOptions, 0x0008);
		}

		// struct FFloatCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__FloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatCurve, FloatCurve, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatCurve, 0x0098);
		}

		// struct FRawCurveTracks
		TEST_METHOD(ScriptStruct__Engine__RawCurveTracks)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawCurveTracks, FloatCurves, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawCurveTracks, 0x0010);
		}

		// struct FAnimSegment
		TEST_METHOD(ScriptStruct__Engine__AnimSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, StartPos, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimStartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimEndTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, LoopingCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, UnknownData_JQDO, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSegment, 0x0020);
		}

		// struct FRawDistributionVector : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValueVec, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValueVec, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, Distribution, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionVector, 0x0048);
		}

		// struct FPerPlatformFloat
		TEST_METHOD(ScriptStruct__Engine__PerPlatformFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformFloat, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformFloat, 0x0004);
		}

		// struct FBoneFilter
		TEST_METHOD(ScriptStruct__Engine__BoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, bExcludeSelf, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, UnknownData_TZB6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, BoneName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneFilter, 0x000C);
		}

		// struct FSkeletalMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TerminationCriterion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_Z9I6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfVertPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxNumOfTriangles, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxNumOfVerts, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxDeviationPercentage, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ReductionMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SilhouetteImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TextureImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ShadingImportance, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SkinningImportance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_7LOU, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, WeldingThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NormalsThreshold, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxBonesPerVertex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_2O0M, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, VolumeImportance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_725Y, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, BaseLOD, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshOptimizationSettings, 0x003C);
		}

		// struct FSkeletalMeshLODGroupSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODGroupSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneFilterActionOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_67NJ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BonesToPrioritize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, WeightOfPrioritization, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_45JQ, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BakePose, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ReductionSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_WAPR, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODGroupSettings, 0x0080);
		}

		// struct FTentDistribution
		TEST_METHOD(ScriptStruct__Engine__TentDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, TipAltitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, TipValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, Width, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTentDistribution, 0x000C);
		}

		// struct FMeshSectionInfo
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, MaterialIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bEnableCollision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bCastShadow, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bForceOpaque, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, UnknownData_0QVB, 0x0007);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfo, 0x0008);
		}

		// struct FMeshSectionInfoMap
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfoMap, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfoMap, 0x0050);
		}

		// struct FMeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__MeshBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_9M9W, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DstLightmapIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldResolutionScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_4XE2, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldReplacementMesh, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshBuildSettings, 0x0030);
		}

		// struct FMeshReductionSettings
		TEST_METHOD(ScriptStruct__Engine__MeshReductionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentTriangles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentVertices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, MaxDeviation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PixelError, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, WeldingThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, HardAngleThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, BaseLODModel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, SilhouetteImportance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TextureImportance, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, ShadingImportance, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TerminationCriterion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VisibilityAggressiveness, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VertexColorImportance, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, UnknownData_B0G6, 0x0023);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshReductionSettings, 0x0024);
		}

		// struct FStaticMeshSourceModel
		TEST_METHOD(ScriptStruct__Engine__StaticMeshSourceModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, BuildSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ReductionSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, LODDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ScreenSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, UnknownData_HQDB, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, SourceImportFilename, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshSourceModel, 0x0070);
		}

		// struct FStaticMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__StaticMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ReductionMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_U7JF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, MaxDeviationPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, WeldingThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, bRecalcNormals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_2TYT, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NormalsThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, SilhouetteImportance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, TextureImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ShadingImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_GHSR, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshOptimizationSettings, 0x001C);
		}

		// struct FAnimTrack
		TEST_METHOD(ScriptStruct__Engine__AnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTrack, AnimSegments, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTrack, 0x0010);
		}

		// struct FAnimSyncMarker
		TEST_METHOD(ScriptStruct__Engine__AnimSyncMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, MarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSyncMarker, 0x000C);
		}

		// struct FCompositeSection : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__CompositeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, SectionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, StartTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, NextSectionName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, UnknownData_8HUA, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, MetaData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSection, 0x0058);
		}

		// struct FBranchingPoint : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__BranchingPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, EventName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, DisplayTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, TriggerTimeOffset, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPoint, 0x0040);
		}

		// struct FBranchingPointMarker
		TEST_METHOD(ScriptStruct__Engine__BranchingPointMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, TriggerTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyEventType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, UnknownData_N9KF, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointMarker, 0x000C);
		}

		// struct FTimeStretchCurveMarker
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Alpha, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveMarker, 0x0010);
		}

		// struct FTimeStretchCurve
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, SamplingRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, CurveValueMinPrecision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Markers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Sum_dT_i_by_C_i, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, UnknownData_S7TO, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurve, 0x0028);
		}

		// struct FTrackToSkeletonMap
		TEST_METHOD(ScriptStruct__Engine__TrackToSkeletonMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackToSkeletonMap, BoneTreeIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackToSkeletonMap, 0x0004);
		}

		// struct FGameNameRedirect
		TEST_METHOD(ScriptStruct__Engine__GameNameRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, OldGameName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, NewGameName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameNameRedirect, 0x0010);
		}

		// struct FClassRedirect
		TEST_METHOD(ScriptStruct__Engine__ClassRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldSubobjName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewSubobjName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassPackage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, InstanceOnly, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, UnknownData_09WH, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassRedirect, 0x003C);
		}

		// struct FPluginRedirect
		TEST_METHOD(ScriptStruct__Engine__PluginRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, OldPluginName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, NewPluginName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPluginRedirect, 0x0020);
		}

		// struct FStructRedirect
		TEST_METHOD(ScriptStruct__Engine__StructRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, OldStructName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, NewStructName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructRedirect, 0x0010);
		}

		// struct FDropNoteInfo
		TEST_METHOD(ScriptStruct__Engine__DropNoteInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Comment, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDropNoteInfo, 0x0028);
		}

		// struct FNetDriverDefinition
		TEST_METHOD(ScriptStruct__Engine__NetDriverDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DefName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassNameFallback, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetDriverDefinition, 0x0018);
		}

		// struct FDebugDisplayProperty
		TEST_METHOD(ScriptStruct__Engine__DebugDisplayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, Obj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, WithinClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, UnknownData_X9N3, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugDisplayProperty, 0x0020);
		}

		// struct FCullDistanceSizePair
		TEST_METHOD(ScriptStruct__Engine__CullDistanceSizePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, CullDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCullDistanceSizePair, 0x0008);
		}

		// struct FLocationBoneSocketInfo
		TEST_METHOD(ScriptStruct__Engine__LocationBoneSocketInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, BoneSocketName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, Offset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationBoneSocketInfo, 0x0014);
		}

		// struct FChildActorAttachedActorInfo
		TEST_METHOD(ScriptStruct__Engine__ChildActorAttachedActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, SocketName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, RelativeTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChildActorAttachedActorInfo, 0x0040);
		}

		// struct FChildActorComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__ChildActorComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, ChildActorClass, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, ChildActorName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, AttachedActors, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, UnknownData_OSOV, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChildActorComponentInstanceData, 0x00D8);
		}

		// struct FAutoCompleteNode
		TEST_METHOD(ScriptStruct__Engine__AutoCompleteNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, IndexChar, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_14GP, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, AutoCompleteListIndices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_6Y1X, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteNode, 0x0028);
		}

		// struct FRuntimeCurveLinearColor
		TEST_METHOD(ScriptStruct__Engine__RuntimeCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ColorCurves, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ExternalCurve, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeCurveLinearColor, 0x0208);
		}

		// struct FNamedCurveValue
		TEST_METHOD(ScriptStruct__Engine__NamedCurveValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedCurveValue, 0x000C);
		}

		// struct FCurveTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__CurveTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, CurveTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTableRowHandle, 0x0010);
		}

		// struct FDataTableCategoryHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableCategoryHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, ColumnName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, RowContents, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableCategoryHandle, 0x0018);
		}

		// struct FDataTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableRowHandle, 0x0010);
		}

		// struct FLevelNameAndTime
		TEST_METHOD(ScriptStruct__Engine__LevelNameAndTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelChangeTimeInMS, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, UnknownData_W2H0, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelNameAndTime, 0x0018);
		}

		// struct FCanvasUVTri
		TEST_METHOD(ScriptStruct__Engine__CanvasUVTri)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Pos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_UV, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Color, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Pos, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_UV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Color, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Pos, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_UV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Color, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasUVTri, 0x0060);
		}

		// struct FMarkerSyncData
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, AuthoredSyncMarkers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, UnknownData_NGMN, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncData, 0x0020);
		}

		// struct FEditorImportExportTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportExportTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ExportFileExtension, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, bSkipExport, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, UnknownData_KVO1, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, FactorySettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportExportTestDefinition, 0x0038);
		}

		// struct FScreenMessageString
		TEST_METHOD(ScriptStruct__Engine__ScreenMessageString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, ScreenMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, DisplayColor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TimeToDisplay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, CurrentTimeDisplayed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TextScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, UnknownData_18AG, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScreenMessageString, 0x0030);
		}

		// struct FURL
		TEST_METHOD(ScriptStruct__Engine__URL)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Protocol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Host, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Port, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Valid, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Map, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, RedirectURL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Op, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Portal, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FURL, 0x0068);
		}

		// struct FFullyLoadedPackagesInfo
		TEST_METHOD(ScriptStruct__Engine__FullyLoadedPackagesInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, FullyLoadType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, UnknownData_NH0R, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, PackagesToLoad, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, LoadedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFullyLoadedPackagesInfo, 0x0038);
		}

		// struct FLevelStreamingStatus
		TEST_METHOD(ScriptStruct__Engine__LevelStreamingStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, UnknownData_FCQF, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, LODIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelStreamingStatus, 0x0010);
		}

		// struct FNamedNetDriver
		TEST_METHOD(ScriptStruct__Engine__NamedNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, NetDriver, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, UnknownData_QEIF, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedNetDriver, 0x0010);
		}

		// struct FWorldContext
		TEST_METHOD(ScriptStruct__Engine__WorldContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_G1JD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastURL, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastRemoteURL, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingNetGame, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PackagesToFullyLoad, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_V71Q, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LoadedLevelsForPendingMapChange, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_JG9Y, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ObjectReferencers, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingLevelStreamingStatusUpdates, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, GameViewport, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, OwningGameInstance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ActiveNetDrivers, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_H0NC, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldContext, 0x0280);
		}

		// struct FExposureSettings
		TEST_METHOD(ScriptStruct__Engine__ExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, FixedEV100, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, bFixed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, UnknownData_NMKG, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposureSettings, 0x0008);
		}

		// struct FTickPrerequisite
		TEST_METHOD(ScriptStruct__Engine__TickPrerequisite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickPrerequisite, UnknownData_26QZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickPrerequisite, 0x0010);
		}

		// struct FSlotAnimationTrack
		TEST_METHOD(ScriptStruct__Engine__SlotAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, AnimTrack, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotAnimationTrack, 0x0018);
		}

		// struct FPaintedVertex
		TEST_METHOD(ScriptStruct__Engine__PaintedVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Normal, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintedVertex, 0x0020);
		}

		// struct FStaticMeshVertexColorLODData
		TEST_METHOD(ScriptStruct__Engine__StaticMeshVertexColorLODData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, PaintedVertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, VertexBufferColors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, LODIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, UnknownData_GITF, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshVertexColorLODData, 0x0028);
		}

		// struct FPrimitiveComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrimitiveComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, UnknownData_VMWT, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, ComponentTransform, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, VisibilityId, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, UnknownData_YP9Y, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, LODParent, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveComponentInstanceData, 0x00F0);
		}

		// struct FStaticMeshComponentInstanceData : public FPrimitiveComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, StaticMesh, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, VertexColorLODs, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, CachedStaticLighting, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, StreamingTextureData, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, UnknownData_C99Z, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentInstanceData, 0x0130);
		}

		// struct FStringCurveKey
		TEST_METHOD(ScriptStruct__Engine__StringCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, UnknownData_9OYM, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurveKey, 0x0018);
		}

		// struct FAnimSetMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__AnimSetMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSetMeshLinkup, BoneToTrackTable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSetMeshLinkup, 0x0010);
		}

		// struct FPrimaryAssetTypeInfo
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetTypeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClassLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bHasBlueprintClasses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsEditorOnly, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_56UP, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Directories, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, SpecificAssets, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Rules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_2DJN, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetScanPaths, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsDynamicAsset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_2B17, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, NumberOfAssets, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetTypeInfo, 0x0088);
		}

		// struct FAssetManagerRedirect
		TEST_METHOD(ScriptStruct__Engine__AssetManagerRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, Old, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, New, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetManagerRedirect, 0x0020);
		}

		// struct FAssetMapping
		TEST_METHOD(ScriptStruct__Engine__AssetMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, TargetAsset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetMapping, 0x0010);
		}

		// struct FInputBlendPose
		TEST_METHOD(ScriptStruct__Engine__InputBlendPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputBlendPose, BranchFilters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputBlendPose, 0x0010);
		}

		// struct FParticleSysParam
		TEST_METHOD(ScriptStruct__Engine__ParticleSysParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_FZZS, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar_Low, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector_Low, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Color, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Actor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Material, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_8LH2, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSysParam, 0x0080);
		}

		// struct FTireFrictionScalePair
		TEST_METHOD(ScriptStruct__Engine__TireFrictionScalePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, TireType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, FrictionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, UnknownData_07ZN, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTireFrictionScalePair, 0x0010);
		}

		// struct FSimpleCurveKey
		TEST_METHOD(ScriptStruct__Engine__SimpleCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurveKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleCurveKey, 0x0008);
		}

		// struct FSimpleCurve : public FRealCurve
		TEST_METHOD(ScriptStruct__Engine__SimpleCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, InterpMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, UnknownData_XCLO, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, Keys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleCurve, 0x0088);
		}

		// struct FClothPhysicsProperties_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothPhysicsProperties_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, VerticalResistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, HorizontalResistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, BendResistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, ShearResistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Friction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Damping, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherStiffness, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherLimit, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Drag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, StiffnessFrequency, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, GravityScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, MassScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, InertiaBlend, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionThickness, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionSquashScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionStiffness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SolverFrequency, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberCompression, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberExpansion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberResistance, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicsProperties_Legacy, 0x0050);
		}

		// struct FEditorMapPerformanceTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorMapPerformanceTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, PerformanceTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, TestTimer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, UnknownData_LW8U, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorMapPerformanceTestDefinition, 0x0020);
		}

		// struct FLaunchOnTestSettings
		TEST_METHOD(ScriptStruct__Engine__LaunchOnTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, LaunchOnTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, DeviceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLaunchOnTestSettings, 0x0020);
		}

		// struct FBlueprintInputAxisDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, InputAxisName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, FunctionNameToBind, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisDelegateBinding, 0x0014);
		}

		// struct FInputAxisProperties
		TEST_METHOD(ScriptStruct__Engine__InputAxisProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, DeadZone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Sensitivity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Exponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, UnknownData_NNH2, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisProperties, 0x0010);
		}

		// struct FInputAxisConfigEntry
		TEST_METHOD(ScriptStruct__Engine__InputAxisConfigEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisKeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisProperties, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisConfigEntry, 0x0018);
		}

		// struct FReplicatedStaticActorDestructionInfo
		TEST_METHOD(ScriptStruct__Engine__ReplicatedStaticActorDestructionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, UnknownData_RBJM, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, ObjClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedStaticActorDestructionInfo, 0x0038);
		}

		// struct FCustomInput
		TEST_METHOD(ScriptStruct__Engine__CustomInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, Input, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, UnknownData_C1WW, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomInput, 0x001C);
		}

		// struct FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionParameterBase, 0x0018);
		}

		// struct FCollectionScalarParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionScalarParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionScalarParameter, 0x001C);
		}

		// struct FAnimNode_SingleNode : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SingleNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, UnknownData_RHN2, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SingleNode, 0x0030);
		}

		// struct FAnimationTransitionRule
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, RuleToExecute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionReturnVal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, UnknownData_RJHK, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionRule, 0x0010);
		}

		// struct FAnimationState : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, FullyBlendedNotify, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationState, 0x0028);
		}

		// struct FPredictProjectilePathResult
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, PathData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, LastTraceDestination, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, HitResult, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, UnknownData_SA6A, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathResult, 0x00B8);
		}

		// struct FPredictProjectilePathParams
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, StartLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, LaunchVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithCollision, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_UDPE, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ProjectileRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, MaxSimTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithChannel, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, TraceChannel, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_6J1A, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ObjectTypes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ActorsToIgnore, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, SimFrequency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, OverrideGravityZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_UWTN, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugTime, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceComplex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_OYEE, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathParams, 0x0060);
		}

		// struct FActiveHapticFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveHapticFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, HapticEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, UnknownData_45X6, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveHapticFeedbackEffect, 0x0018);
		}

		// struct FPreviewAssetAttachContainer
		TEST_METHOD(ScriptStruct__Engine__PreviewAssetAttachContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAssetAttachContainer, AttachedObjects, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAssetAttachContainer, 0x0010);
		}

		// struct FSpriteCategoryInfo
		TEST_METHOD(ScriptStruct__Engine__SpriteCategoryInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Description, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteCategoryInfo, 0x0038);
		}

		// struct FCompressedRichCurve
		TEST_METHOD(ScriptStruct__Engine__CompressedRichCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedRichCurve, UnknownData_IBSZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedRichCurve, 0x0018);
		}

		// struct FDebugCameraControllerSettingsViewModeIndex
		TEST_METHOD(ScriptStruct__Engine__DebugCameraControllerSettingsViewModeIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, UnknownData_QP5N, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, ViewModeIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, UnknownData_SON7, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugCameraControllerSettingsViewModeIndex, 0x0010);
		}

		// struct FCurveEdEntry
		TEST_METHOD(ScriptStruct__Engine__CurveEdEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, UnknownData_TEUO, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bHideCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bColorCurve, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bFloatingPointColorCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bClamp, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampLow, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampHigh, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdEntry, 0x0038);
		}

		// struct FCurveEdTab
		TEST_METHOD(ScriptStruct__Engine__CurveEdTab)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, TabName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, Curves, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndInput, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartOutput, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndOutput, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdTab, 0x0030);
		}

		// struct FInterpControlPoint
		TEST_METHOD(ScriptStruct__Engine__InterpControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, PositionControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, bPositionIsRelative, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, UnknownData_VCH6, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpControlPoint, 0x001C);
		}

		// struct FCustomDefine
		TEST_METHOD(ScriptStruct__Engine__CustomDefine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomDefine, DefineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomDefine, DefineValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomDefine, 0x0020);
		}

		// struct FTransformBaseConstraint
		TEST_METHOD(ScriptStruct__Engine__TransformBaseConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBaseConstraint, TransformConstraints, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBaseConstraint, 0x0010);
		}

		// struct FTransformBase
		TEST_METHOD(ScriptStruct__Engine__TransformBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Node, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Constraints, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBase, 0x0028);
		}

		// struct FMeshUVChannelInfo
		TEST_METHOD(ScriptStruct__Engine__MeshUVChannelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bInitialized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bOverrideDensities, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, UnknownData_ZKSB, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, LocalUVDensities, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshUVChannelInfo, 0x0014);
		}

		// struct FSkeletalMaterial
		TEST_METHOD(ScriptStruct__Engine__SkeletalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UVChannelData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UnknownData_2MZH, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMaterial, 0x0028);
		}

		// struct FSubsurfaceProfileStruct
		TEST_METHOD(ScriptStruct__Engine__SubsurfaceProfileStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SurfaceAlbedo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, MeanFreePathColor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, MeanFreePathDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, WorldUnitScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, bEnableBurley, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, UnknownData_R2QL, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatterRadius, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SubsurfaceColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, FalloffColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, BoundaryColorBleed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ExtinctionScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, NormalScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatteringDistribution, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, IOR, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness0, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness1, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, LobeMix, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, TransmissionTintColor, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubsurfaceProfileStruct, 0x008C);
		}

		// struct FTimelineEventEntry
		TEST_METHOD(ScriptStruct__Engine__TimelineEventEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, EventFunc, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineEventEntry, 0x0014);
		}

		// struct FTimelineVectorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, UnknownData_Y3GD, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineVectorTrack, 0x0040);
		}

		// struct FTimelineFloatTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, UnknownData_X78X, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineFloatTrack, 0x0040);
		}

		// struct FTimelineLinearColorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, UnknownData_O45K, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineLinearColorTrack, 0x0040);
		}

		// struct FTimeline
		TEST_METHOD(ScriptStruct__Engine__Timeline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, LengthMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_LX0U, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Length, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Position, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Events, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpVectors, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpFloats, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpLinearColors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelinePostUpdateFunc, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelineFinishedFunc, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PropertySetObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, DirectionPropertyName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_3GNF, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeline, 0x0098);
		}

		// struct FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTTrackBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_ETNZ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, TrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, bIsExternalCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_OKN0, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTTrackBase, 0x0018);
		}

		// struct FTTEventTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, CurveKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTEventTrack, 0x0028);
		}

		// struct FTTPropertyTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTPropertyTrack, PropertyName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTPropertyTrack, 0x0020);
		}

		// struct FTTFloatTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTFloatTrack, CurveFloat, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTFloatTrack, 0x0028);
		}

		// struct FTTVectorTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTVectorTrack, CurveVector, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTVectorTrack, 0x0028);
		}

		// struct FTTLinearColorTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTLinearColorTrack, CurveLinearColor, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTLinearColorTrack, 0x0028);
		}

		// struct FExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__ExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, OutputName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionOutput, 0x0008);
		}

		// struct FFunctionExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, Output, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionOutput, 0x0020);
		}

		// struct FKConvexElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KConvexElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, VertexData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, IndexData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, ElemBox, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_BQUK, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, Transform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_KNCK, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKConvexElem, 0x00B0);
		}

		// struct FKAggregateGeom
		TEST_METHOD(ScriptStruct__Engine__KAggregateGeom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphereElems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, BoxElems, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphylElems, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, ConvexElems, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, TaperedCapsuleElems, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, UnknownData_L83O, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKAggregateGeom, 0x0058);
		}

		// struct FBlueprintInputKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_L5KN, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputChord, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputKeyEvent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_F1ZT, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, FunctionNameToBind, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_SIZD, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputKeyDelegateBinding, 0x0038);
		}

		// struct FMaterialSpriteElement
		TEST_METHOD(ScriptStruct__Engine__MaterialSpriteElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToOpacityCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_3OC2, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_2I15, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToSizeCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialSpriteElement, 0x0028);
		}

		// struct FNavAgentSelector
		TEST_METHOD(ScriptStruct__Engine__NavAgentSelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentSelector, UnknownData_4NK6, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentSelector, 0x0004);
		}

		// struct FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, LeftProjectHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, MaxFallDownLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_E1V3, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SupportedAgents, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_AHFL, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, Direction, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_B0EI, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, AreaClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_FN0X, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLinkBase, 0x0030);
		}

		// struct FNavigationSegmentLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationSegmentLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftStart, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftEnd, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightEnd, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationSegmentLink, 0x0060);
		}

		// struct FNetworkEmulationProfileDescription
		TEST_METHOD(ScriptStruct__Engine__NetworkEmulationProfileDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkEmulationProfileDescription, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkEmulationProfileDescription, Tooltip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetworkEmulationProfileDescription, 0x0020);
		}

		// struct FEngineShowFlagsSetting
		TEST_METHOD(ScriptStruct__Engine__EngineShowFlagsSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, ShowFlagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, Enabled, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, UnknownData_E4A7, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineShowFlagsSetting, 0x0018);
		}

		// struct FMinimalViewInfo
		TEST_METHOD(ScriptStruct__Engine__MinimalViewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, FOV, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, DesiredFOV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoNearClipPlane, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoFarClipPlane, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, AspectRatio, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_S9ND, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, ProjectionMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_J8EM, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessBlendWeight, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_0HA5, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OffCenterProjectionOffset, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_9WRB, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinimalViewInfo, 0x05D0);
		}

		// struct FTViewTarget
		TEST_METHOD(ScriptStruct__Engine__TViewTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_BMLJ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, POV, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, PlayerState, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_BN6X, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTViewTarget, 0x05F0);
		}

		// struct FKeyBind
		TEST_METHOD(ScriptStruct__Engine__KeyBind)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Command, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, UnknownData_SHN5, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyBind, 0x0030);
		}

		// struct FPreviewMeshCollectionEntry
		TEST_METHOD(ScriptStruct__Engine__PreviewMeshCollectionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewMeshCollectionEntry, SkeletalMesh, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewMeshCollectionEntry, 0x0028);
		}

		// struct FAnimNotifyTrack
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, UnknownData_GH0R, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyTrack, 0x0038);
		}

		// struct FPerBoneBlendWeights
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeights)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeights, BoneBlendWeights, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeights, 0x0010);
		}

		// struct FAssetImportInfo
		TEST_METHOD(ScriptStruct__Engine__AssetImportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetImportInfo, UnknownData_W6DG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetImportInfo, 0x0001);
		}

		// struct FAtmospherePrecomputeInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeInstanceData, UnknownData_ZTJ0, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeInstanceData, 0x0150);
		}

		// struct FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioEffectParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEffectParameters, UnknownData_IUF3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEffectParameters, 0x0008);
		}

		// struct FAudioReverbEffect : public FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioReverbEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioReverbEffect, UnknownData_V8FA, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioReverbEffect, 0x0048);
		}

		// struct FNavAvoidanceData
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAvoidanceData, UnknownData_RZHS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceData, 0x003C);
		}

		// struct FGridBlendSample
		TEST_METHOD(ScriptStruct__Engine__GridBlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, GridElement, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, BlendWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGridBlendSample, 0x001C);
		}

		// struct FBPEditorBookmarkNode
		TEST_METHOD(ScriptStruct__Engine__BPEditorBookmarkNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, NodeGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, ParentGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, DisplayName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPEditorBookmarkNode, 0x0038);
		}

		// struct FEditedDocumentInfo
		TEST_METHOD(ScriptStruct__Engine__EditedDocumentInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedViewOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedZoomAmount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, UnknownData_3RFV, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObject, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditedDocumentInfo, 0x0030);
		}

		// struct FBPInterfaceDescription
		TEST_METHOD(ScriptStruct__Engine__BPInterfaceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Interface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Graphs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPInterfaceDescription, 0x0018);
		}

		// struct FEdGraphTerminalType
		TEST_METHOD(ScriptStruct__Engine__EdGraphTerminalType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsConst, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsWeakPointer, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, UnknownData_68G4, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphTerminalType, 0x001C);
		}

		// struct FEdGraphPinType
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryMemberReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinValueType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, ContainerType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, UnknownData_V0AU, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinType, 0x0058);
		}

		// struct FBPVariableMetaDataEntry
		TEST_METHOD(ScriptStruct__Engine__BPVariableMetaDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableMetaDataEntry, 0x0018);
		}

		// struct FBPVariableDescription
		TEST_METHOD(ScriptStruct__Engine__BPVariableDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarGuid, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, FriendlyName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, Category, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, PropertyFlags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, RepNotifyFunc, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, ReplicationCondition, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, UnknownData_JIQB, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, MetaDataArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, DefaultValue, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableDescription, 0x00D0);
		}

		// struct FBlueprintMacroCosmeticInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintMacroCosmeticInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintMacroCosmeticInfo, UnknownData_UL40, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintMacroCosmeticInfo, 0x0001);
		}

		// struct FCompilerNativizationOptions
		TEST_METHOD(ScriptStruct__Engine__CompilerNativizationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, PlatformName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ServerOnlyPlatform, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ClientOnlyPlatform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, bExcludeMonolithicHeaders, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, UnknownData_38XV, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedModules, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedAssets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedFolderPaths, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompilerNativizationOptions, 0x0080);
		}

		// struct FEventGraphFastCallPair
		TEST_METHOD(ScriptStruct__Engine__EventGraphFastCallPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, FunctionToPatch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, EventGraphCallOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, UnknownData_A1KJ, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventGraphFastCallPair, 0x0010);
		}

		// struct FBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__BlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintDebugData, UnknownData_JRZ4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintDebugData, 0x0001);
		}

		// struct FPointerToUberGraphFrame
		TEST_METHOD(ScriptStruct__Engine__PointerToUberGraphFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerToUberGraphFrame, UnknownData_LXY2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerToUberGraphFrame, 0x0008);
		}

		// struct FDebuggingInfoForSingleFunction
		TEST_METHOD(ScriptStruct__Engine__DebuggingInfoForSingleFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebuggingInfoForSingleFunction, UnknownData_A49A, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebuggingInfoForSingleFunction, 0x0190);
		}

		// struct FNodeToCodeAssociation
		TEST_METHOD(ScriptStruct__Engine__NodeToCodeAssociation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeToCodeAssociation, UnknownData_EVA7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeToCodeAssociation, 0x0014);
		}

		// struct FAnimCurveType
		TEST_METHOD(ScriptStruct__Engine__AnimCurveType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveType, UnknownData_0Y7K, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveType, 0x0002);
		}

		// struct FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkBaseJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmarkBaseJumpToSettings, UnknownData_CMM1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkBaseJumpToSettings, 0x0001);
		}

		// struct FBookmarkJumpToSettings : public FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkJumpToSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkJumpToSettings, 0x0001);
		}

		// struct FBookmark2DJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__Bookmark2DJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmark2DJumpToSettings, UnknownData_5XZ4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmark2DJumpToSettings, 0x0001);
		}

		// struct FCachedAnimTransitionData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimTransitionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, FromStateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, ToStateName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, UnknownData_Y509, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimTransitionData, 0x0024);
		}

		// struct FCachedAnimRelevancyData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimRelevancyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, UnknownData_AMHG, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimRelevancyData, 0x001C);
		}

		// struct FCachedAnimAssetPlayerData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimAssetPlayerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, UnknownData_2NVO, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimAssetPlayerData, 0x0018);
		}

		// struct FCachedAnimStateData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, UnknownData_JQ78, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateData, 0x001C);
		}

		// struct FCachedAnimStateArray
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, States, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, UnknownData_K69E, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateArray, 0x0018);
		}

		// struct FDummySpacerCameraTypes
		TEST_METHOD(ScriptStruct__Engine__DummySpacerCameraTypes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDummySpacerCameraTypes, UnknownData_BNSX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDummySpacerCameraTypes, 0x0001);
		}

		// struct FCanvasIcon
		TEST_METHOD(ScriptStruct__Engine__CanvasIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, U, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, V, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, UL, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, VL, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasIcon, 0x0018);
		}

		// struct FLensImperfectionSettings
		TEST_METHOD(ScriptStruct__Engine__LensImperfectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskIntensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskTint, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, UnknownData_J1S5, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensImperfectionSettings, 0x0020);
		}

		// struct FLensSettings
		TEST_METHOD(ScriptStruct__Engine__LensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Bloom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Imperfections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, ChromaticAberration, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, UnknownData_M06X, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensSettings, 0x00E0);
		}

		// struct FFilmStockSettings
		TEST_METHOD(ScriptStruct__Engine__FilmStockSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Slope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Toe, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Shoulder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, BlackClip, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, WhiteClip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilmStockSettings, 0x0014);
		}

		// struct FColorGradePerRangeSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradePerRangeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Saturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Contrast, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gamma, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Offset, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradePerRangeSettings, 0x0050);
		}

		// struct FColorGradingSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Global, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Shadows, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Midtones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Highlights, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, ShadowsMax, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, HighlightsMin, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, UnknownData_RHJH, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradingSettings, 0x0150);
		}

		// struct FReferencePose
		TEST_METHOD(ScriptStruct__Engine__ReferencePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, PoseName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, ReferencePose, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferencePose, 0x0018);
		}

		// struct FSkeletonToMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__SkeletonToMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, SkeletonToMeshTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, MeshToSkeletonTable, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletonToMeshLinkup, 0x0020);
		}

		// struct FSkelMeshSkinWeightInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshSkinWeightInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Bones, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Weights, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshSkinWeightInfo, 0x003C);
		}

		// struct FPrecomputedSkyLightInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrecomputedSkyLightInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, LightGuid, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, AverageBrightness, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, UnknownData_U8UT, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrecomputedSkyLightInstanceData, 0x0160);
		}

		// struct FSmartNameMapping
		TEST_METHOD(ScriptStruct__Engine__SmartNameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameMapping, UnknownData_HAZC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameMapping, 0x0070);
		}

		// struct FCurveMetaData
		TEST_METHOD(ScriptStruct__Engine__CurveMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveMetaData, UnknownData_BFQT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveMetaData, 0x0020);
		}

		// struct FSoundClassEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundClassEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassEditorData, UnknownData_71N7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassEditorData, 0x0008);
		}

		// struct FSoundNodeEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundNodeEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundNodeEditorData, UnknownData_Q9WO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundNodeEditorData, 0x0008);
		}

		// struct FSoundWaveEnvelopeDataPerSound
		TEST_METHOD(ScriptStruct__Engine__SoundWaveEnvelopeDataPerSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, Envelope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, PlaybackTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, SoundWave, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveEnvelopeDataPerSound, 0x0010);
		}

		// struct FSoundWaveSpectralData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, FrequencyHz, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, Magnitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, NormalizedMagnitude, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralData, 0x000C);
		}

		// struct FSoundWaveSpectralDataPerSound
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralDataPerSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, SpectralData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, PlaybackTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, UnknownData_2HG2, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, SoundWave, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralDataPerSound, 0x0020);
		}

		// struct FStreamedAudioPlatformData
		TEST_METHOD(ScriptStruct__Engine__StreamedAudioPlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamedAudioPlatformData, UnknownData_HOGA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamedAudioPlatformData, 0x0020);
		}

		// struct FActiveCameraShakeInfo
		TEST_METHOD(ScriptStruct__Engine__ActiveCameraShakeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveCameraShakeInfo, ShakeInstance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveCameraShakeInfo, ShakeSource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveCameraShakeInfo, 0x0010);
		}

		// struct FPooledCameraShakes
		TEST_METHOD(ScriptStruct__Engine__PooledCameraShakes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPooledCameraShakes, PooledShakes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPooledCameraShakes, 0x0010);
		}

		// struct FVirtualTextureBuildSettings
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, TileSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, TileBorderSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, bEnableCompressCrunch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, bEnableCompressZlib, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, UnknownData_K1ZH, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureBuildSettings, 0x000C);
		}

		// struct FBoneMirrorInfo
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, BoneFlipAxis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, UnknownData_PI4V, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorInfo, 0x0008);
		}

		// struct FSkeletalMeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, UnknownData_BHC4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdPosition, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdTangentNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, MorphThresholdPosition, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshBuildSettings, 0x0014);
		}

		// struct FSkeletalMeshLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODMaterialMap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BuildSettings, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ReductionSettings, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToRemove, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToPrioritize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, WeightOfPrioritization, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_HC90, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePose, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePoseOverride, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SourceImportFilename, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SkinCacheUsage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_56CM, 0x00B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODInfo, 0x00B8);
		}

		// struct FPerPlatformInt
		TEST_METHOD(ScriptStruct__Engine__PerPlatformInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformInt, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformInt, 0x0004);
		}

		// struct FPerPlatformBool
		TEST_METHOD(ScriptStruct__Engine__PerPlatformBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformBool, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformBool, 0x0001);
		}

		// struct FPlatformInterfaceData
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_N8VS, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, IntValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, FloatValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_S591, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, StringValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, ObjectValue, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceData, 0x0030);
		}

		// struct FPlatformInterfaceDelegateResult
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceDelegateResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, bSuccessful, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, UnknownData_88N4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceDelegateResult, 0x0038);
		}

		// struct FDebugFloatHistory
		TEST_METHOD(ScriptStruct__Engine__DebugFloatHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, Samples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MinValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, bAutoAdjustMinMax, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, UnknownData_9YQK, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugFloatHistory, 0x0020);
		}

		// struct FLatentActionInfo
		TEST_METHOD(ScriptStruct__Engine__LatentActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, Linkage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, UUID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, ExecutionFunction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, CallbackTarget, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionInfo, 0x0018);
		}

		// struct FTimerHandle
		TEST_METHOD(ScriptStruct__Engine__TimerHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimerHandle, Handle, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimerHandle, 0x0008);
		}

		// struct FCollisionProfileName
		TEST_METHOD(ScriptStruct__Engine__CollisionProfileName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionProfileName, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionProfileName, 0x0008);
		}

		// struct FGenericStruct
		TEST_METHOD(ScriptStruct__Engine__GenericStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericStruct, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericStruct, 0x0004);
		}

		// struct FUserActivity
		TEST_METHOD(ScriptStruct__Engine__UserActivity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, UnknownData_V4UF, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserActivity, 0x0018);
		}

		// struct FTableRowBase
		TEST_METHOD(ScriptStruct__Engine__TableRowBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowBase, UnknownData_LQBY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowBase, 0x0008);
		}

		// struct FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__Engine__KeyHandleLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleLookupTable, UnknownData_GHLI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleLookupTable, 0x0060);
		}

		// struct FAnimationGroupReference
		TEST_METHOD(ScriptStruct__Engine__AnimationGroupReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupRole, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, UnknownData_0Z25, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationGroupReference, 0x000C);
		}

		// struct FAnimGroupInstance
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInstance, UnknownData_7UY6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInstance, 0x0070);
		}

		// struct FAnimTickRecord
		TEST_METHOD(ScriptStruct__Engine__AnimTickRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, UnknownData_ADIM, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTickRecord, 0x0048);
		}

		// struct FMarkerSyncAnimPosition
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncAnimPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PreviousMarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, NextMarkerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PositionBetweenMarkers, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncAnimPosition, 0x0014);
		}

		// struct FBlendFilter
		TEST_METHOD(ScriptStruct__Engine__BlendFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendFilter, UnknownData_UVMK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendFilter, 0x0078);
		}

		// struct FBlendSampleData
		TEST_METHOD(ScriptStruct__Engine__BlendSampleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SampleDataIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_1MWO, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Animation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, TotalWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, PreviousTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SamplePlayRate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_CLKD, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSampleData, 0x0040);
		}

		// struct FAnimationRecordingSettings
		TEST_METHOD(ScriptStruct__Engine__AnimationRecordingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordInWorldSpace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRemoveRootAnimation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bAutoSaveAsset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_QFRJ, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, SampleRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, Length, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, InterpMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, TangentMode, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_1FP6, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationRecordingSettings, 0x0010);
		}

		// struct FComponentSpacePose
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePose, 0x0020);
		}

		// struct FLocalSpacePose
		TEST_METHOD(ScriptStruct__Engine__LocalSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalSpacePose, 0x0020);
		}

		// struct FNamedTransform
		TEST_METHOD(ScriptStruct__Engine__NamedTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, UnknownData_UGYU, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedTransform, 0x0040);
		}

		// struct FNamedColor
		TEST_METHOD(ScriptStruct__Engine__NamedColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedColor, 0x000C);
		}

		// struct FNamedVector
		TEST_METHOD(ScriptStruct__Engine__NamedVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Name, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedVector, 0x0014);
		}

		// struct FNamedFloat
		TEST_METHOD(ScriptStruct__Engine__NamedFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFloat, 0x000C);
		}

		// struct FAnimNode_LinkedInputPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedInputPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, Graph, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, InputPose, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, UnknownData_6HFC, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedInputPose, 0x0078);
		}

		// struct FAnimNode_SaveCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SaveCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, Pose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, CachePoseName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, UnknownData_IH6B, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SaveCachedPose, 0x00B8);
		}

		// struct FAnimNode_SequencePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, Sequence, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateBasis, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateScaleBiasClamp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, StartPosition, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, bLoopAnimation, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, UnknownData_0G30, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequencePlayer, 0x0078);
		}

		// struct FAnimNode_StateMachine : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_StateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, StateMachineIndexInClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, MaxTransitionsPerFrame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bSkipFirstUpdateTransition, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bReinitializeOnBecomingRelevant, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, UnknownData_4T88, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateMachine, 0x00B0);
		}

		// struct FAnimationPotentialTransition
		TEST_METHOD(ScriptStruct__Engine__AnimationPotentialTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationPotentialTransition, UnknownData_SZAA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationPotentialTransition, 0x0030);
		}

		// struct FAnimationActiveTransitionEntry
		TEST_METHOD(ScriptStruct__Engine__AnimationActiveTransitionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_9QXX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, BlendProfile, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_3WA8, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationActiveTransitionEntry, 0x00C8);
		}

		// struct FAnimNode_TransitionPoseEvaluator : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionPoseEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_L1VA, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, FramesToCachePose, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_7UQJ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, DataSource, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, EvaluatorMode, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_RD79, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionPoseEvaluator, 0x0058);
		}

		// struct FAnimNode_TransitionResult : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, bCanEnterTransition, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, UnknownData_2SIL, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionResult, 0x0028);
		}

		// struct FAnimNode_UseCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_UseCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, LinkToCachingNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, CachePoseName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_UseCachedPose, 0x0028);
		}

		// struct FAnimNode_ConvertComponentToLocalSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertComponentToLocalSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertComponentToLocalSpace, ComponentPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertComponentToLocalSpace, 0x0020);
		}

		// struct FCompressedTrack
		TEST_METHOD(ScriptStruct__Engine__CompressedTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, ByteStream, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Mins, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Ranges, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedTrack, 0x0038);
		}

		// struct FCurveTrack
		TEST_METHOD(ScriptStruct__Engine__CurveTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTrack, 0x0018);
		}

		// struct FScaleTrack
		TEST_METHOD(ScriptStruct__Engine__ScaleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, ScaleKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScaleTrack, 0x0020);
		}

		// struct FRotationTrack
		TEST_METHOD(ScriptStruct__Engine__RotationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, RotKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationTrack, 0x0020);
		}

		// struct FTranslationTrack
		TEST_METHOD(ScriptStruct__Engine__TranslationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTranslationTrack, 0x0020);
		}

		// struct FClothingAssetData_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothingAssetData_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, AssetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, ApexFileName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, bClothPropertiesChanged, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_1VEO, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, PhysicsProperties, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_QDEF, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothingAssetData_Legacy, 0x0078);
		}

		// struct FSkeletalMeshClothBuildParams
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshClothBuildParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetLod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemapParameters, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_JZ40, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, AssetName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, LODIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, SourceSection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemoveFromMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_SOJ7, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, PhysicsAsset, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshClothBuildParams, 0x0058);
		}

		// struct FBoneMirrorExport
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorExport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, SourceBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneFlipAxis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, UnknownData_ADOB, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorExport, 0x0014);
		}

		// struct FSkeletalMeshComponentClothTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentClothTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentClothTickFunction, UnknownData_A446, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentClothTickFunction, 0x0030);
		}

		// struct FSkeletalMeshComponentEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentEndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentEndPhysicsTickFunction, UnknownData_I10R, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentEndPhysicsTickFunction, 0x0030);
		}

		// struct FCustomChannelSetup
		TEST_METHOD(ScriptStruct__Engine__CustomChannelSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, DefaultResponse, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bTraceType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bStaticObject, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomChannelSetup, 0x000C);
		}

		// struct FRedirector
		TEST_METHOD(ScriptStruct__Engine__Redirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, OldName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, NewName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRedirector, 0x0010);
		}

		// struct FRollbackNetStartupActorInfo
		TEST_METHOD(ScriptStruct__Engine__RollbackNetStartupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_O0OF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Archetype, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_1BNR, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Level, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_9UPQ, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, ObjReferences, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRollbackNetStartupActorInfo, 0x00B0);
		}

		// struct FMulticastRecordOptions
		TEST_METHOD(ScriptStruct__Engine__MulticastRecordOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, FuncPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, bServerSkip, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, bClientSkip, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, UnknownData_YTFO, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMulticastRecordOptions, 0x0018);
		}

		// struct FTextureLODGroup
		TEST_METHOD(ScriptStruct__Engine__TextureLODGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_HYRZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smaller, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smallest, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_IW1O, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, NumStreamedMips, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipGenSettings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_Q59I, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinLODSize, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smaller, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smallest, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalLODBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalMaxLODSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_6WJW, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinMagFilter, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipFilter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipLoadOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, DuplicateNonOptionalMips, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_BW36, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureLODGroup, 0x0054);
		}

		// struct FSolverIterations
		TEST_METHOD(ScriptStruct__Engine__SolverIterations)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, SolverIterations, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, JointIterations, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, CollisionIterations, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, SolverPushOutIterations, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, JointPushOutIterations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, CollisionPushOutIterations, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverIterations, 0x0018);
		}

		// struct FPhysicalAnimationData
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, BodyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, UnknownData_EUOM, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, OrientationStrength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, AngularVelocityStrength, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, PositionStrength, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, VelocityStrength, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxLinearForce, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxAngularForce, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationData, 0x0024);
		}

		// struct FAudioEQEffect : public FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioEQEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, UnknownData_BZOE, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain0, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth0, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter1, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain2, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter3, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain3, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth3, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEQEffect, 0x0040);
		}

		// struct FSoundClassAdjuster
		TEST_METHOD(ScriptStruct__Engine__SoundClassAdjuster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, SoundClassObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VolumeAdjuster, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, PitchAdjuster, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, LowPassFilterFrequency, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_H57E, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VoiceCenterChannelVolumeAdjuster, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_HHOE, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassAdjuster, 0x0020);
		}

		// struct FVectorCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__VectorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorCurve, FloatCurves, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorCurve, 0x0198);
		}

		// struct FTransformCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__TransformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, TranslationCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, RotationCurve, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, ScaleCurve, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformCurve, 0x04E0);
		}

		// struct FSlotEvaluationPose
		TEST_METHOD(ScriptStruct__Engine__SlotEvaluationPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, AdditiveType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_ISD1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, Weight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_E1L4, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotEvaluationPose, 0x0040);
		}

		// struct FTextSizingParameters
		TEST_METHOD(ScriptStruct__Engine__TextSizingParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawXL, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawYL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, Scaling, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawFont, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, SpacingAdjust, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextSizingParameters, 0x0028);
		}

		// struct FEdGraphPinReference
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, OwningNode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, PinID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinReference, 0x0018);
		}

		// struct FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, UnknownData_9WYJ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescription, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, TooltipDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Category, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Keywords, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Grouping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SectionID, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescriptionArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchTitlesArray, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchKeywordsArray, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchCategoryArray, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedMenuDescriptionArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchTitlesArray, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchKeywordsArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchCategoryArray, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SearchText, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction, 0x0100);
		}

		// struct FEdGraphSchemaAction_NewNode : public FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction_NewNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction_NewNode, NodeTemplate, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction_NewNode, 0x0108);
		}

		// struct FPointDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__PointDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, Damage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, ShotDirection, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, HitInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointDamageEvent, 0x00A8);
		}

		// struct FPOV
		TEST_METHOD(ScriptStruct__Engine__POV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, FOV, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPOV, 0x001C);
		}

		// struct FAnimUpdateRateParameters
		TEST_METHOD(ScriptStruct__Engine__AnimUpdateRateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_1JNT, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, ShiftBucket, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_YS1F, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UpdateRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, EvaluationRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, TickedPoseOffestTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, AdditionalTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_2RW9, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseNonRenderedUpdateRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, MaxEvalRateForInterpolation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseVisibleDistanceFactorThesholds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, LODToFrameSkipMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedUpdateFrames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedEvalFrames, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimUpdateRateParameters, 0x0088);
		}

		// struct FAnimSlotDesc
		TEST_METHOD(ScriptStruct__Engine__AnimSlotDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, NumChannels, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotDesc, 0x000C);
		}

		// struct FAnimSlotInfo
		TEST_METHOD(ScriptStruct__Engine__AnimSlotInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, ChannelWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotInfo, 0x0018);
		}

		// struct FMTDResult
		TEST_METHOD(ScriptStruct__Engine__MTDResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Direction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Distance, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMTDResult, 0x0010);
		}

		// struct FOverlapResult
		TEST_METHOD(ScriptStruct__Engine__OverlapResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Component, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_Q67F, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_B738, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlapResult, 0x0018);
		}

		// struct FSwarmDebugOptions
		TEST_METHOD(ScriptStruct__Engine__SwarmDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwarmDebugOptions, UnknownData_Z3DB, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSwarmDebugOptions, 0x0004);
		}

		// struct FLightmassDebugOptions
		TEST_METHOD(ScriptStruct__Engine__LightmassDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_NXME, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, CoplanarTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_2X7F, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, ExecutionTimeDivisor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDebugOptions, 0x0010);
		}

		// struct FRootMotionSource_JumpForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_JumpForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Rotation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Distance, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Height, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, bDisableTimeout, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_ZRJV, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, PathOffsetCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, TimeMappingCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_HQ8B, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_JumpForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToDynamicForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToDynamicForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, InitialTargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TargetLocation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, bRestrictSpeedToExpected, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, UnknownData_FFNO, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, PathOffsetCurve, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TimeMappingCurve, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToDynamicForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, TargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, bRestrictSpeedToExpected, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, UnknownData_519Y, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, PathOffsetCurve, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToForce, 0x00C0);
		}

		// struct FBlueprintComponentDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, ComponentPropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, DelegatePropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentDelegateBinding, 0x0018);
		}

		// struct FAnimControlTrackKey
		TEST_METHOD(ScriptStruct__Engine__AnimControlTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_2DY9, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimStartOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimEndOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_R5KT, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimControlTrackKey, 0x0020);
		}

		// struct FBoolTrackKey
		TEST_METHOD(ScriptStruct__Engine__BoolTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, UnknownData_4DBQ, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolTrackKey, 0x0008);
		}

		// struct FDirectorTrackCut
		TEST_METHOD(ScriptStruct__Engine__DirectorTrackCut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TransitionTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TargetCamGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, ShotNumber, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectorTrackCut, 0x0014);
		}

		// struct FEventTrackKey
		TEST_METHOD(ScriptStruct__Engine__EventTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, EventName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventTrackKey, 0x000C);
		}

		// struct FGPUSpriteEmitterInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteEmitterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, RequiredModule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnPerUnitModule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModules, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_NALF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LocalVectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, VectorFieldScale, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DragCoefficient, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, Resilience, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ConstantAcceleration, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorPosition, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorRadiusSq, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetBase, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetRange, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvMaxSize, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvRotationRateScale, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxLifetime, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxParticleCount, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ScreenAlignment, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LockAxisFlag, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_UA6B, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_1XVB, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, CollisionMode, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_YBP7, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_BMQ0, 0x0175);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MinFacingCameraBlendDistance, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxFacingCameraBlendDistance, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColor, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlpha, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColorScale, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlphaScale, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_8B40, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteEmitterInfo, 0x0280);
		}

		// struct FCollectionReference
		TEST_METHOD(ScriptStruct__Engine__CollectionReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionReference, CollectionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionReference, 0x0008);
		}

		// struct FSkinWeightProfileInfo
		TEST_METHOD(ScriptStruct__Engine__SkinWeightProfileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, DefaultProfile, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, UnknownData_TFDA, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, DefaultProfileFromLODIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkinWeightProfileInfo, 0x0010);
		}

		// struct FStatColorMapEntry
		TEST_METHOD(ScriptStruct__Engine__StatColorMapEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, In, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, Out, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapEntry, 0x0008);
		}

		// struct FStatColorMapping
		TEST_METHOD(ScriptStruct__Engine__StatColorMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, StatName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, ColorMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, UnknownData_ECBD, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapping, 0x0028);
		}

		// struct FCollectionVectorParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionVectorParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionVectorParameter, 0x0028);
		}

		// struct FNavigationLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Left, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Right, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLink, 0x0048);
		}

		// struct FVector4Distribution
		TEST_METHOD(ScriptStruct__Engine__Vector4Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4Distribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4Distribution, 0x0020);
		}

		// struct FFloatRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__FloatRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRK4SpringInterpolator, 0x0008);
		}

		// struct FVectorRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__VectorRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorRK4SpringInterpolator, 0x0008);
		}

		// struct FFormatArgumentData
		TEST_METHOD(ScriptStruct__Engine__FormatArgumentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_QZL7, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueInt, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueFloat, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueGender, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_ZPR2, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFormatArgumentData, 0x0040);
		}

		// struct FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__MaterialInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, ExpressionName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInput, 0x000C);
		}

		// struct FVector2MaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__Vector2MaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2MaterialInput, 0x000C);
		}

		// struct FBranchingPointNotifyPayload
		TEST_METHOD(ScriptStruct__Engine__BranchingPointNotifyPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointNotifyPayload, UnknownData_CSJF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointNotifyPayload, 0x0020);
		}

		// struct FExponentialHeightFogData
		TEST_METHOD(ScriptStruct__Engine__ExponentialHeightFogData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogDensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogHeightFalloff, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogHeightOffset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExponentialHeightFogData, 0x000C);
		}

		// struct FFontCharacter
		TEST_METHOD(ScriptStruct__Engine__FontCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, USize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, TextureIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, UnknownData_D2NQ, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VerticalOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontCharacter, 0x0018);
		}

		// struct FFontImportOptionsData
		TEST_METHOD(ScriptStruct__Engine__FontImportOptionsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, FontName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Height, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_PT96, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharacterSet, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_3U79, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Chars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnicodeRange, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFilePath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFileWildcard, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_7DW5, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ForegroundColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_E9S7, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageWidth, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageMaxHeight, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, XPadding, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, YPadding, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxTop, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxBottom, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxRight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxLeft, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_QJO7, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Kerning, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_O6PY, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScaleFactor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScanRadiusScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_NIUC, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontImportOptionsData, 0x00B0);
		}

		// struct FForceFeedbackAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackAttenuationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackAttenuationSettings, 0x00B0);
		}

		// struct FVirtualTextureSpacePoolConfig
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureSpacePoolConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, MinTileSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, MaxTileSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, Formats, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, SizeInMegabyte, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, bAllowSizeScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, UnknownData_4AD5, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureSpacePoolConfig, 0x0020);
		}

		// struct FForceFeedbackChannelDetails
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackChannelDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, UnknownData_T45H, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, Curve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackChannelDetails, 0x0090);
		}

		// struct FComponentKey
		TEST_METHOD(ScriptStruct__Engine__ComponentKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, OwnerClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, SCSVariableName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, AssociatedGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentKey, 0x0020);
		}

		// struct FComponentOverrideRecord
		TEST_METHOD(ScriptStruct__Engine__ComponentOverrideRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentKey, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, CookedComponentInstancingData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentOverrideRecord, 0x0078);
		}

		// struct FBlueprintInputActionDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputActionName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputKeyEvent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, UnknownData_NIO2, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputActionDelegateBinding, 0x0018);
		}

		// struct FBlueprintInputAxisKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, UnknownData_NWAD, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, AxisKey, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, FunctionNameToBind, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisKeyDelegateBinding, 0x0028);
		}

		// struct FParticleRandomSeedInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleRandomSeedInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, UnknownData_5I84, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, RandomSeeds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleRandomSeedInfo, 0x0020);
		}

		// struct FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConstraintBaseParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Restitution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, ContactDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, UnknownData_T51R, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintBaseParams, 0x0014);
		}

		// struct FLinearConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__LinearConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, Limit, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, XMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, YMotion, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, ZMotion, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, UnknownData_3LG1, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearConstraint, 0x001C);
		}

		// struct FConeConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConeConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1LimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2LimitDegrees, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1Motion, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2Motion, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, UnknownData_AK6S, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConeConstraint, 0x0020);
		}

		// struct FTwistConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__TwistConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistLimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, UnknownData_SA82, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwistConstraint, 0x001C);
		}

		// struct FConstraintDrive
		TEST_METHOD(ScriptStruct__Engine__ConstraintDrive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, MaxForce, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, UnknownData_GS78, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDrive, 0x0010);
		}

		// struct FLinearDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__LinearDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, PositionTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, VelocityTarget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, XDrive, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, YDrive, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, ZDrive, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, UnknownData_YEES, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearDriveConstraint, 0x004C);
		}

		// struct FAngularDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__AngularDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, TwistDrive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SwingDrive, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SlerpDrive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, OrientationTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularVelocityTarget, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularDriveMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, UnknownData_6UBC, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularDriveConstraint, 0x004C);
		}

		// struct FConstraintProfileProperties
		TEST_METHOD(ScriptStruct__Engine__ConstraintProfileProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionLinearTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionAngularTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearBreakThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularBreakThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearLimit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ConeLimit, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, TwistLimit, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearDrive, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularDrive, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, UnknownData_FZ4L, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintProfileProperties, 0x0104);
		}

		// struct FConstraintInstance
		TEST_METHOD(ScriptStruct__Engine__ConstraintInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_1SER, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, JointName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis1, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos2, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis2, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularRotationOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_L8F3, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ProfileInstance, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_Y63H, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintInstance, 0x01B8);
		}

		// struct FPhysicsConstraintProfileHandle
		TEST_METHOD(ScriptStruct__Engine__PhysicsConstraintProfileHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileProperties, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileName, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsConstraintProfileHandle, 0x010C);
		}

		// struct FSoundClassProperties
		TEST_METHOD(ScriptStruct__Engine__SoundClassProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Volume, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Pitch, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LowPassFilterFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, AttenuationDistanceScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, StereoBleed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LFEBleed, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, VoiceCenterChannelVolume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolume, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolumeThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_3JMG, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Default2DReverbSendAmount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, OutputTarget, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LoadingBehavior, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_8Z69, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, DefaultSubmix, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_PDMQ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassProperties, 0x0058);
		}

		// struct FPassiveSoundMixModifier
		TEST_METHOD(ScriptStruct__Engine__PassiveSoundMixModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, SoundMix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MinVolumeThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MaxVolumeThreshold, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPassiveSoundMixModifier, 0x0010);
		}

		// struct FNetViewer
		TEST_METHOD(ScriptStruct__Engine__NetViewer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, Connection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, InViewer, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewTarget, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewDir, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetViewer, 0x0030);
		}

		// struct FVectorDistribution
		TEST_METHOD(ScriptStruct__Engine__VectorDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorDistribution, 0x0020);
		}

		// struct FInputActionSpeechMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionSpeechMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionSpeechMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionSpeechMapping, SpeechKeyword, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionSpeechMapping, 0x0010);
		}

		// struct FRigidBodyErrorCorrection
		TEST_METHOD(ScriptStruct__Engine__RigidBodyErrorCorrection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingExtrapolation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingLimit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerLinearDifference, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerAngularDifference, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxRestoredStateError, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxLinearHardSnapDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PositionLerp, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngleLerp, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, LinearVelocityCoefficient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngularVelocityCoefficient, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationDistanceSq, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSimilarity, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyErrorCorrection, 0x0034);
		}

		// struct FPhysicalSurfaceName
		TEST_METHOD(ScriptStruct__Engine__PhysicalSurfaceName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, UnknownData_N7KE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalSurfaceName, 0x000C);
		}

		// struct FBroadphaseSettings
		TEST_METHOD(ScriptStruct__Engine__BroadphaseSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnClient, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnServer, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOuterBounds, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, UnknownData_NZVH, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPBounds, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPOuterBounds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPNumSubdivs, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBroadphaseSettings, 0x0040);
		}

		// struct FChaosPhysicsSettings
		TEST_METHOD(ScriptStruct__Engine__ChaosPhysicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DefaultThreadingModel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DedicatedThreadTickMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DedicatedThreadBufferMode, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosPhysicsSettings, 0x0003);
		}

		// struct FCameraCacheEntry
		TEST_METHOD(ScriptStruct__Engine__CameraCacheEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, UnknownData_I5K6, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, POV, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCacheEntry, 0x05E0);
		}

		// struct FInputAxisKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputAxisKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, AxisName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, UnknownData_2ZXY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisKeyMapping, 0x0028);
		}

		// struct FPrimitiveMaterialRef
		TEST_METHOD(ScriptStruct__Engine__PrimitiveMaterialRef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Primitive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Decal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, ElementIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, UnknownData_1O12, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveMaterialRef, 0x0018);
		}

		// struct FAnimNode_Inertialization : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Inertialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Inertialization, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Inertialization, UnknownData_CI2S, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Inertialization, 0x0070);
		}

		// struct FInertializationPoseDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationPoseDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationPoseDiff, UnknownData_HDWZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationPoseDiff, 0x0028);
		}

		// struct FInertializationCurveDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationCurveDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationCurveDiff, UnknownData_ROFX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationCurveDiff, 0x0008);
		}

		// struct FInertializationBoneDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationBoneDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationBoneDiff, UnknownData_GWJC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationBoneDiff, 0x003C);
		}

		// struct FInertializationPose
		TEST_METHOD(ScriptStruct__Engine__InertializationPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationPose, UnknownData_42OG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationPose, 0x0090);
		}

		// struct FAnimNode_LinkedAnimGraph : public FAnimNode_CustomProperty
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedAnimGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InputPoses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InputPoseNames, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InstanceClass, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, Tag, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, UnknownData_6SIN, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, UnknownData_IE7A, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedAnimGraph, 0x00A0);
		}

		// struct FAnimNode_LinkedAnimLayer : public FAnimNode_LinkedAnimGraph
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedAnimLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimLayer, Interface, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimLayer, Layer, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedAnimLayer, 0x00B0);
		}

		// struct FInstancedStaticMeshLightMapInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshLightMapInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshLightMapInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshLightMapInstanceData, MapBuildDataIds, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshLightMapInstanceData, 0x0040);
		}

		// struct FScalarMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ScalarMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarMaterialInput, 0x000C);
		}

		// struct FVectorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__VectorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorMaterialInput, 0x000C);
		}

		// struct FColorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ColorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorMaterialInput, 0x000C);
		}

		// struct FMaterialShadingModelField
		TEST_METHOD(ScriptStruct__Engine__MaterialShadingModelField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialShadingModelField, ShadingModelField, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialShadingModelField, 0x0002);
		}

		// struct FMaterialAttributesInput : public FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__MaterialAttributesInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialAttributesInput, PropertyConnectedBitmask, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialAttributesInput, 0x0010);
		}

		// struct FShadingModelMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ShadingModelMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShadingModelMaterialInput, 0x000C);
		}

		// struct FMaterialFunctionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialFunctionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, Function, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialFunctionInfo, 0x0018);
		}

		// struct FMaterialParameterCollectionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterCollectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, ParameterCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterCollectionInfo, 0x0018);
		}

		// struct FMaterialCachedExpressionData
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedExpressionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, Parameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, ReferencedTextures, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, FunctionInfos, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, ParameterCollectionInfos, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DefaultLayers, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DefaultLayerBlends, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, GrassTypes, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DynamicParameterNames, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, QualityLevelsUsed, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, UnknownData_1US5, 0x0221);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedExpressionData, 0x0228);
		}

		// struct FInterpGroupActorInfo
		TEST_METHOD(ScriptStruct__Engine__InterpGroupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, Actors, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpGroupActorInfo, 0x0018);
		}

		// struct FCameraCutInfo
		TEST_METHOD(ScriptStruct__Engine__CameraCutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Timestamp, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCutInfo, 0x0010);
		}

		// struct FPurchaseInfo
		TEST_METHOD(ScriptStruct__Engine__PurchaseInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayPrice, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseInfo, 0x0040);
		}

		// struct FStaticMaterial
		TEST_METHOD(ScriptStruct__Engine__StaticMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, ImportedMaterialSlotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UVChannelData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UnknownData_G7PZ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterial, 0x0030);
		}

		// struct FEmitterDynamicParameter
		TEST_METHOD(ScriptStruct__Engine__EmitterDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_48V7, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ValueMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_3TCT, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_6UHY, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterDynamicParameter, 0x0048);
		}

		// struct FParticleBurst
		TEST_METHOD(ScriptStruct__Engine__ParticleBurst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, CountLow, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleBurst, 0x000C);
		}

		// struct FClusterNode
		TEST_METHOD(ScriptStruct__Engine__ClusterNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastInstance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MinInstanceScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MaxInstanceScale, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode, 0x0040);
		}

		// struct FClusterNode_DEPRECATED
		TEST_METHOD(ScriptStruct__Engine__ClusterNode_DEPRECATED)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastInstance, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode_DEPRECATED, 0x0028);
		}

		// struct FImportanceTexture
		TEST_METHOD(ScriptStruct__Engine__ImportanceTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, NumMips, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_M4X4, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, MarginalCDF, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, ConditionalCDF, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, TextureData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Texture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Weighting, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_KBSN, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportanceTexture, 0x0050);
		}

		// struct FInstancedStaticMeshComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, StaticMesh, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, CachedStaticLighting, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, PerInstanceSMData, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, PerInstanceSMCustomData, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, UnknownData_0LTZ, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, InstancingRandomSeed, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, UnknownData_H3IN, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshComponentInstanceData, 0x0140);
		}

		// struct FIntegralKey
		TEST_METHOD(ScriptStruct__Engine__IntegralKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralKey, 0x0008);
		}

		// struct FIntegralCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IntegralCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, Keys, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, DefaultValue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, bUseDefaultValueBeforeFirstKey, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, UnknownData_XCNI, 0x007D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralCurve, 0x0080);
		}

		// struct FInterpEdSelKey
		TEST_METHOD(ScriptStruct__Engine__InterpEdSelKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Track, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, KeyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, UnsnappedPosition, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpEdSelKey, 0x0018);
		}

		// struct FCameraPreviewInfo
		TEST_METHOD(ScriptStruct__Engine__CameraPreviewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnInst, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraPreviewInfo, 0x0030);
		}

		// struct FSubTrackGroup
		TEST_METHOD(ScriptStruct__Engine__SubTrackGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, TrackIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, UnknownData_2YX3, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubTrackGroup, 0x0028);
		}

		// struct FSupportedSubTrackInfo
		TEST_METHOD(ScriptStruct__Engine__SupportedSubTrackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SupportedClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SubTrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, GroupIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, UnknownData_AQEP, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedSubTrackInfo, 0x0020);
		}

		// struct FVectorSpringState
		TEST_METHOD(ScriptStruct__Engine__VectorSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorSpringState, UnknownData_HWZY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorSpringState, 0x0018);
		}

		// struct FFloatSpringState
		TEST_METHOD(ScriptStruct__Engine__FloatSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatSpringState, UnknownData_MCZT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatSpringState, 0x0008);
		}

		// struct FDrawToRenderTargetContext
		TEST_METHOD(ScriptStruct__Engine__DrawToRenderTargetContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, RenderTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, UnknownData_UCNV, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDrawToRenderTargetContext, 0x0010);
		}

		// struct FLatentActionManager
		TEST_METHOD(ScriptStruct__Engine__LatentActionManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionManager, UnknownData_ZB31, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionManager, 0x0060);
		}

		// struct FLevelSimplificationDetails
		TEST_METHOD(ScriptStruct__Engine__LevelSimplificationDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bCreatePackagePerAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_NFZL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, DetailsPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, StaticMeshMaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bOverrideLandscapeExportLOD, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_K6MF, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeExportLOD, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeMaterialSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeFoliageToLandscape, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeGrassToLandscape, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshNormalMap, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshMetallicMap, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshRoughnessMap, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshSpecularMap, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeNormalMap, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeMetallicMap, 0x0127);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeRoughnessMap, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeSpecularMap, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_H466, 0x012A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSimplificationDetails, 0x012C);
		}

		// struct FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__StreamableTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamableTextureInstance, UnknownData_0HWY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamableTextureInstance, 0x0028);
		}

		// struct FDynamicTextureInstance : public FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__DynamicTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, Texture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, bAttached, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, UnknownData_M4AY, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, OriginalRadius, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicTextureInstance, 0x0038);
		}

		// struct FPrecomputedLightInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrecomputedLightInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, UnknownData_VAEE, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, Transform, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, LightGuid, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, PreviewShadowMapChannel, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, UnknownData_PWYV, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrecomputedLightInstanceData, 0x0100);
		}

		// struct FBatchedPoint
		TEST_METHOD(ScriptStruct__Engine__BatchedPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, PointSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, RemainingLifeTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, DepthPriority, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, UnknownData_JV4W, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedPoint, 0x0028);
		}

		// struct FBatchedLine
		TEST_METHOD(ScriptStruct__Engine__BatchedLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, End, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Color, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Thickness, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, RemainingLifeTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, DepthPriority, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, UnknownData_8LSE, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedLine, 0x0034);
		}

		// struct FClientReceiveData
		TEST_METHOD(ScriptStruct__Engine__ClientReceiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, LocalPC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, UnknownData_D8HN, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, OptionalObject, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReceiveData, 0x0040);
		}

		// struct FParameterGroupData
		TEST_METHOD(ScriptStruct__Engine__ParameterGroupData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupSortPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, UnknownData_Z38E, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterGroupData, 0x0018);
		}

		// struct FParameterChannelNames
		TEST_METHOD(ScriptStruct__Engine__ParameterChannelNames)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, G, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, B, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, A, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterChannelNames, 0x0060);
		}

		// struct FFunctionExpressionInput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, Input, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, UnknownData_PBH0, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionInput, 0x0030);
		}

		// struct FScalarParameterAtlasInstanceData
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterAtlasInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, bIsUsedAsAtlasPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, UnknownData_BZ9Z, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Curve, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Atlas, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterAtlasInstanceData, 0x0058);
		}

		// struct FMemberReference
		TEST_METHOD(ScriptStruct__Engine__MemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberScope, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberGuid, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bSelfContext, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bWasDeprecated, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, UnknownData_7YL0, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMemberReference, 0x0038);
		}

		// struct FMeshInstancingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshInstancingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ActorClassToUse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, InstanceReplacementThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, MeshReplacementMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bSkipMeshesWithVertexColors, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bUseHLODVolumes, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, UnknownData_RDCY, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ISMComponentToUse, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshInstancingSettings, 0x0018);
		}

		// struct FPhysicalAnimationProfile
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, PhysicalAnimationData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationProfile, 0x002C);
		}

		// struct FConstrainComponentPropName
		TEST_METHOD(ScriptStruct__Engine__ConstrainComponentPropName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstrainComponentPropName, ComponentName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstrainComponentPropName, 0x0008);
		}

		// struct FSourceEffectChainEntry
		TEST_METHOD(ScriptStruct__Engine__SourceEffectChainEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, Preset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, UnknownData_J4SZ, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChainEntry, 0x0010);
		}

		// struct FSoundGroup
		TEST_METHOD(ScriptStruct__Engine__SoundGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, SoundGroup, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_Q9SG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_RU9V, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DecompressedDuration, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundGroup, 0x0020);
		}

		// struct FSplineInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SplineInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, bSplineHasBeenEdited, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, UnknownData_5X4S, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, SplineCurves, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, SplineCurvesPreUCS, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineInstanceData, 0x0180);
		}

		// struct FSplinePoint
		TEST_METHOD(ScriptStruct__Engine__SplinePoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, InputKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Position, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Scale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Type, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, UnknownData_TU8I, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplinePoint, 0x0044);
		}

		// struct FModulatorContinuousParams
		TEST_METHOD(ScriptStruct__Engine__ModulatorContinuousParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, Default, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxInput, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinOutput, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxOutput, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParamMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, UnknownData_UC3B, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModulatorContinuousParams, 0x0020);
		}

		// struct FAssetEditorOrbitCameraPosition
		TEST_METHOD(ScriptStruct__Engine__AssetEditorOrbitCameraPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, bIsSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, UnknownData_709I, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitPoint, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitZoom, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitRotation, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetEditorOrbitCameraPosition, 0x0028);
		}

		// struct FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2Pose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2Pose, Bones, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2Pose, 0x0010);
		}

		// struct FA2CSPose : public FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2CSPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, UnknownData_PXM8, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, ComponentSpaceFlags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2CSPose, 0x0028);
		}

		// struct FRadialDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__RadialDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Params, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Origin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, ComponentHits, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageEvent, 0x0040);
		}

		// struct FStringCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__StringCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, Keys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurve, 0x0088);
		}

		// struct FTextureFormatSettings
		TEST_METHOD(ScriptStruct__Engine__TextureFormatSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureFormatSettings, CompressionSettings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureFormatSettings, 0x0002);
		}

		// struct FTexturePlatformData
		TEST_METHOD(ScriptStruct__Engine__TexturePlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturePlatformData, UnknownData_VFV1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTexturePlatformData, 0x0030);
		}

		// struct FTextureSource
		TEST_METHOD(ScriptStruct__Engine__TextureSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSource, UnknownData_KFP7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSource, 0x0038);
		}

		// struct FTextureSourceBlock
		TEST_METHOD(ScriptStruct__Engine__TextureSourceBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, BlockX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, BlockY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, SizeX, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, SizeY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, NumSlices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, NumMips, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSourceBlock, 0x0018);
		}

		// struct FStreamingRenderAssetPrimitiveInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingRenderAssetPrimitiveInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, RenderAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, Bounds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, TexelFactor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, PackedRelativeBox, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, UnknownData_NYZ9, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingRenderAssetPrimitiveInfo, 0x0030);
		}

		// struct FTimeStretchCurveInstance
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, bHasValidData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, UnknownData_5OB2, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveInstance, 0x0030);
		}

		// struct FLightScenarioAreaMapInfo
		TEST_METHOD(ScriptStruct__Engine__LightScenarioAreaMapInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightScenarioAreaMapInfo, scenarioLevels, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightScenarioAreaMapInfo, 0x0050);
		}

		// struct FEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__EndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndPhysicsTickFunction, UnknownData_JHGZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEndPhysicsTickFunction, 0x0030);
		}

		// struct FStartPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__StartPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartPhysicsTickFunction, UnknownData_H4G0, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartPhysicsTickFunction, 0x0030);
		}

		// struct FLevelViewportInfo
		TEST_METHOD(ScriptStruct__Engine__LevelViewportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamRotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamOrthoZoom, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamUpdated, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, UnknownData_Q5B3, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelViewportInfo, 0x0020);
		}

		// struct FLightmassWorldInfoSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassWorldInfoSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, StaticLightingLevelScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumIndirectLightingBounces, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumSkyLightingBounces, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingQuality, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingSmoothness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentIntensity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EmissiveBoost, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DiffuseBoost, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightingMethod, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_21PO, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapDetailCellSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapMaximumBrickMemoryMb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapSphericalHarmonicSmoothing, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightSamplePlacementScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DirectIlluminationOcclusionFraction, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectIlluminationOcclusionFraction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, OcclusionExponent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, FullyOccludedSamplesFraction, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, MaxOcclusionDistance, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassWorldInfoSettings, 0x004C);
		}

		// struct FAppleImageUtilsImageConversionResult
		TEST_METHOD(ScriptStruct__AppleImageUtils__AppleImageUtilsImageConversionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleImageUtilsImageConversionResult, Error, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleImageUtilsImageConversionResult, ImageData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAppleImageUtilsImageConversionResult, 0x0020);
		}

		// struct FS_Elevator_Levels
		TEST_METHOD(UserDefinedStruct__S_Elevator_Levels__S_Elevator_Levels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Levels, Levels_12_DC0C3772429EA728E351358C8345CE72, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Levels, LevelsVisible_30_718555F64E0E9C1837F4F39B1EC0C800, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_Elevator_Levels, 0x0020);
		}

		// struct FSHAHashData
		TEST_METHOD(ScriptStruct__BuildPatchServices__SHAHashData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSHAHashData, Hash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSHAHashData, 0x0014);
		}

		// struct FCustomFieldData
		TEST_METHOD(ScriptStruct__BuildPatchServices__CustomFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomFieldData, 0x0020);
		}

		// struct FChunkInfoData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkInfoData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Hash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, ShaHash, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_2188, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, FileSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, GroupNumber, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_BW2A, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkInfoData, 0x0040);
		}

		// struct FChunkPartData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkPartData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Offset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Size, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkPartData, 0x0018);
		}

		// struct FFileManifestData
		TEST_METHOD(ScriptStruct__BuildPatchServices__FileManifestData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, Filename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileHash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_TGU7, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileChunkParts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, InstallTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsUnixExecutable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_LJT1, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, SymlinkTarget, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsReadOnly, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsCompressed, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_CU4X, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFileManifestData, 0x0068);
		}

		// struct FPointWeightMap
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__PointWeightMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointWeightMap, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointWeightMap, 0x0010);
		}

		// struct FClothConstraintSetup_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothConstraintSetup_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetup_Legacy, 0x0010);
		}

		// struct FClothConfig_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothConfig_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, UnknownData_04W5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, VerticalConstraintConfig, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, HorizontalConstraintConfig, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, BendConstraintConfig, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, ShearConstraintConfig, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionCullScale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, Damping, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, Friction, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindDragCoefficient, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindLiftCoefficient, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, LinearDrag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AngularDrag, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, LinearInertiaScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AngularInertiaScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, CentrifugalInertiaScale, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SolverFrequency, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, StiffnessFrequency, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, GravityScale, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, GravityOverride, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, bUseGravityOverride, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, UnknownData_HIYJ, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, TetherStiffness, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, TetherLimit, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, CollisionThickness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AnimDriveSpringStiffness, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AnimDriveDamperStiffness, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConfig_Legacy, 0x00D4);
		}

		// struct FClothPhysicalMeshData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothPhysicalMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Vertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Normals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Indices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, WeightMaps, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, InverseMasses, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BoneData, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxBoneWeights, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, NumFixedVerts, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, SelfCollisionIndices, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxDistances, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopDistances, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopRadiuses, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, AnimDriveMultipliers, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicalMeshData, 0x00F8);
		}

		// struct FClothLODDataCommon
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothLODDataCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, PhysicalMeshData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, CollisionData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, UnknownData_BG2M, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothLODDataCommon, 0x0158);
		}

		// struct FClothParameterMask_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothParameterMask_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MaskName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, CurrentTarget, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_PS9W, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MaxValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MinValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_RABE, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, bEnabled, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_5UYU, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothParameterMask_Legacy, 0x0030);
		}

		// struct FAnimBP_BaseInteractionSetting
		TEST_METHOD(UserDefinedStruct__AnimBP_BaseInteractionSetting__AnimBP_BaseInteractionSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBP_BaseInteractionSetting, Enable_1_5C4577F14F311C2AC89579B804160B9B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBP_BaseInteractionSetting, UnknownData_LG92, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBP_BaseInteractionSetting, Base_8_A2755E1C41572732C820DB83A2ADA932, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBP_BaseInteractionSetting, 0x0030);
		}

		// struct FUdpMockMessage
		TEST_METHOD(ScriptStruct__UdpMessaging__UdpMockMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUdpMockMessage, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUdpMockMessage, 0x0010);
		}

		// struct FFNAFRayTraceQualitySettings
		TEST_METHOD(UserDefinedStruct__FNAFRayTraceQualitySettings__FNAFRayTraceQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFRayTraceQualitySettings, QualityCommand_2_C7DD91854562814E8D8E86B7724E319A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFRayTraceQualitySettings, UnknownData_XHNB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFRayTraceQualitySettings, Low_11_DB36ADC840CE017840C1D1AA7EBFA73A, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFRayTraceQualitySettings, Medium_12_4646F7154FBB94FF5F4D02A8031478B9, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFRayTraceQualitySettings, High_13_20A2DD094E903BC1888A79976F3D4226, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFNAFRayTraceQualitySettings, 0x0038);
		}

		// struct FKey
		TEST_METHOD(ScriptStruct__InputCore__Key)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, KeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, UnknownData_KS2S, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKey, 0x0018);
		}

		// struct FTrackRenderData
		TEST_METHOD(ScriptStruct__GeometryCache__TrackRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackRenderData, UnknownData_GLX5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackRenderData, 0x0070);
		}

		// struct FGeometryCacheMeshData
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshData, UnknownData_9658, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshData, 0x00A8);
		}

		// struct FGeometryCacheVertexInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheVertexInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheVertexInfo, UnknownData_ZN91, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheVertexInfo, 0x0008);
		}

		// struct FGeometryCacheMeshBatchInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshBatchInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshBatchInfo, UnknownData_C34J, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshBatchInfo, 0x000C);
		}

		// struct FMaterialQualityOverrides
		TEST_METHOD(ScriptStruct__MaterialShaderQualitySettings__MaterialQualityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDiscardQualityDuringCook, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bEnableOverride, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceFullyRough, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceNonMetal, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisableLMDirectionality, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceLQReflections, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisablePreintegratedGF, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDisableMaterialNormalCalculation, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, MobileCSMQuality, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialQualityOverrides, 0x0009);
		}

		// struct FXRDeviceId
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRDeviceId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, SystemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, DeviceID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRDeviceId, 0x000C);
		}

		// struct FMovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, GeometryCacheAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, FirstLoopStartFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, StartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, EndFrameOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, PlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, UnknownData_16U9, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, StartOffset, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, EndOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, UnknownData_WP6T, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, GeometryCache, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheParams, 0x0040);
		}

		// struct FMovieSceneGeometryCacheSectionTemplateParameters : public FMovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionEndTime, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplateParameters, 0x0048);
		}

		// struct FMovieSceneGeometryCacheSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplate, 0x0068);
		}

		// struct FImageWriteOptions
		TEST_METHOD(ScriptStruct__ImageWriteQueue__ImageWriteOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, Format, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_YZ3R, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, OnComplete, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, CompressionQuality, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bOverwriteFile, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bAsync, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_8X39, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImageWriteOptions, 0x0060);
		}

		// struct FMyPluginStruct
		TEST_METHOD(ScriptStruct__UObjectPlugin__MyPluginStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMyPluginStruct, TestString, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMyPluginStruct, 0x0010);
		}

		// struct FFNAFAISettingInfo
		TEST_METHOD(ScriptStruct__fnaf9__FNAFAISettingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFAISettingInfo, StandardType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFAISettingInfo, ShatteredType, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFNAFAISettingInfo, 0x0030);
		}

		// struct FDoorEntryRequirements
		TEST_METHOD(ScriptStruct__fnaf9__DoorEntryRequirements)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoorEntryRequirements, RestrictedPawns, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoorEntryRequirements, PawnIgnoresConditions, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoorEntryRequirements, RequiredSecurityLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoorEntryRequirements, RequiredInventoryItem, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoorEntryRequirements, ConditionDirection, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoorEntryRequirements, bInitiallyLockedPlayer, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoorEntryRequirements, bInitiallyLockedAI, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoorEntryRequirements, bStartOpen, 0x002F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoorEntryRequirements, bIsAutomaticDoorForPlayer, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoorEntryRequirements, bIsAutomaticDoorForAI, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoorEntryRequirements, UnknownData_CCC9, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDoorEntryRequirements, 0x0038);
		}

		// struct FPawnInDoorwayInfo
		TEST_METHOD(ScriptStruct__fnaf9__PawnInDoorwayInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnInDoorwayInfo, UnknownData_0FIQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnInDoorwayInfo, 0x0001);
		}

		// struct FFNAFEventSystemData
		TEST_METHOD(ScriptStruct__fnaf9__FNAFEventSystemData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFEventSystemData, UnknownData_9AIR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFNAFEventSystemData, 0x0050);
		}

		// struct FAnimatronicState
		TEST_METHOD(ScriptStruct__fnaf9__AnimatronicState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimatronicState, PathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimatronicState, bIsShattered, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimatronicState, UnknownData_4XKY, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimatronicState, 0x000C);
		}

		// struct FBalloonWorldSaveData
		TEST_METHOD(ScriptStruct__fnaf9__BalloonWorldSaveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBalloonWorldSaveData, HighScore, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBalloonWorldSaveData, Played, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBalloonWorldSaveData, Glitched, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBalloonWorldSaveData, UnknownData_B9Z6, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBalloonWorldSaveData, 0x0008);
		}

		// struct FChicaFeedingFrenzySaveData
		TEST_METHOD(ScriptStruct__fnaf9__ChicaFeedingFrenzySaveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChicaFeedingFrenzySaveData, HighScore, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChicaFeedingFrenzySaveData, Played, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChicaFeedingFrenzySaveData, Glitched, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChicaFeedingFrenzySaveData, UnknownData_86L2, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChicaFeedingFrenzySaveData, 0x0008);
		}

		// struct FMinigolfOneSaveData
		TEST_METHOD(ScriptStruct__fnaf9__MinigolfOneSaveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinigolfOneSaveData, HighScore, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinigolfOneSaveData, Played, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinigolfOneSaveData, UnknownData_ADGN, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinigolfOneSaveData, 0x0008);
		}

		// struct FMinigolfTwoSaveData
		TEST_METHOD(ScriptStruct__fnaf9__MinigolfTwoSaveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinigolfTwoSaveData, HighScore, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinigolfTwoSaveData, Played, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinigolfTwoSaveData, UnknownData_P6GT, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinigolfTwoSaveData, 0x0008);
		}

		// struct FMinigolfFullSaveData
		TEST_METHOD(ScriptStruct__fnaf9__MinigolfFullSaveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinigolfFullSaveData, HighScore, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinigolfFullSaveData, Played, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinigolfFullSaveData, UnknownData_HLSZ, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinigolfFullSaveData, 0x0008);
		}

		// struct FPrincessQuestOneSaveData
		TEST_METHOD(ScriptStruct__fnaf9__PrincessQuestOneSaveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrincessQuestOneSaveData, Played, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrincessQuestOneSaveData, Glitched, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrincessQuestOneSaveData, 0x0002);
		}

		// struct FPrincessQuestTwoSaveData
		TEST_METHOD(ScriptStruct__fnaf9__PrincessQuestTwoSaveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrincessQuestTwoSaveData, Played, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrincessQuestTwoSaveData, Glitched, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrincessQuestTwoSaveData, 0x0002);
		}

		// struct FPrincessQuestThreeSaveData
		TEST_METHOD(ScriptStruct__fnaf9__PrincessQuestThreeSaveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrincessQuestThreeSaveData, Played, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrincessQuestThreeSaveData, Glitched, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrincessQuestThreeSaveData, 0x0002);
		}

		// struct FFNAFItemCollectInfo
		TEST_METHOD(ScriptStruct__fnaf9__FNAFItemCollectInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFItemCollectInfo, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFItemCollectInfo, HasViewed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFItemCollectInfo, UnknownData_VB4Q, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFItemCollectInfo, CollectionTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFItemCollectInfo, GameHour, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFItemCollectInfo, GameMinute, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFItemCollectInfo, PlayIteration, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFItemCollectInfo, UnknownData_1OGH, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFNAFItemCollectInfo, 0x0028);
		}

		// struct FFNAFPowerSaveData
		TEST_METHOD(ScriptStruct__fnaf9__FNAFPowerSaveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFPowerSaveData, PowerLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFPowerSaveData, MaxPowerLevel, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFNAFPowerSaveData, 0x0008);
		}

		// struct FFNAFMissionState
		TEST_METHOD(ScriptStruct__fnaf9__FNAFMissionState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMissionState, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMissionState, Status, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMissionState, UnknownData_L2ZC, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMissionState, InfoState, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMissionState, CompletedTasks, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFNAFMissionState, 0x0020);
		}

		// struct FFreddyUpgradeState
		TEST_METHOD(ScriptStruct__fnaf9__FreddyUpgradeState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFreddyUpgradeState, HasPowerUpgrade, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFreddyUpgradeState, HasMontyClaws, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFreddyUpgradeState, HasChicaBeak, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFreddyUpgradeState, HasRoxyEyes, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFreddyUpgradeState, 0x0004);
		}

		// struct FLightScenarioManagerData
		TEST_METHOD(ScriptStruct__fnaf9__LightScenarioManagerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightScenarioManagerData, Scenario, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightScenarioManagerData, 0x0001);
		}

		// struct FPowerStationSaveInfo
		TEST_METHOD(ScriptStruct__fnaf9__PowerStationSaveInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPowerStationSaveInfo, PowerStationID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPowerStationSaveInfo, GameIteration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPowerStationSaveInfo, GameHour, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPowerStationSaveInfo, GameMinute, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPowerStationSaveInfo, 0x0010);
		}

		// struct FMaterialArray
		TEST_METHOD(ScriptStruct__fnaf9__MaterialArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialArray, MaterialArray, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialArray, 0x0010);
		}

		// struct FLightMeshMaterialInfo
		TEST_METHOD(ScriptStruct__fnaf9__LightMeshMaterialInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightMeshMaterialInfo, ListName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightMeshMaterialInfo, StaticMeshActor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightMeshMaterialInfo, LightsOnMaterials, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightMeshMaterialInfo, LightsOffMaterials, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightMeshMaterialInfo, DawnMaterials, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightMeshMaterialInfo, SpecialEventMaterials, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightMeshMaterialInfo, 0x00A0);
		}

		// struct FLightScenarioAreaInfo
		TEST_METHOD(ScriptStruct__fnaf9__LightScenarioAreaInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightScenarioAreaInfo, LightsOn, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightScenarioAreaInfo, LightsOff, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightScenarioAreaInfo, Dawn, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightScenarioAreaInfo, 0x0018);
		}

		// struct FRandomItemAreaInfo
		TEST_METHOD(ScriptStruct__fnaf9__RandomItemAreaInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomItemAreaInfo, NumLobbyKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomItemAreaInfo, NumKeys, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomItemAreaInfo, NumItems, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomItemAreaInfo, NumFreddyUpgrades, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomItemAreaInfo, NumBotUpgrades, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomItemAreaInfo, NumGregoryUpgrade, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomItemAreaInfo, NumCollectible, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomItemAreaInfo, NumBad, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomItemAreaInfo, NumFlashlight, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomItemAreaInfo, 0x0024);
		}

		// struct FFNAFInventoryTableStruct : public FTableRowBase
		TEST_METHOD(ScriptStruct__fnaf9__FNAFInventoryTableStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFInventoryTableStruct, Category, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFInventoryTableStruct, SurvivalCategory, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFInventoryTableStruct, PrizeVIP, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFInventoryTableStruct, UnknownData_AEKL, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFInventoryTableStruct, ItemDisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFInventoryTableStruct, ItemIcon, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFInventoryTableStruct, ItemModel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFInventoryTableStruct, ItemDescription, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFNAFInventoryTableStruct, 0x0050);
		}

		// struct FFNAFMessageTableStruct : public FTableRowBase
		TEST_METHOD(ScriptStruct__fnaf9__FNAFMessageTableStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMessageTableStruct, Title, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMessageTableStruct, Description, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMessageTableStruct, Sound, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMessageTableStruct, InGame, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMessageTableStruct, UnknownData_PZ4Z, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFNAFMessageTableStruct, 0x0068);
		}

		// struct FFNAFMissionInfo : public FTableRowBase
		TEST_METHOD(ScriptStruct__fnaf9__FNAFMissionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMissionInfo, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMissionInfo, TaskNames, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMissionInfo, bValidForSurvival, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMissionInfo, bShowAllTasks, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMissionInfo, UnknownData_HZ83, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMissionInfo, DependentMissions, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFNAFMissionInfo, 0x0048);
		}

		// struct FAnimatronicExpectedData
		TEST_METHOD(ScriptStruct__fnaf9__AnimatronicExpectedData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimatronicExpectedData, AIType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimatronicExpectedData, UnknownData_RRIN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimatronicExpectedData, PathName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimatronicExpectedData, 0x000C);
		}

		// struct FAIDistanceResult
		TEST_METHOD(ScriptStruct__fnaf9__AIDistanceResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDistanceResult, Pawn, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDistanceResult, AIType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDistanceResult, UnknownData_X4X5, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDistanceResult, NavDistance, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDistanceResult, 0x0010);
		}

		// struct FAIRoomEntryInfo
		TEST_METHOD(ScriptStruct__fnaf9__AIRoomEntryInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIRoomEntryInfo, AIPawn, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIRoomEntryInfo, RoomEntering, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIRoomEntryInfo, 0x0010);
		}

		// struct FConditionResultDelegates
		TEST_METHOD(ScriptStruct__fnaf9__ConditionResultDelegates)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConditionResultDelegates, UnknownData_CXOE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConditionResultDelegates, 0x0010);
		}

		// struct FMissionFreddySettings
		TEST_METHOD(ScriptStruct__fnaf9__MissionFreddySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionFreddySettings, bInsideFreddy, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionFreddySettings, bCanEnterExitFreddy, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionFreddySettings, bCanCallFreddy, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionFreddySettings, bSickFreddy, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionFreddySettings, UnknownData_VNEL, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionFreddySettings, LocationActor, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMissionFreddySettings, 0x0030);
		}

		// struct FMissionClockSettings
		TEST_METHOD(ScriptStruct__fnaf9__MissionClockSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionClockSettings, bClockRunning, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionClockSettings, UnknownData_I69L, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionClockSettings, Hour, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionClockSettings, Minute, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMissionClockSettings, 0x000C);
		}

		// struct FFNAFMissionTaskInfo : public FTableRowBase
		TEST_METHOD(ScriptStruct__fnaf9__FNAFMissionTaskInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMissionTaskInfo, TaskTitle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMissionTaskInfo, TaskDetails, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMissionTaskInfo, LinkedMessage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMissionTaskInfo, ItemsEarned, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMissionTaskInfo, ActivatedStates, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMissionTaskInfo, DeactivatedStates, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMissionTaskInfo, LocationActor, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMissionTaskInfo, FreddySettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMissionTaskInfo, ClockSettings, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMissionTaskInfo, bSkipEnabled, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFMissionTaskInfo, UnknownData_BFKU, 0x00D5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFNAFMissionTaskInfo, 0x00D8);
		}

		// struct FFNAFSaveslotsData : public FTableRowBase
		TEST_METHOD(ScriptStruct__fnaf9__FNAFSaveslotsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFSaveslotsData, SlotNameByUser, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFNAFSaveslotsData, 0x0020);
		}

		// struct FInstructionCardRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__fnaf9__InstructionCardRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstructionCardRow, DefaultTexture2D, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstructionCardRow, PerControllerTexture2D, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstructionCardRow, 0x0060);
		}

		// struct FMissionDisplayUpdateInfo
		TEST_METHOD(ScriptStruct__fnaf9__MissionDisplayUpdateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionDisplayUpdateInfo, UpdateType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionDisplayUpdateInfo, UnknownData_ROJH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionDisplayUpdateInfo, MissionName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionDisplayUpdateInfo, UnknownData_O1RJ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionDisplayUpdateInfo, MissionInfo, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionDisplayUpdateInfo, MissionState, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMissionDisplayUpdateInfo, 0x0078);
		}

		// struct FEndoSaveData
		TEST_METHOD(ScriptStruct__fnaf9__EndoSaveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndoSaveData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndoSaveData, Rotation, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEndoSaveData, 0x0018);
		}

		// struct FFNAFAISaveData
		TEST_METHOD(ScriptStruct__fnaf9__FNAFAISaveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFAISaveData, bShatteredChica, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFAISaveData, bShatteredRoxy, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFAISaveData, bShatteredMonty, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFAISaveData, bWorldSpawnEnabled, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFAISaveData, bAITeleportEnabled, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFAISaveData, UnknownData_R9AE, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFAISaveData, AnimatronicStates, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFAISaveData, Endos, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFNAFAISaveData, 0x0068);
		}

		// struct FFNAFWorldStateSaveData
		TEST_METHOD(ScriptStruct__fnaf9__FNAFWorldStateSaveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFWorldStateSaveData, ActivatedObjects, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFWorldStateSaveData, bFreddyInWorld, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFWorldStateSaveData, UnknownData_QSSP, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFWorldStateSaveData, FreddyPosition, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFWorldStateSaveData, FreddyRotation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFWorldStateSaveData, bCanCallFreddy, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFWorldStateSaveData, bCanEnterExitFreddy, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFWorldStateSaveData, bIsInFreddy, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFWorldStateSaveData, bUseSickFreddy, 0x006F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFWorldStateSaveData, bPlayerUsedHidingSpace, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFWorldStateSaveData, bCanUsePowerStation, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFWorldStateSaveData, UnknownData_SYPJ, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFWorldStateSaveData, FreddyPatrolPoint, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFWorldStateSaveData, GameState, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFWorldStateSaveData, UnknownData_YN1Q, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFNAFWorldStateSaveData, 0x0080);
		}

		// struct FArcadeSaveData
		TEST_METHOD(ScriptStruct__fnaf9__ArcadeSaveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FArcadeSaveData, BalloonWorld, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArcadeSaveData, ChicaFeedingFrenzy, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArcadeSaveData, MinigolfOne, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArcadeSaveData, MinigolfTwo, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArcadeSaveData, MinigolfFull, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArcadeSaveData, PrincessQuestOne, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArcadeSaveData, PrincessQuestTwo, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArcadeSaveData, PrincessQuestThree, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArcadeSaveData, UnknownData_DD29, 0x002E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FArcadeSaveData, 0x0030);
		}

		// struct FFNAFInventorySaveData
		TEST_METHOD(ScriptStruct__fnaf9__FNAFInventorySaveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFInventorySaveData, InventoryItems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFInventorySaveData, Messages, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFInventorySaveData, SecurityLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFInventorySaveData, UsedPartyPassCount, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFInventorySaveData, NumFlashCharges, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFInventorySaveData, FlashlightInStationID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFInventorySaveData, TapesListenedTo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFInventorySaveData, DishesBroken, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFInventorySaveData, UnknownData_FEBE, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFNAFInventorySaveData, 0x0088);
		}

		// struct FRichControlButtonRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__fnaf9__RichControlButtonRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichControlButtonRow, DefaultBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichControlButtonRow, PerControllerBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichControlButtonRow, 0x00E0);
		}

		// struct FMagicLeapARPinState
		TEST_METHOD(ScriptStruct__MagicLeapARPin__MagicLeapARPinState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, Confidence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, ValidRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, RotationError, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, TranslationError, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapARPinState, 0x0010);
		}

		// struct FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, UnknownData_4JQT, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataBinding, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataField, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderValue, 0x0020);
		}

		// struct FAIDataProviderTypedValue : public FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderTypedValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderTypedValue, PropertyType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderTypedValue, UnknownData_5PJF, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderTypedValue, 0x0030);
		}

		// struct FAIDataProviderBoolValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderBoolValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, UnknownData_R01F, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderBoolValue, 0x0038);
		}

		// struct FAIDataProviderFloatValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderFloatValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, UnknownData_4DTV, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderFloatValue, 0x0038);
		}

		// struct FAIDamageEvent
		TEST_METHOD(ScriptStruct__AIModule__AIDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Location, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, HitLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, UnknownData_Q96R, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, DamagedActor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Instigator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDamageEvent, 0x0030);
		}

		// struct FAINoiseEvent
		TEST_METHOD(ScriptStruct__AIModule__AINoiseEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_6O20, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, NoiseLocation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Loudness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, MaxRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Instigator, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Tag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_IIJ1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAINoiseEvent, 0x0030);
		}

		// struct FAIPredictionEvent
		TEST_METHOD(ScriptStruct__AIModule__AIPredictionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, Requestor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, PredictedActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, UnknownData_UKRN, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIPredictionEvent, 0x0018);
		}

		// struct FAITeamStimulusEvent
		TEST_METHOD(ScriptStruct__AIModule__AITeamStimulusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, UnknownData_FUUZ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Broadcaster, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Enemy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITeamStimulusEvent, 0x0038);
		}

		// struct FAITouchEvent
		TEST_METHOD(ScriptStruct__AIModule__AITouchEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, UnknownData_QZGM, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, TouchReceiver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, OtherActor, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITouchEvent, 0x0020);
		}

		// struct FAISenseAffiliationFilter
		TEST_METHOD(ScriptStruct__AIModule__AISenseAffiliationFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISenseAffiliationFilter, UnknownData_6XYP, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISenseAffiliationFilter, 0x0004);
		}

		// struct FAIMoveRequest
		TEST_METHOD(ScriptStruct__AIModule__AIMoveRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, GoalActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, UnknownData_592H, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIMoveRequest, 0x0040);
		}

		// struct FBTDecoratorLogic
		TEST_METHOD(ScriptStruct__AIModule__BTDecoratorLogic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Operation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, UnknownData_5LFL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Number, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTDecoratorLogic, 0x0004);
		}

		// struct FBehaviorTreeTemplateInfo
		TEST_METHOD(ScriptStruct__AIModule__BehaviorTreeTemplateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Asset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Template, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, UnknownData_KMQR, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorTreeTemplateInfo, 0x0018);
		}

		// struct FBlackboardEntry
		TEST_METHOD(ScriptStruct__AIModule__BlackboardEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, EntryName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, KeyType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, UnknownData_4B2B, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardEntry, 0x0018);
		}

		// struct FBTCompositeChild
		TEST_METHOD(ScriptStruct__AIModule__BTCompositeChild)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildComposite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildTask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, Decorators, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, DecoratorOps, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTCompositeChild, 0x0030);
		}

		// struct FBlackboardKeySelector
		TEST_METHOD(ScriptStruct__AIModule__BlackboardKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, AllowedTypes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_XBGD, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_11VK, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardKeySelector, 0x0028);
		}

		// struct FAIDynamicParam
		TEST_METHOD(ScriptStruct__AIModule__AIDynamicParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, UnknownData_9KAV, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, Value, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, BBKey, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDynamicParam, 0x0038);
		}

		// struct FEQSParametrizedQueryExecutionRequest
		TEST_METHOD(ScriptStruct__AIModule__EQSParametrizedQueryExecutionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryConfig, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, EQSQueryBlackboardKey, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, RunMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_KNNI, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_59WT, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEQSParametrizedQueryExecutionRequest, 0x0048);
		}

		// struct FIntervalCountdown
		TEST_METHOD(ScriptStruct__AIModule__IntervalCountdown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntervalCountdown, Interval, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntervalCountdown, UnknownData_1HK8, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntervalCountdown, 0x0008);
		}

		// struct FEnvNamedValue
		TEST_METHOD(ScriptStruct__AIModule__EnvNamedValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, UnknownData_889I, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, Value, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvNamedValue, 0x0010);
		}

		// struct FCrowdAvoidanceConfig
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, VelocityBias, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, DesiredVelocityWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CurrentVelocityWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, SideBiasWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CustomPatternIdx, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDivisions, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveRings, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDepth, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceConfig, 0x001C);
		}

		// struct FCrowdAvoidanceSamplingPattern
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceSamplingPattern)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Angles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Radii, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceSamplingPattern, 0x0020);
		}

		// struct FEnvTraceData
		TEST_METHOD(ScriptStruct__AIModule__EnvTraceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, VersionNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_ZUU8, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, NavigationFilter, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectDown, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentX, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentY, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentZ, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, PostProjectionVerticalOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceChannel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, SerializedChannel, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceShape, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceMode, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_YICC, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvTraceData, 0x0030);
		}

		// struct FAIDataProviderIntValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderIntValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, UnknownData_YVSX, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderIntValue, 0x0038);
		}

		// struct FEnvDirection
		TEST_METHOD(ScriptStruct__AIModule__EnvDirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineFrom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineTo, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, DirMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, UnknownData_I1VM, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvDirection, 0x0020);
		}

		// struct FEnvQueryInstanceCache
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryInstanceCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, Template, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, UnknownData_4W4Y, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryInstanceCache, 0x0178);
		}

		// struct FEnvOverlapData
		TEST_METHOD(ScriptStruct__AIModule__EnvOverlapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentZ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ShapeOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapChannel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapShape, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_WWCK, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_EKSQ, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvOverlapData, 0x0020);
		}

		// struct FPawnActionStack
		TEST_METHOD(ScriptStruct__AIModule__PawnActionStack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionStack, TopAction, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionStack, 0x0008);
		}

		// struct FPawnActionEvent
		TEST_METHOD(ScriptStruct__AIModule__PawnActionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, UnknownData_ZSSK, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionEvent, 0x0018);
		}

		// struct FAIRequestID
		TEST_METHOD(ScriptStruct__AIModule__AIRequestID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIRequestID, RequestID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIRequestID, 0x0004);
		}

		// struct FAIStimulus
		TEST_METHOD(ScriptStruct__AIModule__AIStimulus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Age, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ExpirationAge, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Strength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, StimulusLocation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ReceiverLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Tag, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_UKXB, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_JCD3, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIStimulus, 0x003C);
		}

		// struct FAIDataProviderStructValue : public FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderStructValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderStructValue, UnknownData_W7VN, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderStructValue, 0x0030);
		}

		// struct FActorPerceptionBlueprintInfo
		TEST_METHOD(ScriptStruct__AIModule__ActorPerceptionBlueprintInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, LastSensedStimuli, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, UnknownData_FG38, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorPerceptionBlueprintInfo, 0x0020);
		}

		// struct FAISightEvent
		TEST_METHOD(ScriptStruct__AIModule__AISightEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, UnknownData_7JW4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, SeenActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, Observer, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISightEvent, 0x0018);
		}

		// struct FEnvQueryRequest
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, Owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, World, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, UnknownData_66TC, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryRequest, 0x0068);
		}

		// struct FEnvQueryResult
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_Y2Q6, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, ItemType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_M3D5, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, OptionIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_6CDB, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryResult, 0x0040);
		}

		// struct FGenericTeamId
		TEST_METHOD(ScriptStruct__AIModule__GenericTeamId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericTeamId, TeamID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericTeamId, 0x0001);
		}

		// struct FVO_Anim_DS
		TEST_METHOD(UserDefinedStruct__VO_Anim_DS__VO_Anim_DS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVO_Anim_DS, AK_Event_14_DF280E1F4E7A42DD40DF1FB95BA6CBEC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVO_Anim_DS, Anim_Sequence_15_C9E944884386691AF7BDC6A2D34018B6, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVO_Anim_DS, Actor_Class_16_FA6E47D3482F1F2F702834995C7D952E, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVO_Anim_DS, 0x0040);
		}

		// struct FProcMeshTangent
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, TangentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, bFlipTangentY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, UnknownData_V2MQ, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshTangent, 0x0010);
		}

		// struct FProcMeshVertex
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Tangent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Color, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV0, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV2, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV3, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshVertex, 0x004C);
		}

		// struct FProcMeshSection
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcVertexBuffer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcIndexBuffer, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, SectionLocalBox, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bEnableCollision, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bSectionVisible, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, UnknownData_RPCN, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshSection, 0x0040);
		}

		// struct FNiagaraCompileHash
		TEST_METHOD(ScriptStruct__NiagaraCore__NiagaraCompileHash)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHash, DataHash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileHash, 0x0010);
		}

		// struct FReplicatedVehicleState
		TEST_METHOD(ScriptStruct__PhysXVehicles__ReplicatedVehicleState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, SteeringInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, ThrottleInput, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, BrakeInput, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, HandbrakeInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, CurrentGear, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedVehicleState, 0x0014);
		}

		// struct FVehicleInputRate
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleInputRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, RiseRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, FallRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleInputRate, 0x0008);
		}

		// struct FWheelSetup
		TEST_METHOD(ScriptStruct__PhysXVehicles__WheelSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, WheelClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, AdditionalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, bDisableSteering, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, UnknownData_CP4W, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWheelSetup, 0x0020);
		}

		// struct FTireConfigMaterialFriction
		TEST_METHOD(ScriptStruct__PhysXVehicles__TireConfigMaterialFriction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, PhysicalMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, FrictionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, UnknownData_16TW, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTireConfigMaterialFriction, 0x0010);
		}

		// struct FVehicleDifferential4WData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleDifferential4WData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, DifferentialType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, UnknownData_9CJC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontRearSplit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontLeftRightSplit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearLeftRightSplit, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, CentreBias, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearBias, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleDifferential4WData, 0x001C);
		}

		// struct FVehicleGearData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleGearData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, Ratio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, DownRatio, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, UpRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleGearData, 0x000C);
		}

		// struct FVehicleTransmissionData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleTransmissionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, bUseGearAutoBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_Y5BT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearSwitchTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearAutoBoxLatency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, FinalRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ForwardGears, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ReverseGearRatio, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, NeutralGearUpRatio, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ClutchStrength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_F9HM, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleTransmissionData, 0x0030);
		}

		// struct FVehicleEngineData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleEngineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, TorqueCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MaxRPM, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MOI, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateFullThrottle, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchEngaged, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchDisengaged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, UnknownData_P80C, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleEngineData, 0x00A0);
		}

		// struct FAnimNode_WheelHandler : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__PhysXVehicles__AnimNode_WheelHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_WheelHandler, UnknownData_JFQ0, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_WheelHandler, 0x00E0);
		}

		// struct FVehicleAnimInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleAnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleAnimInstanceProxy, UnknownData_OPP1, 0x06E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleAnimInstanceProxy, 0x06F0);
		}

		// struct FFogVolumeInfo
		TEST_METHOD(UserDefinedStruct__FogVolumeInfo__FogVolumeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFogVolumeInfo, FogDensity_3_6B84B08B40E8F6366949E0A5D8558ABE, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFogVolumeInfo, FogInscatteringColor_19_A09457F3453121D6BAC69F9BB24AA75C, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFogVolumeInfo, FogMaxOpacity_22_C631F454418F9E31F3B683BBC0460B6F, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFogVolumeInfo, StartDistance_9_155562FF4BFEC7CAE6B4B2AA5F3DE599, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFogVolumeInfo, FogCutoffDistance_12_74832EE84B69C2CAAE31BABF0C06DB51, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFogVolumeInfo, VolumetricFog_15_7B7404964AA4FD3E55ECAEA5FFD560F6, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFogVolumeInfo, UnknownData_90EF, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFogVolumeInfo, ScatteringDistribution_18_9FC02B49419B893F53CF6785E37691ED, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFogVolumeInfo, VolumetricEmissive_25_4630006447AE98F7D184ABB9FB82F522, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFogVolumeInfo, 0x0038);
		}

		// struct FFreddyVOTypeArray
		TEST_METHOD(UserDefinedStruct__FreddyVOTypeArray__FreddyVOTypeArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFreddyVOTypeArray, VOArray_3_A22825F343C4AE420D8657ADE9FE6E19, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFreddyVOTypeArray, 0x0010);
		}

		// struct FAIDataParams
		TEST_METHOD(UserDefinedStruct__AIDataParams__AIDataParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataParams, WalkSpeed_4_6926191C4027638AF364ADA1761CFC41, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataParams, RunSpeed_5_06481094402B8DC17B70ABBD4A5BAA09, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataParams, SightAngle_39_FBC170A3429F47D1D72629B32A88889A, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataParams, InnerRange_37_947B8DA84D6BB45E011ACB9F0DE64572, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataParams, OuterRange_38_4D77AE444FA522CB5A0A2DBF64142CF0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataParams, MinHearingDistance_18_7D4C006A43964B918AEE0098A4C710DB, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataParams, MaxHearingDistance_20_96173F7E4CB7802238C7A2A7DB84DE9C, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataParams, HearingThreshold_22_20BE29BA4C48236382B0C6A5D6F51C6B, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataParams, MinSearchTime_25_1173344A41800F351DEBA38E884628CB, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataParams, MaxSearchTime_27_86E0BB584CF9A5E1E4330F95D2CBDA3B, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataParams, 0x0028);
		}

		// struct FMediaCaptureDevice
		TEST_METHOD(ScriptStruct__MediaAssets__MediaCaptureDevice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, URL, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaCaptureDevice, 0x0028);
		}

		// struct FMediaSoundComponentSpectralData
		TEST_METHOD(ScriptStruct__MediaAssets__MediaSoundComponentSpectralData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaSoundComponentSpectralData, FrequencyHz, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaSoundComponentSpectralData, Magnitude, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaSoundComponentSpectralData, 0x0008);
		}

		// struct FLocationServicesData
		TEST_METHOD(ScriptStruct__LocationServicesBPLibrary__LocationServicesData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Longitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Latitude, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, HorizontalAccuracy, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, VerticalAccuracy, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Altitude, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationServicesData, 0x0018);
		}

		// struct FEyeTrackerStereoGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerStereoGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeOrigin, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeDirection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, FixationPoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, ConfidenceValue, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerStereoGazeData, 0x0040);
		}

		// struct FEyeTrackerGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, FixationPoint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, ConfidenceValue, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerGazeData, 0x0028);
		}

		// struct FARFilter
		TEST_METHOD(ScriptStruct__AssetRegistry__ARFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackageNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackagePaths, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ObjectPaths, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ClassNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_MQJN, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, RecursiveClassesExclusionSet, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursivePaths, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursiveClasses, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bIncludeOnlyOnDiskAssets, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_MN53, 0x00E3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARFilter, 0x00E8);
		}

		// struct FAssetBundleEntry
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetBundleEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleScope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleAssets, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleEntry, 0x0028);
		}

		// struct FAssetBundleData
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetBundleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleData, Bundles, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleData, 0x0010);
		}

		// struct FAssetData
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, ObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackageName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackagePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, UnknownData_15G6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetData, 0x0050);
		}

		// struct FTagAndValue
		TEST_METHOD(ScriptStruct__AssetRegistry__TagAndValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTagAndValue, 0x0018);
		}

		// struct FAssetRegistryDependencyOptions
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetRegistryDependencyOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSoftPackageReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeHardPackageReferences, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSearchableNames, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSoftManagementReferences, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeHardManagementReferences, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetRegistryDependencyOptions, 0x0005);
		}

		// struct FJsonObjectWrapper
		TEST_METHOD(ScriptStruct__JsonUtilities__JsonObjectWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, JsonString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, UnknownData_16OC, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJsonObjectWrapper, 0x0020);
		}

		// struct FMagicLeapHandMeshBlock
		TEST_METHOD(ScriptStruct__MagicLeapHandMeshing__MagicLeapHandMeshBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, IndexCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, VertexCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, Vertex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, Index, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapHandMeshBlock, 0x0028);
		}

		// struct FMagicLeapHandMesh
		TEST_METHOD(ScriptStruct__MagicLeapHandMeshing__MagicLeapHandMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMesh, Version, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMesh, DataCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMesh, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapHandMesh, 0x0018);
		}

		// struct FAnimNode_SkeletalControlBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SkeletalControlBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ComponentPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, LODThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ActualAlpha, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaInputType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, bAlphaBoolEnabled, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_L2K0, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, Alpha, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBias, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaBoolBlend, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaCurveName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBiasClamp, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_G40N, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SkeletalControlBase, 0x00C8);
		}

		// struct FAnimNode_BlendSpacePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpacePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, X, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Y, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Z, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PlayRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bLoop, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bResetPlayTimeWhenBlendSpaceChanges, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_5NF2, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, StartPosition, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendSpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_0410, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PreviousBlendSpace, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpacePlayer, 0x00E0);
		}

		// struct FAnimNode_AimOffsetLookAt : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AimOffsetLookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_M89N, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, BasePose, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LODThreshold, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SourceSocketName, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, PivotSocketName, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LookAtLocation, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SocketAxis, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, Alpha, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_KQOW, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AimOffsetLookAt, 0x01B0);
		}

		// struct FRotationRetargetingInfo
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationRetargetingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_1BH9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, Target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, RotationComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_J216, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TwistAxis, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bUseAbsoluteAngle, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_K8IN, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, SourceMinimum, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, SourceMaximum, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TargetMinimum, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TargetMaximum, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, EasingType, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_4NDQ, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, CustomCurve, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bFlipEasing, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_FOCH, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, EasingWeight, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bClamp, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_OLMG, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationRetargetingInfo, 0x0130);
		}

		// struct FAnimPhysPlanarLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysPlanarLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, PlaneTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysPlanarLimit, 0x0040);
		}

		// struct FAnimPhysSphericalLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysSphericalLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, SphereLocalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, UnknownData_8JCS, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysSphericalLimit, 0x0024);
		}

		// struct FAnimPhysConstraintSetup
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysConstraintSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearXLimitType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearYLimitType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearZLimitType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_OQVB, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMin, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularConstraintType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, TwistAxis, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTargetAxis, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_LA9J, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, ConeAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMax, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTarget, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysConstraintSetup, 0x0048);
		}

		// struct FAnimNode_AnimDynamics : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AnimDynamics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearDampingOverride, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularDampingOverride, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_W39A, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RelativeSpaceBone, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoundBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ChainEnd, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoxExtents, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LocalJointOffset, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityScale, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityOverride, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearSpringConstant, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularSpringConstant, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, WindScale, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearAccScale, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearVelScale, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentAppliedLinearAccClamp, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularBiasOverride, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPreUpdate, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPostUpdate, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ConstraintSetup, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_D22Z, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphericalLimits, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphereCollisionRadius, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ExternalForce, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, PlanarLimits, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, CollisionType, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SimulationSpace, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_VEYD, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_3W19, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RetargetingSettings, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_SB2F, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AnimDynamics, 0x0440);
		}

		// struct FAnimNode_ApplyAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Alpha, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, LODThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBiasClamp, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_2YYE, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaInputType, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, bAlphaBoolEnabled, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_8937, 0x00C6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyAdditive, 0x00C8);
		}

		// struct FAngularRangeLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AngularRangeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, Bone, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularRangeLimit, 0x0028);
		}

		// struct FAnimNode_ApplyLimits : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyLimits)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularRangeLimits, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularOffsets, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyLimits, 0x00E8);
		}

		// struct FBlendBoneByChannelEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BlendBoneByChannelEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, SourceBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, TargetBone, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendTranslation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendRotation, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendScale, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, UnknownData_B719, 0x0023);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendBoneByChannelEntry, 0x0024);
		}

		// struct FAnimNode_BlendBoneByChannel : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendBoneByChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, BoneDefinitions, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_UIK5, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_IDYX, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, TransformsSpace, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_06E4, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendBoneByChannel, 0x0068);
		}

		// struct FAnimNode_BlendListBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, TransitionType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendType, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, bResetChildOnActivation, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_OG4H, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, CustomBlendCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendProfile, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_LNIY, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListBase, 0x0098);
		}

		// struct FAnimNode_BlendListByBool : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, bActiveValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, UnknownData_C8BP, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByBool, 0x00A0);
		}

		// struct FAnimNode_BlendListByEnum : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, EnumToPoseIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, ActiveEnumValue, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, UnknownData_KPIC, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByEnum, 0x00B0);
		}

		// struct FAnimNode_BlendListByInt : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, ActiveChildIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, UnknownData_C6GM, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByInt, 0x00A0);
		}

		// struct FAnimNode_BlendSpaceEvaluator : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpaceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, NormalizedTime, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, UnknownData_QYDZ, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpaceEvaluator, 0x00E8);
		}

		// struct FAnimNode_BoneDrivenController : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BoneDrivenController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DrivingCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, Multiplier, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMin, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMax, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMin, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMax, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ParameterName, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, TargetBone, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DestinationMode, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ModificationMode, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceComponent, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_8GXG, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BoneDrivenController, 0x0118);
		}

		// struct FSocketReference
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SocketReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_SM87, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_9XQE, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSocketReference, 0x0040);
		}

		// struct FBoneSocketTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BoneSocketTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, bUseSocket, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_7NVF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, BoneReference, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_CLB8, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, SocketReference, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneSocketTarget, 0x0060);
		}

		// struct FAnimNode_CCDIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CCDIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocationSpace, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_U7QZ, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorTarget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, TipBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RootBone, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, Precision, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, MaxIterations, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bStartFromTail, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bEnableRotationLimit, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_TUFL, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RotationLimitPerJoints, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CCDIK, 0x0180);
		}

		// struct FConstraint
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TargetBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, OffsetOption, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TransformType, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, PerAxis, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, UnknownData_XOQQ, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraint, 0x001C);
		}

		// struct FAnimNode_Constraint : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintSetup, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintWeights, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, UnknownData_8S5M, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Constraint, 0x0108);
		}

		// struct FAnimNode_CopyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, TargetBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyTranslation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyRotation, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyScale, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, ControlSpace, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, UnknownData_IRYD, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBone, 0x00F0);
		}

		// struct FAnimNode_CopyBoneDelta : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBoneDelta)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TargetBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyTranslation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyRotation, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyScale, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, CopyMode, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TranslationMultiplier, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, RotationMultiplier, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, ScaleMultiplier, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBoneDelta, 0x00F8);
		}

		// struct FAnimNode_CopyPoseFromMesh : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyPoseFromMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, SourceMeshComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, bUseAttachedParent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, bCopyCurves, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, UnknownData_AUED, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyPoseFromMesh, 0x0140);
		}

		// struct FAnimNode_CurveSource : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CurveSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourceBinding, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, Alpha, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, UnknownData_1VLD, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, CurveSource, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CurveSource, 0x0040);
		}

		// struct FAnimNode_Fabrik : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Fabrik)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_WH3T, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransform, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTarget, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, TipBone, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, RootBone, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, Precision, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, MaxIterations, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransformSpace, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorRotationSource, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_UPIX, 0x018A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Fabrik, 0x0190);
		}

		// struct FAnimNode_HandIKRetargeting : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_HandIKRetargeting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandFK, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandFK, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandIK, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandIK, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, IKBonesToMove, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, HandFKWeight, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, UnknownData_D5JF, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_HandIKRetargeting, 0x0120);
		}

		// struct FAnimNode_LayeredBoneBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LayeredBoneBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendPoses, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LayerSetup, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendWeights, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceRotationBlend, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceScaleBlend, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, CurveBlendOption, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bBlendRootMotionBasedOnRootBone, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_OVHC, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LODThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_J0HL, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, PerBoneBlendWeights, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, SkeletonGuid, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, VirtualBoneGuid, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_R7BH, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LayeredBoneBlend, 0x00C0);
		}

		// struct FAnimLegIKDefinition
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, IKFootBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FKFootBone, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, NumBonesInLimb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, MinRotationAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FootBoneForwardAxis, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, HingeRotationAxis, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableRotationLimit, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableKneeTwistCorrection, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKDefinition, 0x002C);
		}

		// struct FAnimNode_LegIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LegIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, ReachPrecision, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, MaxIterations, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, LegsDefinition, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, UnknownData_UC7V, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LegIK, 0x00F8);
		}

		// struct FAnimLegIKData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKData, UnknownData_SOOH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKData, 0x00A0);
		}

		// struct FIKChain
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChain, UnknownData_V5F2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChain, 0x0038);
		}

		// struct FIKChainLink
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChainLink, UnknownData_95A2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChainLink, 0x003C);
		}

		// struct FAnimNode_LookAt : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_MXUY, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtTarget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtLocation, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAt_Axis, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, bUseLookUpAxis, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationType, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_GVB9, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookUp_Axis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtClamp, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTime, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTriggerThreashold, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_CWRT, 0x017C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LookAt, 0x01B0);
		}

		// struct FAnimNode_MakeDynamicAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MakeDynamicAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, bMeshSpaceAdditive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, UnknownData_7DIY, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MakeDynamicAdditive, 0x0038);
		}

		// struct FAnimNode_ModifyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Translation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Rotation, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Scale, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationMode, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationMode, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleMode, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationSpace, 0x00FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationSpace, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleSpace, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, UnknownData_D2WZ, 0x0102);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyBone, 0x0108);
		}

		// struct FAnimNode_ModifyCurve : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveValues, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_U3QU, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, ApplyMode, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_O9RI, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyCurve, 0x0058);
		}

		// struct FAnimNode_MultiWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MultiWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, Poses, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, DesiredAlphas, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_VAE4, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, AlphaScaleBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bAdditiveNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bNormalizeAlpha, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_Z83T, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MultiWayBlend, 0x0050);
		}

		// struct FAnimNode_SplineIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SplineIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, StartBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, EndBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, BoneAxis, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, bAutoCalculateSpline, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_2BC3, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, PointCount, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, ControlPoints, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Roll, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistStart, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistEnd, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_KA7G, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistBlend, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Stretch, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Offset, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_YA2H, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SplineIK, 0x0260);
		}

		// struct FSplineIKCachedBoneData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SplineIKCachedBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, RefSkeletonIndex, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineIKCachedBoneData, 0x0014);
		}

		// struct FAnimNode_SpringBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SpringBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, MaxDisplacement, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringStiffness, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringDamping, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, ErrorResetThresh, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_MCBO, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_XIEQ, 0x0125);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SpringBone, 0x0128);
		}

		// struct FAnimNode_StateResult : public FAnimNode_Root
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_StateResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateResult, 0x0030);
		}

		// struct FRotationLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMax, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationLimit, 0x0018);
		}

		// struct FAnimNode_Trail : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_NG3H, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailBone, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainLength, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainBoneAxis, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_1LIL, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, MaxDeltaTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailRelaxationSpeed, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScaleInputProcessor, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationLimits, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationOffsets, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, PlanarLimits, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, StretchLimit, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, FakeVelocity, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, BaseJoint, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, LastBoneRotationAnimAlphaBlend, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_BS9C, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Trail, 0x0260);
		}

		// struct FReferenceBoneFrame
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__ReferenceBoneFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Axis, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferenceBoneFrame, 0x0020);
		}

		// struct FAnimNode_TwistCorrectiveNode : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwistCorrectiveNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, BaseFrame, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistFrame, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistPlaneNormalAxis, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RangeMax, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMin, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMax, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, Curve, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, UnknownData_FAZ7, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwistCorrectiveNode, 0x0138);
		}

		// struct FAnimNode_TwoBoneIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoBoneIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, IKBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, StartStretchRatio, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, MaxStretchScale, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_JIOZ, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorTarget, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_MMYL, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTarget, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, TwistAxis, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocationSpace, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocationSpace, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_AELB, 0x01D3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoBoneIK, 0x01E0);
		}

		// struct FAnimNode_ObserveBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ObserveBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, BoneToObserve, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, DisplaySpace, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, bRelativeToRefPose, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, UnknownData_KOCK, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Translation, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Rotation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Scale, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ObserveBone, 0x0100);
		}

		// struct FAnimNode_PoseHandler : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, PoseAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, UnknownData_Z52V, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseHandler, 0x0078);
		}

		// struct FAnimNode_PoseBlendNode : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseBlendNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, SourcePose, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, BlendOption, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, UnknownData_U3DN, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, CustomCurve, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseBlendNode, 0x0098);
		}

		// struct FAnimNode_PoseByName : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseByName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseWeight, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, UnknownData_LFVP, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseByName, 0x0090);
		}

		// struct FPoseDriverTransform
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetRotation, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTransform, 0x0018);
		}

		// struct FPoseDriverTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, BoneTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DistanceMethod, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, FunctionType, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bApplyCustomCurve, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_KEU1, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DrivenName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_35YU, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bIsHidden, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_NDFV, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTarget, 0x00C0);
		}

		// struct FRBFParams
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TargetDimensions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, SolverType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_DVF9, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Radius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Function, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, DistanceMethod, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TwistAxis, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_MKKK, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, WeightThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, NormalizeMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_6I9I, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianMax, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFParams, 0x002C);
		}

		// struct FAnimNode_PoseDriver : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourcePose, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourceBones, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, OnlyDriveBones, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, PoseTargets, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_CML2, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, EvalSpaceBone, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, RBFParams, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveSource, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveOutput, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_1NUN, 0x0127);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseDriver, 0x0128);
		}

		// struct FAnimNode_PoseSnapshot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, SnapshotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Snapshot, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Mode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, UnknownData_IQBM, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseSnapshot, 0x0090);
		}

		// struct FRandomPlayerSequenceEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RandomPlayerSequenceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, ChanceToPlay, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinLoopCount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxLoopCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, UnknownData_H7CE, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, BlendIn, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomPlayerSequenceEntry, 0x0050);
		}

		// struct FAnimNode_RandomPlayer : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RandomPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, Entries, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_N2QT, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, bShuffleMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_HXKD, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RandomPlayer, 0x0078);
		}

		// struct FAnimNode_MeshSpaceRefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MeshSpaceRefPose)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MeshSpaceRefPose, 0x0010);
		}

		// struct FAnimNode_RefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RefPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, RefPoseType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, UnknownData_IH1M, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RefPose, 0x0018);
		}

		// struct FAnimNode_ResetRoot : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ResetRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ResetRoot, UnknownData_Q2NZ, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ResetRoot, 0x00D8);
		}

		// struct FAnimNode_RigidBody : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RigidBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverridePhysicsAsset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_IQYY, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverrideWorldGravity, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ExternalForce, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearAccScale, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearVelScale, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentAppliedLinearAccClamp, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, CachedBoundsScale, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, BaseBoneRef, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverlapChannel, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, SimulationSpace, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bForceDisableCollisionBetweenConstraintBodies, 0x01BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_ZN3F, 0x01BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_YV4C, 0x01BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverrideSolverIterations, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_C9WQ, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RigidBody, 0x0590);
		}

		// struct FAnimNode_RigidBody_Chaos : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RigidBody_Chaos)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, OverridePhysicsAsset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, OverrideWorldGravity, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, ExternalForce, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, ComponentLinearAccScale, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, ComponentLinearVelScale, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, ComponentAppliedLinearAccClamp, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, CachedBoundsScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, BaseBoneRef, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, OverlapChannel, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, SimulationSpace, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, bForceDisableCollisionBetweenConstraintBodies, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, OverrideSolverIterations, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, UnknownData_WVYQ, 0x013C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RigidBody_Chaos, 0x0580);
		}

		// struct FAnimNode_RotateRootBone : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotateRootBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Pitch, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Yaw, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, PitchScaleBiasClamp, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, YawScaleBiasClamp, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, MeshToComponent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, UnknownData_Z24K, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotateRootBone, 0x00A0);
		}

		// struct FAnimNode_RotationMultiplier : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationMultiplier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, TargetBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, SourceBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, Multiplier, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, RotationAxisToRefer, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, bIsAdditive, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, UnknownData_VH27, 0x00EE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationMultiplier, 0x00F0);
		}

		// struct FAnimNode_RotationOffsetBlendSpace : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationOffsetBlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, BasePose, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, LODThreshold, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, Alpha, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBias, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaBoolBlend, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaCurveName, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBiasClamp, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_JG57, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaInputType, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, bAlphaBoolEnabled, 0x0185);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_9QKO, 0x0186);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationOffsetBlendSpace, 0x0188);
		}

		// struct FAnimNode_ScaleChainLength : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ScaleChainLength)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, InputPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, DefaultChainLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainStartBone, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainEndBone, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, TargetLocation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_AI8A, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainInitialLength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_NDPW, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ScaleChainLength, 0x0078);
		}

		// struct FAnimNode_SequenceEvaluator : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SequenceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, Sequence, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ExplicitTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bShouldLoop, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bTeleportToExplicitTime, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ReinitializationBehavior, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_APBR, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, StartPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_L1HK, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequenceEvaluator, 0x0048);
		}

		// struct FAnimNode_Slot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Slot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, SlotName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, bAlwaysUpdateSourcePose, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, UnknownData_Q0BO, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Slot, 0x0048);
		}

		// struct FAnimNode_TwoWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaInputType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_9CRK, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, Alpha, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBiasClamp, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_YN24, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoWayBlend, 0x00C8);
		}

		// struct FAnimSequencerInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimSequencerInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequencerInstanceProxy, UnknownData_S599, 0x06E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequencerInstanceProxy, 0x0930);
		}

		// struct FPositionHistory
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PositionHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, Positions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, Range, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, UnknownData_M991, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPositionHistory, 0x0030);
		}

		// struct FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFEntry, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFEntry, 0x0010);
		}

		// struct FRBFTarget : public FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, ScaleFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, bApplyCustomCurve, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_425C, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, CustomCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, DistanceMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, FunctionType, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_X6US, 0x009A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFTarget, 0x00A0);
		}

		// struct FBrushStampData
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__BrushStampData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushStampData, UnknownData_9GCC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBrushStampData, 0x00A8);
		}

		// struct FBehaviorInfo
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__BehaviorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorInfo, Behavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorInfo, UnknownData_A9IX, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorInfo, 0x0020);
		}

		// struct FActiveGizmo
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__ActiveGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGizmo, UnknownData_89JX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveGizmo, 0x0030);
		}

		// struct FGizmoFloatParameterChange
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__GizmoFloatParameterChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoFloatParameterChange, InitialValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoFloatParameterChange, CurrentValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoFloatParameterChange, 0x0008);
		}

		// struct FGizmoVec2ParameterChange
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__GizmoVec2ParameterChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoVec2ParameterChange, InitialValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoVec2ParameterChange, CurrentValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoVec2ParameterChange, 0x0010);
		}

		// struct FInputRayHit
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__InputRayHit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRayHit, UnknownData_60LE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRayHit, 0x0028);
		}

		// struct FLuminComponentSubElement
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LuminComponentSubElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentSubElement, ElementType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentSubElement, UnknownData_7CM8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentSubElement, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLuminComponentSubElement, 0x0018);
		}

		// struct FLocalizedAppName
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LocalizedAppName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedAppName, LanguageCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedAppName, AppName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedAppName, 0x0020);
		}

		// struct FLuminComponentElement
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LuminComponentElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, VisibleName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, ExecutableName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, ComponentType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, UnknownData_C9XT, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, ExtraComponentSubElements, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLuminComponentElement, 0x0048);
		}

		// struct FLocalizedIconInfo
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LocalizedIconInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfo, LanguageCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfo, IconModelPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfo, IconPortalPath, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedIconInfo, 0x0030);
		}

		// struct FLocalizedIconInfos
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LocalizedIconInfos)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfos, IconData, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedIconInfos, 0x0010);
		}

		// struct FGameplayTag
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTag, TagName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTag, 0x0008);
		}

		// struct FGameplayTagQuery
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TokenStreamVersion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UnknownData_VSIY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TagDictionary, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, QueryTokenStream, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, AutoDescription, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagQuery, 0x0048);
		}

		// struct FGameplayTagContainer
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, GameplayTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, ParentTags, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagContainer, 0x0020);
		}

		// struct FGameplayTagSource
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, UnknownData_VWML, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceTagList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceRestrictedTagList, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagSource, 0x0020);
		}

		// struct FGameplayTagTableRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, DevComment, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagTableRow, 0x0020);
		}

		// struct FRestrictedGameplayTagTableRow : public FGameplayTagTableRow
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedGameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, bAllowNonRestrictedChildren, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, UnknownData_QRO6, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedGameplayTagTableRow, 0x0028);
		}

		// struct FGameplayTagCategoryRemap
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCategoryRemap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, BaseCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, RemapCategories, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCategoryRemap, 0x0020);
		}

		// struct FGameplayTagRedirect
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, OldTagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, NewTagName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagRedirect, 0x0010);
		}

		// struct FRestrictedConfigInfo
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedConfigInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, RestrictedConfigName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, Owners, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedConfigInfo, 0x0020);
		}

		// struct FGameplayTagCreationWidgetHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCreationWidgetHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCreationWidgetHelper, UnknownData_RUBW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCreationWidgetHelper, 0x0001);
		}

		// struct FGameplayTagReferenceHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagReferenceHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReferenceHelper, UnknownData_CBM4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagReferenceHelper, 0x0010);
		}

		// struct FGameplayTagNode
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagNode, UnknownData_KMZC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagNode, 0x0050);
		}

		// struct FCCDIKChainLink
		TEST_METHOD(ScriptStruct__AnimationCore__CCDIKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCCDIKChainLink, UnknownData_OZJN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCCDIKChainLink, 0x0080);
		}

		// struct FAxis
		TEST_METHOD(ScriptStruct__AnimationCore__Axis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, Axis, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, bInLocalSpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, UnknownData_6HWD, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAxis, 0x0010);
		}

		// struct FConstraintDescriptor
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, UnknownData_NPBZ, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptor, 0x0010);
		}

		// struct FConstraintData
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Constraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Weight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, bMaintainOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, UnknownData_EODH, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Offset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, CurrentTransform, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintData, 0x0080);
		}

		// struct FFilterOptionPerAxis
		TEST_METHOD(ScriptStruct__AnimationCore__FilterOptionPerAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bZ, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilterOptionPerAxis, 0x0003);
		}

		// struct FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptionEx)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_W6KB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, AxesFilterOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_VXX5, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptionEx, 0x0010);
		}

		// struct FAimConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__AimConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookAt_Axis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUp_Axis, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, bUseLookUp, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, UnknownData_GE0L, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUpTarget, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAimConstraintDescription, 0x0040);
		}

		// struct FTransformConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, TransformType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, UnknownData_KVUC, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraintDescription, 0x0018);
		}

		// struct FConstraintDescription
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bRotation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bScale, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bParent, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, TranslationAxes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, RotationAxes, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, ScaleAxes, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescription, 0x000D);
		}

		// struct FTransformConstraint
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Operator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_2J35, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, SourceNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, TargetNode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Weight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, bMaintainOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_6NNI, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraint, 0x0028);
		}

		// struct FConstraintOffset
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_9AIA, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_N0KK, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Parent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintOffset, 0x0060);
		}

		// struct FTransformFilter
		TEST_METHOD(ScriptStruct__AnimationCore__TransformFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, TranslationFilter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, RotationFilter, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, ScaleFilter, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformFilter, 0x0009);
		}

		// struct FEulerTransform
		TEST_METHOD(ScriptStruct__AnimationCore__EulerTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Scale, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEulerTransform, 0x0024);
		}

		// struct FFABRIKChainLink
		TEST_METHOD(ScriptStruct__AnimationCore__FABRIKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFABRIKChainLink, UnknownData_UK9E, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFABRIKChainLink, 0x0038);
		}

		// struct FNodeChain
		TEST_METHOD(ScriptStruct__AnimationCore__NodeChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeChain, Nodes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeChain, 0x0010);
		}

		// struct FNodeObject
		TEST_METHOD(ScriptStruct__AnimationCore__NodeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, ParentName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeObject, 0x0010);
		}

		// struct FNodeHierarchyData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Nodes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Transforms, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, NodeNameToIndexMapping, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyData, 0x0070);
		}

		// struct FNodeHierarchyWithUserData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyWithUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, UnknownData_GK1O, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, Hierarchy, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyWithUserData, 0x0078);
		}

		// struct FTransformNoScale
		TEST_METHOD(ScriptStruct__AnimationCore__TransformNoScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, UnknownData_WZU8, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, Rotation, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformNoScale, 0x0020);
		}

		// struct FAkMainOutputSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkMainOutputSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, AudioDeviceShareset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, DeviceID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, PanningRule, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, UnknownData_ZA2C, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, ChannelConfigType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, UnknownData_5BWY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, ChannelMask, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, NumberOfChannels, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, UnknownData_IN8J, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMainOutputSettings, 0x0028);
		}

		// struct FAkSpatialAudioSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkSpatialAudioSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, MaxSoundPropagationDepth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, MovementThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, NumberOfPrimaryRays, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, ReflectionOrder, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, MaximumPathLength, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, CPULimitPercentage, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, EnableDiffractionOnReflections, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, EnableGeometricDiffractionAndTransmission, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, CalcEmitterVirtualPosition, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, UseObstruction, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, UseOcclusion, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, UnknownData_2W5D, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkSpatialAudioSettings, 0x0020);
		}

		// struct FAkCommunicationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkCommunicationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettings, PoolSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettings, DiscoveryBroadcastPort, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettings, CommandPort, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettings, NotificationPort, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettings, UnknownData_5UCJ, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettings, NetworkName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkCommunicationSettings, 0x0020);
		}

		// struct FAkCommunicationSettingsWithSystemInitialization : public FAkCommunicationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkCommunicationSettingsWithSystemInitialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettingsWithSystemInitialization, InitializeSystemComms, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettingsWithSystemInitialization, UnknownData_CP8G, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkCommunicationSettingsWithSystemInitialization, 0x0028);
		}

		// struct FAkAdvancedInitializationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, IO_MemorySize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, IO_Granularity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, TargetAutoStreamBufferLength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, UseStreamCache, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, UnknownData_GHKM, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, MaximumPinnedBytesInCache, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, EnableGameSyncPreparation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, UnknownData_DNSK, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, ContinuousPlaybackLookAhead, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, MonitorQueuePoolSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, MaximumHardwareTimeoutMs, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, DebugOutOfRangeCheckEnabled, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, UnknownData_DW37, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, DebugOutOfRangeLimit, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAdvancedInitializationSettings, 0x002C);
		}

		// struct FAkAdvancedInitializationSettingsWithMultiCoreRendering : public FAkAdvancedInitializationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkAdvancedInitializationSettingsWithMultiCoreRendering)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettingsWithMultiCoreRendering, EnableMultiCoreRendering, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettingsWithMultiCoreRendering, UnknownData_J3U4, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAdvancedInitializationSettingsWithMultiCoreRendering, 0x0030);
		}

		// struct FAkAndroidAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkAndroidAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAndroidAdvancedInitializationSettings, AudioAPI, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAndroidAdvancedInitializationSettings, RoundFrameSizeToHardwareSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAndroidAdvancedInitializationSettings, UnknownData_GS3H, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAndroidAdvancedInitializationSettings, 0x0038);
		}

		// struct FAkCommonInitializationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkCommonInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, MaximumNumberOfMemoryPools, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, MaximumNumberOfPositioningPaths, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, CommandQueueSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, SamplesPerFrame, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, MainOutputSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, StreamingLookAheadRatio, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, NumberOfRefillsInVoice, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, UnknownData_YIVV, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, SpatialAudioSettings, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkCommonInitializationSettings, 0x0060);
		}

		// struct FAkCommonInitializationSettingsWithSampleRate : public FAkCommonInitializationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkCommonInitializationSettingsWithSampleRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettingsWithSampleRate, SampleRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettingsWithSampleRate, UnknownData_LLD3, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkCommonInitializationSettingsWithSampleRate, 0x0068);
		}

		// struct FAkBoolPropertyToControl
		TEST_METHOD(ScriptStruct__AkAudio__AkBoolPropertyToControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkBoolPropertyToControl, ItemProperty, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkBoolPropertyToControl, 0x0010);
		}

		// struct FAkWwiseObjectDetails
		TEST_METHOD(ScriptStruct__AkAudio__AkWwiseObjectDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWwiseObjectDetails, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWwiseObjectDetails, ItemPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWwiseObjectDetails, ItemId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWwiseObjectDetails, 0x0030);
		}

		// struct FAkWwiseItemToControl
		TEST_METHOD(ScriptStruct__AkAudio__AkWwiseItemToControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWwiseItemToControl, ItemPicked, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWwiseItemToControl, ItemPath, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWwiseItemToControl, 0x0040);
		}

		// struct FAkSegmentInfo
		TEST_METHOD(ScriptStruct__AkAudio__AkSegmentInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, CurrentPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, PreEntryDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, ActiveDuration, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, PostExitDuration, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, RemainingLookAheadTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, BeatDuration, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, BarDuration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, GridDuration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, GridOffset, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkSegmentInfo, 0x0024);
		}

		// struct FAkGeometrySurfaceOverride
		TEST_METHOD(ScriptStruct__AkAudio__AkGeometrySurfaceOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometrySurfaceOverride, AcousticTexture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometrySurfaceOverride, UnknownData_RE85, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometrySurfaceOverride, OcclusionValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometrySurfaceOverride, SurfaceArea, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometrySurfaceOverride, UnknownData_H2HN, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkGeometrySurfaceOverride, 0x0018);
		}

		// struct FAkAcousticSurface
		TEST_METHOD(ScriptStruct__AkAudio__AkAcousticSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAcousticSurface, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAcousticSurface, Occlusion, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAcousticSurface, Name, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAcousticSurface, 0x0018);
		}

		// struct FAkTriangle
		TEST_METHOD(ScriptStruct__AkAudio__AkTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkTriangle, Point0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkTriangle, Point1, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkTriangle, Point2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkTriangle, Surface, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkTriangle, 0x0008);
		}

		// struct FAkGeometryData
		TEST_METHOD(ScriptStruct__AkAudio__AkGeometryData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometryData, Vertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometryData, Surfaces, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometryData, Triangles, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometryData, ToOverrideAcousticTexture, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometryData, ToOverrideOcclusion, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkGeometryData, 0x0050);
		}

		// struct FAkHololensAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkHololensAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkHololensAdvancedInitializationSettings, UseHeadMountedDisplayAudioDevice, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkHololensAdvancedInitializationSettings, UnknownData_9GCM, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkHololensAdvancedInitializationSettings, 0x0034);
		}

		// struct FAkPluginInfo
		TEST_METHOD(ScriptStruct__AkAudio__AkPluginInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPluginInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPluginInfo, PluginID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPluginInfo, UnknownData_Y6JW, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPluginInfo, dll, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkPluginInfo, 0x0028);
		}

		// struct FAkAudioSession
		TEST_METHOD(ScriptStruct__AkAudio__AkAudioSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioSession, AudioSessionCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioSession, UnknownData_DZHL, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioSession, AudioSessionCategoryOptions, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioSession, AudioSessionMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioSession, UnknownData_XDX6, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAudioSession, 0x000C);
		}

		// struct FAkPS4AdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkPS4AdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPS4AdvancedInitializationSettings, ACPBatchBufferSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPS4AdvancedInitializationSettings, UseHardwareCodecLowLatencyMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPS4AdvancedInitializationSettings, UnknownData_R0IH, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkPS4AdvancedInitializationSettings, 0x0038);
		}

		// struct FAkPS5AdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkPS5AdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPS5AdvancedInitializationSettings, UseHardwareCodecLowLatencyMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPS5AdvancedInitializationSettings, bVorbisHwAcceleration, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPS5AdvancedInitializationSettings, UnknownData_OXX3, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkPS5AdvancedInitializationSettings, 0x0034);
		}

		// struct FAkAcousticTextureParams
		TEST_METHOD(ScriptStruct__AkAudio__AkAcousticTextureParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAcousticTextureParams, AbsorptionValues, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAcousticTextureParams, UnknownData_9IU7, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAcousticTextureParams, 0x0020);
		}

		// struct FAkPropertyToControl
		TEST_METHOD(ScriptStruct__AkAudio__AkPropertyToControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPropertyToControl, ItemProperty, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkPropertyToControl, 0x0010);
		}

		// struct FAkSurfacePoly
		TEST_METHOD(ScriptStruct__AkAudio__AkSurfacePoly)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSurfacePoly, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSurfacePoly, Occlusion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSurfacePoly, EnableSurface, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSurfacePoly, UnknownData_AX0A, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSurfacePoly, SurfaceArea, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSurfacePoly, UnknownData_OAJV, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkSurfacePoly, 0x0018);
		}

		// struct FAkCommunicationSettingsWithCommSelection : public FAkCommunicationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkCommunicationSettingsWithCommSelection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettingsWithCommSelection, CommunicationSystem, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettingsWithCommSelection, UnknownData_FMGK, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettingsWithCommSelection, UnknownData_S7YL, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkCommunicationSettingsWithCommSelection, 0x0028);
		}

		// struct FAkWindowsAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkWindowsAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWindowsAdvancedInitializationSettings, UseHeadMountedDisplayAudioDevice, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWindowsAdvancedInitializationSettings, UnknownData_UO7M, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWindowsAdvancedInitializationSettings, MaxSystemAudioObjects, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWindowsAdvancedInitializationSettings, 0x0038);
		}

		// struct FAkWinGDKAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkWinGDKAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWinGDKAdvancedInitializationSettings, UseHeadMountedDisplayAudioDevice, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWinGDKAdvancedInitializationSettings, UnknownData_JXS5, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWinGDKAdvancedInitializationSettings, 0x0034);
		}

		// struct FAkXboxOneGDKApuHeapInitializationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkXboxOneGDKApuHeapInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneGDKApuHeapInitializationSettings, CachedSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneGDKApuHeapInitializationSettings, NonCachedSize, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkXboxOneGDKApuHeapInitializationSettings, 0x0008);
		}

		// struct FAkXboxOneGDKAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkXboxOneGDKAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneGDKAdvancedInitializationSettings, MaximumNumberOfXMAVoices, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneGDKAdvancedInitializationSettings, UseHardwareCodecLowLatencyMode, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneGDKAdvancedInitializationSettings, UnknownData_VJHY, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkXboxOneGDKAdvancedInitializationSettings, 0x0034);
		}

		// struct FAkXboxOneApuHeapInitializationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkXboxOneApuHeapInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneApuHeapInitializationSettings, CachedSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneApuHeapInitializationSettings, NonCachedSize, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkXboxOneApuHeapInitializationSettings, 0x0008);
		}

		// struct FAkXboxOneAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkXboxOneAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneAdvancedInitializationSettings, MaximumNumberOfXMAVoices, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneAdvancedInitializationSettings, UseHardwareCodecLowLatencyMode, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneAdvancedInitializationSettings, UnknownData_O7M7, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkXboxOneAdvancedInitializationSettings, 0x0034);
		}

		// struct FAkXSXApuHeapInitializationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkXSXApuHeapInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXSXApuHeapInitializationSettings, CachedSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXSXApuHeapInitializationSettings, NonCachedSize, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkXSXApuHeapInitializationSettings, 0x0008);
		}

		// struct FAkXSXAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkXSXAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXSXAdvancedInitializationSettings, MaximumNumberOfXMAVoices, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXSXAdvancedInitializationSettings, UseHardwareCodecLowLatencyMode, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXSXAdvancedInitializationSettings, UnknownData_OF3O, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXSXAdvancedInitializationSettings, MaximumNumberOfOpusVoices, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXSXAdvancedInitializationSettings, UnknownData_W1D4, 0x0036);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkXSXAdvancedInitializationSettings, 0x0038);
		}

		// struct FAkAudioEventTrackKey
		TEST_METHOD(ScriptStruct__AkAudio__AkAudioEventTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioEventTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioEventTrackKey, UnknownData_XUKW, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioEventTrackKey, AkAudioEvent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioEventTrackKey, EventName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAudioEventTrackKey, 0x0020);
		}

		// struct FMovieSceneTangentDataSerializationHelper
		TEST_METHOD(ScriptStruct__AkAudio__MovieSceneTangentDataSerializationHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, ArriveTangent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, LeaveTangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, TangentWeightMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, UnknownData_0CZ5, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, ArriveTangentWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, LeaveTangentWeight, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTangentDataSerializationHelper, 0x0014);
		}

		// struct FMovieSceneFloatValueSerializationHelper
		TEST_METHOD(ScriptStruct__AkAudio__MovieSceneFloatValueSerializationHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValueSerializationHelper, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValueSerializationHelper, InterpMode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValueSerializationHelper, TangentMode, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValueSerializationHelper, UnknownData_7VP2, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValueSerializationHelper, Tangent, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatValueSerializationHelper, 0x001C);
		}

		// struct FMovieSceneFloatChannelSerializationHelper
		TEST_METHOD(ScriptStruct__AkAudio__MovieSceneFloatChannelSerializationHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, PreInfinityExtrap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, PostInfinityExtrap, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, UnknownData_B1D4, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, bHasDefaultValue, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, UnknownData_8ETC, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatChannelSerializationHelper, 0x0030);
		}

		// struct FAKWaapiJsonObject
		TEST_METHOD(ScriptStruct__AkAudio__AKWaapiJsonObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAKWaapiJsonObject, UnknownData_Y83R, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAKWaapiJsonObject, 0x0010);
		}

		// struct FAkWaapiSubscriptionId
		TEST_METHOD(ScriptStruct__AkAudio__AkWaapiSubscriptionId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWaapiSubscriptionId, UnknownData_D86E, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWaapiSubscriptionId, 0x0008);
		}

		// struct FAkExternalSourceInfo
		TEST_METHOD(ScriptStruct__AkAudio__AkExternalSourceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkExternalSourceInfo, ExternalSrcName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkExternalSourceInfo, CodecID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkExternalSourceInfo, UnknownData_95LY, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkExternalSourceInfo, Filename, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkExternalSourceInfo, ExternalSourceAsset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkExternalSourceInfo, IsStreamed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkExternalSourceInfo, UnknownData_5RNS, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkExternalSourceInfo, 0x0038);
		}

		// struct FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiEventBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiEventBase, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiEventBase, Chan, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiEventBase, 0x0002);
		}

		// struct FAkMidiProgramChange : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiProgramChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiProgramChange, ProgramNum, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiProgramChange, 0x0003);
		}

		// struct FAkMidiChannelAftertouch : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiChannelAftertouch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiChannelAftertouch, Value, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiChannelAftertouch, 0x0003);
		}

		// struct FAkMidiNoteAftertouch : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiNoteAftertouch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiNoteAftertouch, Note, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiNoteAftertouch, Value, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiNoteAftertouch, 0x0004);
		}

		// struct FAkMidiPitchBend : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiPitchBend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiPitchBend, ValueLsb, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiPitchBend, ValueMsb, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiPitchBend, FullValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiPitchBend, 0x0008);
		}

		// struct FAkMidiCc : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiCc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiCc, Cc, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiCc, Value, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiCc, 0x0004);
		}

		// struct FAkMidiNoteOnOff : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiNoteOnOff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiNoteOnOff, Note, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiNoteOnOff, Velocity, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiNoteOnOff, 0x0004);
		}

		// struct FAkMidiGeneric : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiGeneric)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiGeneric, Param1, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiGeneric, Param2, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiGeneric, 0x0004);
		}

		// struct FAkOutputSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkOutputSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkOutputSettings, AudioDeviceSharesetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkOutputSettings, IdDevice, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkOutputSettings, PanRule, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkOutputSettings, ChannelConfig, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkOutputSettings, UnknownData_JKNT, 0x0016);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkOutputSettings, 0x0018);
		}

		// struct FAkChannelMask
		TEST_METHOD(ScriptStruct__AkAudio__AkChannelMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkChannelMask, ChannelMask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkChannelMask, 0x0004);
		}

		// struct FAkReverbDescriptor
		TEST_METHOD(ScriptStruct__AkAudio__AkReverbDescriptor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkReverbDescriptor, UnknownData_7JYU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkReverbDescriptor, 0x0028);
		}

		// struct FAkGeometrySurfacePropertiesToMap
		TEST_METHOD(ScriptStruct__AkAudio__AkGeometrySurfacePropertiesToMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometrySurfacePropertiesToMap, AcousticTexture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometrySurfacePropertiesToMap, OcclusionValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometrySurfacePropertiesToMap, UnknownData_AFRH, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkGeometrySurfacePropertiesToMap, 0x0030);
		}

		// struct FAkSurfaceEdgeInfo
		TEST_METHOD(ScriptStruct__AkAudio__AkSurfaceEdgeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSurfaceEdgeInfo, UnknownData_KHU9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkSurfaceEdgeInfo, 0x0028);
		}

		// struct FAkSurfaceEdgeVerts
		TEST_METHOD(ScriptStruct__AkAudio__AkSurfaceEdgeVerts)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSurfaceEdgeVerts, UnknownData_ORNS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkSurfaceEdgeVerts, 0x0018);
		}

		// struct FAkWaapiFieldNames
		TEST_METHOD(ScriptStruct__AkAudio__AkWaapiFieldNames)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWaapiFieldNames, FieldName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWaapiFieldNames, 0x0010);
		}

		// struct FAkWaapiUri
		TEST_METHOD(ScriptStruct__AkAudio__AkWaapiUri)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWaapiUri, Uri, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWaapiUri, 0x0010);
		}

		// struct FMovieSceneAkAudioEventTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__AkAudio__MovieSceneAkAudioEventTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAkAudioEventTemplate, Section, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAkAudioEventTemplate, 0x0028);
		}

		// struct FMovieSceneAkAudioRTPCTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__AkAudio__MovieSceneAkAudioRTPCTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAkAudioRTPCTemplate, Section, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAkAudioRTPCTemplate, 0x0028);
		}

		// struct FFoliageVertexColorChannelMask
		TEST_METHOD(ScriptStruct__Foliage__FoliageVertexColorChannelMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_MUNT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, MaskThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_DY6P, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageVertexColorChannelMask, 0x000C);
		}

		// struct FFoliageTypeObject
		TEST_METHOD(ScriptStruct__Foliage__FoliageTypeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, FoliageTypeObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, TypeInstance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, bIsAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, UnknownData_8RF8, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, Type, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageTypeObject, 0x0020);
		}

		// struct FProceduralFoliageInstance
		TEST_METHOD(ScriptStruct__Foliage__ProceduralFoliageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_BHTF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Age, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_ADT2, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Type, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_IDDN, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProceduralFoliageInstance, 0x0060);
		}

		// struct FMagicLeapTouchpadGesture
		TEST_METHOD(ScriptStruct__MagicLeapController__MagicLeapTouchpadGesture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Hand, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, UnknownData_KSXX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, MotionSource, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Direction, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, UnknownData_3795, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, PositionAndForce, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Speed, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Distance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, FingerGap, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Radius, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Angle, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapTouchpadGesture, 0x0030);
		}

		// struct FSupportedAreaData
		TEST_METHOD(ScriptStruct__NavigationSystem__SupportedAreaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClassName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, UnknownData_5WPA, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedAreaData, 0x0020);
		}

		// struct FNavCollisionBox
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Extent, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionBox, 0x0018);
		}

		// struct FNavCollisionCylinder
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Radius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Height, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionCylinder, 0x0014);
		}

		// struct FNavGraphNode
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, Owner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, UnknownData_5RGD, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphNode, 0x0018);
		}

		// struct FNavigationFilterArea
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, AreaClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, TravelCostOverride, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, EnteringCostOverride, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, UnknownData_524F, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterArea, 0x0018);
		}

		// struct FNavigationFilterFlags
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterFlags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterFlags, UnknownData_26ZE, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterFlags, 0x0004);
		}

		// struct FNavGraphEdge
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphEdge, UnknownData_W7A8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphEdge, 0x0018);
		}

		// struct FNavLinkCustomInstanceData : public FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__NavigationSystem__NavLinkCustomInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavLinkCustomInstanceData, NavLinkUserId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavLinkCustomInstanceData, UnknownData_O0OS, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavLinkCustomInstanceData, 0x0060);
		}

		// struct FRecastNavMeshGenerationProperties
		TEST_METHOD(ScriptStruct__NavigationSystem__RecastNavMeshGenerationProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TilePoolSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TileSizeUU, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, CellSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, CellHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentRadius, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentHeight, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentMaxSlope, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentMaxStepHeight, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MinRegionArea, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MergeRegionSize, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MaxSimplificationError, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TileNumberHardLimit, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, RegionPartitioning, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, LayerPartitioning, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, UnknownData_JXEE, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, RegionChunkSplits, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, LayerChunkSplits, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, UnknownData_63UH, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecastNavMeshGenerationProperties, 0x0040);
		}

		// struct FMagicLeapIdentityAttribute
		TEST_METHOD(ScriptStruct__MagicLeapIdentity__MagicLeapIdentityAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapIdentityAttribute, Attribute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapIdentityAttribute, UnknownData_SSMK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapIdentityAttribute, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapIdentityAttribute, 0x0018);
		}

		// struct FMagicLeapImageTrackerTarget
		TEST_METHOD(ScriptStruct__MagicLeapImageTracker__MagicLeapImageTrackerTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTrackerTarget, UnknownData_K2I0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapImageTrackerTarget, 0x00B0);
		}

		// struct FChaosHandlerSet
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosHandlerSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosHandlerSet, UnknownData_HGD8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosHandlerSet, ChaosHandlers, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosHandlerSet, 0x0058);
		}

		// struct FBreakEventCallbackWrapper
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__BreakEventCallbackWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBreakEventCallbackWrapper, UnknownData_Y1EW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBreakEventCallbackWrapper, 0x0040);
		}

		// struct FChaosDebugSubstepControl
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosDebugSubstepControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bPause, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bSubstep, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bStep, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosDebugSubstepControl, 0x0003);
		}

		// struct FChaosPhysicsCollisionInfo
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosPhysicsCollisionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Normal, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, AccumulatedImpulse, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Velocity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherVelocity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, AngularVelocity, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherAngularVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Mass, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherMass, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, UnknownData_F024, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosPhysicsCollisionInfo, 0x0070);
		}

		// struct FChaosBreakEvent
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosBreakEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Velocity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, AngularVelocity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Mass, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakEvent, 0x0030);
		}

		// struct FEngineServiceNotification
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceNotification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, TimeSeconds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceNotification, 0x0018);
		}

		// struct FEngineServiceTerminate
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceTerminate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceTerminate, UserName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceTerminate, 0x0010);
		}

		// struct FEngineServiceExecuteCommand
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceExecuteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, UserName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceExecuteCommand, 0x0020);
		}

		// struct FEngineServiceAuthGrant
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthGrant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserToGrant, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthGrant, 0x0020);
		}

		// struct FEngineServiceAuthDeny
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthDeny)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserToDeny, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthDeny, 0x0020);
		}

		// struct FEngineServicePong
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, CurrentLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, EngineVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, HasBegunPlay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_SVKY, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, SessionId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, WorldTimeSeconds, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_KAXL, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePong, 0x0050);
		}

		// struct FEngineServicePing
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePing, UnknownData_6EYP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePing, 0x0001);
		}

		// struct FS_SubtitleLine
		TEST_METHOD(UserDefinedStruct__S_SubtitleLine__S_SubtitleLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SubtitleLine, StartSeconds_2_1870596348C62CBF699644B00A08D0D3, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SubtitleLine, UnknownData_3JJ0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SubtitleLine, String_5_16B98FD64FCF696BE6A3E3800A715329, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_SubtitleLine, 0x0018);
		}

		// struct FSubmixEffectDynamicProcessorFilterSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicProcessorFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, UnknownData_FZDP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, Cutoff, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, GainDb, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicProcessorFilterSettings, 0x000C);
		}

		// struct FSubmixEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicsProcessorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LinkMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_USM3, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, InputGainDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ThresholdDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, Ratio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LookAheadMsec, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ExternalSubmix, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_H11B, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyGainDb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, OutputGainDb, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyHighshelf, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyLowshelf, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_7CT5, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicsProcessorSettings, 0x0050);
		}

		// struct FSubmixEffectEQBand
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectEQBand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, UnknownData_EAE4, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectEQBand, 0x0010);
		}

		// struct FSubmixEffectSubmixEQSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectSubmixEQSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectSubmixEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectSubmixEQSettings, 0x0010);
		}

		// struct FSubmixEffectReverbSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Density, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Diffusion, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Gain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, GainHF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayHFRatio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsGain, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsDelay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateGain, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateDelay, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, AirAbsorptionGainHF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, WetLevel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DryLevel, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectReverbSettings, 0x0034);
		}

		// struct FSubmixEffectReverbFastSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectReverbFastSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, bBypass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, UnknownData_TVAA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, Density, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, Diffusion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, Gain, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, GainHF, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, DecayTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, DecayHFRatio, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, ReflectionsGain, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, ReflectionsDelay, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, LateGain, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, LateDelay, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, AirAbsorptionGainHF, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, WetLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, DryLevel, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectReverbFastSettings, 0x0038);
		}

		// struct FS_Elevator_Doors
		TEST_METHOD(UserDefinedStruct__S_Elevator_Doors__S_Elevator_Doors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Doors, A_4_15EE3E3E4CAE2FE6A06FB2A76EFAE9C3, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Doors, B_5_1AE6811F450FC9C658C5C18C1F4BF37D, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_Elevator_Doors, 0x0020);
		}

		// struct FDbgProgressionInfo
		TEST_METHOD(UserDefinedStruct__DbgProgressionInfo__DbgProgressionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDbgProgressionInfo, Missions_3_A2EE865442E07898129354B64257DB5B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDbgProgressionInfo, Items_5_0313D851473CC18AE417308CD7795CFB, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDbgProgressionInfo, Location_9_146C72D446E54DC82C90359DC90A9C4E, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDbgProgressionInfo, 0x0048);
		}

		// struct FMagicLeapEyeBlinkState
		TEST_METHOD(ScriptStruct__MagicLeapEyeTracker__MagicLeapEyeBlinkState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapEyeBlinkState, LeftEyeBlinked, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapEyeBlinkState, RightEyeBlinked, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapEyeBlinkState, 0x0002);
		}

		// struct FMediaPlayerTrackOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerTrackOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Audio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Caption, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, MetaData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Script, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Subtitle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Text, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Video, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerTrackOptions, 0x001C);
		}

		// struct FMediaPlayerOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, UnknownData_SHSV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, SeekTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, PlayOnOpen, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Loop, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, UnknownData_93QA, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerOptions, 0x0030);
		}

		// struct FOverlayItem
		TEST_METHOD(ScriptStruct__Overlay__OverlayItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, EndTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Text, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Position, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlayItem, 0x0028);
		}

		// struct FPS_Upgrade_Freddy_ColorData_DS
		TEST_METHOD(UserDefinedStruct__PS_Upgrade_Freddy_ColorData_DS__PS_Upgrade_Freddy_ColorData_DS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPS_Upgrade_Freddy_ColorData_DS, Sound_16_D8B72EA8432CD2F86011D2AF23AB1ABB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPS_Upgrade_Freddy_ColorData_DS, ColorMaterial_15_799C6FE94076986DD56B8680162C6855, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPS_Upgrade_Freddy_ColorData_DS, 0x0010);
		}

		// struct FActorSequenceObjectReference
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_NI7D, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, ActorId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_ZQHV, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, PathToComponent, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReference, 0x0028);
		}

		// struct FActorSequenceObjectReferences
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferences, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferences, 0x0010);
		}

		// struct FActorSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, BindingIds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, References, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferenceMap, 0x0020);
		}

		// struct FJoinabilitySettings
		TEST_METHOD(ScriptStruct__CoreUObject__JoinabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, SessionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bPublicSearchable, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bAllowInvites, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresence, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresenceFriendsOnly, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPlayers, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPartySize, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinabilitySettings, 0x0014);
		}

		// struct FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__CoreUObject__UniqueNetIdWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdWrapper, UnknownData_9XYO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdWrapper, 0x0001);
		}

		// struct FGuid
		TEST_METHOD(ScriptStruct__CoreUObject__Guid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, C, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, D, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGuid, 0x0010);
		}

		// struct FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector, 0x000C);
		}

		// struct FVector4
		TEST_METHOD(ScriptStruct__CoreUObject__Vector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4, 0x0010);
		}

		// struct FVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__Vector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2D, 0x0008);
		}

		// struct FTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__TwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwoVectors, 0x0018);
		}

		// struct FPlane : public FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Plane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlane, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlane, 0x0010);
		}

		// struct FRotator
		TEST_METHOD(ScriptStruct__CoreUObject__Rotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Yaw, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Roll, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotator, 0x000C);
		}

		// struct FQuat
		TEST_METHOD(ScriptStruct__CoreUObject__Quat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuat, 0x0010);
		}

		// struct FPackedNormal
		TEST_METHOD(ScriptStruct__CoreUObject__PackedNormal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Z, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, W, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedNormal, 0x0004);
		}

		// struct FPackedRGB10A2N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGB10A2N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGB10A2N, Packed, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGB10A2N, 0x0004);
		}

		// struct FPackedRGBA16N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGBA16N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, XY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, ZW, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGBA16N, 0x0008);
		}

		// struct FIntPoint
		TEST_METHOD(ScriptStruct__CoreUObject__IntPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntPoint, 0x0008);
		}

		// struct FIntVector
		TEST_METHOD(ScriptStruct__CoreUObject__IntVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntVector, 0x000C);
		}

		// struct FColor
		TEST_METHOD(ScriptStruct__CoreUObject__Color)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, R, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, A, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColor, 0x0004);
		}

		// struct FLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__LinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, G, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, B, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, A, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearColor, 0x0010);
		}

		// struct FBox
		TEST_METHOD(ScriptStruct__CoreUObject__Box)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Max, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, IsValid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, UnknownData_ZWD4, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox, 0x001C);
		}

		// struct FBox2D
		TEST_METHOD(ScriptStruct__CoreUObject__Box2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Max, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, bIsValid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, UnknownData_K375, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox2D, 0x0014);
		}

		// struct FBoxSphereBounds
		TEST_METHOD(ScriptStruct__CoreUObject__BoxSphereBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, Origin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, BoxExtent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, SphereRadius, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoxSphereBounds, 0x001C);
		}

		// struct FOrientedBox
		TEST_METHOD(ScriptStruct__CoreUObject__OrientedBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentZ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrientedBox, 0x003C);
		}

		// struct FMatrix
		TEST_METHOD(ScriptStruct__CoreUObject__Matrix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, XPlane, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, YPlane, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, ZPlane, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, WPlane, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatrix, 0x0040);
		}

		// struct FInterpCurvePointFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, ArriveTangent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, LeaveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InterpMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, UnknownData_HERJ, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointFloat, 0x0014);
		}

		// struct FInterpCurveFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, UnknownData_HQ06, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveFloat, 0x0018);
		}

		// struct FInterpCurvePointVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InterpMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, UnknownData_JKV2, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector2D, 0x0020);
		}

		// struct FInterpCurveVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, UnknownData_5LDB, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector2D, 0x0018);
		}

		// struct FInterpCurvePointVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InterpMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, UnknownData_1M85, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector, 0x002C);
		}

		// struct FInterpCurveVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, UnknownData_U5GZ, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector, 0x0018);
		}

		// struct FInterpCurvePointQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_3K9K, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, OutVal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, ArriveTangent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, LeaveTangent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InterpMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_EA1F, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointQuat, 0x0050);
		}

		// struct FInterpCurveQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, UnknownData_6F6S, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveQuat, 0x0018);
		}

		// struct FInterpCurvePointTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, ArriveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, LeaveTangent, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InterpMode, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, UnknownData_14GN, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointTwoVectors, 0x0050);
		}

		// struct FInterpCurveTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, UnknownData_2V9O, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveTwoVectors, 0x0018);
		}

		// struct FInterpCurvePointLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, ArriveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, LeaveTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InterpMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, UnknownData_YBY0, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointLinearColor, 0x0038);
		}

		// struct FInterpCurveLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, UnknownData_UN6A, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveLinearColor, 0x0018);
		}

		// struct FTransform
		TEST_METHOD(ScriptStruct__CoreUObject__Transform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Translation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_DB9G, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Scale3D, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_TQUC, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransform, 0x0030);
		}

		// struct FRandomStream
		TEST_METHOD(ScriptStruct__CoreUObject__RandomStream)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, InitialSeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, Seed, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomStream, 0x0008);
		}

		// struct FDateTime
		TEST_METHOD(ScriptStruct__CoreUObject__DateTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDateTime, UnknownData_57M6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDateTime, 0x0008);
		}

		// struct FFrameNumber
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumber, 0x0004);
		}

		// struct FFrameRate
		TEST_METHOD(ScriptStruct__CoreUObject__FrameRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Numerator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Denominator, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameRate, 0x0008);
		}

		// struct FFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__FrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, SubFrame, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameTime, 0x0008);
		}

		// struct FQualifiedFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__QualifiedFrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Rate, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQualifiedFrameTime, 0x0010);
		}

		// struct FTimecode
		TEST_METHOD(ScriptStruct__CoreUObject__Timecode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Hours, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Minutes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Seconds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Frames, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, bDropFrameFormat, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, UnknownData_OFI6, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimecode, 0x0014);
		}

		// struct FTimespan
		TEST_METHOD(ScriptStruct__CoreUObject__Timespan)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimespan, UnknownData_P9Z3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimespan, 0x0008);
		}

		// struct FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftObjectPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, AssetPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, SubPathString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftObjectPath, 0x0018);
		}

		// struct FSoftClassPath : public FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftClassPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftClassPath, 0x0018);
		}

		// struct FPrimaryAssetType
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetType, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetType, 0x0008);
		}

		// struct FPrimaryAssetId
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetId, 0x0010);
		}

		// struct FFallbackStruct
		TEST_METHOD(ScriptStruct__CoreUObject__FallbackStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallbackStruct, UnknownData_Z8O3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFallbackStruct, 0x0001);
		}

		// struct FFloatRangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, UnknownData_4F85, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRangeBound, 0x0008);
		}

		// struct FFloatRange
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRange, 0x0010);
		}

		// struct FInt32RangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__Int32RangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, UnknownData_UCKO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32RangeBound, 0x0008);
		}

		// struct FInt32Range
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Range)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Range, 0x0010);
		}

		// struct FFloatInterval
		TEST_METHOD(ScriptStruct__CoreUObject__FloatInterval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatInterval, 0x0008);
		}

		// struct FInt32Interval
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Interval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Interval, 0x0008);
		}

		// struct FPolyglotTextData
		TEST_METHOD(ScriptStruct__CoreUObject__PolyglotTextData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_YKMI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeCulture, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Namespace, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Key, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeString, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, LocalizedStrings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, bIsMinimalPatch, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_XI4M, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, CachedText, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolyglotTextData, 0x00B8);
		}

		// struct FAutomationEvent
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, UnknownData_0MVX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Context, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Artifact, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationEvent, 0x0038);
		}

		// struct FAutomationExecutionEntry
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationExecutionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Event, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, LineNumber, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, UnknownData_5332, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Timestamp, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationExecutionEntry, 0x0058);
		}

		// struct FMovieSceneTransformMask
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformMask, 0x0004);
		}

		// struct FMovieSceneActorReferenceKey
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, ComponentName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, SocketName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceKey, 0x0028);
		}

		// struct FMovieSceneActorReferenceData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_D9O1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyValues, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_D8GY, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceData, 0x00B0);
		}

		// struct FMovieSceneCameraAnimSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, CameraAnim, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendInTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendOutTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, bLooping, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, UnknownData_B692, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionData, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, ShakeClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlayScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlaySpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_JZLW, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UserDefinedPlaySpace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_O6KO, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionData, 0x0020);
		}

		// struct FMovieSceneEventPtrs
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventPtrs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPtrs, Function, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPtrs, BoundObjectProperty, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventPtrs, 0x0028);
		}

		// struct FMovieSceneEvent
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvent, Ptrs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvent, 0x0028);
		}

		// struct FMovieSceneEventParameters
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventParameters, UnknownData_79AD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventParameters, 0x0028);
		}

		// struct FEventPayload
		TEST_METHOD(ScriptStruct__MovieSceneTracks__EventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, EventName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, Parameters, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventPayload, 0x0030);
		}

		// struct FMovieSceneEventSectionData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, UnknownData_O2X2, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionData, 0x0088);
		}

		// struct FMovieSceneEventChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, UnknownData_RBTH, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventChannel, 0x0088);
		}

		// struct FTransformParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__TransformParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Translation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Rotation, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Scale, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformParameterNameAndCurves, 0x05A8);
		}

		// struct FColorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ColorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, RedCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, GreenCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, BlueCurve, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, AlphaCurve, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorParameterNameAndCurves, 0x0288);
		}

		// struct FVectorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__VectorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, XCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, YCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ZCurve, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterNameAndCurves, 0x01E8);
		}

		// struct FVector2DParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__Vector2DParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, XCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, YCurve, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2DParameterNameAndCurves, 0x0148);
		}

		// struct FScalarParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ScalarParameterNameAndCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterNameAndCurve, 0x00A8);
		}

		// struct FBoolParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__BoolParameterNameAndCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolParameterNameAndCurve, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolParameterNameAndCurve, ParameterCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolParameterNameAndCurve, 0x0098);
		}

		// struct FMovieSceneParticleChannel : public FMovieSceneByteChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleChannel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleChannel, 0x0098);
		}

		// struct FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, FirstLoopStartFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndFrameOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, PlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_8ZPS, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, SlotName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_O2QR, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Weight, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bSkipAnimNotifiers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bForceCustomMode, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_RBHF, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartOffset, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndOffset, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_89HJ, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationParams, 0x00D8);
		}

		// struct FMovieSceneStringChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, bHasDefaultValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, UnknownData_SWEW, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringChannel, 0x00A0);
		}

		// struct FMovieScene3DAttachSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DAttachSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachSocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachComponentName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentLocationRule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentRotationRule, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentScaleRule, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentLocationRule, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentRotationRule, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentScaleRule, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, UnknownData_H3C7, 0x004E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DAttachSectionTemplate, 0x0050);
		}

		// struct FMovieScene3DPathSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DPathSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, PathBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, TimingCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, FrontAxisEnum, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UpAxisEnum, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_V4GX, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_FXT6, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DPathSectionTemplate, 0x00E0);
		}

		// struct FMovieScene3DTransformKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Rotation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Time, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, UnknownData_SO5P, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformKeyStruct, 0x0048);
		}

		// struct FMovieScene3DScaleKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DScaleKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, UnknownData_EYY1, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DScaleKeyStruct, 0x0030);
		}

		// struct FMovieScene3DRotationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DRotationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Rotation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, UnknownData_TVAH, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DRotationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DLocationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DLocationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, UnknownData_7O41, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DLocationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DTransformTemplateData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformTemplateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, TranslationCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, RotationCurve, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ScaleCurve, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ManualWeight, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, BlendType, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_1IWM, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, Mask, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, bUseQuaternionInterpolation, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_JH74, 0x0649);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformTemplateData, 0x0650);
		}

		// struct FMovieSceneComponentTransformSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentTransformSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentTransformSectionTemplate, TemplateData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentTransformSectionTemplate, 0x0670);
		}

		// struct FMovieSceneActorReferenceSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, PropertyData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, ActorReferenceData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceSectionTemplate, 0x00F8);
		}

		// struct FMovieSceneAudioSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAudioSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplate, AudioSection, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAudioSectionTemplate, 0x0028);
		}

		// struct FMovieSceneAdditiveCameraAnimationTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAdditiveCameraAnimationTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAdditiveCameraAnimationTemplate, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, UnknownData_B1YR, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraAnimSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, UnknownData_8EET, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraCutSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraCutSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, CameraBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, UnknownData_56W8, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, CutTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, bHasCutTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, bIsFinalSection, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, UnknownData_KWM8, 0x0072);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraCutSectionTemplate, 0x0080);
		}

		// struct FMovieSceneColorKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, UnknownData_9028, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorKeyStruct, 0x0038);
		}

		// struct FMovieSceneColorSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, Curves, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, BlendType, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, UnknownData_JT7U, 0x02C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorSectionTemplate, 0x02D0);
		}

		// struct FMovieSceneEventPayloadVariable
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventPayloadVariable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPayloadVariable, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventPayloadVariable, 0x0010);
		}

		// struct FMovieSceneEventTemplateBase : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventTemplateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTemplateBase, EventReceivers, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTemplateBase, UnknownData_52TG, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventTemplateBase, 0x0038);
		}

		// struct FMovieSceneEventRepeaterTemplate : public FMovieSceneEventTemplateBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventRepeaterTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventRepeaterTemplate, EventToTrigger, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventRepeaterTemplate, 0x0060);
		}

		// struct FMovieSceneEventTriggerTemplate : public FMovieSceneEventTemplateBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventTriggerTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerTemplate, EventTimes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerTemplate, Events, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventTriggerTemplate, 0x0058);
		}

		// struct FMovieSceneEventSectionTemplate : public FMovieSceneEventTemplateBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionTemplate, EventData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionTemplate, 0x00C0);
		}

		// struct FMovieSceneFadeSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFadeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, UnknownData_V9RV, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFadeSectionTemplate, 0x00D8);
		}

		// struct FMovieSceneLevelVisibilitySectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneLevelVisibilitySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, Visibility, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, UnknownData_SL9V, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, LevelNames, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneLevelVisibilitySectionTemplate, 0x0038);
		}

		// struct FMovieSceneParameterSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Scalars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Bools, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vector2Ds, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vectors, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Colors, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Transforms, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParameterSectionTemplate, 0x0080);
		}

		// struct FMovieSceneMaterialParameterCollectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneMaterialParameterCollectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMaterialParameterCollectionTemplate, MPC, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMaterialParameterCollectionTemplate, 0x0088);
		}

		// struct FMovieSceneObjectPropertyTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneObjectPropertyTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPropertyTemplate, ObjectChannel, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPropertyTemplate, 0x0108);
		}

		// struct FMovieSceneComponentMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, MaterialIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, UnknownData_MMAB, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentMaterialSectionTemplate, 0x0088);
		}

		// struct FMovieSceneParticleParameterSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleParameterSectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleParameterSectionTemplate, 0x0080);
		}

		// struct FMovieSceneParticleSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParticleSectionTemplate, ParticleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleSectionTemplate, 0x00B8);
		}

		// struct FMovieScenePrimitiveMaterialTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScenePrimitiveMaterialTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, MaterialIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, UnknownData_1NQM, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, MaterialChannel, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePrimitiveMaterialTemplate, 0x00E8);
		}

		// struct FMovieSceneEulerTransformPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEulerTransformPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEulerTransformPropertySectionTemplate, TemplateData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEulerTransformPropertySectionTemplate, 0x0698);
		}

		// struct FMovieSceneTransformPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformPropertySectionTemplate, TemplateData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformPropertySectionTemplate, 0x0698);
		}

		// struct FMovieSceneVectorPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, ComponentCurves, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, NumChannelsUsed, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, BlendType, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, UnknownData_HCCY, 0x02CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorPropertySectionTemplate, 0x02D0);
		}

		// struct FMovieSceneStringPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringPropertySectionTemplate, StringCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringPropertySectionTemplate, 0x00E8);
		}

		// struct FMovieSceneIntegerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneIntegerPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, IntegerCurve, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, BlendType, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, UnknownData_CMAF, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerPropertySectionTemplate, 0x00E0);
		}

		// struct FMovieSceneEnumPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEnumPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEnumPropertySectionTemplate, EnumCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEnumPropertySectionTemplate, 0x00E0);
		}

		// struct FMovieSceneBytePropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBytePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBytePropertySectionTemplate, ByteCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBytePropertySectionTemplate, 0x00E0);
		}

		// struct FMovieSceneFloatPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFloatPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, FloatFunction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, BlendType, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, UnknownData_PEAH, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatPropertySectionTemplate, 0x00F0);
		}

		// struct FMovieSceneBoolPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBoolPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolPropertySectionTemplate, BoolCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolPropertySectionTemplate, 0x00D8);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplateParameters : public FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionStartTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionEndTime, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, 0x00E0);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplate, 0x0100);
		}

		// struct FMovieSceneSlomoSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSlomoSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSlomoSectionTemplate, SlomoCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSlomoSectionTemplate, 0x00C0);
		}

		// struct FMovieSceneSpawnSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSpawnSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnSectionTemplate, Curve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnSectionTemplate, 0x00B0);
		}

		// struct FMovieSceneVectorKeyStructBase : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStructBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, UnknownData_LFVQ, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStructBase, 0x0028);
		}

		// struct FMovieSceneVector4KeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector4KeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, UnknownData_7STG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, Vector, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector4KeyStruct, 0x0040);
		}

		// struct FMovieSceneVectorKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, Vector, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, UnknownData_AX6Y, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStruct, 0x0038);
		}

		// struct FMovieSceneVector2DKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector2DKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector2DKeyStruct, Vector, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector2DKeyStruct, 0x0030);
		}

		// struct FMovieSceneVisibilitySectionTemplate : public FMovieSceneBoolPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVisibilitySectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVisibilitySectionTemplate, 0x00D8);
		}

		// struct FFNAFVisualQualitySettings
		TEST_METHOD(UserDefinedStruct__FNAFVisualQualitySettings__FNAFVisualQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFVisualQualitySettings, QualityCommand_3_69958D8743DD31385F09D39B833D904A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFVisualQualitySettings, UnknownData_GCRN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFVisualQualitySettings, PS4_13_B9B60FF847B8378E9569BB80554C703C, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFVisualQualitySettings, PS5Low_37_D46E0FC54A7F04270DE94D975EC96551, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFVisualQualitySettings, PS5High_36_F19484704FDEE0669B1FE3A0593D9C1C, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFVisualQualitySettings, MinSpec780_31_DF3935F64E326F0D5567CA92BF9629DA, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFVisualQualitySettings, PCLow_22_CB99B1CE497FA318BE10A9B41446E0FA, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFVisualQualitySettings, PCMedium_23_9F33F5B549A04D321D64128CB3187D50, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFVisualQualitySettings, PCHigh_24_2745C3334FA77CA9E3FABA9905B59A71, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFVisualQualitySettings, PCUltra_25_27D3E01C44C5E8740938EDA6A65E6027, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFNAFVisualQualitySettings, 0x0088);
		}

		// struct FCinematicCutscene
		TEST_METHOD(UserDefinedStruct__CinematicCutscene__CinematicCutscene)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCinematicCutscene, MediaSource_17_F0861EBA482CF373698053B6FFA75572, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCinematicCutscene, Audio_14_0E12833548EE05101B3FFCB0A7FB421F, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCinematicCutscene, AudioEvent_20_48434951466DC3A3CA0DC99E121EC79D, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCinematicCutscene, CinematicWwiseState_23_17A2CF6B4BB155BB3F402DA8ED022202, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCinematicCutscene, PostVideoWwiseState_25_40470A1846B938FF0F520286667105B1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCinematicCutscene, PlayFazerblastDialogue_27_6A5885FD4DEE9E682EE888AEF138E812, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCinematicCutscene, 0x0039);
		}

		// struct FDatasmithCameraLookatTrackingSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraLookatTrackingSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLookatTrackingSettingsTemplate, UnknownData_1VVH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLookatTrackingSettingsTemplate, ActorToTrack, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraLookatTrackingSettingsTemplate, 0x0030);
		}

		// struct FDatasmithCameraFilmbackSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFilmbackSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorHeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFilmbackSettingsTemplate, 0x0008);
		}

		// struct FDatasmithCameraLensSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraLensSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLensSettingsTemplate, MaxFStop, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraLensSettingsTemplate, 0x0004);
		}

		// struct FDatasmithCameraFocusSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFocusSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, UnknownData_E27K, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, ManualFocusDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFocusSettingsTemplate, 0x0008);
		}

		// struct FDatasmithPostProcessSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithPostProcessSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_DLL4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_8KEP, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, WhiteTemp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, VignetteIntensity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, FilmWhitePoint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, ColorSaturation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, AutoExposureMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_CCWJ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, CameraISO, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, CameraShutterSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, DepthOfFieldFstop, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithPostProcessSettingsTemplate, 0x0040);
		}

		// struct FDatasmithTessellationOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithTessellationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, ChordTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, MaxEdgeLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, NormalTolerance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, StitchingTechnique, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, UnknownData_KSWW, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithTessellationOptions, 0x0010);
		}

		// struct FDatasmithAssetImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithAssetImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithAssetImportOptions, PackagePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithAssetImportOptions, 0x0008);
		}

		// struct FDatasmithStaticMeshImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMeshImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MinLightmapResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MaxLightmapResolution, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bGenerateLightmapUVs, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bRemoveDegenerates, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMeshImportOptions, 0x0004);
		}

		// struct FDatasmithReimportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithReimportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bUpdateActors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bRespawnDeletedActors, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithReimportOptions, 0x0002);
		}

		// struct FDatasmithImportBaseOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithImportBaseOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, SceneHandling, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeGeometry, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeMaterial, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeLight, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeCamera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeAnimation, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, UnknownData_6VFR, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, AssetOptions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, StaticMeshOptions, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithImportBaseOptions, 0x0014);
		}

		// struct FDatasmithStaticParameterSetTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticParameterSetTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticParameterSetTemplate, StaticSwitchParameters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticParameterSetTemplate, 0x0050);
		}

		// struct FDatasmithMeshSectionInfoTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoTemplate, MaterialIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoTemplate, 0x0004);
		}

		// struct FDatasmithMeshBuildSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshBuildSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, UnknownData_5MNV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, DstLightmapIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshBuildSettingsTemplate, 0x0010);
		}

		// struct FDatasmithStaticMaterialTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMaterialTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, MaterialSlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, MaterialInterface, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMaterialTemplate, 0x0010);
		}

		// struct FDatasmithMeshSectionInfoMapTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoMapTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoMapTemplate, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoMapTemplate, 0x0050);
		}

		// struct FS_RacerInfo
		TEST_METHOD(UserDefinedStruct__S_RacerInfo__S_RacerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_RacerInfo, LastLapTime_3_2B99ECE04C3EA6BBE41389AE004DD21F, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_RacerInfo, LapNumber_7_9DB2B2E04F71E70DD27763A94B3A404A, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_RacerInfo, LastCheckpoint_9_6C9CFE944E6C6EA4C4DBBAA1332492E0, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_RacerInfo, Position_11_F82BCD0A4147A6C2E70455BE8AADD617, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_RacerInfo, LapTimes_15_248883CE42D365B1305900AA8B992A70, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_RacerInfo, BestLapIndex_19_AC39282945BF5D8889D8DCB6E3F620BF, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_RacerInfo, 0x0024);
		}

		// struct FPlatformRuntimeAudioCompressionOverrides
		TEST_METHOD(ScriptStruct__AudioPlatformConfiguration__PlatformRuntimeAudioCompressionOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, bOverrideCompressionTimes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, UnknownData_HG02, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, DurationThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, MaxNumRandomBranches, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, SoundCueQualityIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformRuntimeAudioCompressionOverrides, 0x0010);
		}

		// struct FGeometry
		TEST_METHOD(ScriptStruct__SlateCore__Geometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometry, UnknownData_OMAX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometry, 0x0038);
		}

		// struct FMargin
		TEST_METHOD(ScriptStruct__SlateCore__Margin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMargin, 0x0010);
		}

		// struct FSlateColor
		TEST_METHOD(ScriptStruct__SlateCore__SlateColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, SpecifiedColor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, ColorUseRule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, UnknownData_LQQ2, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateColor, 0x0028);
		}

		// struct FSlateBrush
		TEST_METHOD(ScriptStruct__SlateCore__SlateBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_BE42, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Margin, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, TintColor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UVRegion, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, DrawAs, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Tiling, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Mirroring, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageType, 0x006F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_LQ4I, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_N06V, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateBrush, 0x0088);
		}

		// struct FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__InputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputEvent, UnknownData_HJXT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputEvent, 0x0018);
		}

		// struct FPointerEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__PointerEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerEvent, UnknownData_K05T, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerEvent, 0x0070);
		}

		// struct FCharacterEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__CharacterEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterEvent, UnknownData_DNTH, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterEvent, 0x0020);
		}

		// struct FKeyEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__KeyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyEvent, UnknownData_ODKX, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyEvent, 0x0038);
		}

		// struct FNavigationEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__NavigationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationEvent, UnknownData_E9EX, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationEvent, 0x0020);
		}

		// struct FAnalogInputEvent : public FKeyEvent
		TEST_METHOD(ScriptStruct__SlateCore__AnalogInputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnalogInputEvent, UnknownData_5B27, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnalogInputEvent, 0x0040);
		}

		// struct FFontOutlineSettings
		TEST_METHOD(ScriptStruct__SlateCore__FontOutlineSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, bSeparateFillAlpha, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, bApplyOutlineToDropShadows, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, UnknownData_K1M5, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineColor, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontOutlineSettings, 0x0020);
		}

		// struct FSlateFontInfo
		TEST_METHOD(ScriptStruct__SlateCore__SlateFontInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, OutlineSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_6KJO, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, TypefaceFontName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, Size, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_4V55, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateFontInfo, 0x0050);
		}

		// struct FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateWidgetStyle, UnknownData_QW8U, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateWidgetStyle, 0x0008);
		}

		// struct FTableRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectorFocusedBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHoveredBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHoveredBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundHoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundBrush, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundHoveredBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundBrush, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, TextColor, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectedTextColor, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Above, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Onto, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Below, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHighlightedBrush, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHighlightedBrush, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowStyle, 0x07C8);
		}

		// struct FSlateSound
		TEST_METHOD(ScriptStruct__SlateCore__SlateSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, ResourceObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, UnknownData_9DRD, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateSound, 0x0018);
		}

		// struct FButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Normal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Hovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Pressed, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Disabled, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, NormalPadding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedPadding, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedSlateSound, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, HoveredSlateSound, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FButtonStyle, 0x0278);
		}

		// struct FComboButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, DownArrowImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ShadowOffset, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ShadowColorAndOpacity, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderBrush, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderPadding, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboButtonStyle, 0x03B8);
		}

		// struct FComboBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, ComboButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, PressedSlateSound, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, SelectionChangeSlateSound, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboBoxStyle, 0x03F0);
		}

		// struct FEditableTextStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, ColorAndOpacity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageSelected, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageComposing, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, CaretImage, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextStyle, 0x0218);
		}

		// struct FScrollBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBackgroundImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalTopSlotImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalTopSlotImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBottomSlotImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBottomSlotImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, NormalThumbImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HoveredThumbImage, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, DraggedThumbImage, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBarStyle, 0x04D0);
		}

		// struct FEditableTextBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageHovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageFocused, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageReadOnly, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Padding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Font, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ForegroundColor, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ReadOnlyForegroundColor, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, HScrollBarPadding, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, VScrollBarPadding, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ScrollBarStyle, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextBoxStyle, 0x07F0);
		}

		// struct FTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ColorAndOpacity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowOffset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowColorAndOpacity, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, SelectedBackgroundColor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightShape, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, StrikeBrush, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, UnderlineBrush, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextBlockStyle, 0x0268);
		}

		// struct FSpinBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SpinBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, BackgroundBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, HoveredBackgroundBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ActiveFillBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, InactiveFillBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ArrowsImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ForegroundColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, TextPadding, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpinBoxStyle, 0x02E8);
		}

		// struct FFontData
		TEST_METHOD(ScriptStruct__SlateCore__FontData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFilename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, Hinting, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, LoadingPolicy, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, UnknownData_HGDZ, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, SubFaceIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFaceAsset, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontData, 0x0020);
		}

		// struct FTypefaceEntry
		TEST_METHOD(ScriptStruct__SlateCore__TypefaceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Font, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypefaceEntry, 0x0028);
		}

		// struct FTypeface
		TEST_METHOD(ScriptStruct__SlateCore__Typeface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypeface, Fonts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypeface, 0x0010);
		}

		// struct FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFallbackFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, Typeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, ScalingFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, UnknownData_M48K, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFallbackFont, 0x0018);
		}

		// struct FCompositeSubFont : public FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeSubFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, CharacterRanges, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, Cultures, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSubFont, 0x0038);
		}

		// struct FCompositeFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, DefaultTypeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, FallbackTypeface, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, SubTypefaces, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFont, 0x0038);
		}

		// struct FMotionEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__MotionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionEvent, UnknownData_FM0M, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotionEvent, 0x0048);
		}

		// struct FCaptureLostEvent
		TEST_METHOD(ScriptStruct__SlateCore__CaptureLostEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureLostEvent, UnknownData_2INX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureLostEvent, 0x0008);
		}

		// struct FFocusEvent
		TEST_METHOD(ScriptStruct__SlateCore__FocusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFocusEvent, UnknownData_HNRD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFocusEvent, 0x0008);
		}

		// struct FWindowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__WindowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MinimizeButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MaximizeButtonStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, RestoreButtonStyle, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, CloseButtonStyle, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, TitleTextStyle, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ActiveTitleBrush, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, InactiveTitleBrush, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, FlashTitleBrush, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundColor, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineBrush, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineColor, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BorderBrush, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundBrush, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ChildBackgroundBrush, 0x0FD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowStyle, 0x1058);
		}

		// struct FScrollBorderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBorderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, BottomShadowBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBorderStyle, 0x0118);
		}

		// struct FScrollBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, BottomShadowBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, LeftShadowBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, RightShadowBrush, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBoxStyle, 0x0228);
		}

		// struct FDockTabStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__DockTabStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, CloseButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, NormalBrush, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ActiveBrush, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayTabBrush, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayIconBrush, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ForegroundBrush, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, HoveredBrush, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ContentAreaBrush, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabWellBrush, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabPadding, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, OverlapWidth, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, UnknownData_V3KJ, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, FlashColor, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDockTabStyle, 0x0700);
		}

		// struct FSplitterStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SplitterStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleNormalBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleHighlightBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplitterStyle, 0x0118);
		}

		// struct FTableColumnHeaderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableColumnHeaderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryAscendingImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryDescendingImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryAscendingImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryDescendingImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, NormalBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, HoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownNormalBorderBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownHoveredBorderBrush, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableColumnHeaderStyle, 0x04D0);
		}

		// struct FHeaderRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HeaderRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, LastColumnStyle, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnSplitterStyle, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, BackgroundBrush, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ForegroundColor, 0x0B48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeaderRowStyle, 0x0B70);
		}

		// struct FInlineTextImageStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineTextImageStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Image, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Baseline, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, UnknownData_LNOR, 0x0092);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineTextImageStyle, 0x0098);
		}

		// struct FSliderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalBarImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredBarImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledBarImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalThumbImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredThumbImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledThumbImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, BarThickness, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, UnknownData_O9WP, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSliderStyle, 0x0340);
		}

		// struct FVolumeControlStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__VolumeControlStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, SliderStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, HighVolumeImage, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MidVolumeImage, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, LowVolumeImage, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, NoVolumeImage, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MutedImage, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVolumeControlStyle, 0x05F0);
		}

		// struct FSearchBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SearchBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, TextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ActiveFontInfo, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UpArrowImage, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, DownArrowImage, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, GlassImage, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ClearImage, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ImagePadding, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, bLeftAlignButtons, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UnknownData_5PPW, 0x0A79);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSearchBoxStyle, 0x0A80);
		}

		// struct FExpandableAreaStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ExpandableAreaStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, CollapsedImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, ExpandedImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, RolloutAnimationSeconds, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, UnknownData_3RVX, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpandableAreaStyle, 0x0120);
		}

		// struct FProgressBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ProgressBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, BackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, FillImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, MarqueeImage, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProgressBarStyle, 0x01A0);
		}

		// struct FInlineEditableTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineEditableTextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, EditableTextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, TextStyle, 0x07F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineEditableTextBlockStyle, 0x0A60);
		}

		// struct FHyperlinkStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HyperlinkStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, UnderlineStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, TextStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, Padding, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHyperlinkStyle, 0x04F8);
		}

		// struct FCheckBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__CheckBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckBoxType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UnknownData_BTFV, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedImage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedHoveredImage, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedPressedImage, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedImage, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedHoveredImage, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedPressedImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedImage, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedHoveredImage, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedPressedImage, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, Padding, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, ForegroundColor, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, BorderBackgroundColor, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedSlateSound, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedSlateSound, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, HoveredSlateSound, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCheckBoxStyle, 0x0580);
		}

		// struct FLobbyInstructionCardSetup
		TEST_METHOD(UserDefinedStruct__LobbyInstructionCardSetup__LobbyInstructionCardSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyInstructionCardSetup, Mapping_5_B90853C241FEFFD376AA10A0D6F0B02E, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLobbyInstructionCardSetup, 0x0050);
		}

		// struct FStaffbotMaterials_DS
		TEST_METHOD(UserDefinedStruct__StaffbotMaterials_DS__StaffbotMaterials_DS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaffbotMaterials_DS, Materials_12_CFD447CC417F3DE0285807802E24F42E, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaffbotMaterials_DS, 0x0010);
		}

		// struct FAnimBP_BaseInteractionsArray
		TEST_METHOD(UserDefinedStruct__AnimBP_BaseInteractionsArray__AnimBP_BaseInteractionsArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBP_BaseInteractionsArray, Settings_4_D9E117E44E92B7BD76A0E197337E7CEE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBP_BaseInteractionsArray, 0x0010);
		}

		// struct FKeyBinding_Struct
		TEST_METHOD(UserDefinedStruct__KeyBinding_Struct__KeyBinding_Struct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBinding_Struct, PC_Key1_2_90C533984F7518D145B295891C22711C, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBinding_Struct, PC_Key2_6_5EC2CC9140E3A1629DEFF1A12A1D85E5, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBinding_Struct, Gamepad_Key1_7_FC2FC6604514AAB6D44552BB69B04271, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBinding_Struct, Gamepad_Key2_8_D13A707C46E362F2C18F3A961B0A02AD, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyBinding_Struct, 0x0060);
		}

		// struct FS_Elevator_Airlock_Location
		TEST_METHOD(UserDefinedStruct__S_Elevator_Airlock_Location__S_Elevator_Airlock_Location)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Airlock_Location, Doors_41_04BA24064194ECAC16DD3499EB852CF5, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Airlock_Location, Levels_12_DC0C3772429EA728E351358C8345CE72, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Airlock_Location, LevelsVisible_30_718555F64E0E9C1837F4F39B1EC0C800, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_Elevator_Airlock_Location, 0x0030);
		}

		// struct FNiagaraTypeDefinition
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, ClassStructOrEnum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, UnderlyingType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, UnknownData_SS8Y, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeDefinition, 0x0010);
		}

		// struct FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableBase, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableBase, TypeDef, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableBase, 0x0018);
		}

		// struct FNiagaraVariable : public FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariable, VarData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariable, 0x0028);
		}

		// struct FNiagaraVariableWithOffset : public FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableWithOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableWithOffset, Offset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableWithOffset, UnknownData_P1GA, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableWithOffset, 0x0020);
		}

		// struct FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UnknownData_6DRR, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, Owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, SortedParameterOffsets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, ParameterData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, DataInterfaces, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UObjects, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UnknownData_2KFG, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterStore, 0x00B8);
		}

		// struct FNiagaraUserRedirectionParameterStore : public FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraUserRedirectionParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraUserRedirectionParameterStore, UserParameterRedirects, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraUserRedirectionParameterStore, 0x0108);
		}

		// struct FNCPoolElement
		TEST_METHOD(ScriptStruct__Niagara__NCPoolElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPoolElement, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPoolElement, UnknownData_YZAB, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNCPoolElement, 0x0010);
		}

		// struct FNCPool
		TEST_METHOD(ScriptStruct__Niagara__NCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, UnknownData_EYW0, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNCPool, 0x0038);
		}

		// struct FNiagaraUserParameterBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraUserParameterBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraUserParameterBinding, Parameter, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraUserParameterBinding, 0x0028);
		}

		// struct FNDIStaticMeshSectionFilter
		TEST_METHOD(ScriptStruct__Niagara__NDIStaticMeshSectionFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNDIStaticMeshSectionFilter, AllowedMaterialSlots, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNDIStaticMeshSectionFilter, 0x0010);
		}

		// struct FNiagaraDeviceProfileStateEntry
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDeviceProfileStateEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, QualityLevelMask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, SetQualityLevelMask, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDeviceProfileStateEntry, 0x0010);
		}

		// struct FNiagaraPlatformSet
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, QualityLevelMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, UnknownData_Z8C7, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, DeviceProfileStates, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, UnknownData_X1PU, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSet, 0x0020);
		}

		// struct FNiagaraEmitterScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, Platforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, UnknownData_CVN1, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, SpawnCountScale, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilitySettings, 0x0028);
		}

		// struct FNiagaraEmitterScalabilitySettingsArray
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilitySettingsArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettingsArray, Settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilitySettingsArray, 0x0010);
		}

		// struct FNiagaraSystemScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, Platforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, UnknownData_07NQ, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxTimeWithoutRender, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilitySettings, 0x0030);
		}

		// struct FNiagaraSystemScalabilitySettingsArray
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilitySettingsArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettingsArray, Settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilitySettingsArray, 0x0010);
		}

		// struct FNiagaraEventReceiverProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventReceiverProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, SourceEventGenerator, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, SourceEmitter, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventReceiverProperties, 0x0018);
		}

		// struct FNiagaraTypeLayoutInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeLayoutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, FloatComponentByteOffsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, FloatComponentRegisterOffsets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, Int32ComponentByteOffsets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, Int32ComponentRegisterOffsets, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeLayoutInfo, 0x0040);
		}

		// struct FNiagaraDataSetID
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, UnknownData_25ZQ, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetID, 0x000C);
		}

		// struct FNiagaraDetailsLevelScaleOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDetailsLevelScaleOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Low, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Medium, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, High, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Epic, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Cine, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDetailsLevelScaleOverrides, 0x0014);
		}

		// struct FNiagaraEmitterScalabilityOverride : public FNiagaraEmitterScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilityOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilityOverride, UnknownData_KM6C, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilityOverride, 0x0030);
		}

		// struct FNiagaraVariableLayoutInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableLayoutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, FloatComponentStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, Int32ComponentStart, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, LayoutInfo, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableLayoutInfo, 0x0048);
		}

		// struct FNiagaraDataSetCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, Variables, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, VariableLayouts, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalFloatComponents, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalInt32Components, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, UnknownData_S0FX, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, ID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, SimTarget, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, UnknownData_ONT6, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetCompiledData, 0x0040);
		}

		// struct FNiagaraEventGeneratorProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventGeneratorProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, MaxEventsPerFrame, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, ID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, UnknownData_3K9H, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, DataSetCompiledData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventGeneratorProperties, 0x0050);
		}

		// struct FNiagaraEmitterScriptProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScriptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, Script, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, EventReceivers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, EventGenerators, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScriptProperties, 0x0028);
		}

		// struct FNiagaraEventScriptProperties : public FNiagaraEmitterScriptProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventScriptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, ExecutionMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_C3HS, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SpawnNumber, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, MaxEventsPerFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SourceEmitterID, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SourceEventName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, bRandomSpawnNumber, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_CZAK, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, MinSpawnNumber, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_PQPC, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventScriptProperties, 0x0058);
		}

		// struct FNiagaraEmitterScalabilityOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilityOverrides, Overrides, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilityOverrides, 0x0010);
		}

		// struct FNiagaraVariableAttributeBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableAttributeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, BoundVariable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, DataSetVariable, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, DefaultValueIfNonExistent, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableAttributeBinding, 0x0078);
		}

		// struct FNiagaraMeshMaterialOverride
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMeshMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMeshMaterialOverride, ExplicitMat, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMeshMaterialOverride, UserParamBinding, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMeshMaterialOverride, 0x0030);
		}

		// struct FNiagaraScriptExecutionPaddingInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptExecutionPaddingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, SrcOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, DestOffset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, SrcSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, DestSize, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptExecutionPaddingInfo, 0x0008);
		}

		// struct FNiagaraScriptDataUsageInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataUsageInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataUsageInfo, bReadsAttributeData, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataUsageInfo, 0x0001);
		}

		// struct FVMFunctionSpecifier
		TEST_METHOD(ScriptStruct__Niagara__VMFunctionSpecifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMFunctionSpecifier, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMFunctionSpecifier, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVMFunctionSpecifier, 0x0010);
		}

		// struct FNiagaraStatScope
		TEST_METHOD(ScriptStruct__Niagara__NiagaraStatScope)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraStatScope, FullName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraStatScope, FriendlyName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraStatScope, 0x0010);
		}

		// struct FSimulationStageMetaData
		TEST_METHOD(ScriptStruct__Niagara__SimulationStageMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, IterationSource, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, UnknownData_M071, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, OutputDestinations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, MinStage, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, MaxStage, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulationStageMetaData, 0x0028);
		}

		// struct FNiagaraScriptDataInterfaceInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataInterfaceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, DataInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, UserPtrIdx, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, UnknownData_FXRZ, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, Type, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, RegisteredParameterMapRead, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, RegisteredParameterMapWrite, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataInterfaceInfo, 0x0038);
		}

		// struct FNiagaraDataSetProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, UnknownData_AQJ9, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, Variables, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetProperties, 0x0020);
		}

		// struct FVMExternalFunctionBindingInfo
		TEST_METHOD(ScriptStruct__Niagara__VMExternalFunctionBindingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, OwnerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, InputParamLocations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, NumOutputs, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, UnknownData_3BCK, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, FunctionSpecifiers, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVMExternalFunctionBindingInfo, 0x0038);
		}

		// struct FNiagaraScriptDataInterfaceCompileInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataInterfaceCompileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UserPtrIdx, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UnknownData_ESH2, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, Type, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, RegisteredParameterMapRead, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, RegisteredParameterMapWrite, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, bIsPlaceholder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UnknownData_OOK5, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataInterfaceCompileInfo, 0x0038);
		}

		// struct FNiagaraParameters
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameters, Parameters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameters, 0x0010);
		}

		// struct FNiagaraVMExecutableData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVMExecutableData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ByteCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, OptimizedByteCode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, NumTempRegisters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, NumUserPtrs, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, Parameters, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, InternalParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataSetToParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, Attributes, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataUsage, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_0YFL, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataInterfaceInfo, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, CalledVMExternalFunctions, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ReadDataSets, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, WriteDataSets, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, StatScopes, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DIParamInfo, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, LastCompileStatus, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_DG7A, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, SimulationStageMetaData, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVMExecutableData, 0x0128);
		}

		// struct FNiagaraVMExecutableDataId
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVMExecutableDataId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, CompilerVersionID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, ScriptUsageType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, UnknownData_0YM7, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, ScriptUsageTypeID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, UnknownData_WXTC, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, BaseScriptID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, BaseScriptCompileHash, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVMExecutableDataId, 0x0048);
		}

		// struct FNiagaraBoundParameter
		TEST_METHOD(ScriptStruct__Niagara__NiagaraBoundParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, Parameter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, SrcOffset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, DestOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraBoundParameter, 0x0030);
		}

		// struct FNiagaraScriptExecutionParameterStore : public FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptExecutionParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, ParameterSize, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, PaddedParameterSize, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, PaddingInfo, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, UnknownData_6V3Y, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptExecutionParameterStore, 0x00D8);
		}

		// struct FNiagaraVariableDataInterfaceBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableDataInterfaceBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableDataInterfaceBinding, BoundVariable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableDataInterfaceBinding, 0x0028);
		}

		// struct FNiagaraSystemScalabilityOverride : public FNiagaraSystemScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilityOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilityOverride, UnknownData_6M4Y, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilityOverride, 0x0038);
		}

		// struct FNiagaraSystemScalabilityOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilityOverrides, Overrides, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilityOverrides, 0x0010);
		}

		// struct FNiagaraParameterDataSetBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterDataSetBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBinding, ParameterOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBinding, DataSetComponentOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterDataSetBinding, 0x0008);
		}

		// struct FNiagaraParameterDataSetBindingCollection
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterDataSetBindingCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBindingCollection, FloatOffsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBindingCollection, Int32Offsets, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterDataSetBindingCollection, 0x0020);
		}

		// struct FNiagaraSystemCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, InstanceParamStore, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, DataSetCompiledData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceParamsDataSetCompiledData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceParamsDataSetCompiledData, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceGlobalBinding, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceSystemBinding, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceOwnerBinding, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceEmitterBindings, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceGlobalBinding, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceSystemBinding, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceOwnerBinding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceEmitterBindings, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemCompiledData, 0x0258);
		}

		// struct FMovieSceneNiagaraParameterSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraParameterSectionTemplate, Parameter, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraParameterSectionTemplate, 0x0048);
		}

		// struct FNiagaraEmitterHandle
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, IdName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, bIsEnabled, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, UnknownData_ML3R, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, Name, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, UnknownData_5VV3, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, Instance, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterHandle, 0x0030);
		}

		// struct FMovieSceneNiagaraBoolParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraBoolParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraBoolParameterSectionTemplate, BoolChannel, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraBoolParameterSectionTemplate, 0x00D8);
		}

		// struct FMovieSceneNiagaraColorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraColorParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, RedChannel, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, GreenChannel, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, BlueChannel, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, AlphaChannel, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraColorParameterSectionTemplate, 0x02C8);
		}

		// struct FMovieSceneNiagaraFloatParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraFloatParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraFloatParameterSectionTemplate, FloatChannel, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraFloatParameterSectionTemplate, 0x00E8);
		}

		// struct FMovieSceneNiagaraIntegerParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraIntegerParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraIntegerParameterSectionTemplate, IntegerChannel, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraIntegerParameterSectionTemplate, 0x00D8);
		}

		// struct FMovieSceneNiagaraSystemTrackImplementation : public FMovieSceneTrackImplementation
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraSystemTrackImplementation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionStartFrame, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEndFrame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionStartBehavior, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_4M13, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEvaluateBehavior, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_3K9N, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEndBehavior, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_8RHG, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, AgeUpdateMode, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_MJ5I, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraSystemTrackImplementation, 0x0028);
		}

		// struct FMovieSceneNiagaraSystemTrackTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraSystemTrackTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraSystemTrackTemplate, 0x0020);
		}

		// struct FMovieSceneNiagaraVectorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraVectorParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, VectorChannels, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, ChannelsUsed, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, UnknownData_N4X2, 0x02CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, 0x02D0);
		}

		// struct FNiagaraRandInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraRandInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed3, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraRandInfo, 0x000C);
		}

		// struct FNiagaraScriptVariableBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptVariableBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptVariableBinding, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptVariableBinding, 0x0008);
		}

		// struct FNiagaraVariableInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, Variable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, Definition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, DataInterface, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableInfo, 0x0048);
		}

		// struct FNiagaraSystemUpdateContext
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemUpdateContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToReset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToReInit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, SystemSimsToDestroy, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, UnknownData_J1HE, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemUpdateContext, 0x0038);
		}

		// struct FNiagaraFunctionSignature
		TEST_METHOD(ScriptStruct__Niagara__NiagaraFunctionSignature)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Inputs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Outputs, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, OwnerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, UnknownData_1Z4Y, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, FunctionSpecifiers, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraFunctionSignature, 0x0088);
		}

		// struct FBasicParticleData
		TEST_METHOD(ScriptStruct__Niagara__BasicParticleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Velocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasicParticleData, 0x001C);
		}

		// struct FMeshTriCoordinate
		TEST_METHOD(ScriptStruct__Niagara__MeshTriCoordinate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriCoordinate, Tri, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriCoordinate, BaryCoord, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshTriCoordinate, 0x0010);
		}

		// struct FNiagaraGraphViewSettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraGraphViewSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, Zoom, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, bIsValid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, UnknownData_DOOZ, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraGraphViewSettings, 0x0010);
		}

		// struct FNiagaraCollisionEventPayload
		TEST_METHOD(ScriptStruct__Niagara__NiagaraCollisionEventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, ParticleIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, PhysicalMaterialIndex, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCollisionEventPayload, 0x002C);
		}

		// struct FNiagaraPlatformSetConflictEntry
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetConflictEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictEntry, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictEntry, QualityLevelMask, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetConflictEntry, 0x000C);
		}

		// struct FNiagaraPlatformSetConflictInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetConflictInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, SetAIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, SetBIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, Conflicts, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetConflictInfo, 0x0018);
		}

		// struct FNiagaraScalabilityManager
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScalabilityManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, EffectType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, ManagedComponents, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, UnknownData_JD96, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScalabilityManager, 0x0040);
		}

		// struct FNiagaraModuleDependency
		TEST_METHOD(ScriptStruct__Niagara__NiagaraModuleDependency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, ScriptConstraint, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, UnknownData_9STS, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, Description, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraModuleDependency, 0x0028);
		}

		// struct FNiagaraScriptHighlight
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptHighlight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptHighlight, Color, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptHighlight, DisplayName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptHighlight, 0x0028);
		}

		// struct FNiagaraSystemCompileRequest
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemCompileRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, UnknownData_2ZP0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, RootObjects, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, UnknownData_LBKV, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemCompileRequest, 0x0080);
		}

		// struct FEmitterCompiledScriptPair
		TEST_METHOD(ScriptStruct__Niagara__EmitterCompiledScriptPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterCompiledScriptPair, UnknownData_LZ09, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterCompiledScriptPair, 0x0078);
		}

		// struct FNiagaraEmitterCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, SpawnAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterSpawnIntervalVar, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterInterpSpawnStartDTVar, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterSpawnGroupVar, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterAgeVar, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterRandomSeedVar, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterTotalSpawnedParticlesVar, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, DataSetCompiledData, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterCompiledData, 0x0140);
		}

		// struct FNiagaraInputConditionMetadata
		TEST_METHOD(ScriptStruct__Niagara__NiagaraInputConditionMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInputConditionMetadata, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInputConditionMetadata, TargetValues, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraInputConditionMetadata, 0x0018);
		}

		// struct FNiagaraVariableMetaData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, Description, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, CategoryName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bAdvancedDisplay, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_KBZV, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, EditorSortPriority, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bInlineEditConditionToggle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_95XI, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, EditCondition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, VisibleCondition, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, PropertyMetaData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, ScopeName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, Usage, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_TV1X, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bIsStaticSwitch, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_M19L, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, StaticSwitchDefaultValue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bAddedToNodeGraphDeepCopy, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bOutputIsPersistent, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_TBUC, 0x00D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, CachedNamespacelessVariableName, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bCreatedInSystemEditor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bUseLegacyNameString, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_7IYK, 0x00E2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableMetaData, 0x00E8);
		}

		// struct FNiagaraParameterScopeInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterScopeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, Scope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, UnknownData_AHP8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, UnknownData_ORVX, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, NamespaceString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterScopeInfo, 0x0018);
		}

		// struct FNiagaraCompileHashVisitorDebugInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraCompileHashVisitorDebugInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, PropertyKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, PropertyValues, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileHashVisitorDebugInfo, 0x0030);
		}

		// struct FNiagaraID
		TEST_METHOD(ScriptStruct__Niagara__NiagaraID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraID, Index, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraID, AcquireTag, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraID, 0x0008);
		}

		// struct FNiagaraSpawnInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSpawnInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, InterpStartDt, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, IntervalDt, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, SpawnGroup, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSpawnInfo, 0x0010);
		}

		// struct FNiagaraMatrix
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMatrix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row1, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMatrix, 0x0040);
		}

		// struct FNiagaraTestStructInner
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTestStructInner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStructInner, InnerVector1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStructInner, InnerVector2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTestStructInner, 0x0018);
		}

		// struct FNiagaraTestStruct
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStruct, Vector1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStruct, Vector2, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStruct, InnerStruct1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStruct, InnerStruct2, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTestStruct, 0x0048);
		}

		// struct FNiagaraParameterMap
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterMap, UnknownData_M2JX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterMap, 0x0001);
		}

		// struct FNiagaraNumeric
		TEST_METHOD(ScriptStruct__Niagara__NiagaraNumeric)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraNumeric, UnknownData_FX50, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraNumeric, 0x0001);
		}

		// struct FNiagaraBool
		TEST_METHOD(ScriptStruct__Niagara__NiagaraBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBool, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraBool, 0x0004);
		}

		// struct FNiagaraInt32
		TEST_METHOD(ScriptStruct__Niagara__NiagaraInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInt32, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraInt32, 0x0004);
		}

		// struct FNiagaraFloat
		TEST_METHOD(ScriptStruct__Niagara__NiagaraFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFloat, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraFloat, 0x0004);
		}

		// struct FNiagaraVariant
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, DataInterface, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, Bytes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, CurrentMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, UnknownData_5IRF, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, UnknownData_4Y0B, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariant, 0x0028);
		}

		// struct FNiagaraWorldManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Niagara__NiagaraWorldManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraWorldManagerTickFunction, UnknownData_KOGT, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraWorldManagerTickFunction, 0x0030);
		}

		// struct FAnimationSharingScalability
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationSharingScalability)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, UseBlendTransitions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, UnknownData_LYWW, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, BlendSignificanceValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, MaximumNumberConcurrentBlends, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, TickSignificanceValue, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationSharingScalability, 0x0010);
		}

		// struct FAnimationSetup
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, AnimBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, NumRandomizedInstances, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, Enabled, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, UnknownData_OUDS, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationSetup, 0x0018);
		}

		// struct FAnimationStateEntry
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationStateEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, State, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_138F, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, AnimationSetups, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bOnDemand, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bAdditive, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_EW5I, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, BlendTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bReturnToPreviousState, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bSetNextState, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, NextState, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_39TU, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, MaximumNumberOfConcurrentInstances, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, WiggleTimePercentage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bRequiresCurves, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_T4DO, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateEntry, 0x0030);
		}

		// struct FPerSkeletonAnimationSharingSetup
		TEST_METHOD(ScriptStruct__AnimationSharing__PerSkeletonAnimationSharingSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, Skeleton, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, SkeletalMesh, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, BlendAnimBlueprint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, AdditiveAnimBlueprint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, StateProcessorClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, AnimationStates, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerSkeletonAnimationSharingSetup, 0x0038);
		}

		// struct FTickAnimationSharingFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__AnimationSharing__TickAnimationSharingFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickAnimationSharingFunction, UnknownData_N67Y, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickAnimationSharingFunction, 0x0030);
		}

		// struct FRoomAdjacencyInfo
		TEST_METHOD(ScriptStruct__RoomSystem__RoomAdjacencyInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomAdjacencyInfo, Room, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomAdjacencyInfo, DoorActor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomAdjacencyInfo, ThisRoomPointIndex, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomAdjacencyInfo, DestinationRoomPointIndex, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomAdjacencyInfo, DistanceBetweenPoints, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomAdjacencyInfo, UnknownData_F139, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRoomAdjacencyInfo, 0x0060);
		}

		// struct FRoomVisibilityPoint
		TEST_METHOD(ScriptStruct__RoomSystem__RoomVisibilityPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomVisibilityPoint, WorldLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomVisibilityPoint, UnknownData_6EVQ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomVisibilityPoint, IndexToVisiblePoints, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRoomVisibilityPoint, 0x0020);
		}

		// struct FPointOfInterestRuntimeInfo
		TEST_METHOD(ScriptStruct__RoomSystem__PointOfInterestRuntimeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestRuntimeInfo, CurrentHeat, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestRuntimeInfo, VisitTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestRuntimeInfo, WorldLocation, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointOfInterestRuntimeInfo, 0x0014);
		}

		// struct FPOIIndex
		TEST_METHOD(ScriptStruct__RoomSystem__POIIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOIIndex, Room, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOIIndex, Index, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOIIndex, UnknownData_MNJ3, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPOIIndex, 0x0010);
		}

		// struct FPOIResult
		TEST_METHOD(ScriptStruct__RoomSystem__POIResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOIResult, Index, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOIResult, Info, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOIResult, UnknownData_3JFC, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPOIResult, 0x0028);
		}

		// struct FPOIVisitAge
		TEST_METHOD(ScriptStruct__RoomSystem__POIVisitAge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOIVisitAge, POI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPOIVisitAge, 0x0028);
		}

		// struct FPlayerRoomInfo
		TEST_METHOD(ScriptStruct__RoomSystem__PlayerRoomInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerRoomInfo, LastVisitTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerRoomInfo, PlayerTotalTimeSpent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerRoomInfo, PlayerTimeSpentRecent, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerRoomInfo, 0x000C);
		}

		// struct FS_Elevator_DoorSweep
		TEST_METHOD(UserDefinedStruct__S_Elevator_DoorSweep__S_Elevator_DoorSweep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_DoorSweep, DoorWidth_8_F43BDB8C4F264126FEA9538819943FFF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_DoorSweep, DoorHeight_9_9FE7FF0F4757481387868A83B12440E6, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_DoorSweep, DoorDepth_10_2C6885224119CE51C397418BFEAB4E18, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_DoorSweep, BoxThickness_11_F10BA6634D6DF11797B91DB838B42C0A, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_DoorSweep, InnerDepth_12_50ED569C4256EEED0CA7D0AC45EABD81, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_DoorSweep, Flip_13_00E1873748B0D8C8D372B7A7B16C586E, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_DoorSweep, UnknownData_UD2L, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_DoorSweep, OffsetLocation_16_A8E7F3AA430EAB548575E9AF8F14FE43, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_DoorSweep, Alignment_20_5D4A3F6044D22E93AA6B6790E8B0944F, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_Elevator_DoorSweep, 0x0025);
		}

		// struct FS_Elevator_Prefab
		TEST_METHOD(UserDefinedStruct__S_Elevator_Prefab__S_Elevator_Prefab)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Prefab, Buttons_60_0D5C465C4118D9362309F8B79613710C, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Prefab, Doors_A_65_04BA24064194ECAC16DD3499EB852CF5, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Prefab, Doors_B_64_89BC6A9440C39772C9954CA0AC55C561, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Prefab, ArrowIndicators_61_81A397FB41EF746FD4F628BC4D4BD9B7, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_Elevator_Prefab, 0x0040);
		}

		// struct FNiagaraDataInterfaceGeneratedFunction
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraDataInterfaceGeneratedFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGeneratedFunction, UnknownData_Z5SU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataInterfaceGeneratedFunction, 0x0028);
		}

		// struct FNiagaraDataInterfaceGPUParamInfo
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraDataInterfaceGPUParamInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, DataInterfaceHLSLSymbol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, DIClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, GeneratedFunctions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataInterfaceGPUParamInfo, 0x0030);
		}

		// struct FNiagaraCompileEvent
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraCompileEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, Severity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, UnknownData_CHQZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, NodeGuid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, PinGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, StackGuids, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileEvent, 0x0048);
		}

		// struct FFNAFDeviceSpecificQualityConfig
		TEST_METHOD(UserDefinedStruct__FNAFDeviceSpecificQualityConfig__FNAFDeviceSpecificQualityConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFDeviceSpecificQualityConfig, GPUSearchStr_4_D7CCA5F94A7B8C1D2C1A29B407CDF76A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFDeviceSpecificQualityConfig, VisualQuality_10_885AC6DF43E1D45527159980AB2545D8, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFDeviceSpecificQualityConfig, RaytraceQuality_9_27E3A3F348C0251FF0AB82AFE1F5EB74, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFDeviceSpecificQualityConfig, ForceMinSpec_13_C14874F34AE0E4265B2EA181F76A814F, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFNAFDeviceSpecificQualityConfig, 0x0013);
		}

		// struct FSeekerHourlyUpdate
		TEST_METHOD(UserDefinedStruct__SeekerHourlyUpdate__SeekerHourlyUpdate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeekerHourlyUpdate, EndTime_3_065E2C3A415BC736A1D1DE9AC74551D9, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeekerHourlyUpdate, MaterialOverrides_7_4626726B40EBCF5570742CBABF1FF636, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSeekerHourlyUpdate, 0x0018);
		}

		// struct FPointStruct
		TEST_METHOD(UserDefinedStruct__PointStruct__PointStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointStruct, CurrentLocation_14_12380D874E52FBB07FC4DA8EFAA76801, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointStruct, PointID_12_8DB665B942320A7A682D6C83CD8D187D, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointStruct, UnknownData_BPIV, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointStruct, PossibleNextLocation_21_8E2ED29647E1F705D894A08EA582B638, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointStruct, POITag_28_6B5CF22742FF1E93C63C89943A839863, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointStruct, 0x0028);
		}

		// struct FS_Elevator_Teleport
		TEST_METHOD(UserDefinedStruct__S_Elevator_Teleport__S_Elevator_Teleport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Teleport, A_7_C073DD34469CB89235F773A6F1274593, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Teleport, B_8_F48A13D84EE431FD8792DAA5E41A4F34, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_Elevator_Teleport, 0x0140);
		}

		// struct FMovieSceneSectionEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, bCanEditCompletionMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, CompletionMode, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionEvalOptions, 0x0002);
		}

		// struct FMovieSceneEasingSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEasingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseInDuration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseOutDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseIn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseIn, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_4PAU, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseInDuration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseOut, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseOut, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_WBT7, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseOutDuration, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEasingSettings, 0x0038);
		}

		// struct FMovieSceneFrameRange
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFrameRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFrameRange, UnknownData_BWXA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFrameRange, 0x0010);
		}

		// struct FOptionalMovieSceneBlendType
		TEST_METHOD(ScriptStruct__MovieScene__OptionalMovieSceneBlendType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, BlendType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, bIsValid, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOptionalMovieSceneBlendType, 0x0002);
		}

		// struct FMovieSceneTrackEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvalOptions, UnknownData_XJS6, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvalOptions, 0x0004);
		}

		// struct FMovieSceneTrackIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackIdentifier, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackIdentifier, 0x0004);
		}

		// struct FMovieSceneSegment
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegment, UnknownData_36YM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegment, 0x0058);
		}

		// struct FSectionEvaluationDataTree
		TEST_METHOD(ScriptStruct__MovieScene__SectionEvaluationDataTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationDataTree, UnknownData_B812, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionEvaluationDataTree, 0x0060);
		}

		// struct FMovieSceneEvalTemplatePtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplatePtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplatePtr, UnknownData_YW0F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplatePtr, 0x0088);
		}

		// struct FMovieSceneTrackImplementationPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementationPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackImplementationPtr, UnknownData_QBAE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementationPtr, 0x0038);
		}

		// struct FMovieSceneEvaluationGroupLUTIndex
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroupLUTIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, LUTOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumInitPtrs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumEvalPtrs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroupLUTIndex, 0x000C);
		}

		// struct FMovieSceneSequenceID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceID, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceID, 0x0004);
		}

		// struct FMovieSceneSequenceInstanceDataPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceDataPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceDataPtr, UnknownData_EJZL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceDataPtr, 0x0018);
		}

		// struct FMovieSceneEvaluationTemplateSerialNumber
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplateSerialNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplateSerialNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplateSerialNumber, 0x0004);
		}

		// struct FMovieSceneTrackFieldData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackFieldData, UnknownData_2Y3N, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackFieldData, 0x0060);
		}

		// struct FMovieSceneSubSectionFieldData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSectionFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionFieldData, UnknownData_WX1H, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSectionFieldData, 0x0060);
		}

		// struct FMovieSceneTemplateGenerationLedger
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTemplateGenerationLedger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, LastTrackIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, UnknownData_XWJE, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, TrackSignatureToTrackIdentifier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, SubSectionRanges, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTemplateGenerationLedger, 0x00A8);
		}

		// struct FMovieSceneSequenceHierarchyNode
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchyNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, ParentID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, UnknownData_5SI4, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, Children, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchyNode, 0x0018);
		}

		// struct FMovieSceneTimeWarping
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimeWarping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeWarping, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeWarping, End, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimeWarping, 0x0008);
		}

		// struct FMovieSceneTimeTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimeTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeTransform, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeTransform, Offset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimeTransform, 0x000C);
		}

		// struct FMovieSceneNestedSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneNestedSequenceTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNestedSequenceTransform, LinearTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNestedSequenceTransform, Warping, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNestedSequenceTransform, 0x0014);
		}

		// struct FMovieSceneSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, LinearTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, UnknownData_FZ8F, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, NestedTransforms, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceTransform, 0x0020);
		}

		// struct FMovieSceneSubSequenceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, RootToSequenceTransform, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, TickResolution, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, DeterministicSequenceID, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PlayRange, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, FullPlayRange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnwarpedPlayRange, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PreRollRange, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PostRollRange, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, HierarchicalBias, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, InstanceData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_Y4SQ, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, SubSectionSignature, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, OuterToInnerTransform, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceData, 0x00E8);
		}

		// struct FMovieSceneSequenceHierarchy
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, SubSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, Hierarchy, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchy, 0x00A0);
		}

		// struct FMovieSceneEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, TrackIdentifier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationKey, 0x000C);
		}

		// struct FMovieSceneOrderedEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneOrderedEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, SetupIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, TearDownIndex, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneOrderedEvaluationKey, 0x0010);
		}

		// struct FMovieSceneEvaluationMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveEntities, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, SubTemplateSerialNumbers, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationMetaData, 0x0070);
		}

		// struct FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldTrackPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, TrackIdentifier, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldTrackPtr, 0x0008);
		}

		// struct FMovieSceneSegmentIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegmentIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegmentIdentifier, IdentifierIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegmentIdentifier, 0x0004);
		}

		// struct FMovieSceneEvaluationFieldSegmentPtr : public FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldSegmentPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldSegmentPtr, SegmentID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldSegmentPtr, 0x000C);
		}

		// struct FMovieSceneEvaluationGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, LUTIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, SegmentPtrLUT, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroup, 0x0020);
		}

		// struct FMovieSceneEvaluationField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Ranges, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Groups, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, MetaData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationField, 0x0030);
		}

		// struct FMovieSceneEvaluationTrackSegments
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTrackSegments)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrackSegments, SegmentIdentifierToIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrackSegments, SortedSegments, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTrackSegments, 0x0020);
		}

		// struct FMovieSceneEvaluationTrack
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ObjectBindingID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationMethod, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_864B, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, Segments, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, SourceTrack, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationTree, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ChildTemplates, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, TrackTemplate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationGroup, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_RD0Z, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTrack, 0x00F8);
		}

		// struct FMovieSceneEvaluationTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_4YF9, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, EvaluationField, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Hierarchy, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, SequenceSignature, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateSerialNumber, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_W7UP, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateLedger, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TrackFieldData, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, SubSectionFieldData, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplate, 0x02F0);
		}

		// struct FMovieSceneSequenceLoopCount
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceLoopCount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceLoopCount, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceLoopCount, 0x0004);
		}

		// struct FMovieSceneSequenceReplProperties
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceReplProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownStatus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, UnknownData_G3QB, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownNumLoops, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceReplProperties, 0x0010);
		}

		// struct FMovieSceneRootEvaluationTemplateInstance
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneRootEvaluationTemplateInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_6E4T, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, DirectorInstances, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_YHT8, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneRootEvaluationTemplateInstance, 0x0320);
		}

		// struct FMovieSceneSequencePlaybackSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequencePlaybackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_WRF9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, LoopCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, StartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_510G, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequencePlaybackSettings, 0x0014);
		}

		// struct FMovieSceneSectionParameters
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartFrameOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, bCanLoop, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, UnknownData_VC5E, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, EndFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, FirstLoopStartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, TimeScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, HierarchicalBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PrerollTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PostrollTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionParameters, 0x0024);
		}

		// struct FMovieSceneMarkedFrame
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneMarkedFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, UnknownData_FDY1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, Label, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarkedFrame, 0x0018);
		}

		// struct FMovieSceneObjectBindingID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Space, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, UnknownData_KMOS, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Guid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingID, 0x0018);
		}

		// struct FMovieSceneObjectBindingIDs
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingIDs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingIDs, IDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingIDs, 0x0010);
		}

		// struct FMovieSceneBinding
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, ObjectGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, BindingName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, Tracks, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBinding, 0x0030);
		}

		// struct FMovieScenePossessable
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePossessable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Tags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Guid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, PossessedObjectClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, ParentGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePossessable, 0x0048);
		}

		// struct FMovieSceneSpawnable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSpawnable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, SpawnTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Tags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, bContinuouslyRespawn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_ZVLV, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Guid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_WMAP, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Name, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ObjectTemplate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ChildPossessables, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Ownership, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_699A, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, LevelName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_GNVJ, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnable, 0x0090);
		}

		// struct FMovieSceneBindingOverrideData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBindingOverrideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, ObjectBindingID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, Object, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, bOverridesDefault, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, UnknownData_KIG9, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBindingOverrideData, 0x0024);
		}

		// struct FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplateBase, UnknownData_BTA3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplateBase, 0x0010);
		}

		// struct FMovieSceneEvalTemplate : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, CompletionMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_FEXG, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, SourceSectionPtr, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_Z89L, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplate, 0x0020);
		}

		// struct FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneChannel, UnknownData_W7JH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneChannel, 0x0008);
		}

		// struct FMovieSceneBoolChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBoolChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_3L4L, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_3V6V, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolChannel, 0x0090);
		}

		// struct FMovieSceneTangentData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTangentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangentWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangentWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, TangentWeightMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, UnknownData_0BBZ, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTangentData, 0x0014);
		}

		// struct FMovieSceneKeyHandleMap : public FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyHandleMap)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyHandleMap, 0x0060);
		}

		// struct FMovieSceneFloatValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Tangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, InterpMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, TangentMode, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, PaddingByte, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, UnknownData_119F, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatValue, 0x001C);
		}

		// struct FMovieSceneFloatChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PreInfinityExtrap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PostInfinityExtrap, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_J2IE, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, bHasDefaultValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_8D8P, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, KeyHandles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, TickResolution, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatChannel, 0x00A0);
		}

		// struct FMovieSceneIntegerChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneIntegerChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, bHasDefaultValue, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_ZDKY, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_02CG, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerChannel, 0x0090);
		}

		// struct FMovieSceneTrackImplementation : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementation, 0x0010);
		}

		// struct FMovieScenePropertySectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyPath, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, NotifyFunctionName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionData, 0x0028);
		}

		// struct FMovieScenePropertySectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionTemplate, PropertyData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionTemplate, 0x0048);
		}

		// struct FMovieSceneSequenceInstanceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceData, UnknownData_7HII, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceData, 0x0008);
		}

		// struct FMovieSceneEvaluationOperand
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationOperand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, ObjectBindingID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, SequenceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationOperand, 0x0014);
		}

		// struct FMovieSceneSectionGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionGroup, Sections, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionGroup, 0x0010);
		}

		// struct FMovieSceneTrackLabels
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackLabels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackLabels, Strings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackLabels, 0x0010);
		}

		// struct FMovieSceneExpansionState
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneExpansionState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneExpansionState, bExpanded, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneExpansionState, 0x0001);
		}

		// struct FMovieSceneEditorData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ExpansionStates, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, PinnedNodes, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewStart, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkStart, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkEnd, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, MarkedFrames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkingRange, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewRange, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEditorData, 0x00F0);
		}

		// struct FMovieSceneTimecodeSource
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimecodeSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, Timecode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, DeltaFrame, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimecodeSource, 0x0018);
		}

		// struct FMovieSceneByteChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneByteChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_8VQN, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Enum, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_0BJV, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneByteChannel, 0x0098);
		}

		// struct FMovieSceneEmptyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEmptyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEmptyStruct, UnknownData_8Z46, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEmptyStruct, 0x0001);
		}

		// struct FMovieSceneSubSectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, ObjectBindingID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Flags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, UnknownData_8SYL, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSectionData, 0x001C);
		}

		// struct FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyStruct, UnknownData_5RP9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyStruct, 0x0008);
		}

		// struct FMovieSceneKeyTimeStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyTimeStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, UnknownData_G7KA, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyTimeStruct, 0x0028);
		}

		// struct FGeneratedMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__GeneratedMovieSceneKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedMovieSceneKeyStruct, UnknownData_EE85, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeneratedMovieSceneKeyStruct, 0x0050);
		}

		// struct FMovieSceneObjectPathChannelKeyValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectPathChannelKeyValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannelKeyValue, SoftPtr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannelKeyValue, HardPtr, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPathChannelKeyValue, 0x0030);
		}

		// struct FMovieSceneObjectPathChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectPathChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, PropertyClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, UnknownData_4ORB, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPathChannel, 0x00C0);
		}

		// struct FSectionEvaluationData
		TEST_METHOD(ScriptStruct__MovieScene__SectionEvaluationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ImplIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ForcedTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, UnknownData_VJ5W, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionEvaluationData, 0x000C);
		}

		// struct FMovieSceneWarpCounter
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneWarpCounter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWarpCounter, WarpCounts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWarpCounter, 0x0010);
		}

		// struct FTestMovieSceneEvalTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__TestMovieSceneEvalTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTestMovieSceneEvalTemplate, 0x0020);
		}

		// struct FMovieSceneTrackDisplayOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackDisplayOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackDisplayOptions, UnknownData_NWDY, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackDisplayOptions, 0x0004);
		}

		// struct FAdaptorPolygon2Group
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorPolygon2Group)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, MaterialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, UnknownData_7PHJ, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorPolygon2Group, 0x0048);
		}

		// struct FAdaptorTriangleID : public FElementID
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorTriangleID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorTriangleID, 0x0004);
		}

		// struct FAdaptorPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, UnknownData_3TYS, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorPolygon, 0x0018);
		}

		// struct FPolygonGroupForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonGroupID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupForPolygon, 0x0008);
		}

		// struct FMeshElementAttributeValue
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeValue, UnknownData_1GDM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeValue, 0x0050);
		}

		// struct FMeshElementAttributeData
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, UnknownData_11VN, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeData, 0x0060);
		}

		// struct FMeshElementAttributeList
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeList, Attributes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeList, 0x0010);
		}

		// struct FPolygonGroupToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, PolygonGroupAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, OriginalPolygonGroupID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, UnknownData_DXH5, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupToCreate, 0x0018);
		}

		// struct FVertexToMove
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, NewVertexPosition, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToMove, 0x0010);
		}

		// struct FVertexIndexAndInstanceID
		TEST_METHOD(ScriptStruct__EditableMesh__VertexIndexAndInstanceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, ContourIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, VertexInstanceID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexIndexAndInstanceID, 0x0008);
		}

		// struct FVertexInstancesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstancesForPolygonHole)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstancesForPolygonHole, VertexIndicesAndInstanceIDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstancesForPolygonHole, 0x0010);
		}

		// struct FChangeVertexInstancesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__ChangeVertexInstancesForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, UnknownData_Z4IL, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PerimeterVertexIndicesAndInstanceIDs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, VertexIndicesAndInstanceIDsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChangeVertexInstancesForPolygon, 0x0028);
		}

		// struct FVertexAttributesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygonHole)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygonHole, VertexAttributeList, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygonHole, 0x0010);
		}

		// struct FVertexAttributesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, UnknownData_ARZE, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PerimeterVertexAttributeLists, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, VertexAttributeListsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygon, 0x0028);
		}

		// struct FAttributesForEdge
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, UnknownData_7J76, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForEdge, 0x0018);
		}

		// struct FAttributesForVertexInstance
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertexInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, UnknownData_4CFP, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertexInstance, 0x0018);
		}

		// struct FAttributesForVertex
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, UnknownData_V3M8, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertex, 0x0018);
		}

		// struct FVertexPair
		TEST_METHOD(ScriptStruct__EditableMesh__VertexPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID1, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexPair, 0x0008);
		}

		// struct FPolygonToSplit
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToSplit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, UnknownData_451V, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, VertexPairsToSplitAt, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToSplit, 0x0018);
		}

		// struct FVertexAndAttributes
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAndAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, PolygonVertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAndAttributes, 0x0018);
		}

		// struct FPolygonToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_UD1H, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PerimeterVertices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, OriginalPolygonID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonEdgeHardness, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_ZR81, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToCreate, 0x0020);
		}

		// struct FEdgeToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__EdgeToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, EdgeAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, OriginalEdgeID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, UnknownData_6R5M, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeToCreate, 0x0020);
		}

		// struct FVertexInstanceToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstanceToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_W20G, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexInstanceAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, OriginalVertexInstanceID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_KWS9, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceToCreate, 0x0020);
		}

		// struct FVertexToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, VertexAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, OriginalVertexID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, UnknownData_MZ7S, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToCreate, 0x0018);
		}

		// struct FSubdividedWireEdge
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedWireEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex0PositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex1PositionIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, UnknownData_O1SY, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedWireEdge, 0x000C);
		}

		// struct FSubdividedQuadVertex
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuadVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexPositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexNormal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexBinormalSign, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuadVertex, 0x0034);
		}

		// struct FSubdividedQuad
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuad)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex2, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex3, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuad, 0x00D0);
		}

		// struct FSubdivisionLimitSection
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitSection, SubdividedQuads, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitSection, 0x0010);
		}

		// struct FSubdivisionLimitData
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, VertexPositions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, Sections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, SubdividedWireEdges, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitData, 0x0030);
		}

		// struct FRenderingPolygonGroup
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygonGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaterialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, UnknownData_975A, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygonGroup, 0x0048);
		}

		// struct FRenderingPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, UnknownData_15QH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygon, 0x0018);
		}

		// struct FMovieSceneGeometryCollectionParams
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, UnknownData_3X7D, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, GeometryCollectionCache, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, StartFrameOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, EndFrameOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, PlayRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, UnknownData_KJXI, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionParams, 0x0030);
		}

		// struct FMovieSceneGeometryCollectionSectionTemplateParameters : public FMovieSceneGeometryCollectionParams
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, SectionStartTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, SectionEndTime, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, 0x0038);
		}

		// struct FMovieSceneGeometryCollectionSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionSectionTemplate, 0x0058);
		}

		// struct FSynth1PatchCable
		TEST_METHOD(ScriptStruct__Synthesis__Synth1PatchCable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, Destination, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, UnknownData_IQYJ, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynth1PatchCable, 0x0008);
		}

		// struct FEpicSynth1Patch
		TEST_METHOD(ScriptStruct__Synthesis__EpicSynth1Patch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, PatchSource, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, UnknownData_Z2UR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, PatchCables, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEpicSynth1Patch, 0x0018);
		}

		// struct FModularSynthPreset : public FTableRowBase
		TEST_METHOD(ScriptStruct__Synthesis__ModularSynthPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_GW7C, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_V0B6, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Gain, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Octave, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Semitones, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Cents, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1PulseWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Type, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_6MJM, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Gain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Octave, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Semitones, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Cents, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2PulseWidth, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Portamento, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_72OY, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Spread, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Pan, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Frequency, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Gain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Type, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Mode, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1PatchType, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_EOP4, 0x0057);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Frequency, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Gain, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Type, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Mode, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2PatchType, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_DU58, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, GainDb, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, AttackTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, DecayTime, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, SustainGain, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ReleaseTime, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModEnvPatchType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModEnvBiasPatchType, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_VMQZ, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_M9A4, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeDepth, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeAttackTime, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeDecayTime, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeSustainGain, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeReleaseTime, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_PNSU, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterFrequency, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterQ, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterAlgorithm, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_8KZA, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_HBCF, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_GQC1, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayTime, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayFeedback, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayWetlevel, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayRatio, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_H65H, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusDepth, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusFeedback, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusFrequency, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_94RW, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Patches, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularSynthPreset, 0x00E0);
		}

		// struct FModularSynthPresetBankEntry
		TEST_METHOD(ScriptStruct__Synthesis__ModularSynthPresetBankEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPresetBankEntry, PresetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPresetBankEntry, Preset, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularSynthPresetBankEntry, 0x00F0);
		}

		// struct FSourceEffectBitCrusherSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectBitCrusherSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, CrushedSampleRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, CrushedBits, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectBitCrusherSettings, 0x0008);
		}

		// struct FSourceEffectChorusSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectChorusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, WetLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, DryLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Spread, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChorusSettings, 0x0018);
		}

		// struct FSourceEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectDynamicsProcessorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, UnknownData_TM9F, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, LookAheadMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, ThresholdDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, Ratio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, InputGainDb, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, OutputGainDb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, UnknownData_RSKW, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectDynamicsProcessorSettings, 0x0028);
		}

		// struct FSourceEffectEnvelopeFollowerSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEnvelopeFollowerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, AttackTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, ReleaseTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, PeakMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, bIsAnalogMode, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, UnknownData_70XN, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEnvelopeFollowerSettings, 0x000C);
		}

		// struct FSourceEffectEQBand
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEQBand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, UnknownData_W2SU, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEQBand, 0x0010);
		}

		// struct FSourceEffectEQSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEQSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEQSettings, 0x0010);
		}

		// struct FSourceEffectFilterSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterCircuit, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, UnknownData_5S10, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, CutoffFrequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFilterSettings, 0x000C);
		}

		// struct FSourceEffectFoldbackDistortionSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFoldbackDistortionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, InputGainDb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, ThresholdDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, OutputGainDb, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFoldbackDistortionSettings, 0x000C);
		}

		// struct FSourceEffectMidSideSpreaderSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectMidSideSpreaderSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, InputMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, UnknownData_IXOQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, SpreadAmount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, OutputMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, bEqualPower, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, UnknownData_BGN5, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectMidSideSpreaderSettings, 0x000C);
		}

		// struct FSourceEffectPannerSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectPannerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPannerSettings, Spread, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPannerSettings, Pan, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectPannerSettings, 0x0008);
		}

		// struct FSourceEffectPhaserSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectPhaserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, WetLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, LFOType, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, UseQuadraturePhase, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, UnknownData_58LN, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectPhaserSettings, 0x0010);
		}

		// struct FSourceEffectRingModulationSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectRingModulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, ModulatorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, UnknownData_PNMZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, Depth, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, DryLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, WetLevel, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectRingModulationSettings, 0x0014);
		}

		// struct FSourceEffectSimpleDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectSimpleDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, SpeedOfSound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, DelayAmount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, DryAmount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, WetAmount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, Feedback, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, UnknownData_H0O9, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectSimpleDelaySettings, 0x0018);
		}

		// struct FSourceEffectStereoDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectStereoDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, UnknownData_8Y9Z, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, WetLevel, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectStereoDelaySettings, 0x0014);
		}

		// struct FSourceEffectWaveShaperSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectWaveShaperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectWaveShaperSettings, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectWaveShaperSettings, OutputGainDb, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectWaveShaperSettings, 0x0008);
		}

		// struct FSubmixEffectConvolutionReverbSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectConvolutionReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, NormalizationVolumeDb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, SurroundRearChannelBleedDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bInvertRearChannelBleedPhase, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bSurroundRearChannelFlip, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_7UED, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, SurroundRearChannelBleedAmount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, ImpulseResponse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, AllowHArdwareAcceleration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_LSRR, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectConvolutionReverbSettings, 0x0020);
		}

		// struct FSubmixEffectDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, MaximumDelayLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, InterpolationTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, DelayLength, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDelaySettings, 0x000C);
		}

		// struct FSubmixEffectFilterSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterAlgorithm, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, UnknownData_1FHC, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterFrequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectFilterSettings, 0x000C);
		}

		// struct FSubmixEffectFlexiverbSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectFlexiverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, PreDelay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, DecayTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, RoomDampening, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, Complexity, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectFlexiverbSettings, 0x0010);
		}

		// struct FTapDelayInfo
		TEST_METHOD(ScriptStruct__Synthesis__TapDelayInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, TapLineMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, UnknownData_7KJX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, DelayLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, Gain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, OutputChannel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, PanInDegrees, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, TapId, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTapDelayInfo, 0x0018);
		}

		// struct FSubmixEffectTapDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectTapDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, MaximumDelayLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, InterpolationTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, Taps, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectTapDelaySettings, 0x0018);
		}

		// struct FSynth2DSliderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__Synth2DSliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, NormalThumbImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, DisabledThumbImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, NormalBarImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, DisabledBarImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, BackgroundImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, BarThickness, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, UnknownData_1AOA, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynth2DSliderStyle, 0x02B8);
		}

		// struct FSynthKnobStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__SynthKnobStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, LargeKnob, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, LargeKnobOverlay, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MediumKnob, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MediumKnobOverlay, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MinValueAngle, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MaxValueAngle, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, KnobSize, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, UnknownData_R9XG, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynthKnobStyle, 0x0238);
		}

		// struct FPatchId
		TEST_METHOD(ScriptStruct__Synthesis__PatchId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPatchId, ID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPatchId, 0x0004);
		}

		// struct FSynthSlateStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__SynthSlateStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, SizeType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, ColorStyle, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, UnknownData_R3A7, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynthSlateStyle, 0x0010);
		}

		// struct FCustomMeshTriangle
		TEST_METHOD(ScriptStruct__CustomMeshComponent__CustomMeshTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex2, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomMeshTriangle, 0x0024);
		}

		// struct FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__ElementID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementID, IDValue, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FElementID, 0x0004);
		}

		// struct FPolygonGroupID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonGroupID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupID, 0x0004);
		}

		// struct FPolygonID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonID, 0x0004);
		}

		// struct FVertexID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexID, 0x0004);
		}

		// struct FVertexInstanceID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexInstanceID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceID, 0x0004);
		}

		// struct FEdgeID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__EdgeID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeID, 0x0004);
		}

		// struct FTriangleID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__TriangleID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTriangleID, 0x0004);
		}

		// struct FNamedInterface
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceObject, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterface, 0x0010);
		}

		// struct FNamedInterfaceDef
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterfaceDef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceClassName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterfaceDef, 0x0018);
		}

		// struct FInAppPurchaseProductInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, UnknownData_EQFH, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, ReceiptData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo, 0x00A8);
		}

		// struct FInAppPurchaseRestoreInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseRestoreInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, ReceiptData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, TransactionIdentifier, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo, 0x0030);
		}

		// struct FInAppPurchaseProductRequest
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, UnknownData_IC2B, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest, 0x0018);
		}

		// struct FMiniMap_Struct
		TEST_METHOD(UserDefinedStruct__MiniMap_Struct__MiniMap_Struct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMiniMap_Struct, UpperBounds_13_C37CFAA24CC5F55A03B687A1612B55D6, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMiniMap_Struct, LowerBounds_15_D336D69E45D7CF08167C8E908FA5D615, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMiniMap_Struct, MapImage_2_FDE2C1E946903D5DE21A42B241D13240, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMiniMap_Struct, StreamingLevels_19_265AD18A466CF083583E308B4979C221, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMiniMap_Struct, 0x0028);
		}

		// struct FSolverBreakingFilterSettings
		TEST_METHOD(ScriptStruct__ChaosSolvers__SolverBreakingFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, UnknownData_O8O7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinVolume, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverBreakingFilterSettings, 0x0010);
		}

		// struct FSolverCollisionFilterSettings
		TEST_METHOD(ScriptStruct__ChaosSolvers__SolverCollisionFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, UnknownData_ZBR1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinImpulse, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverCollisionFilterSettings, 0x0010);
		}

		// struct FSolverTrailingFilterSettings
		TEST_METHOD(ScriptStruct__ChaosSolvers__SolverTrailingFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, UnknownData_8XZL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinVolume, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverTrailingFilterSettings, 0x0010);
		}

		// struct FLandscapeProxyMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeProxyMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, UnknownData_9GC6, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeProxyMaterialOverride, 0x0010);
		}

		// struct FWeightmapLayerAllocationInfo
		TEST_METHOD(ScriptStruct__Landscape__WeightmapLayerAllocationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, LayerInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureChannel, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, UnknownData_EGVG, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapLayerAllocationInfo, 0x0010);
		}

		// struct FLandscapeComponentMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeComponentMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, UnknownData_VRWR, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeComponentMaterialOverride, 0x0010);
		}

		// struct FGrassVariety
		TEST_METHOD(ScriptStruct__Landscape__GrassVariety)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassDensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseGrid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_RO11, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, PlacementJitter, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, StartCullDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, EndCullDistance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, MinLOD, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, Scaling, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_GW2L, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleX, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleZ, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, RandomRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, AlignToSurface, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseLandscapeLightmap, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, LightingChannels, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bReceivesDecals, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bCastDynamicShadow, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bKeepInstanceBufferCPUCopy, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_1XC1, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassVariety, 0x0048);
		}

		// struct FLandscapeMaterialTextureStreamingInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeMaterialTextureStreamingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeMaterialTextureStreamingInfo, TextureName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeMaterialTextureStreamingInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeMaterialTextureStreamingInfo, 0x000C);
		}

		// struct FLandscapeSplineConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, Segment, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, UnknownData_HDRG, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineConnection, 0x0010);
		}

		// struct FLandscapeSplineInterpPoint
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineInterpPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Left, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Right, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffLeft, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffRight, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerLeft, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerRight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerFalloffLeft, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerFalloffRight, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, StartEndFalloff, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineInterpPoint, 0x0070);
		}

		// struct FLandscapeSplineSegmentConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineSegmentConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, ControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, TangentLen, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, SocketName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, UnknownData_TPLQ, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineSegmentConnection, 0x0018);
		}

		// struct FGrassInput
		TEST_METHOD(ScriptStruct__Landscape__GrassInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, GrassType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Input, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, UnknownData_Y6XZ, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassInput, 0x0028);
		}

		// struct FLayerBlendInput
		TEST_METHOD(ScriptStruct__Landscape__LayerBlendInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, BlendType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_CGOW, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_V72I, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, HeightInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_P9LO, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, PreviewWeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstLayerInput, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstHeightInput, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerBlendInput, 0x0048);
		}

		// struct FLandscapeLayerBrush
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerBrush, UnknownData_PSK2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerBrush, 0x0001);
		}

		// struct FLandscapeLayer
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, bVisible, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, bLocked, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, UnknownData_H7WU, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, HeightmapAlpha, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, WeightmapAlpha, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, BlendMode, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, UnknownData_53NX, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Brushes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, WeightmapLayerAllocationBlend, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayer, 0x0088);
		}

		// struct FHeightmapData
		TEST_METHOD(ScriptStruct__Landscape__HeightmapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeightmapData, Texture, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeightmapData, 0x0008);
		}

		// struct FWeightmapData
		TEST_METHOD(ScriptStruct__Landscape__WeightmapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, Textures, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, LayerAllocations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, TextureUsages, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapData, 0x0030);
		}

		// struct FLandscapeLayerComponentData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerComponentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerComponentData, HeightmapData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerComponentData, WeightmapData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerComponentData, 0x0038);
		}

		// struct FLandscapeEditToolRenderData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditToolRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, ToolMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, GizmoMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, SelectedType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelG, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelB, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DataTexture, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, LayerContributionTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DirtyTexture, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditToolRenderData, 0x0038);
		}

		// struct FGizmoSelectData
		TEST_METHOD(ScriptStruct__Landscape__GizmoSelectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoSelectData, UnknownData_IPHN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoSelectData, 0x0050);
		}

		// struct FLandscapeInfoLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeInfoLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerInfoObj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeInfoLayerSettings, 0x0010);
		}

		// struct FLandscapeImportLayerInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeImportLayerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeImportLayerInfo, UnknownData_RE2Q, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeImportLayerInfo, 0x0001);
		}

		// struct FLandscapeLayerStruct
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerStruct, LayerInfoObj, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerStruct, 0x0008);
		}

		// struct FLandscapeEditorLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditorLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditorLayerSettings, UnknownData_1DBE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditorLayerSettings, 0x0001);
		}

		// struct FForeignWorldSplineData
		TEST_METHOD(ScriptStruct__Landscape__ForeignWorldSplineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignWorldSplineData, UnknownData_UR7F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignWorldSplineData, 0x0001);
		}

		// struct FForeignSplineSegmentData
		TEST_METHOD(ScriptStruct__Landscape__ForeignSplineSegmentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignSplineSegmentData, UnknownData_FF6X, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignSplineSegmentData, 0x0001);
		}

		// struct FForeignControlPointData
		TEST_METHOD(ScriptStruct__Landscape__ForeignControlPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignControlPointData, UnknownData_DK3R, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignControlPointData, 0x0001);
		}

		// struct FLandscapeSplineMeshEntry
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineMeshEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, MaterialOverrides, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_U26V, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, CenterAdjust, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_S98T, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Scale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Orientation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, ForwardAxis, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UpAxis, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_QH82, 0x0037);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineMeshEntry, 0x0038);
		}

		// struct FCameraLookatTrackingSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLookatTrackingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_05WU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, LookAtTrackingInterpSpeed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_4P4B, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, ActorToTrack, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, RelativeOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_6TDI, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLookatTrackingSettings, 0x0050);
		}

		// struct FCameraFilmbackSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFilmbackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorAspectRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFilmbackSettings, 0x000C);
		}

		// struct FCameraLensSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFocalLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFocalLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFStop, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFStop, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinimumFocusDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, DiaphragmBladeCount, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLensSettings, 0x0018);
		}

		// struct FNamedLensPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedLensPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, LensSettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedLensPreset, 0x0028);
		}

		// struct FNamedFilmbackPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedFilmbackPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, FilmbackSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, UnknownData_RN0Z, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFilmbackPreset, 0x0020);
		}

		// struct FCameraTrackingFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraTrackingFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, ActorToTrack, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, RelativeOffset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, UnknownData_9BHC, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraTrackingFocusSettings, 0x0038);
		}

		// struct FCameraFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_AKPV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, ManualFocusDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, TrackingFocusSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_IZFA, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, DebugFocusPlaneColor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_FJPD, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusSmoothingInterpSpeed, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusOffset, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_WR78, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFocusSettings, 0x0058);
		}

		// struct FNetAnalyticsDataConfig
		TEST_METHOD(ScriptStruct__NetCore__NetAnalyticsDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, bEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, UnknownData_KGE2, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetAnalyticsDataConfig, 0x000C);
		}

		// struct FSplineConnection
		TEST_METHOD(UserDefinedStruct__SplineConnection__SplineConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineConnection, Spline_9_5DFD486A4D14DB6128D013ACD92E2CCF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineConnection, Distance_2_2A201CF540050AA193C6A481DA6B6A46, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineConnection, VisibleLocation_5_DAD437954B1E49312F4BBD94F6CA8486, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineConnection, Direction_12_F4BCD4E44AE4223437C5BD8CAE3A2989, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineConnection, 0x0039);
		}

		// struct FMagicLeapPolygon
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPolygon, Vertices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPolygon, 0x0010);
		}

		// struct FMagicLeapPlaneBoundary
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlaneBoundary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundary, Polygon, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundary, Holes, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlaneBoundary, 0x0020);
		}

		// struct FMagicLeapPlaneBoundaries
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlaneBoundaries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundaries, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundaries, Boundaries, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlaneBoundaries, 0x0020);
		}

		// struct FMagicLeapPlaneResult
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlaneResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlanePosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlaneOrientation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, ContentOrientation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlaneDimensions, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, UnknownData_2EDJ, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlaneFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, ID, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, InnerID, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlaneResult, 0x0060);
		}

		// struct FMagicLeapPlanesQuery
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlanesQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, Flags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolume, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, MaxResults, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, MinHoleLength, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, MinPlaneArea, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolumePosition, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolumeOrientation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolumeExtents, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SimilarityThreshold, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, bSearchVolumeTrackingSpace, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, bResultTrackingSpace, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, UnknownData_PHE6, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlanesQuery, 0x0060);
		}

		// struct FClothVertBoneData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothVertBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, NumInfluences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneIndices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneWeights, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothVertBoneData, 0x004C);
		}

		// struct FClothCollisionPrim_SphereConnection
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_SphereConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_SphereConnection, SphereIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_SphereConnection, 0x0008);
		}

		// struct FClothCollisionPrim_Box
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Box)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, LocalPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, UnknownData_KMHL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, LocalRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, HalfExtents, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, BoneIndex, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Box, 0x0030);
		}

		// struct FClothCollisionPrim_Convex
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Convex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, Planes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, SurfacePoints, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, BoneIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, UnknownData_9W5S, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Convex, 0x0028);
		}

		// struct FClothCollisionPrim_Sphere
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Sphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, BoneIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, Radius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, LocalPosition, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Sphere, 0x0014);
		}

		// struct FClothCollisionData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Spheres, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, SphereConnections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Convexes, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Boxes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionData, 0x0040);
		}

		// struct FTemplateSequenceBindingOverrideData
		TEST_METHOD(ScriptStruct__TemplateSequence__TemplateSequenceBindingOverrideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, bOverridesDefault, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, UnknownData_BHGM, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTemplateSequenceBindingOverrideData, 0x000C);
		}

		// struct FTemplateSequenceInstanceData : public FMovieSceneSequenceInstanceData
		TEST_METHOD(ScriptStruct__TemplateSequence__TemplateSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceInstanceData, Operand, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceInstanceData, UnknownData_JVG9, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTemplateSequenceInstanceData, 0x0020);
		}

		// struct FTemplateSequenceSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__TemplateSequence__TemplateSequenceSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceSectionTemplate, SectionStartTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceSectionTemplate, OuterBindingId, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceSectionTemplate, InnerOperand, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTemplateSequenceSectionTemplate, 0x0048);
		}

		// struct FAutoCompleteCommand
		TEST_METHOD(ScriptStruct__EngineSettings__AutoCompleteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Desc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, UnknownData_6A95, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteCommand, 0x0028);
		}

		// struct FGameModeName
		TEST_METHOD(ScriptStruct__EngineSettings__GameModeName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, GameMode, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameModeName, 0x0028);
		}

		// struct FLiveLinkSourceBufferManagementSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourceBufferManagementSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bValidEngineTimeEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_EFWW, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, ValidEngineTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, EngineTimeOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_TW1S, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, EngineTimeClockOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, TimecodeFrameRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bGenerateSubFrame, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bUseTimecodeSmoothLatest, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_YXQH, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, SourceTimecodeFrameRate, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bValidTimecodeFrameEnabled, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_RJG4, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, ValidTimecodeFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, TimecodeFrameOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, TimecodeClockOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, LatestOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, MaxNumberOfFrameToBuffered, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bKeepAtLeastOneFrame, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_WZY4, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourceBufferManagementSettings, 0x0050);
		}

		// struct FLiveLinkCurveConversionSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCurveConversionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCurveConversionSettings, CurveConversionAssetMap, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCurveConversionSettings, 0x0050);
		}

		// struct FLiveLinkSubjectName
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectName, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectName, 0x0008);
		}

		// struct FLiveLinkSourceHandle
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourceHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceHandle, UnknownData_2W1G, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourceHandle, 0x0018);
		}

		// struct FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBaseBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseBlueprintData, UnknownData_U2ZK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBaseBlueprintData, 0x0008);
		}

		// struct FSubjectFrameHandle : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__SubjectFrameHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectFrameHandle, UnknownData_XRJS, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubjectFrameHandle, 0x0018);
		}

		// struct FLiveLinkTransform
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransform, UnknownData_GD24, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransform, 0x0020);
		}

		// struct FCachedSubjectFrame
		TEST_METHOD(ScriptStruct__LiveLinkInterface__CachedSubjectFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedSubjectFrame, UnknownData_WCDB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedSubjectFrame, 0x0160);
		}

		// struct FSubjectMetadata
		TEST_METHOD(ScriptStruct__LiveLinkInterface__SubjectMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, StringMetadata, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, SceneTimecode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, SceneFramerate, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, UnknownData_EG53, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubjectMetadata, 0x0070);
		}

		// struct FLiveLinkWorldTime
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkWorldTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkWorldTime, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkWorldTime, Offset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkWorldTime, 0x0010);
		}

		// struct FLiveLinkMetaData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkMetaData, StringMetadata, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkMetaData, SceneTime, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkMetaData, 0x0060);
		}

		// struct FLiveLinkBaseFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBaseFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, WorldTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, MetaData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, PropertyValues, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, UnknownData_39EP, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBaseFrameData, 0x00A0);
		}

		// struct FLiveLinkAnimationFrameData : public FLiveLinkBaseFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkAnimationFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkAnimationFrameData, Transforms, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkAnimationFrameData, 0x00B0);
		}

		// struct FLiveLinkBaseStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBaseStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseStaticData, PropertyNames, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBaseStaticData, 0x0010);
		}

		// struct FLiveLinkSkeletonStaticData : public FLiveLinkBaseStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSkeletonStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSkeletonStaticData, BoneNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSkeletonStaticData, BoneParents, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSkeletonStaticData, 0x0030);
		}

		// struct FLiveLinkBasicBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBasicBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBasicBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBasicBlueprintData, FrameData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBasicBlueprintData, 0x00B8);
		}

		// struct FLiveLinkTransformStaticData : public FLiveLinkBaseStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransformStaticData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransformStaticData, 0x0010);
		}

		// struct FLiveLinkCameraStaticData : public FLiveLinkTransformStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCameraStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsFieldOfViewSupported, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsAspectRatioSupported, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsFocalLengthSupported, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsProjectionModeSupported, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, FilmBackWidth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, FilmBackHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsApertureSupported, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsFocusDistanceSupported, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, UnknownData_M0SR, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCameraStaticData, 0x0020);
		}

		// struct FLiveLinkTransformFrameData : public FLiveLinkBaseFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransformFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformFrameData, Transform, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransformFrameData, 0x00D0);
		}

		// struct FLiveLinkCameraFrameData : public FLiveLinkTransformFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCameraFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, FieldOfView, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, AspectRatio, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, FocalLength, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, Aperture, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, FocusDistance, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, ProjectionMode, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, UnknownData_05SU, 0x00E5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCameraFrameData, 0x00F0);
		}

		// struct FLiveLinkCameraBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCameraBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraBlueprintData, UnknownData_C6SZ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraBlueprintData, FrameData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCameraBlueprintData, 0x0120);
		}

		// struct FLiveLinkLightStaticData : public FLiveLinkTransformStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkLightStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsTemperatureSupported, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsIntensitySupported, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsLightColorSupported, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsInnerConeAngleSupported, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsOuterConeAngleSupported, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsAttenuationRadiusSupported, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsSourceLenghtSupported, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsSourceRadiusSupported, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsSoftSourceRadiusSupported, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, UnknownData_E11C, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkLightStaticData, 0x0020);
		}

		// struct FLiveLinkLightFrameData : public FLiveLinkTransformFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkLightFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, Temperature, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, Intensity, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, LightColor, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, InnerConeAngle, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, OuterConeAngle, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, AttenuationRadius, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, SourceRadius, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, SoftSourceRadius, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, SourceLength, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, UnknownData_9BRT, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkLightFrameData, 0x0100);
		}

		// struct FLiveLinkLightBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkLightBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightBlueprintData, UnknownData_0JVB, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightBlueprintData, FrameData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkLightBlueprintData, 0x0130);
		}

		// struct FLiveLinkSubjectKey
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectKey, Source, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectKey, SubjectName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectKey, 0x0018);
		}

		// struct FLiveLinkSubjectPreset
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, Role, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, Settings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, VirtualSubject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, bEnabled, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, UnknownData_2H42, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectPreset, 0x0038);
		}

		// struct FLiveLinkSourcePreset
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourcePreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourcePreset, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourcePreset, Settings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourcePreset, SourceType, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourcePreset, 0x0030);
		}

		// struct FLiveLinkRefSkeleton
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkRefSkeleton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkRefSkeleton, BoneNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkRefSkeleton, BoneParents, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkRefSkeleton, 0x0020);
		}

		// struct FLiveLinkSubjectRepresentation
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectRepresentation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectRepresentation, Subject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectRepresentation, Role, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectRepresentation, 0x0010);
		}

		// struct FLiveLinkInterpolationSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkInterpolationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkInterpolationSettings, bUseInterpolation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkInterpolationSettings, UnknownData_WQOS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkInterpolationSettings, InterpolationOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkInterpolationSettings, 0x0008);
		}

		// struct FLiveLinkTimeSynchronizationSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTimeSynchronizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeSynchronizationSettings, FrameRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeSynchronizationSettings, FrameOffset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTimeSynchronizationSettings, 0x000C);
		}

		// struct FLiveLinkSourceDebugInfo
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourceDebugInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceDebugInfo, SubjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceDebugInfo, SnapshotIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceDebugInfo, NumberOfBufferAtSnapshot, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourceDebugInfo, 0x0010);
		}

		// struct FLiveLinkTransformBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransformBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformBlueprintData, UnknownData_HGW7, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformBlueprintData, FrameData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransformBlueprintData, 0x00F0);
		}

		// struct FLiveLinkCurveElement
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCurveElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCurveElement, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCurveElement, CurveValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCurveElement, 0x000C);
		}

		// struct FLiveLinkFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, CurveElements, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, WorldTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, MetaData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkFrameData, 0x0090);
		}

		// struct FLiveLinkFrameRate : public FFrameRate
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkFrameRate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkFrameRate, 0x0008);
		}

		// struct FLiveLinkTimeCode_Base_DEPRECATED
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTimeCode_Base_DEPRECATED)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeCode_Base_DEPRECATED, Seconds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeCode_Base_DEPRECATED, Frames, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeCode_Base_DEPRECATED, FrameRate, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTimeCode_Base_DEPRECATED, 0x0010);
		}

		// struct FLiveLinkTimeCode : public FLiveLinkTimeCode_Base_DEPRECATED
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTimeCode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTimeCode, 0x0010);
		}

		// struct FLiveLinkTime
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTime, WorldTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTime, SceneTime, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTime, 0x0018);
		}

		// struct FTimedDataInputEvaluationData
		TEST_METHOD(ScriptStruct__TimeManagement__TimedDataInputEvaluationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataInputEvaluationData, DistanceToNewestSampleSeconds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataInputEvaluationData, DistanceToOldestSampleSeconds, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimedDataInputEvaluationData, 0x0008);
		}

		// struct FTimedDataChannelSampleTime
		TEST_METHOD(ScriptStruct__TimeManagement__TimedDataChannelSampleTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataChannelSampleTime, UnknownData_XIJJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimedDataChannelSampleTime, 0x0018);
		}

		// struct FMRMeshConfiguration
		TEST_METHOD(ScriptStruct__MRMesh__MRMeshConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMRMeshConfiguration, UnknownData_9WAA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMRMeshConfiguration, 0x0001);
		}

		// struct FClothConstraintSetupNv
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeNv__ClothConstraintSetupNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetupNv, 0x0010);
		}

		// struct FFNAFTime
		TEST_METHOD(UserDefinedStruct__FNAFTime__FNAFTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFTime, Hour_2_F6D9A35D4E49F69BC64EAC82C5B41098, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFNAFTime, Minute_4_BD4BC7374FB015FF8159CDB8EF866D52, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFNAFTime, 0x0008);
		}

		// struct FARVideoFormat
		TEST_METHOD(ScriptStruct__AugmentedReality__ARVideoFormat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, FPS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, Width, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, Height, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARVideoFormat, 0x000C);
		}

		// struct FARSharedWorldReplicationState
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSharedWorldReplicationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSharedWorldReplicationState, PreviewImageOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSharedWorldReplicationState, ARWorldOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSharedWorldReplicationState, 0x0008);
		}

		// struct FARTraceResult
		TEST_METHOD(ScriptStruct__AugmentedReality__ARTraceResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, DistanceFromCamera, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, TraceChannel, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, UnknownData_32TQ, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, LocalToTrackingTransform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, TrackedGeometry, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, UnknownData_IKG3, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARTraceResult, 0x0060);
		}

		// struct FARSkeletonDefinition
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSkeletonDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, NumJoints, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, UnknownData_EVAV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, JointNames, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, ParentIndices, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSkeletonDefinition, 0x0028);
		}

		// struct FARPose3D
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPose3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, SkeletonDefinition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, JointTransforms, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, IsJointTracked, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, JointTransformSpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, UnknownData_I4UI, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPose3D, 0x0050);
		}

		// struct FARPose2D
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPose2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, SkeletonDefinition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, JointLocations, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, IsJointTracked, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPose2D, 0x0048);
		}

		// struct FARSessionStatus
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSessionStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, AdditionalInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, Status, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, UnknownData_6W3C, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSessionStatus, 0x0018);
		}

		// struct FCapturedPropSegment
		TEST_METHOD(ScriptStruct__VariantManagerContent__CapturedPropSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, PropertyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, UnknownData_469U, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, ComponentName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPropSegment, 0x0028);
		}

		// struct FFunctionCaller
		TEST_METHOD(ScriptStruct__VariantManagerContent__FunctionCaller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionCaller, FunctionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionCaller, 0x0008);
		}

		// struct FVirtualKeyboardOptions
		TEST_METHOD(ScriptStruct__Slate__VirtualKeyboardOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualKeyboardOptions, bEnableAutocorrect, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualKeyboardOptions, 0x0001);
		}

		// struct FInputChord
		TEST_METHOD(ScriptStruct__Slate__InputChord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, UnknownData_8DGZ, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputChord, 0x0020);
		}

		// struct FAnchors
		TEST_METHOD(ScriptStruct__Slate__Anchors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Minimum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Maximum, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchors, 0x0010);
		}

		// struct FCustomizedToolMenuEntry
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuEntry, Visibility, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuEntry, UnknownData_BMM6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuEntry, 0x0004);
		}

		// struct FCustomizedToolMenuSection
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuSection, Visibility, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuSection, UnknownData_DW1B, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuSection, 0x0004);
		}

		// struct FCustomizedToolMenuNameArray
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuNameArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuNameArray, Names, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuNameArray, 0x0010);
		}

		// struct FCustomizedToolMenu
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Entries, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Sections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, EntryOrder, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, SectionOrder, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, UnknownData_TTYD, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenu, 0x01E8);
		}

		// struct FRoomArray
		TEST_METHOD(UserDefinedStruct__RoomArray__RoomArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomArray, Rooms_3_EE8DE3A9433678FF972811A09BB6A4E2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRoomArray, 0x0010);
		}

		// struct FRoomVisitInfo
		TEST_METHOD(UserDefinedStruct__RoomVisitInfo__RoomVisitInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomVisitInfo, Room_10_1F9878EA4149D02953265DAB9B5D2ABB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomVisitInfo, Age_5_57AEDB44458D69A219E93BB9B581B5D5, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomVisitInfo, LastVisited_9_615D533B4E3173E5AAB51B88B997A10E, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomVisitInfo, UnknownData_MJLG, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoomVisitInfo, VisitCounter_13_25A55AAA46A4794B13B830A262807486, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRoomVisitInfo, 0x0014);
		}

		// struct FMagicLeapAudioDummyStruct
		TEST_METHOD(ScriptStruct__MagicLeapAudio__MagicLeapAudioDummyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapAudioDummyStruct, UnknownData_QXNX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapAudioDummyStruct, 0x0001);
		}

		// struct FPurchaseItemDetails
		TEST_METHOD(ScriptStruct__MagicLeap__PurchaseItemDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, UnknownData_B2UK, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, Price, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, UnknownData_H2HI, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseItemDetails, 0x0040);
		}

		// struct FPurchaseConfirmation
		TEST_METHOD(ScriptStruct__MagicLeap__PurchaseConfirmation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, UnknownData_0AEB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, PackageName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, UnknownData_45K6, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, Type, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, UnknownData_6G9N, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseConfirmation, 0x0050);
		}

		// struct FMagicLeapMeshBlockRequest
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapMeshBlockRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockRequest, BlockID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockRequest, LevelOfDetail, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockRequest, UnknownData_R9OO, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapMeshBlockRequest, 0x0014);
		}

		// struct FMagicLeapMeshBlockInfo
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapMeshBlockInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockPosition, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockOrientation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockDimensions, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, UnknownData_4QJ2, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, Timestamp, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockState, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, UnknownData_LRCF, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapMeshBlockInfo, 0x0048);
		}

		// struct FMagicLeapTrackingMeshInfo
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapTrackingMeshInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTrackingMeshInfo, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTrackingMeshInfo, BlockData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapTrackingMeshInfo, 0x0018);
		}

		// struct FMagicLeapRaycastHitResult
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapRaycastHitResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, HitState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, UnknownData_W8NS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, HitPoint, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, Normal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, Confidence, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, UserData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapRaycastHitResult, 0x0024);
		}

		// struct FMagicLeapRaycastQueryParams
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapRaycastQueryParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, Direction, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, UpVector, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, Width, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, Height, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, HorizontalFovDegrees, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, CollideWithUnobserved, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, UnknownData_VZPR, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, UserData, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapRaycastQueryParams, 0x0038);
		}

		// struct FMagicLeapGraphicsClientPerformanceInfo
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapGraphicsClientPerformanceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameStartCPUCompAcquireCPUTimeMs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameStartCPUFrameEndGPUTimeMs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameStartCPUFrameStartCPUTimeMs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameDurationCPUTimeMs, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameDurationGPUTimeMs, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameInternalDurationCPUTimeMs, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameInternalDurationGPUTimeMs, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapGraphicsClientPerformanceInfo, 0x001C);
		}

		// struct FMagicLeapHeadTrackingState
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapHeadTrackingState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, Mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, Error, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, UnknownData_5312, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, Confidence, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapHeadTrackingState, 0x0008);
		}

		// struct FMagicLeapSharedWorldSharedData
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldSharedData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldSharedData, PinIDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldSharedData, 0x0010);
		}

		// struct FMagicLeapSharedWorldAlignmentTransforms
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldAlignmentTransforms)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldAlignmentTransforms, AlignmentTransforms, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldAlignmentTransforms, 0x0010);
		}

		// struct FMagicLeapSharedWorldPinData
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldPinData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldPinData, PinID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldPinData, PinState, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldPinData, 0x0020);
		}

		// struct FMagicLeapSharedWorldLocalData
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldLocalData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldLocalData, LocalPins, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldLocalData, 0x0010);
		}

		// struct FS_CheckpointArray
		TEST_METHOD(UserDefinedStruct__S_CheckpointArray__S_CheckpointArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_CheckpointArray, Checkpooints_3_40DFC11845DF4F2ACA7DCD97A6CEB9AE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_CheckpointArray, 0x0010);
		}

		// struct FSoundModulationParameter
		TEST_METHOD(ScriptStruct__AudioExtensions__SoundModulationParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationParameter, Control, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationParameter, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationParameter, UnknownData_B802, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulationParameter, 0x0014);
		}

		// struct FSoundModulation
		TEST_METHOD(ScriptStruct__AudioExtensions__SoundModulation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulation, Settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulation, 0x0010);
		}

		// struct FCompositionGraphCapturePasses
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CompositionGraphCapturePasses)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositionGraphCapturePasses, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositionGraphCapturePasses, 0x0010);
		}

		// struct FCaptureResolution
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CaptureResolution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResY, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureResolution, 0x0008);
		}

		// struct FMovieSceneCaptureSettings
		TEST_METHOD(ScriptStruct__MovieSceneCapture__MovieSceneCaptureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputDirectory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, GameModeOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputFormat, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bOverwriteExisting, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseRelativeFrameNumbers, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_TR4H, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, HandleFrames, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, MovieExtension, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, ZeroPadFrameNumbers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_Y2BW, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, FrameRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseCustomFrameRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_3VRH, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, CustomFrameRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, Resolution, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bEnableTextureStreaming, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicEngineScalability, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicMode, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowMovement, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowTurning, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowPlayer, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowHUD, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUsePathTracer, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, PathTracerSamplePerPixel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_YKEK, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCaptureSettings, 0x0070);
		}

		// struct FFrameMetrics
		TEST_METHOD(ScriptStruct__MovieSceneCapture__FrameMetrics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, TotalElapsedTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameDelta, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameNumber, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, NumDroppedFrames, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameMetrics, 0x0010);
		}

		// struct FCapturedPixels
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixels, UnknownData_QE65, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixels, 0x0010);
		}

		// struct FCapturedPixelsID
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixelsID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixelsID, Identifiers, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixelsID, 0x0050);
		}

		// struct FChaosDestructionEvent
		TEST_METHOD(ScriptStruct__ChaosNiagara__ChaosDestructionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Velocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, AngularVelocity, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ExtentMin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ExtentMax, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ParticleID, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Time, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Type, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosDestructionEvent, 0x0044);
		}

		// struct FLevelSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObjectReferenceMap, UnknownData_ZTD6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObjectReferenceMap, 0x0050);
		}

		// struct FLevelSequenceObject
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ObjectOrOwner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, UnknownData_3J5A, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ComponentName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, CachedComponent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObject, 0x0038);
		}

		// struct FLevelSequenceBindingReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ExternalObjectPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ObjectPath, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReference, 0x0038);
		}

		// struct FLevelSequenceBindingReferenceArray
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferenceArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferenceArray, References, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferenceArray, 0x0010);
		}

		// struct FLevelSequenceBindingReferences
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, BindingIdToReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, AnimSequenceInstances, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferences, 0x00A0);
		}

		// struct FLevelSequenceCameraSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceCameraSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceCameraSettings, bOverrideAspectRatioAxisConstraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceCameraSettings, AspectRatioAxisConstraint, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceCameraSettings, 0x0002);
		}

		// struct FLevelSequenceSnapshotSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceSnapshotSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, ZeroPadAmount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, UnknownData_3Y63, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, FrameRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceSnapshotSettings, 0x000C);
		}

		// struct FLevelSequencePlayerSnapshot
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequencePlayerSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotLocalTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotSourceTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTimecode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CameraComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, Settings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_SV49, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ActiveShot, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ShotID, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_CTJD, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequencePlayerSnapshot, 0x00B8);
		}

		// struct FBoundActorProxy
		TEST_METHOD(ScriptStruct__LevelSequence__BoundActorProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoundActorProxy, UnknownData_12R5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoundActorProxy, 0x0001);
		}

		// struct FLevelSequenceLegacyObjectReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceLegacyObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceLegacyObjectReference, UnknownData_OBZN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceLegacyObjectReference, 0x0020);
		}

		// struct FSplineFollowerContext
		TEST_METHOD(UserDefinedStruct__SplineFollowerContext__SplineFollowerContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineFollowerContext, CurrentSpline_6_87B74F80428ED6CF5B710F95FAB5E0BD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineFollowerContext, TotalDistance_5_08E1D2E74013C26D8148BEA95A1AA2BA, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineFollowerContext, FollowMultiplier_9_9547F9BC4253C60775F5B3887DCD6AF8, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineFollowerContext, ReachedEnd_11_2BDEB0C14578432CFE6C73B076B69D4D, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineFollowerContext, 0x0011);
		}

		// struct FDbgSkipOption
		TEST_METHOD(UserDefinedStruct__DbgSkipOption__DbgSkipOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDbgSkipOption, SkipName_6_0D36F26447206C61677BBAA08EA454EB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDbgSkipOption, SkipRoute_7_EADE4F5E446CC67B38EC55922430A44A, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDbgSkipOption, 0x0019);
		}

		// struct FMovieSceneMediaPlayerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaPlayerPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, MediaSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, SectionStartFrame, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, bLoop, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, UnknownData_JIE8, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaPlayerPropertySectionTemplate, 0x0058);
		}

		// struct FMovieSceneMediaSectionParams
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaSoundComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaSource, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaPlayer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, SectionStartFrame, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, SectionEndFrame, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, bLooping, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, UnknownData_QENK, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, StartFrameOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionParams, 0x0030);
		}

		// struct FMovieSceneMediaSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionTemplate, 0x0050);
		}

		// struct FUVMapSettings
		TEST_METHOD(ScriptStruct__StaticMeshDescription__UVMapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, UVTile, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Position, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Scale, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUVMapSettings, 0x0038);
		}

		// struct FMagicLeapLightEstimationColorTemperatureState
		TEST_METHOD(ScriptStruct__MagicLeapLightEstimation__MagicLeapLightEstimationColorTemperatureState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, ColorTemperatureKelvin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, AmbientColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, UnknownData_8BLA, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, Timestamp, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapLightEstimationColorTemperatureState, 0x0020);
		}

		// struct FMagicLeapLightEstimationAmbientGlobalState
		TEST_METHOD(ScriptStruct__MagicLeapLightEstimation__MagicLeapLightEstimationAmbientGlobalState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationAmbientGlobalState, AmbientIntensityNits, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationAmbientGlobalState, Timestamp, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapLightEstimationAmbientGlobalState, 0x0018);
		}

		// struct FPathwayForks
		TEST_METHOD(UserDefinedStruct__PathwayForks__PathwayForks)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathwayForks, Forks_3_B119F3DD413FACA95A937893543AA477, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPathwayForks, 0x0010);
		}

		// struct FForkTraversalHelper
		TEST_METHOD(UserDefinedStruct__ForkTraversalHelper__ForkTraversalHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForkTraversalHelper, Parent_6_B29E0EA7409F59F244399B9C1F2309F4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForkTraversalHelper, Splines_7_A2EF2B79492FF7FBD9BD4284FBF7B36F, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForkTraversalHelper, OriginalForks_12_7AB1BD93442FC6D177F27EA1E4DCC664, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForkTraversalHelper, 0x0028);
		}

		// struct FSolverBreakingData
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__SolverBreakingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, ParticleIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, ParticleIndexMesh, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverBreakingData, 0x0030);
		}

		// struct FSolverCollisionData
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__SolverCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AccumulatedImpulse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Normal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Velocity1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Velocity2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AngularVelocity1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AngularVelocity2, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Mass1, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Mass2, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, ParticleIndex, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, LevelsetIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, ParticleIndexMesh, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, LevelsetIndexMesh, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverCollisionData, 0x006C);
		}

		// struct FRecordedFrame
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__RecordedFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, TransformIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, PreviousTransformIndices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, DisabledFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Collisions, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Breakings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Trailings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Timestamp, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, UnknownData_ESBM, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecordedFrame, 0x00B8);
		}

		// struct FRecordedTransformTrack
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__RecordedTransformTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedTransformTrack, Records, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecordedTransformTrack, 0x0010);
		}

		// struct FSolverTrailingData
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__SolverTrailingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, ParticleIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, ParticleIndexMesh, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverTrailingData, 0x0030);
		}

		// struct FPaperFlipbookKeyFrame
		TEST_METHOD(ScriptStruct__Paper2D__PaperFlipbookKeyFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, Sprite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, FrameRun, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, UnknownData_93IV, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperFlipbookKeyFrame, 0x0010);
		}

		// struct FSpriteInstanceData
		TEST_METHOD(ScriptStruct__Paper2D__SpriteInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, SourceSprite, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, VertexColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, MaterialIndex, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteInstanceData, 0x0050);
		}

		// struct FPaperSpriteSocket
		TEST_METHOD(ScriptStruct__Paper2D__PaperSpriteSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, LocalTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, UnknownData_SOYJ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperSpriteSocket, 0x0040);
		}

		// struct FPaperTerrainMaterialRule
		TEST_METHOD(ScriptStruct__Paper2D__PaperTerrainMaterialRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, StartCap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, EndCap, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, MinimumAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, MaximumAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, bEnableCollision, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, UnknownData_H85F, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, CollisionOffset, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, DrawOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, UnknownData_1P9W, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTerrainMaterialRule, 0x0038);
		}

		// struct FPaperTileInfo
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, TileSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, PackedTileIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, UnknownData_VI9T, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileInfo, 0x0010);
		}

		// struct FIntMargin
		TEST_METHOD(ScriptStruct__Paper2D__IntMargin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntMargin, 0x0010);
		}

		// struct FPaperTileSetTerrain
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileSetTerrain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, TerrainName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, CenterTileIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, UnknownData_6A4G, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileSetTerrain, 0x0018);
		}

		// struct FSpriteGeometryShape
		TEST_METHOD(ScriptStruct__Paper2D__SpriteGeometryShape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, ShapeType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, UnknownData_HBTM, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, Vertices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, BoxSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, BoxPosition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, bNegativeWinding, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, UnknownData_CTCW, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteGeometryShape, 0x0030);
		}

		// struct FSpriteGeometryCollection
		TEST_METHOD(ScriptStruct__Paper2D__SpriteGeometryCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, Shapes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, GeometryType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_XUWX, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, PixelsPerSubdivisionX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, PixelsPerSubdivisionY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, bAvoidVertexMerging, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_72HX, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, AlphaThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, DetailAmount, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, SimplifyEpsilon, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_RZK7, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteGeometryCollection, 0x0030);
		}

		// struct FPaperTileMetadata
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, UserDataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, CollisionData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, TerrainMembership, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, UnknownData_14V7, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileMetadata, 0x0040);
		}

		// struct FPaperSpriteAtlasSlot
		TEST_METHOD(ScriptStruct__Paper2D__PaperSpriteAtlasSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, SpriteRef, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, AtlasIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, X, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Y, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Width, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Height, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, UnknownData_2V0K, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperSpriteAtlasSlot, 0x0040);
		}

		// struct FSpriteDrawCallRecord
		TEST_METHOD(ScriptStruct__Paper2D__SpriteDrawCallRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, Destination, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_7B4W, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, BaseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_FATV, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, Color, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_SYT5, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteDrawCallRecord, 0x00D0);
		}

		// struct FSpriteAssetInitParameters
		TEST_METHOD(ScriptStruct__Paper2D__SpriteAssetInitParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteAssetInitParameters, UnknownData_X7ZC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteAssetInitParameters, 0x0040);
		}

		// struct FS_SubtitleState
		TEST_METHOD(UserDefinedStruct__S_SubtitleState__S_SubtitleState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SubtitleState, Text_2_41CFCA0B4E2F00DB7D8E1A80028361FB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SubtitleState, TimerRemaining_5_B53676F94F77BB5A9CE1B1B3012256A8, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SubtitleState, TimeElapsed_7_727A35A74A909CFB117CEFAA76F2BC32, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SubtitleState, Source_14_51F67308477EFDE491C591A9193D2EC4, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SubtitleState, Actor_20_F6F98DE34E3BBA9872D4A7B3263BC028, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SubtitleState, Radius_17_45964EA746CAEE29AEE1F39DD72B5F5E, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SubtitleState, UnknownData_R19D, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_SubtitleState, Lines_11_657C280748312C78B38C97926A556799, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_SubtitleState, 0x0050);
		}

		// struct FCharacterMaterialSwapInfo
		TEST_METHOD(UserDefinedStruct__CharacterMaterialSwapInfo__CharacterMaterialSwapInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterMaterialSwapInfo, CharacterType_13_F6BE47E348A75053DB03529BB9D53D52, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterMaterialSwapInfo, UnknownData_TGDU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterMaterialSwapInfo, Materials0_3_BF0994124A6E32451268EFBD8BD9CAE1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterMaterialSwapInfo, Materials1_5_449341C4409ED1F3785CF0AB0987A74A, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterMaterialSwapInfo, Materials2_7_B5925E434BD88ECBBE5E8D90D5F5D2C7, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterMaterialSwapInfo, Materials3_9_5D049D1D488EFDE627ECA7952A58D941, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterMaterialSwapInfo, 0x0048);
		}

		// struct FWidgetTransform
		TEST_METHOD(ScriptStruct__UMG__WidgetTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Shear, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Angle, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetTransform, 0x001C);
		}

		// struct FDynamicPropertyPath : public FCachedPropertyPath
		TEST_METHOD(ScriptStruct__UMG__DynamicPropertyPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicPropertyPath, 0x0028);
		}

		// struct FAnchorData
		TEST_METHOD(ScriptStruct__UMG__AnchorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Offsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Anchors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Alignment, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchorData, 0x0028);
		}

		// struct FSlateChildSize
		TEST_METHOD(ScriptStruct__UMG__SlateChildSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, SizeRule, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, UnknownData_V8RC, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateChildSize, 0x0008);
		}

		// struct FUserWidgetPool
		TEST_METHOD(ScriptStruct__UMG__UserWidgetPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, ActiveWidgets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, InactiveWidgets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, UnknownData_F1AR, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserWidgetPool, 0x0080);
		}

		// struct FShapedTextOptions
		TEST_METHOD(ScriptStruct__UMG__ShapedTextOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextShapingMethod, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextFlowDirection, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShapedTextOptions, 0x0003);
		}

		// struct FMovieScene2DTransformMask
		TEST_METHOD(ScriptStruct__UMG__MovieScene2DTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene2DTransformMask, 0x0004);
		}

		// struct FSlateMeshVertex
		TEST_METHOD(ScriptStruct__UMG__SlateMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV2, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV3, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV4, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV5, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateMeshVertex, 0x003C);
		}

		// struct FNamedSlotBinding
		TEST_METHOD(ScriptStruct__UMG__NamedSlotBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Content, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedSlotBinding, 0x0010);
		}

		// struct FAnimationEventBinding
		TEST_METHOD(ScriptStruct__UMG__AnimationEventBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, Delegate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, AnimationEvent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UnknownData_VFRC, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UserTag, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UnknownData_4644, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationEventBinding, 0x0028);
		}

		// struct FWidgetAnimationBinding
		TEST_METHOD(ScriptStruct__UMG__WidgetAnimationBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, WidgetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, SlotWidgetName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, AnimationGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, bIsRootWidget, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, UnknownData_VG5E, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetAnimationBinding, 0x0024);
		}

		// struct FBlueprintWidgetAnimationDelegateBinding
		TEST_METHOD(ScriptStruct__UMG__BlueprintWidgetAnimationDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, UnknownData_99YQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, AnimationToBind, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, FunctionNameToBind, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, UserTag, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintWidgetAnimationDelegateBinding, 0x001C);
		}

		// struct FDelegateRuntimeBinding
		TEST_METHOD(ScriptStruct__UMG__DelegateRuntimeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, PropertyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, SourcePath, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, Kind, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, UnknownData_7FX9, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateRuntimeBinding, 0x0050);
		}

		// struct FWidgetNavigationData
		TEST_METHOD(ScriptStruct__UMG__WidgetNavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Rule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, UnknownData_ZW31, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, WidgetToFocus, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Widget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, CustomDelegate, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetNavigationData, 0x0024);
		}

		// struct FEventReply
		TEST_METHOD(ScriptStruct__UMG__EventReply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventReply, UnknownData_OLCO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventReply, 0x00B8);
		}

		// struct FPaintContext
		TEST_METHOD(ScriptStruct__UMG__PaintContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintContext, UnknownData_JV3V, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintContext, 0x0030);
		}

		// struct FMovieScene2DTransformSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieScene2DTransformSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Translation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Rotation, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Scale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Shear, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, BlendType, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, UnknownData_Q9ZL, 0x04A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Mask, 0x04AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene2DTransformSectionTemplate, 0x04B0);
		}

		// struct FMovieSceneMarginSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneMarginSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, TopCurve, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, LeftCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, RightCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BottomCurve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BlendType, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, UnknownData_Y18G, 0x02C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarginSectionTemplate, 0x02D0);
		}

		// struct FMovieSceneWidgetMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneWidgetMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWidgetMaterialSectionTemplate, BrushPropertyNamePath, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWidgetMaterialSectionTemplate, 0x0090);
		}

		// struct FRichTextStyleRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichTextStyleRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichTextStyleRow, TextStyle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichTextStyleRow, 0x0270);
		}

		// struct FRichImageRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichImageRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichImageRow, Brush, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichImageRow, 0x0090);
		}

		// struct FWidgetComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__UMG__WidgetComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetComponentInstanceData, UnknownData_NW8U, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetComponentInstanceData, 0x00B8);
		}

		// struct FSessionServiceLogUnsubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogUnsubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogUnsubscribe, UnknownData_5ICX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogUnsubscribe, 0x0001);
		}

		// struct FSessionServiceLogSubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogSubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogSubscribe, UnknownData_TRZ1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogSubscribe, 0x0001);
		}

		// struct FSessionServiceLog
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, TimeSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Verbosity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, UnknownData_8OQ7, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLog, 0x0038);
		}

		// struct FSessionServicePong
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Authorized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_JQ5P, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, BuildDate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, DeviceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, PlatformName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Standalone, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_0V8Q, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePong, 0x0090);
		}

		// struct FSessionServicePing
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePing, UserName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePing, 0x0010);
		}

		// struct FS_Elevator_Teleport_Location
		TEST_METHOD(UserDefinedStruct__S_Elevator_Teleport_Location__S_Elevator_Teleport_Location)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Teleport_Location, TeleportOrigin_51_20E86C7E493810D30BB3E1BF30A2D282, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Teleport_Location, Doors_41_04BA24064194ECAC16DD3499EB852CF5, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Teleport_Location, Buttons_50_0D5C465C4118D9362309F8B79613710C, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Teleport_Location, ArrowIndicators_55_81A397FB41EF746FD4F628BC4D4BD9B7, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Teleport_Location, Levels_12_DC0C3772429EA728E351358C8345CE72, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Teleport_Location, LevelsVisible_30_718555F64E0E9C1837F4F39B1EC0C800, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Elevator_Teleport_Location, ElevatorPrefab_58_B83874C448FCD0EA977BD9A838B54545, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_Elevator_Teleport_Location, 0x00A0);
		}

		// struct FChaosCollisionEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosCollisionEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MaxNumberResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinImpulse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, UnknownData_6QPP, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosCollisionEventRequestSettings, 0x0018);
		}

		// struct FChaosBreakingEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosBreakingEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MaxNumberOfResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinMass, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, UnknownData_AP51, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakingEventRequestSettings, 0x0018);
		}

		// struct FChaosTrailingEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosTrailingEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MaxNumberOfResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinAngularSpeed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, UnknownData_5J67, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosTrailingEventRequestSettings, 0x0018);
		}

		// struct FGeomComponentCacheParameters
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeomComponentCacheParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CacheMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_Y06A, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TargetCache, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, ReverseCacheBeginTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveCollisionData, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateCollisionData, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_G2P3, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CollisionDataSizeMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoCollisionDataSpatialHash, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_AKX1, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CollisionDataSpatialHashRadius, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, MaxCollisionPerCell, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveBreakingData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateBreakingData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_LK9C, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, BreakingDataSizeMax, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoBreakingDataSpatialHash, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_ANMK, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, BreakingDataSpatialHashRadius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, MaxBreakingPerCell, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveTrailingData, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateTrailingData, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_LKVM, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingDataSizeMax, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingMinSpeedThreshold, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingMinVolumeThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_77ZY, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomComponentCacheParameters, 0x0050);
		}

		// struct FGeometryCollectionDebugDrawWarningMessage
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionDebugDrawWarningMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawWarningMessage, UnknownData_5CMB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionDebugDrawWarningMessage, 0x0001);
		}

		// struct FGeometryCollectionDebugDrawActorSelectedRigidBody
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionDebugDrawActorSelectedRigidBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, UnknownData_4KRN, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, Solver, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, GeometryCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, 0x0018);
		}

		// struct FGeometryCollectionSizeSpecificData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionSizeSpecificData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, ImplicitType, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, UnknownData_AS7F, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MinLevelSetResolution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxLevelSetResolution, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MinClusterLevelSetResolution, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxClusterLevelSetResolution, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionObjectReductionPercentage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionParticlesFraction, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaximumCollisionParticles, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionSizeSpecificData, 0x0024);
		}

		// struct FChaosCollisionEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosCollisionEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Velocity1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Velocity2, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Mass1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Mass2, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Impulse, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, UnknownData_ILR7, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosCollisionEventData, 0x0058);
		}

		// struct FChaosBreakingEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosBreakingEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Mass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakingEventData, 0x001C);
		}

		// struct FChaosTrailingEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosTrailingEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, ParticleIndex, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosTrailingEventData, 0x002C);
		}

		// struct FGameplayResourceSet
		TEST_METHOD(ScriptStruct__GameplayTasks__GameplayResourceSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayResourceSet, UnknownData_1FS2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayResourceSet, 0x0002);
		}

		// struct FStructSerializerNumericTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerNumericTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_91C1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int16, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int32, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int64, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt8, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_T25O, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt16, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt32, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt64, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Float, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_O3ZF, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Double, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerNumericTestStruct, 0x0030);
		}

		// struct FStructSerializerBooleanTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBooleanTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolFalse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolTrue, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBooleanTestStruct, 0x0003);
		}

		// struct FStructSerializerSetTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerSetTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, StrSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, IntSet, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, NameSet, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, StructSet, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerSetTestStruct, 0x0140);
		}

		// struct FStructSerializerBuiltinTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBuiltinTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, String, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Text, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_4G8V, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector4, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Rotator, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_2RLB, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Quat, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Color, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_6FPJ, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBuiltinTestStruct, 0x0090);
		}

		// struct FStructSerializerMapTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerMapTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, IntToStr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToVec, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStruct, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerMapTestStruct, 0x0140);
		}

		// struct FStructSerializerArrayTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerArrayTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, Int32Array, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, ByteArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticSingleElement, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticInt32Array, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticFloatArray, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, UnknownData_7SMG, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, VectorArray, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StructArray, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerArrayTestStruct, 0x0060);
		}

		// struct FStructSerializerObjectTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerObjectTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Class, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SubClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SoftClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Object, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, WeakObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SoftObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ClassPath, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ObjectPath, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerObjectTestStruct, 0x00A0);
		}

		// struct FStructSerializerTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Numerics, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Booleans, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, UnknownData_LBL3, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, UnknownData_PW14, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Builtins, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Arrays, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Maps, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Sets, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerTestStruct, 0x0450);
		}

		// struct FStructSerializerByteArray
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerByteArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_UPO8, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, ByteArray, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy2, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_GN51, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Int8Array, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_RBEI, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerByteArray, 0x0038);
		}
	};
}
